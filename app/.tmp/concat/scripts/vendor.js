/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */
(function (global, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error('jQuery requires a window with a document');
      }
      return factory(w);
    };
  } else {
    factory(global);
  }  // Pass this if window is not defined yet
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
  // Support: Firefox 18+
  // Can't be in strict mode, several libs including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  //
  var arr = [];
  var slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var support = {};
  var
    // Use the correct document accordingly with window argument (sandbox)
    document = window.document, version = '2.1.3',
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    },
    // Support: Android<4.1
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi,
    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function (all, letter) {
      return letter.toUpperCase();
    };
  jQuery.fn = jQuery.prototype = {
    jquery: version,
    constructor: jQuery,
    selector: '',
    length: 0,
    toArray: function () {
      return slice.call(this);
    },
    get: function (num) {
      return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
    },
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);
      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      ret.context = this.context;
      // Return the newly-formed element set
      return ret;
    },
    each: function (callback, args) {
      return jQuery.each(this, callback, args);
    },
    map: function (callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (i) {
      var len = this.length, j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor(null);
    },
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  jQuery.extend = jQuery.fn.extend = function () {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !jQuery.isFunction(target)) {
      target = {};
    }
    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue;
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }
            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);  // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }
    // Return the modified object
    return target;
  };
  jQuery.extend({
    expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
    isReady: true,
    error: function (msg) {
      throw new Error(msg);
    },
    noop: function () {
    },
    isFunction: function (obj) {
      return jQuery.type(obj) === 'function';
    },
    isArray: Array.isArray,
    isWindow: function (obj) {
      return obj != null && obj === obj.window;
    },
    isNumeric: function (obj) {
      // parseFloat NaNs numeric-cast false positives (null|true|false|"")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      // adding 1 corrects loss of precision from parseFloat (#15100)
      return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
    },
    isPlainObject: function (obj) {
      // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window
      if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      }
      if (obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
        return false;
      }
      // If the function hasn't returned already, we're confident that
      // |obj| is a plain object, created by {} or constructed with new Object
      return true;
    },
    isEmptyObject: function (obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    type: function (obj) {
      if (obj == null) {
        return obj + '';
      }
      // Support: Android<4.0, iOS<6 (functionish RegExp)
      return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
    },
    globalEval: function (code) {
      var script, indirect = eval;
      code = jQuery.trim(code);
      if (code) {
        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if (code.indexOf('use strict') === 1) {
          script = document.createElement('script');
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {
          // Otherwise, avoid the DOM node creation, insertion
          // and removal by using an indirect global eval
          indirect(code);
        }
      }
    },
    camelCase: function (string) {
      return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    },
    nodeName: function (elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    each: function (obj, callback, args) {
      var value, i = 0, length = obj.length, isArray = isArraylike(obj);
      if (args) {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        }  // A special, fast, case for the most common use of each
      } else {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        }
      }
      return obj;
    },
    trim: function (text) {
      return text == null ? '' : (text + '').replace(rtrim, '');
    },
    makeArray: function (arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArraylike(Object(arr))) {
          jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    merge: function (first, second) {
      var len = +second.length, j = 0, i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function (elems, callback, invert) {
      var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    map: function (elems, callback, arg) {
      var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
      // Go through the array, translating each of the items to their new values
      if (isArray) {
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }  // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }
      // Flatten any nested arrays
      return concat.apply([], ret);
    },
    guid: 1,
    proxy: function (fn, context) {
      var tmp, args, proxy;
      if (typeof context === 'string') {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      }
      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if (!jQuery.isFunction(fn)) {
        return undefined;
      }
      // Simulated bind
      args = slice.call(arguments, 2);
      proxy = function () {
        return fn.apply(context || this, args.concat(slice.call(arguments)));
      };
      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
      return proxy;
    },
    now: Date.now,
    support: support
  });
  // Populate the class2type map
  jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
    class2type['[object ' + name + ']'] = name.toLowerCase();
  });
  function isArraylike(obj) {
    var length = obj.length, type = jQuery.type(obj);
    if (type === 'function' || jQuery.isWindow(obj)) {
      return false;
    }
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  var Sizzle = function (window) {
      var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
        // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
        // Instance-specific data
        expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        },
        // General-purpose constants
        MAX_NEGATIVE = 1 << 31,
        // Instance methods
        hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // http://jsperf.com/thor-indexof-vs-for/5
        indexOf = function (list, elem) {
          var i = 0, len = list.length;
          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }
          return -1;
        }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
        // Regular expressions
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = '[\\x20\\t\\r\\n\\f]',
        // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+',
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace('w', 'w#'),
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = '\\[' + whitespace + '*(' + characterEncoding + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)',
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
          'ID': new RegExp('^#(' + characterEncoding + ')'),
          'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
          'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
          'ATTR': new RegExp('^' + attributes),
          'PSEUDO': new RegExp('^' + pseudos),
          'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
          'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
          'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g,
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
          var high = '0x' + escaped - 65536;
          // NaN means non-codepoint
          // Support: Firefox<24
          // Workaround erroneous numeric interpretation of +"0x"
          return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function () {
          setDocument();
        };
      // Optimize for push.apply( _, NodeList )
      try {
        push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
        // Support: Android<4.0
        // Detect silently failing push.apply
        arr[preferredDoc.childNodes.length].nodeType;
      } catch (e) {
        push = {
          apply: arr.length ? function (target, els) {
            push_native.apply(target, slice.call(els));
          } : function (target, els) {
            var j = target.length, i = 0;
            // Can't trust NodeList.length
            while (target[j++] = els[i++]) {
            }
            target.length = j - 1;
          }
        };
      }
      function Sizzle(selector, context, results, seed) {
        var match, elem, m, nodeType,
          // QSA vars
          i, groups, old, nid, newContext, newSelector;
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }
        context = context || document;
        results = results || [];
        nodeType = context.nodeType;
        if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
          return results;
        }
        if (!seed && documentIsHTML) {
          // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // Speed-up: Sizzle("#ID")
            if (m = match[1]) {
              if (nodeType === 9) {
                elem = context.getElementById(m);
                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document (jQuery #6963)
                if (elem && elem.parentNode) {
                  // Handle the case where IE, Opera, and Webkit return items
                  // by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                }
              } else {
                // Context is not a document
                if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              }  // Speed-up: Sizzle("TAG")
            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results;  // Speed-up: Sizzle(".CLASS")
            } else if ((m = match[3]) && support.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          }
          // QSA path
          if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            nid = old = expando;
            newContext = context;
            newSelector = nodeType !== 1 && selector;
            // qSA works strangely on Element-rooted queries
            // We can work around this by specifying an extra ID on the root
            // and working up from there (Thanks to Andrew Dupont for the technique)
            // IE 8 doesn't work on object elements
            if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
              groups = tokenize(selector);
              if (old = context.getAttribute('id')) {
                nid = old.replace(rescape, '\\$&');
              } else {
                context.setAttribute('id', nid);
              }
              nid = '[id=\'' + nid + '\'] ';
              i = groups.length;
              while (i--) {
                groups[i] = nid + toSelector(groups[i]);
              }
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
              newSelector = groups.join(',');
            }
            if (newSelector) {
              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {
              } finally {
                if (!old) {
                  context.removeAttribute('id');
                }
              }
            }
          }
        }
        // All others
        return select(selector.replace(rtrim, '$1'), context, results, seed);
      }
      /**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
      function createCache() {
        var keys = [];
        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + ' ') > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()];
          }
          return cache[key + ' '] = value;
        }
        return cache;
      }
      /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
      function markFunction(fn) {
        fn[expando] = true;
        return fn;
      }
      /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
      function assert(fn) {
        var div = document.createElement('div');
        try {
          return !!fn(div);
        } catch (e) {
          return false;
        } finally {
          // Remove from its parent by default
          if (div.parentNode) {
            div.parentNode.removeChild(div);
          }
          // release memory in IE
          div = null;
        }
      }
      /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
      function addHandle(attrs, handler) {
        var arr = attrs.split('|'), i = attrs.length;
        while (i--) {
          Expr.attrHandle[arr[i]] = handler;
        }
      }
      /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
      function siblingCheck(a, b) {
        var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff;
        }
        // Check if b follows a
        if (cur) {
          while (cur = cur.nextSibling) {
            if (cur === b) {
              return -1;
            }
          }
        }
        return a ? 1 : -1;
      }
      /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
      function createInputPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === type;
        };
      }
      /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
      function createButtonPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === 'input' || name === 'button') && elem.type === type;
        };
      }
      /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
      function createPositionalPseudo(fn) {
        return markFunction(function (argument) {
          argument = +argument;
          return markFunction(function (seed, matches) {
            var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
            // Match elements found at the specified indexes
            while (i--) {
              if (seed[j = matchIndexes[i]]) {
                seed[j] = !(matches[j] = seed[j]);
              }
            }
          });
        });
      }
      /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
      function testContext(context) {
        return context && typeof context.getElementsByTagName !== 'undefined' && context;
      }
      // Expose support vars for convenience
      support = Sizzle.support = {};
      /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
      isXML = Sizzle.isXML = function (elem) {
        // documentElement is verified for cases where it doesn't yet exist
        // (such as loading iframes in IE - #4833)
        var documentElement = elem && (elem.ownerDocument || elem).documentElement;
        return documentElement ? documentElement.nodeName !== 'HTML' : false;
      };
      /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
      setDocument = Sizzle.setDocument = function (node) {
        var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
        // If no document and documentElement is available, return
        if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
          return document;
        }
        // Set our document
        document = doc;
        docElem = doc.documentElement;
        parent = doc.defaultView;
        // Support: IE>8
        // If iframe document is assigned to "document" variable and if iframe has been reloaded,
        // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
        // IE6-8 do not support the defaultView property so parent will be undefined
        if (parent && parent !== parent.top) {
          // IE11 does not have attachEvent, so all must suffer
          if (parent.addEventListener) {
            parent.addEventListener('unload', unloadHandler, false);
          } else if (parent.attachEvent) {
            parent.attachEvent('onunload', unloadHandler);
          }
        }
        /* Support tests
	---------------------------------------------------------------------- */
        documentIsHTML = !isXML(doc);
        /* Attributes
	---------------------------------------------------------------------- */
        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function (div) {
          div.className = 'i';
          return !div.getAttribute('className');
        });
        /* getElement(s)By*
	---------------------------------------------------------------------- */
        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function (div) {
          div.appendChild(doc.createComment(''));
          return !div.getElementsByTagName('*').length;
        });
        // Support: IE<9
        support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function (div) {
          docElem.appendChild(div).id = expando;
          return !doc.getElementsByName || !doc.getElementsByName(expando).length;
        });
        // ID find and filter
        if (support.getById) {
          Expr.find['ID'] = function (id, context) {
            if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
              var m = context.getElementById(id);
              // Check parentNode to catch when Blackberry 4.6 returns
              // nodes that are no longer in the document #6963
              return m && m.parentNode ? [m] : [];
            }
          };
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              return elem.getAttribute('id') === attrId;
            };
          };
        } else {
          // Support: IE6/7
          // getElementById is not reliable as a find shortcut
          delete Expr.find['ID'];
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
              return node && node.value === attrId;
            };
          };
        }
        // Tag
        Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
          if (typeof context.getElementsByTagName !== 'undefined') {
            return context.getElementsByTagName(tag);  // DocumentFragment nodes don't have gEBTN
          } else if (support.qsa) {
            return context.querySelectorAll(tag);
          }
        } : function (tag, context) {
          var elem, tmp = [], i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
            results = context.getElementsByTagName(tag);
          // Filter out possible comments
          if (tag === '*') {
            while (elem = results[i++]) {
              if (elem.nodeType === 1) {
                tmp.push(elem);
              }
            }
            return tmp;
          }
          return results;
        };
        // Class
        Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
          if (documentIsHTML) {
            return context.getElementsByClassName(className);
          }
        };
        /* QSA/matchesSelector
	---------------------------------------------------------------------- */
        // QSA and matchesSelector support
        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];
        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See http://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];
        if (support.qsa = rnative.test(doc.querySelectorAll)) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function (div) {
            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // http://bugs.jquery.com/ticket/12359
            docElem.appendChild(div).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\f]\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (div.querySelectorAll('[msallowcapture^=\'\']').length) {
              rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
            }
            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!div.querySelectorAll('[selected]').length) {
              rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
            }
            // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
            if (!div.querySelectorAll('[id~=' + expando + '-]').length) {
              rbuggyQSA.push('~=');
            }
            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!div.querySelectorAll(':checked').length) {
              rbuggyQSA.push(':checked');
            }
            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibing-combinator selector` fails
            if (!div.querySelectorAll('a#' + expando + '+*').length) {
              rbuggyQSA.push('.#.+[+~]');
            }
          });
          assert(function (div) {
            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = doc.createElement('input');
            input.setAttribute('type', 'hidden');
            div.appendChild(input).setAttribute('name', 'D');
            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (div.querySelectorAll('[name=d]').length) {
              rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
            }
            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (!div.querySelectorAll(':enabled').length) {
              rbuggyQSA.push(':enabled', ':disabled');
            }
            // Opera 10-11 does not throw on post-comma invalid pseudos
            div.querySelectorAll('*,:x');
            rbuggyQSA.push(',.*:');
          });
        }
        if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
          assert(function (div) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(div, 'div');
            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(div, '[s!=\'\']:x');
            rbuggyMatches.push('!=', pseudos);
          });
        }
        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
        rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);
        // Element contains another
        // Purposefully does not implement inclusive descendent
        // As in, an element does not contain itself
        contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
          var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        } : function (a, b) {
          if (b) {
            while (b = b.parentNode) {
              if (b === a) {
                return true;
              }
            }
          }
          return false;
        };
        /* Sorting
	---------------------------------------------------------------------- */
        // Document order sorting
        sortOrder = hasCompare ? function (a, b) {
          // Flag for duplicate removal
          if (a === b) {
            hasDuplicate = true;
            return 0;
          }
          // Sort on method existence if only one input has compareDocumentPosition
          var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
          if (compare) {
            return compare;
          }
          // Calculate position if both inputs belong to the same document
          compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
          // Disconnected nodes
          if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
            // Choose the first element that is related to our preferred document
            if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
              return -1;
            }
            if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
              return 1;
            }
            // Maintain original order
            return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
          }
          return compare & 4 ? -1 : 1;
        } : function (a, b) {
          // Exit early if the nodes are identical
          if (a === b) {
            hasDuplicate = true;
            return 0;
          }
          var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
          // Parentless nodes are either documents or disconnected
          if (!aup || !bup) {
            return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;  // If the nodes are siblings, we can do a quick check
          } else if (aup === bup) {
            return siblingCheck(a, b);
          }
          // Otherwise we need full lists of their ancestors for comparison
          cur = a;
          while (cur = cur.parentNode) {
            ap.unshift(cur);
          }
          cur = b;
          while (cur = cur.parentNode) {
            bp.unshift(cur);
          }
          // Walk down the tree looking for a discrepancy
          while (ap[i] === bp[i]) {
            i++;
          }
          return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
        };
        return doc;
      };
      Sizzle.matches = function (expr, elements) {
        return Sizzle(expr, null, null, elements);
      };
      Sizzle.matchesSelector = function (elem, expr) {
        // Set document vars if needed
        if ((elem.ownerDocument || elem) !== document) {
          setDocument(elem);
        }
        // Make sure that attribute selectors are quoted
        expr = expr.replace(rattributeQuotes, '=\'$1\']');
        if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
          try {
            var ret = matches.call(elem, expr);
            // IE 9's matchesSelector returns false on disconnected nodes
            if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
              return ret;
            }
          } catch (e) {
          }
        }
        return Sizzle(expr, document, null, [elem]).length > 0;
      };
      Sizzle.contains = function (context, elem) {
        // Set document vars if needed
        if ((context.ownerDocument || context) !== document) {
          setDocument(context);
        }
        return contains(context, elem);
      };
      Sizzle.attr = function (elem, name) {
        // Set document vars if needed
        if ((elem.ownerDocument || elem) !== document) {
          setDocument(elem);
        }
        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
        return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
      };
      Sizzle.error = function (msg) {
        throw new Error('Syntax error, unrecognized expression: ' + msg);
      };
      /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
      Sizzle.uniqueSort = function (results) {
        var elem, duplicates = [], j = 0, i = 0;
        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);
        if (hasDuplicate) {
          while (elem = results[i++]) {
            if (elem === results[i]) {
              j = duplicates.push(i);
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1);
          }
        }
        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;
        return results;
      };
      /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
      getText = Sizzle.getText = function (elem) {
        var node, ret = '', i = 0, nodeType = elem.nodeType;
        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while (node = elem[i++]) {
            // Do not traverse comment nodes
            ret += getText(node);
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === 'string') {
            return elem.textContent;
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem);
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue;
        }
        // Do not include comment or processing instruction nodes
        return ret;
      };
      Expr = Sizzle.selectors = {
        cacheLength: 50,
        createPseudo: markFunction,
        match: matchExpr,
        attrHandle: {},
        find: {},
        relative: {
          '>': {
            dir: 'parentNode',
            first: true
          },
          ' ': { dir: 'parentNode' },
          '+': {
            dir: 'previousSibling',
            first: true
          },
          '~': { dir: 'previousSibling' }
        },
        preFilter: {
          'ATTR': function (match) {
            match[1] = match[1].replace(runescape, funescape);
            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
            if (match[2] === '~=') {
              match[3] = ' ' + match[3] + ' ';
            }
            return match.slice(0, 4);
          },
          'CHILD': function (match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();
            if (match[1].slice(0, 3) === 'nth') {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0]);
              }
              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
              match[5] = +(match[7] + match[8] || match[3] === 'odd');  // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0]);
            }
            return match;
          },
          'PSEUDO': function (match) {
            var excess, unquoted = !match[6] && match[2];
            if (matchExpr['CHILD'].test(match[0])) {
              return null;
            }
            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || '';  // Strip excess characters from unquoted arguments
            } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess);
            }
            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3);
          }
        },
        filter: {
          'TAG': function (nodeNameSelector) {
            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
            return nodeNameSelector === '*' ? function () {
              return true;
            } : function (elem) {
              return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
            };
          },
          'CLASS': function (className) {
            var pattern = classCache[className + ' '];
            return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
              return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
            });
          },
          'ATTR': function (name, operator, check) {
            return function (elem) {
              var result = Sizzle.attr(elem, name);
              if (result == null) {
                return operator === '!=';
              }
              if (!operator) {
                return true;
              }
              result += '';
              return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
            };
          },
          'CHILD': function (type, what, argument, first, last) {
            var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
            return first === 1 && last === 0 ? function (elem) {
              return !!elem.parentNode;
            } : function (elem, context, xml) {
              var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
              if (parent) {
                // :(first|last|only)-(child|of-type)
                if (simple) {
                  while (dir) {
                    node = elem;
                    while (node = node[dir]) {
                      if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                        return false;
                      }
                    }
                    // Reverse direction for :only-* (if we haven't yet done so)
                    start = dir = type === 'only' && !start && 'nextSibling';
                  }
                  return true;
                }
                start = [forward ? parent.firstChild : parent.lastChild];
                // non-xml :nth-child(...) stores cache data on `parent`
                if (forward && useCache) {
                  // Seek `elem` from a previously-cached index
                  outerCache = parent[expando] || (parent[expando] = {});
                  cache = outerCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = cache[0] === dirruns && cache[2];
                  node = nodeIndex && parent.childNodes[nodeIndex];
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    // When found, cache indexes on `parent` and break
                    if (node.nodeType === 1 && ++diff && node === elem) {
                      outerCache[type] = [
                        dirruns,
                        nodeIndex,
                        diff
                      ];
                      break;
                    }
                  }  // Use previously-cached element index if available
                } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                  diff = cache[1];  // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                } else {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        (node[expando] || (node[expando] = {}))[type] = [
                          dirruns,
                          diff
                        ];
                      }
                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
                // Incorporate the offset, then check against cycle size
                diff -= last;
                return diff === first || diff % first === 0 && diff / first >= 0;
              }
            };
          },
          'PSEUDO': function (pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument);
            }
            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [
                pseudo,
                pseudo,
                '',
                argument
              ];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                var idx, matched = fn(seed, argument), i = matched.length;
                while (i--) {
                  idx = indexOf(seed, matched[i]);
                  seed[idx] = !(matches[idx] = matched[i]);
                }
              }) : function (elem) {
                return fn(elem, 0, args);
              };
            }
            return fn;
          }
        },
        pseudos: {
          'not': markFunction(function (selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
            return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
              var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
              // Match elements unmatched by `matcher`
              while (i--) {
                if (elem = unmatched[i]) {
                  seed[i] = !(matches[i] = elem);
                }
              }
            }) : function (elem, context, xml) {
              input[0] = elem;
              matcher(input, null, xml, results);
              // Don't keep the element (issue #299)
              input[0] = null;
              return !results.pop();
            };
          }),
          'has': markFunction(function (selector) {
            return function (elem) {
              return Sizzle(selector, elem).length > 0;
            };
          }),
          'contains': markFunction(function (text) {
            text = text.replace(runescape, funescape);
            return function (elem) {
              return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
            };
          }),
          'lang': markFunction(function (lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || '')) {
              Sizzle.error('unsupported lang: ' + lang);
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function (elem) {
              var elemLang;
              do {
                if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                  elemLang = elemLang.toLowerCase();
                  return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false;
            };
          }),
          'target': function (elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id;
          },
          'root': function (elem) {
            return elem === docElem;
          },
          'focus': function (elem) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
          },
          'enabled': function (elem) {
            return elem.disabled === false;
          },
          'disabled': function (elem) {
            return elem.disabled === true;
          },
          'checked': function (elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
          },
          'selected': function (elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              elem.parentNode.selectedIndex;
            }
            return elem.selected === true;
          },
          'empty': function (elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false;
              }
            }
            return true;
          },
          'parent': function (elem) {
            return !Expr.pseudos['empty'](elem);
          },
          'header': function (elem) {
            return rheader.test(elem.nodeName);
          },
          'input': function (elem) {
            return rinputs.test(elem.nodeName);
          },
          'button': function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === 'button' || name === 'button';
          },
          'text': function (elem) {
            var attr;
            return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
          },
          'first': createPositionalPseudo(function () {
            return [0];
          }),
          'last': createPositionalPseudo(function (matchIndexes, length) {
            return [length - 1];
          }),
          'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
            return [argument < 0 ? argument + length : argument];
          }),
          'even': createPositionalPseudo(function (matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
          'odd': createPositionalPseudo(function (matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
          'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; --i >= 0;) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
          'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length;) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          })
        }
      };
      Expr.pseudos['nth'] = Expr.pseudos['eq'];
      // Add button/input type pseudos
      for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
        Expr.pseudos[i] = createInputPseudo(i);
      }
      for (i in {
          submit: true,
          reset: true
        }) {
        Expr.pseudos[i] = createButtonPseudo(i);
      }
      // Easy API for creating new setFilters
      function setFilters() {
      }
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters();
      tokenize = Sizzle.tokenize = function (selector, parseOnly) {
        var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
        if (cached) {
          return parseOnly ? 0 : cached.slice(0);
        }
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar;
            }
            groups.push(tokens = []);
          }
          matched = false;
          // Combinators
          if (match = rcombinators.exec(soFar)) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: match[0].replace(rtrim, ' ')
            });
            soFar = soFar.slice(matched.length);
          }
          // Filters
          for (type in Expr.filter) {
            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match
              });
              soFar = soFar.slice(matched.length);
            }
          }
          if (!matched) {
            break;
          }
        }
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
      };
      function toSelector(tokens) {
        var i = 0, len = tokens.length, selector = '';
        for (; i < len; i++) {
          selector += tokens[i].value;
        }
        return selector;
      }
      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
        return combinator.first ? function (elem, context, xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              return matcher(elem, context, xml);
            }
          }
        } : function (elem, context, xml) {
          var oldCache, outerCache, newCache = [
              dirruns,
              doneName
            ];
          // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
          if (xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                if (matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          } else {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                outerCache = elem[expando] || (elem[expando] = {});
                if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                  // Assign to newCache so results back-propagate to previous elements
                  return newCache[2] = oldCache[2];
                } else {
                  // Reuse newcache so results back-propagate to previous elements
                  outerCache[dir] = newCache;
                  // A match means we're done; a fail means we have to keep checking
                  if (newCache[2] = matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            }
          }
        };
      }
      function elementMatcher(matchers) {
        return matchers.length > 1 ? function (elem, context, xml) {
          var i = matchers.length;
          while (i--) {
            if (!matchers[i](elem, context, xml)) {
              return false;
            }
          }
          return true;
        } : matchers[0];
      }
      function multipleContexts(selector, contexts, results) {
        var i = 0, len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results);
        }
        return results;
      }
      function condense(unmatched, map, filter, context, xml) {
        var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
        for (; i < len; i++) {
          if (elem = unmatched[i]) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i);
              }
            }
          }
        }
        return newUnmatched;
      }
      function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function (seed, results, context, xml) {
          var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
            // Get initial elements from seed or context
            elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml);
          }
          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);
            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if (elem = temp[i]) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
              }
            }
          }
          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if (elem = matcherOut[i]) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push(matcherIn[i] = elem);
                  }
                }
                postFinder(null, matcherOut = [], temp, xml);
              }
              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                  seed[temp] = !(results[temp] = elem);
                }
              }
            }  // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
            if (postFinder) {
              postFinder(null, results, matcherOut, xml);
            } else {
              push.apply(results, matcherOut);
            }
          }
        });
      }
      function matcherFromTokens(tokens) {
        var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(function (elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
            return indexOf(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function (elem, context, xml) {
              var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret;
            }];
        for (; i < len; i++) {
          if (matcher = Expr.relative[tokens[i].type]) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)];
          } else {
            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break;
                }
              }
              return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
            }
            matchers.push(matcher);
          }
        }
        return elementMatcher(matchers);
      }
      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || byElement && Expr.find['TAG']('*', outermost),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context !== document && context;
            }
            // Add elements passing elementMatchers directly to results
            // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            // Apply set filters to unmatched elements
            matchedCount += i;
            if (bySet && i !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                }
                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched);
              }
              // Add matches to results
              push.apply(results, setMatched);
              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle.uniqueSort(results);
              }
            }
            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
        return bySet ? markFunction(superMatcher) : superMatcher;
      }
      compile = Sizzle.compile = function (selector, match) {
        var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector);
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached);
            } else {
              elementMatchers.push(cached);
            }
          }
          // Cache the compiled function
          cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
          // Save selector and tokenization
          cached.selector = selector;
        }
        return cached;
      };
      /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
      select = Sizzle.select = function (selector, context, results, seed) {
        var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
        results = results || [];
        // Try to minimize operations if there is no seed and only one group
        if (match.length === 1) {
          // Take a shortcut and set the context if the root selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
            context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
            if (!context) {
              return results;  // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode;
            }
            selector = selector.slice(tokens.shift().value.length);
          }
          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];
            // Abort if we hit a combinator
            if (Expr.relative[type = token.type]) {
              break;
            }
            if (find = Expr.find[type]) {
              // Search, expanding context for leading sibling combinators
              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }
                break;
              }
            }
          }
        }
        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
        return results;
      };
      // One-time assignments
      // Sort stability
      support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
      // Support: Chrome 14-35+
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;
      // Initialize against the default document
      setDocument();
      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function (div1) {
        // Should return 1, but returns 4 (following)
        return div1.compareDocumentPosition(document.createElement('div')) & 1;
      });
      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (!assert(function (div) {
          div.innerHTML = '<a href=\'#\'></a>';
          return div.firstChild.getAttribute('href') === '#';
        })) {
        addHandle('type|href|height|width', function (elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
          }
        });
      }
      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (!support.attributes || !assert(function (div) {
          div.innerHTML = '<input/>';
          div.firstChild.setAttribute('value', '');
          return div.firstChild.getAttribute('value') === '';
        })) {
        addHandle('value', function (elem, name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === 'input') {
            return elem.defaultValue;
          }
        });
      }
      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (!assert(function (div) {
          return div.getAttribute('disabled') == null;
        })) {
        addHandle(booleans, function (elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
          }
        });
      }
      return Sizzle;
    }(window);
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[':'] = jQuery.expr.pseudos;
  jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  var rneedsContext = jQuery.expr.match.needsContext;
  var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var risSimple = /^.[^:#\[\.,]*$/;
  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        /* jshint -W018 */
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }
    if (typeof qualifier === 'string') {
      if (risSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }
      qualifier = jQuery.filter(qualifier, elements);
    }
    return jQuery.grep(elements, function (elem) {
      return indexOf.call(qualifier, elem) >= 0 !== not;
    });
  }
  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ':not(' + expr + ')';
    }
    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  jQuery.fn.extend({
    find: function (selector) {
      var i, len = this.length, ret = [], self = this;
      if (typeof selector !== 'string') {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }
      // Needed because $( selector, context ) becomes $( context ).find( selector )
      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + ' ' + selector : selector;
      return ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });
  // Initialize a jQuery object
  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
      var match, elem;
      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }
      // Handle HTML strings
      if (typeof selector === 'string') {
        if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [
            null,
            selector,
            null
          ];
        } else {
          match = rquickExpr.exec(selector);
        }
        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;
            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (jQuery.isFunction(this[match])) {
                  this[match](context[match]);  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;  // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            // Support: Blackberry 4.6
            // gEBID returns nodes no longer in the document (#6963)
            if (elem && elem.parentNode) {
              // Inject the element directly into the jQuery object
              this.length = 1;
              this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
          }  // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || rootjQuery).find(selector);  // HANDLE: $(expr, context)
                                                          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }  // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;  // HANDLE: $(function)
                      // Shortcut for document ready
      } else if (jQuery.isFunction(selector)) {
        return typeof rootjQuery.ready !== 'undefined' ? rootjQuery.ready(selector) : selector(jQuery);
      }
      if (selector.selector !== undefined) {
        this.selector = selector.selector;
        this.context = selector.context;
      }
      return jQuery.makeArray(selector, this);
    };
  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;
  // Initialize central reference
  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  jQuery.extend({
    dir: function (elem, dir, until) {
      var matched = [], truncate = until !== undefined;
      while ((elem = elem[dir]) && elem.nodeType !== 9) {
        if (elem.nodeType === 1) {
          if (truncate && jQuery(elem).is(until)) {
            break;
          }
          matched.push(elem);
        }
      }
      return matched;
    },
    sibling: function (n, elem) {
      var matched = [];
      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== elem) {
          matched.push(n);
        }
      }
      return matched;
    }
  });
  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this), l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function (selectors, context) {
      var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
          // Always skip document fragments
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
            matched.push(cur);
            break;
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    },
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }
      // Index in selector
      if (typeof elem === 'string') {
        return indexOf.call(jQuery(elem), this[0]);
      }
      // Locate the position of the desired element
      return indexOf.call(this, elem.jquery ? elem[0] : elem);
    },
    add: function (selector, context) {
      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {
    }
    return cur;
  }
  jQuery.each({
    parent: function (elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function (elem) {
      return jQuery.dir(elem, 'parentNode');
    },
    parentsUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'parentNode', until);
    },
    next: function (elem) {
      return sibling(elem, 'nextSibling');
    },
    prev: function (elem) {
      return sibling(elem, 'previousSibling');
    },
    nextAll: function (elem) {
      return jQuery.dir(elem, 'nextSibling');
    },
    prevAll: function (elem) {
      return jQuery.dir(elem, 'previousSibling');
    },
    nextUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'nextSibling', until);
    },
    prevUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'previousSibling', until);
    },
    siblings: function (elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    children: function (elem) {
      return jQuery.sibling(elem.firstChild);
    },
    contents: function (elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);
      if (name.slice(-5) !== 'Until') {
        selector = until;
      }
      if (selector && typeof selector === 'string') {
        matched = jQuery.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.unique(matched);
        }
        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnotwhite = /\S+/g;
  // String to Object options format cache
  var optionsCache = {};
  // Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions(options) {
    var object = optionsCache[options] = {};
    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
    var
      // Last fire value (for non-forgettable lists)
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to know if list is currently firing
      firing,
      // First callback to fire (used internally by add and fireWith)
      firingStart,
      // End of the loop when firing
      firingLength,
      // Index of currently firing callback (modified by remove if needed)
      firingIndex,
      // Actual callback list
      list = [],
      // Stack of fire calls for repeatable lists
      stack = !options.once && [],
      // Fire callbacks
      fire = function (data) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for (; list && firingIndex < firingLength; firingIndex++) {
          if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
            memory = false;
            // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if (list) {
          if (stack) {
            if (stack.length) {
              fire(stack.shift());
            }
          } else if (memory) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
      // Actual Callbacks object
      self = {
        add: function () {
          if (list) {
            // First, we save the current length
            var start = list.length;
            (function add(args) {
              jQuery.each(args, function (_, arg) {
                var type = jQuery.type(arg);
                if (type === 'function') {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && type !== 'string') {
                  // Inspect recursively
                  add(arg);
                }
              });
            }(arguments));
            // Do we need to add the callbacks to the
            // current firing batch?
            if (firing) {
              firingLength = list.length;  // With memory, if we're not firing then
                                           // we should call right away
            } else if (memory) {
              firingStart = start;
              fire(memory);
            }
          }
          return this;
        },
        remove: function () {
          if (list) {
            jQuery.each(arguments, function (_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                // Handle firing indexes
                if (firing) {
                  if (index <= firingLength) {
                    firingLength--;
                  }
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
        },
        empty: function () {
          list = [];
          firingLength = 0;
          return this;
        },
        disable: function () {
          list = stack = memory = undefined;
          return this;
        },
        disabled: function () {
          return !list;
        },
        lock: function () {
          stack = undefined;
          if (!memory) {
            self.disable();
          }
          return this;
        },
        locked: function () {
          return !stack;
        },
        fireWith: function (context, args) {
          if (list && (!fired || stack)) {
            args = args || [];
            args = [
              context,
              args.slice ? args.slice() : args
            ];
            if (firing) {
              stack.push(args);
            } else {
              fire(args);
            }
          }
          return this;
        },
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },
        fired: function () {
          return !!fired;
        }
      };
    return self;
  };
  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          [
            'resolve',
            'done',
            jQuery.Callbacks('once memory'),
            'resolved'
          ],
          [
            'reject',
            'fail',
            jQuery.Callbacks('once memory'),
            'rejected'
          ],
          [
            'notify',
            'progress',
            jQuery.Callbacks('memory')
          ]
        ], state = 'pending', promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          then: function () {
            var fns = arguments;
            return jQuery.Deferred(function (newDefer) {
              jQuery.each(tuples, function (i, tuple) {
                var fn = jQuery.isFunction(fns[i]) && fns[i];
                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && jQuery.isFunction(returned.promise)) {
                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                  } else {
                    newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          }
        }, deferred = {};
      // Keep pipe for back-compat
      promise.pipe = promise.then;
      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2], stateString = tuple[3];
        // promise[ done | fail | progress ] = list.add
        promise[tuple[1]] = list.add;
        // Handle state
        if (stateString) {
          list.add(function () {
            // state = [ resolved | rejected ]
            state = stateString;  // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        }
        // deferred[ resolve | reject | notify ]
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
          return this;
        };
        deferred[tuple[0] + 'With'] = list.fireWith;
      });
      // Make the deferred a promise
      promise.promise(deferred);
      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }
      // All done!
      return deferred;
    },
    when: function (subordinate) {
      var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length,
        // the count of uncompleted subordinates
        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
        // Update function for both resolve and progress values
        updateFunc = function (i, contexts, values) {
          return function (value) {
            contexts[i] = this;
            values[i] = arguments.length > 1 ? slice.call(arguments) : value;
            if (values === progressValues) {
              deferred.notifyWith(contexts, values);
            } else if (!--remaining) {
              deferred.resolveWith(contexts, values);
            }
          };
        }, progressValues, progressContexts, resolveContexts;
      // Add listeners to Deferred subordinates; treat others as resolved
      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);
        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
          } else {
            --remaining;
          }
        }
      }
      // If we're not waiting on anything, resolve the master
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }
      return deferred.promise();
    }
  });
  // The deferred used on DOM ready
  var readyList;
  jQuery.fn.ready = function (fn) {
    // Add the callback
    jQuery.ready.promise().done(fn);
    return this;
  };
  jQuery.extend({
    isReady: false,
    readyWait: 1,
    holdReady: function (hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }
      // Remember that the DOM is ready
      jQuery.isReady = true;
      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }
      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
      // Trigger any bound ready events
      if (jQuery.fn.triggerHandler) {
        jQuery(document).triggerHandler('ready');
        jQuery(document).off('ready');
      }
    }
  });
  /**
 * The ready event handler and self cleanup method
 */
  function completed() {
    document.removeEventListener('DOMContentLoaded', completed, false);
    window.removeEventListener('load', completed, false);
    jQuery.ready();
  }
  jQuery.ready.promise = function (obj) {
    if (!readyList) {
      readyList = jQuery.Deferred();
      // Catch cases where $(document).ready() is called after the browser event has already occurred.
      // We once tried to use readyState "interactive" here, but it caused issues like the one
      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
      if (document.readyState === 'complete') {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed, false);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed, false);
      }
    }
    return readyList.promise(obj);
  };
  // Kick off the DOM ready check even if the user does not
  jQuery.ready.promise();
  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
      var i = 0, len = elems.length, bulk = key == null;
      // Sets many values
      if (jQuery.type(key) === 'object') {
        chainable = true;
        for (i in key) {
          jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
        }  // Sets one value
      } else if (value !== undefined) {
        chainable = true;
        if (!jQuery.isFunction(value)) {
          raw = true;
        }
        if (bulk) {
          // Bulk operations run against the entire set
          if (raw) {
            fn.call(elems, value);
            fn = null;  // ...except when executing function values
          } else {
            bulk = fn;
            fn = function (elem, key, value) {
              return bulk.call(jQuery(elem), value);
            };
          }
        }
        if (fn) {
          for (; i < len; i++) {
            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
          }
        }
      }
      return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
    };
  /**
 * Determines whether an object can have data
 */
  jQuery.acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    // Support: Android<4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty(this.cache = {}, 0, {
      get: function () {
        return {};
      }
    });
    this.expando = jQuery.expando + Data.uid++;
  }
  Data.uid = 1;
  Data.accepts = jQuery.acceptData;
  Data.prototype = {
    key: function (owner) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return the key for a frozen object.
      if (!Data.accepts(owner)) {
        return 0;
      }
      var descriptor = {},
        // Check if the owner object already has a cache key
        unlock = owner[this.expando];
      // If not, create one
      if (!unlock) {
        unlock = Data.uid++;
        // Secure it in a non-enumerable, non-writable property
        try {
          descriptor[this.expando] = { value: unlock };
          Object.defineProperties(owner, descriptor);  // Support: Android<4
                                                       // Fallback to a less secure definition
        } catch (e) {
          descriptor[this.expando] = unlock;
          jQuery.extend(owner, descriptor);
        }
      }
      // Ensure the cache object
      if (!this.cache[unlock]) {
        this.cache[unlock] = {};
      }
      return unlock;
    },
    set: function (owner, data, value) {
      var prop,
        // There may be an unlock assigned to this node,
        // if there is no entry for this "owner", create one inline
        // and set the unlock as though an owner entry had always existed
        unlock = this.key(owner), cache = this.cache[unlock];
      // Handle: [ owner, key, value ] args
      if (typeof data === 'string') {
        cache[data] = value;  // Handle: [ owner, { properties } ] args
      } else {
        // Fresh assignments by object are shallow copied
        if (jQuery.isEmptyObject(cache)) {
          jQuery.extend(this.cache[unlock], data);  // Otherwise, copy the properties one-by-one to the cache object
        } else {
          for (prop in data) {
            cache[prop] = data[prop];
          }
        }
      }
      return cache;
    },
    get: function (owner, key) {
      // Either a valid cache is found, or will be created.
      // New caches will be created and the unlock returned,
      // allowing direct access to the newly created
      // empty data object. A valid owner object must be provided.
      var cache = this.cache[this.key(owner)];
      return key === undefined ? cache : cache[key];
    },
    access: function (owner, key, value) {
      var stored;
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === 'string' && value === undefined) {
        stored = this.get(owner, key);
        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      }
      // [*]When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);
      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
      if (key === undefined) {
        this.cache[unlock] = {};
      } else {
        // Support array or space separated string of keys
        if (jQuery.isArray(key)) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);
          // Try the string as a key before any manipulation
          if (key in cache) {
            name = [
              key,
              camel
            ];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ? [name] : name.match(rnotwhite) || [];
          }
        }
        i = name.length;
        while (i--) {
          delete cache[name[i]];
        }
      }
    },
    hasData: function (owner) {
      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
    },
    discard: function (owner) {
      if (owner[this.expando]) {
        delete this.cache[owner[this.expando]];
      }
    }
  };
  var data_priv = new Data();
  var data_user = new Data();
  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
  function dataAttr(elem, key, data) {
    var name;
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === 'string') {
        try {
          data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {
        }
        // Make sure we set the data so it isn't changed later
        data_user.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  jQuery.extend({
    hasData: function (elem) {
      return data_user.hasData(elem) || data_priv.hasData(elem);
    },
    data: function (elem, name, data) {
      return data_user.access(elem, name, data);
    },
    removeData: function (elem, name) {
      data_user.remove(elem, name);
    },
    _data: function (elem, name, data) {
      return data_priv.access(elem, name, data);
    },
    _removeData: function (elem, name) {
      data_priv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function (key, value) {
      var i, name, data, elem = this[0], attrs = elem && elem.attributes;
      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = data_user.get(elem);
          if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
            i = attrs.length;
            while (i--) {
              // Support: IE11+
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf('data-') === 0) {
                  name = jQuery.camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            data_priv.set(elem, 'hasDataAttrs', true);
          }
        }
        return data;
      }
      // Sets multiple values
      if (typeof key === 'object') {
        return this.each(function () {
          data_user.set(this, key);
        });
      }
      return access(this, function (value) {
        var data, camelKey = jQuery.camelCase(key);
        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // with the key as-is
          data = data_user.get(elem, key);
          if (data !== undefined) {
            return data;
          }
          // Attempt to get data from the cache
          // with the key camelized
          data = data_user.get(elem, camelKey);
          if (data !== undefined) {
            return data;
          }
          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, camelKey, undefined);
          if (data !== undefined) {
            return data;
          }
          // We tried really hard, but the data doesn't exist.
          return;
        }
        // Set the data...
        this.each(function () {
          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = data_user.get(this, camelKey);
          // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*
          data_user.set(this, camelKey, value);
          // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.
          if (key.indexOf('-') !== -1 && data !== undefined) {
            data_user.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function (key) {
      return this.each(function () {
        data_user.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;
      if (elem) {
        type = (type || 'fx') + 'queue';
        queue = data_priv.get(elem, type);
        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = data_priv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function (elem, type) {
      type = type || 'fx';
      var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
          jQuery.dequeue(elem, type);
        };
      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === 'inprogress') {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === 'fx') {
          queue.unshift('inprogress');
        }
        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    _queueHooks: function (elem, type) {
      var key = type + 'queueHooks';
      return data_priv.get(elem, key) || data_priv.access(elem, key, {
        empty: jQuery.Callbacks('once memory').add(function () {
          data_priv.remove(elem, [
            type + 'queue',
            key
          ]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;
      if (typeof type !== 'string') {
        data = type;
        type = 'fx';
        setter--;
      }
      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);
        // Ensure a hooks for this queue
        jQuery._queueHooks(this, type);
        if (type === 'fx' && queue[0] !== 'inprogress') {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || 'fx', []);
    },
    promise: function (type, obj) {
      var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== 'string') {
        obj = type;
        type = undefined;
      }
      type = type || 'fx';
      while (i--) {
        tmp = data_priv.get(elements[i], type + 'queueHooks');
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var cssExpand = [
      'Top',
      'Right',
      'Bottom',
      'Left'
    ];
  var isHidden = function (elem, el) {
    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
  };
  var rcheckableType = /^(?:checkbox|radio)$/i;
  (function () {
    var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
    // Support: Safari<=5.1
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute('type', 'radio');
    input.setAttribute('checked', 'checked');
    input.setAttribute('name', 't');
    div.appendChild(input);
    // Support: Safari<=5.1, Android<4.2
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
    // Support: IE<=11+
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = '<textarea>x</textarea>';
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  }());
  var strundefined = typeof undefined;
  support.focusinBubbles = 'onfocusin' in window;
  var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {
    }
  }
  /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
  jQuery.event = {
    global: {},
    add: function (elem, types, handler, data, selector) {
      var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
      // Don't attach events to noData or text/comment nodes (but allow plain objects)
      if (!elemData) {
        return;
      }
      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }
      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }
      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      }
      // Handle multiple events separated by a space
      types = (types || '').match(rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }
        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};
        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;
        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};
        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join('.')
        }, handleObjIn);
        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;
          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle, false);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }
        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }
        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }
      // Once for each type.namespace in types; type may be omitted
      types = (types || '').match(rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }
        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }
      // Remove the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        delete elemData.handle;
        data_priv.remove(elem, 'events');
      }
    },
    trigger: function (event, data, elem, onlyHandlers) {
      var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
      cur = tmp = elem = elem || document;
      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }
      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }
      if (type.indexOf('.') >= 0) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split('.');
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(':') < 0 && 'on' + type;
      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join('.');
      event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }
      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);
      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }
      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }
        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }
      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        event.type = i > 1 ? bubbleType : special.bindType || type;
        // jQuery handler
        handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
        if (handle) {
          handle.apply(cur, data);
        }
        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && jQuery.acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;
      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }
            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    dispatch: function (event) {
      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(event);
      var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;
      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }
      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or 2) have namespace(s)
          // a subset or equal to those in the bound event (both can have no namespace).
          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }
      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function (event, handlers) {
      var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      // Avoid non-left-click bubbling in Firefox (#3861)
      if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.disabled !== true || event.type !== 'click') {
            matches = [];
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];
              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + ' ';
              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matches[sel]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matches
              });
            }
          }
        }
      }
      // Add the remaining (directly-bound) handlers
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
    fixHooks: {},
    keyHooks: {
      props: 'char charCode key keyCode'.split(' '),
      filter: function (event, original) {
        // Add which for key events
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }
        return event;
      }
    },
    mouseHooks: {
      props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
      filter: function (event, original) {
        var eventDoc, doc, body, button = original.button;
        // Calculate pageX/Y if missing and clientX/Y available
        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }
        return event;
      }
    },
    fix: function (event) {
      if (event[jQuery.expando]) {
        return event;
      }
      // Create a writable copy of the event object and normalize some properties
      var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(originalEvent);
      i = copy.length;
      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      }
      // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't
      if (!event.target) {
        event.target = document;
      }
      // Support: Safari 6.0+, Chrome<28
      // Target should not be a text node (#504, #13143)
      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }
      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },
    special: {
      load: { noBubble: true },
      focus: {
        trigger: function () {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: 'focusin'
      },
      blur: {
        trigger: function () {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: 'focusout'
      },
      click: {
        trigger: function () {
          if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
            this.click();
            return false;
          }
        },
        _default: function (event) {
          return jQuery.nodeName(event.target, 'a');
        }
      },
      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },
    simulate: function (type, elem, event, bubble) {
      // Piggyback on a donor event to simulate a different one.
      // Fake originalEvent to avoid donor's stopPropagation, but if the
      // simulated event prevents default then we do the same on the donor.
      var e = jQuery.extend(new jQuery.Event(), event, {
          type: type,
          isSimulated: true,
          originalEvent: {}
        });
      if (bubble) {
        jQuery.event.trigger(e, null, elem);
      } else {
        jQuery.event.dispatch.call(elem, e);
      }
      if (e.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  jQuery.removeEvent = function (elem, type, handle) {
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle, false);
    }
  };
  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }
    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;
      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;  // Event type
    } else {
      this.type = src;
    }
    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }
    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();
    // Mark it as fixed
    this[jQuery.expando] = true;
  };
  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && e.preventDefault) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && e.stopPropagation) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && e.stopImmediatePropagation) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };
  // Create mouseenter/leave events using mouseover/out and event-time checks
  // Support: Chrome 15+
  jQuery.each({
    mouseenter: 'mouseover',
    mouseleave: 'mouseout',
    pointerenter: 'pointerover',
    pointerleave: 'pointerout'
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function (event) {
        var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  // Support: Firefox, Chrome, Safari
  // Create "bubbling" focus and blur events
  if (!support.focusinBubbles) {
    jQuery.each({
      focus: 'focusin',
      blur: 'focusout'
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
      };
      jQuery.event.special[fix] = {
        setup: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          data_priv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            data_priv.remove(doc, fix);
          } else {
            data_priv.access(doc, fix, attaches);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    on: function (types, selector, data, fn, one) {
      var origFn, type;
      // Types can be a map of types/handlers
      if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for (type in types) {
          this.on(type, selector, data, types[type], one);
        }
        return this;
      }
      if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if (fn == null) {
        if (typeof selector === 'string') {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if (fn === false) {
        fn = returnFalse;
      } else if (!fn) {
        return this;
      }
      if (one === 1) {
        origFn = fn;
        fn = function (event) {
          // Can use an empty set, since event contains the info
          jQuery().off(event);
          return origFn.apply(this, arguments);
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
      }
      return this.each(function () {
        jQuery.event.add(this, types, fn, data, selector);
      });
    },
    one: function (types, selector, data, fn) {
      return this.on(types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
      option: [
        1,
        '<select multiple=\'multiple\'>',
        '</select>'
      ],
      thead: [
        1,
        '<table>',
        '</table>'
      ],
      col: [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      tr: [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      td: [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      _default: [
        0,
        '',
        ''
      ]
    };
  // Support: IE9
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  // Support: 1.x compatibility
  // Manipulating tables requires a tbody
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
  }
  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);
    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute('type');
    }
    return elem;
  }
  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0, l = elems.length;
    for (; i < l; i++) {
      data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
    }
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }
    // 1. Copy private data: events, handlers, etc.
    if (data_priv.hasData(src)) {
      pdataOld = data_priv.access(src);
      pdataCur = data_priv.set(dest, pdataOld);
      events = pdataOld.events;
      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }
    // 2. Copy user data
    if (data_user.hasData(src)) {
      udataOld = data_user.access(src);
      udataCur = jQuery.extend({}, udataOld);
      data_user.set(dest, udataCur);
    }
  }
  function getAll(context, tag) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }
  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();
    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === 'input' && rcheckableType.test(src.type)) {
      dest.checked = src.checked;  // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === 'input' || nodeName === 'textarea') {
      dest.defaultValue = src.defaultValue;
    }
  }
  jQuery.extend({
    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
      // Fix IE cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }
      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      // Preserve script evaluation history
      destElements = getAll(clone, 'script');
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
      }
      // Return the cloned set
      return clone;
    },
    buildFragment: function (elems, context, scripts, selection) {
      var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
      for (; i < l; i++) {
        elem = elems[i];
        if (elem || elem === 0) {
          // Add nodes directly
          if (jQuery.type(elem) === 'object') {
            // Support: QtWebKit, PhantomJS
            // push.apply(_, arraylike) throws on ancient WebKit
            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);  // Convert non-html into a text node
          } else if (!rhtml.test(elem)) {
            nodes.push(context.createTextNode(elem));  // Convert html into DOM nodes
          } else {
            tmp = tmp || fragment.appendChild(context.createElement('div'));
            // Deserialize a standard representation
            tag = (rtagName.exec(elem) || [
              '',
              ''
            ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
            // Descend through wrappers to the right content
            j = wrap[0];
            while (j--) {
              tmp = tmp.lastChild;
            }
            // Support: QtWebKit, PhantomJS
            // push.apply(_, arraylike) throws on ancient WebKit
            jQuery.merge(nodes, tmp.childNodes);
            // Remember the top-level container
            tmp = fragment.firstChild;
            // Ensure the created nodes are orphaned (#12392)
            tmp.textContent = '';
          }
        }
      }
      // Remove wrapper from fragment
      fragment.textContent = '';
      i = 0;
      while (elem = nodes[i++]) {
        // #4087 - If origin and destination elements are the same, and this is
        // that element, do not do anything
        if (selection && jQuery.inArray(elem, selection) !== -1) {
          continue;
        }
        contains = jQuery.contains(elem.ownerDocument, elem);
        // Append to fragment
        tmp = getAll(fragment.appendChild(elem), 'script');
        // Preserve script evaluation history
        if (contains) {
          setGlobalEval(tmp);
        }
        // Capture executables
        if (scripts) {
          j = 0;
          while (elem = tmp[j++]) {
            if (rscriptType.test(elem.type || '')) {
              scripts.push(elem);
            }
          }
        }
      }
      return fragment;
    },
    cleanData: function (elems) {
      var data, elem, type, key, special = jQuery.event.special, i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (jQuery.acceptData(elem)) {
          key = elem[data_priv.expando];
          if (key && (data = data_priv.cache[key])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }
            if (data_priv.cache[key]) {
              // Discard any remaining `private` data
              delete data_priv.cache[key];
            }
          }
        }
        // Discard any remaining `user` data
        delete data_user.cache[elem[data_user.expando]];
      }
    }
  });
  jQuery.fn.extend({
    text: function (value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    remove: function (selector, keepData) {
      var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
      for (; (elem = elems[i]) != null; i++) {
        if (!keepData && elem.nodeType === 1) {
          jQuery.cleanData(getAll(elem));
        }
        if (elem.parentNode) {
          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
            setGlobalEval(getAll(elem, 'script'));
          }
          elem.parentNode.removeChild(elem);
        }
      }
      return this;
    },
    empty: function () {
      var elem, i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));
          // Remove any remaining nodes
          elem.textContent = '';
        }
      }
      return this;
    },
    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function (value) {
      return access(this, function (value) {
        var elem = this[0] || {}, i = 0, l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }
        // See if we can take a shortcut and just use innerHTML
        if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
            '',
            ''
          ])[1].toLowerCase()]) {
          value = value.replace(rxhtmlTag, '<$1></$2>');
          try {
            for (; i < l; i++) {
              elem = this[i] || {};
              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;  // If using innerHTML throws an exception, use the fallback method
          } catch (e) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function () {
      var arg = arguments[0];
      // Make the changes, replacing each context element with the new content
      this.domManip(arguments, function (elem) {
        arg = this.parentNode;
        jQuery.cleanData(getAll(this));
        if (arg) {
          arg.replaceChild(elem, this);
        }
      });
      // Force removal if there was no new content (e.g., from empty arguments)
      return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },
    detach: function (selector) {
      return this.remove(selector, true);
    },
    domManip: function (args, callback) {
      // Flatten any nested arrays
      args = concat.apply([], args);
      var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
      // We can't cloneNode fragments that contain checked, in WebKit
      if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
        return this.each(function (index) {
          var self = set.eq(index);
          if (isFunction) {
            args[0] = value.call(this, index, self.html());
          }
          self.domManip(args, callback);
        });
      }
      if (l) {
        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
        first = fragment.firstChild;
        if (fragment.childNodes.length === 1) {
          fragment = first;
        }
        if (first) {
          scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
          hasScripts = scripts.length;
          // Use the original fragment for the last item instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          for (; i < l; i++) {
            node = fragment;
            if (i !== iNoClone) {
              node = jQuery.clone(node, true, true);
              // Keep references to cloned scripts for later restoration
              if (hasScripts) {
                // Support: QtWebKit
                // jQuery.merge because push.apply(_, arraylike) throws
                jQuery.merge(scripts, getAll(node, 'script'));
              }
            }
            callback.call(this[i], node, i);
          }
          if (hasScripts) {
            doc = scripts[scripts.length - 1].ownerDocument;
            // Reenable scripts
            jQuery.map(scripts, restoreScript);
            // Evaluate executable scripts on first document insertion
            for (i = 0; i < hasScripts; i++) {
              node = scripts[i];
              if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                if (node.src) {
                  // Optional AJAX dependency, but won't run scripts if not present
                  if (jQuery._evalUrl) {
                    jQuery._evalUrl(node.src);
                  }
                } else {
                  jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                }
              }
            }
          }
        }
      }
      return this;
    }
  });
  jQuery.each({
    appendTo: 'append',
    prependTo: 'prepend',
    insertBefore: 'before',
    insertAfter: 'after',
    replaceAll: 'replaceWith'
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);
        // Support: QtWebKit
        // .get() because push.apply(_, arraylike) throws
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  var iframe, elemdisplay = {};
  /**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
  // Called only from within defaultDisplay
  function actualDisplay(name, doc) {
    var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body),
      // getDefaultComputedStyle might be reliably used only on attached element
      display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], 'display');
    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();
    return display;
  }
  /**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
  function defaultDisplay(nodeName) {
    var doc = document, display = elemdisplay[nodeName];
    if (!display) {
      display = actualDisplay(nodeName, doc);
      // If the simple way fails, read from inside an iframe
      if (display === 'none' || !display) {
        // Use the already-created iframe if possible
        iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
        // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
        doc = iframe[0].contentDocument;
        // Support: IE
        doc.write();
        doc.close();
        display = actualDisplay(nodeName, doc);
        iframe.detach();
      }
      // Store the correct default display
      elemdisplay[nodeName] = display;
    }
    return display;
  }
  var rmargin = /^margin/;
  var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
  var getStyles = function (elem) {
    // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    if (elem.ownerDocument.defaultView.opener) {
      return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
    }
    return window.getComputedStyle(elem, null);
  };
  function curCSS(elem, name, computed) {
    var width, minWidth, maxWidth, ret, style = elem.style;
    computed = computed || getStyles(elem);
    // Support: IE9
    // getPropertyValue is only needed for .css('filter') (#12537)
    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];
    }
    if (computed) {
      if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name);
      }
      // Support: iOS < 6
      // A tribute to the "awesome hack by Dean Edwards"
      // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
      if (rnumnonpx.test(ret) && rmargin.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;
        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;
        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret !== undefined ? ret + '' : ret;
  }
  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }
        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  (function () {
    var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement('div'), div = document.createElement('div');
    if (!div.style) {
      return;
    }
    // Support: IE9-11+
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = 'content-box';
    div.cloneNode(true).style.backgroundClip = '';
    support.clearCloneStyle = div.style.backgroundClip === 'content-box';
    container.style.cssText = 'border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;' + 'position:absolute';
    container.appendChild(div);
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computePixelPositionAndBoxSizingReliable() {
      div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;' + 'box-sizing:border-box;display:block;margin-top:1%;top:1%;' + 'border:1px;padding:1px;width:4px;position:absolute';
      div.innerHTML = '';
      docElem.appendChild(container);
      var divStyle = window.getComputedStyle(div, null);
      pixelPositionVal = divStyle.top !== '1%';
      boxSizingReliableVal = divStyle.width === '4px';
      docElem.removeChild(container);
    }
    // Support: node.js jsdom
    // Don't assume that getComputedStyle is a property of the global object
    if (window.getComputedStyle) {
      jQuery.extend(support, {
        pixelPosition: function () {
          // This test is executed only once but we still do memoizing
          // since we can use the boxSizingReliable pre-computing.
          // No need to check if the test was already performed, though.
          computePixelPositionAndBoxSizingReliable();
          return pixelPositionVal;
        },
        boxSizingReliable: function () {
          if (boxSizingReliableVal == null) {
            computePixelPositionAndBoxSizingReliable();
          }
          return boxSizingReliableVal;
        },
        reliableMarginRight: function () {
          // Support: Android 2.3
          // Check if div with explicit width and no margin-right incorrectly
          // gets computed margin-right based on width of container. (#3333)
          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
          // This support function is only executed once so no memoizing is needed.
          var ret, marginDiv = div.appendChild(document.createElement('div'));
          // Reset CSS: box-sizing; display; margin; border; padding
          marginDiv.style.cssText = div.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;' + 'box-sizing:content-box;display:block;margin:0;border:0;padding:0';
          marginDiv.style.marginRight = marginDiv.style.width = '0';
          div.style.width = '1px';
          docElem.appendChild(container);
          ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
          docElem.removeChild(container);
          div.removeChild(marginDiv);
          return ret;
        }
      });
    }
  }());
  // A method for quickly swapping in/out CSS properties to get correct calculations.
  jQuery.swap = function (elem, options, callback, args) {
    var ret, name, old = {};
    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.apply(elem, args || []);
    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  var
    // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp('^(' + pnum + ')(.*)$', 'i'), rrelNum = new RegExp('^([+-])=(' + pnum + ')', 'i'), cssShow = {
      position: 'absolute',
      visibility: 'hidden',
      display: 'block'
    }, cssNormalTransform = {
      letterSpacing: '0',
      fontWeight: '400'
    }, cssPrefixes = [
      'Webkit',
      'O',
      'Moz',
      'ms'
    ];
  // Return a css property mapped to a potentially vendor prefixed property
  function vendorPropName(style, name) {
    // Shortcut for names that are not vendor prefixed
    if (name in style) {
      return name;
    }
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in style) {
        return name;
      }
    }
    return origName;
  }
  function setPositiveNumber(elem, value, subtract) {
    var matches = rnumsplit.exec(value);
    return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
  }
  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
    for (; i < 4; i += 2) {
      // Both box models exclude margin, so add it if we want it
      if (extra === 'margin') {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }
      if (isBorderBox) {
        // border-box includes padding, so remove it if we want content
        if (extra === 'content') {
          val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        }
        // At this point, extra isn't border nor margin, so remove border
        if (extra !== 'margin') {
          val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      } else {
        // At this point, extra isn't content, so add padding
        val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        // At this point, extra isn't content nor padding, so add border
        if (extra !== 'padding') {
          val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      }
    }
    return val;
  }
  function getWidthOrHeight(elem, name, extra) {
    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
    // Some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if (val <= 0 || val == null) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS(elem, name, styles);
      if (val < 0 || val == null) {
        val = elem.style[name];
      }
      // Computed unit is not pixels. Stop here and return.
      if (rnumnonpx.test(val)) {
        return val;
      }
      // Check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
      // Normalize "", auto, and prepare for extra
      val = parseFloat(val) || 0;
    }
    // Use the active box-sizing model to add/subtract irrelevant styles
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
  }
  function showHide(elements, show) {
    var display, elem, hidden, values = [], index = 0, length = elements.length;
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      values[index] = data_priv.get(elem, 'olddisplay');
      display = elem.style.display;
      if (show) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if (!values[index] && display === 'none') {
          elem.style.display = '';
        }
        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if (elem.style.display === '' && isHidden(elem)) {
          values[index] = data_priv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
        }
      } else {
        hidden = isHidden(elem);
        if (display !== 'none' || !hidden) {
          data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
        }
      }
    }
    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for (index = 0; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      if (!show || elem.style.display === 'none' || elem.style.display === '') {
        elem.style.display = show ? values[index] || '' : 'none';
      }
    }
    return elements;
  }
  jQuery.extend({
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, 'opacity');
            return ret === '' ? '1' : ret;
          }
        }
      }
    },
    cssNumber: {
      'columnCount': true,
      'fillOpacity': true,
      'flexGrow': true,
      'flexShrink': true,
      'fontWeight': true,
      'lineHeight': true,
      'opacity': true,
      'order': true,
      'orphans': true,
      'widows': true,
      'zIndex': true,
      'zoom': true
    },
    cssProps: { 'float': 'cssFloat' },
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }
      // Make sure that we're working with the right name
      var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;
        // Convert "+=" or "-=" to relative numbers (#7345)
        if (type === 'string' && (ret = rrelNum.exec(value))) {
          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
          // Fixes bug #9237
          type = 'number';
        }
        // Make sure that null and NaN values aren't set (#7116)
        if (value == null || value !== value) {
          return;
        }
        // If a number, add 'px' to the (except for certain CSS properties)
        if (type === 'number' && !jQuery.cssNumber[origName]) {
          value += 'px';
        }
        // Support: IE9-11+
        // background-* props affect original clone's values
        if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
          style[name] = 'inherit';
        }
        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          style[name] = value;
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }
        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function (elem, name, extra, styles) {
      var val, num, hooks, origName = jQuery.camelCase(name);
      // Make sure that we're working with the right name
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // If a hook was provided get the computed value from there
      if (hooks && 'get' in hooks) {
        val = hooks.get(elem, true, extra);
      }
      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }
      // Convert "normal" to computed value
      if (val === 'normal' && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }
      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === '' || extra) {
        num = parseFloat(val);
        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
      }
      return val;
    }
  });
  jQuery.each([
    'height',
    'width'
  ], function (i, name) {
    jQuery.cssHooks[name] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, name, extra);
          }) : getWidthOrHeight(elem, name, extra);
        }
      },
      set: function (elem, value, extra) {
        var styles = extra && getStyles(elem);
        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
      }
    };
  });
  // Support: Android 2.3
  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
    if (computed) {
      return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
        elem,
        'marginRight'
      ]);
    }
  });
  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: '',
    padding: '',
    border: 'Width'
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function (value) {
        var i = 0, expanded = {},
          // Assumes a single number if not a string
          parts = typeof value === 'string' ? value.split(' ') : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (!rmargin.test(prefix)) {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function (name, value) {
      return access(this, function (elem, name, value) {
        var styles, len, map = {}, i = 0;
        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === 'boolean') {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || 'swing';
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased, hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;
        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
          return tween.elem[tween.prop];
        }
        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, '');
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === 'auto' ? 0 : result;
      },
      set: function (tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };
  // Support: IE9
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    }
  };
  jQuery.fx = Tween.prototype.init;
  // Back Compat <1.8 extension point
  jQuery.fx.step = {};
  var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
      '*': [function (prop, value) {
          var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
            // Starting value computation is required for potential unit mismatches
            start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
          if (start && start[3] !== unit) {
            // Trust units reported by jQuery.css
            unit = unit || start[3];
            // Make sure we update the tween properties later on
            parts = parts || [];
            // Iteratively approximate from a nonzero starting point
            start = +target || 1;
            do {
              // If previous iteration zeroed out, double until we get *something*.
              // Use string for doubling so we don't accidentally see scale as unchanged below
              scale = scale || '.5';
              // Adjust and apply
              start = start / scale;
              jQuery.style(tween.elem, prop, start + unit);  // Update scale, tolerating zero or NaN from tween.cur(),
                                                             // break the loop if scale is unchanged or perfect, or if we've just had enough
            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
          }
          // Update tween properties
          if (parts) {
            start = tween.start = +start || +target || 0;
            tween.unit = unit;
            // If a +=/-= token was provided, we're doing a relative animation
            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
          }
          return tween;
        }]
    };
  // Animations created synchronously will run synchronously
  function createFxNow() {
    setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = jQuery.now();
  }
  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which, i = 0, attrs = { height: type };
    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs['margin' + which] = attrs['padding' + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  function createTween(value, prop, animation) {
    var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }
  function defaultPrefilter(elem, props, opts) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
    // Handle queue: false promises
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, 'fx');
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, 'fx').length) {
            hooks.empty.fire();
          }
        });
      });
    }
    // Height/width overflow pass
    if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [
        style.overflow,
        style.overflowX,
        style.overflowY
      ];
      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      display = jQuery.css(elem, 'display');
      // Test default display if display is currently "none"
      checkDisplay = display === 'none' ? data_priv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
      if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
        style.display = 'inline-block';
      }
    }
    if (opts.overflow) {
      style.overflow = 'hidden';
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }
    // show/hide pass
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.exec(value)) {
        delete props[prop];
        toggle = toggle || value === 'toggle';
        if (value === (hidden ? 'hide' : 'show')) {
          // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
            hidden = true;
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);  // Any non-fx value stops us from restoring the original display value
      } else {
        display = undefined;
      }
    }
    if (!jQuery.isEmptyObject(orig)) {
      if (dataShow) {
        if ('hidden' in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = data_priv.access(elem, 'fxshow', {});
      }
      // Store state if its toggle - enables .stop().toggle() to "reverse"
      if (toggle) {
        dataShow.hidden = !hidden;
      }
      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function () {
          jQuery(elem).hide();
        });
      }
      anim.done(function () {
        var prop;
        data_priv.remove(elem, 'fxshow');
        for (prop in orig) {
          jQuery.style(elem, prop, orig[prop]);
        }
      });
      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;
          if (hidden) {
            tween.end = tween.start;
            tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
          }
        }
      }  // If this is a noop like .hide().hide(), restore an overwritten display value
    } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
      style.display = display;
    }
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;
    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = jQuery.camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (jQuery.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = jQuery.cssHooks[name];
      if (hooks && 'expand' in hooks) {
        value = hooks.expand(value);
        delete props[name];
        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }), tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [
          animation,
          percent,
          remaining
        ]);
        if (percent < 1 && length) {
          return remaining;
        } else {
          deferred.resolveWith(elem, [animation]);
          return false;
        }
      }, animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(true, { specialEasing: {} }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }
          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.resolveWith(elem, [
              animation,
              gotoEnd
            ]);
          } else {
            deferred.rejectWith(elem, [
              animation,
              gotoEnd
            ]);
          }
          return this;
        }
      }), props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = animationPrefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        return result;
      }
    }
    jQuery.map(props, createTween, animation);
    if (jQuery.isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    // attach callbacks from options
    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }
  jQuery.Animation = jQuery.extend(Animation, {
    tweener: function (props, callback) {
      if (jQuery.isFunction(props)) {
        callback = props;
        props = ['*'];
      } else {
        props = props.split(' ');
      }
      var prop, index = 0, length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        tweeners[prop] = tweeners[prop] || [];
        tweeners[prop].unshift(callback);
      }
    },
    prefilter: function (callback, prepend) {
      if (prepend) {
        animationPrefilters.unshift(callback);
      } else {
        animationPrefilters.push(callback);
      }
    }
  });
  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
        complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
      };
    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = 'fx';
    }
    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);
          // Empty animations, or finishing resolves immediately
          if (empty || data_priv.get(this, 'finish')) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== 'string') {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue && type !== false) {
        this.queue(type || 'fx', []);
      }
      return this.each(function () {
        var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }
        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || 'fx';
      }
      return this.each(function () {
        var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
        // Enable finishing flag on private data
        data.finish = true;
        // Empty the queue first
        jQuery.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }
        // Look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }
        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }
        // Turn off finishing flag
        delete data.finish;
      });
    }
  });
  jQuery.each([
    'toggle',
    'show',
    'hide'
  ], function (i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });
  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx('show'),
    slideUp: genFx('hide'),
    slideToggle: genFx('toggle'),
    fadeIn: { opacity: 'show' },
    fadeOut: { opacity: 'hide' },
    fadeToggle: { opacity: 'toggle' }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer, i = 0, timers = jQuery.timers;
    fxNow = jQuery.now();
    for (; i < timers.length; i++) {
      timer = timers[i];
      // Checks the timer has not already been removed
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };
  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    if (timer()) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };
  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (!timerId) {
      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };
  jQuery.fx.stop = function () {
    clearInterval(timerId);
    timerId = null;
  };
  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  };
  // Based off of the plugin by Clint Helfers, with permission.
  // http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || 'fx';
    return this.queue(type, function (next, hooks) {
      var timeout = setTimeout(next, time);
      hooks.stop = function () {
        clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
    input.type = 'checkbox';
    // Support: iOS<=5.1, Android<=4.2+
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== '';
    // Support: IE<=11+
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;
    // Support: Android<=2.3
    // Options inside disabled selects are incorrectly marked as disabled
    select.disabled = true;
    support.optDisabled = !opt.disabled;
    // Support: IE<=11+
    // An input loses its value after becoming a radio
    input = document.createElement('input');
    input.value = 't';
    input.type = 'radio';
    support.radioValue = input.value === 't';
  }());
  var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function (elem, name, value) {
      var hooks, ret, nType = elem.nodeType;
      // don't get/set attributes on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === strundefined) {
        return jQuery.prop(elem, name, value);
      }
      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
      }
      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
        } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        } else {
          elem.setAttribute(name, value + '');
          return value;
        }
      } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      } else {
        ret = jQuery.find.attr(elem, name);
        // Non-existent attributes return null, we normalize to undefined
        return ret == null ? undefined : ret;
      }
    },
    removeAttr: function (elem, value) {
      var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name;
          // Boolean attributes get special treatment (#10870)
          if (jQuery.expr.match.bool.test(name)) {
            // Set corresponding property to false
            elem[propName] = false;
          }
          elem.removeAttribute(name);
        }
      }
    },
    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
            var val = elem.value;
            elem.setAttribute('type', value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    }
  });
  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;
      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i;
  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    propFix: {
      'for': 'htmlFor',
      'class': 'className'
    },
    prop: function (elem, name, value) {
      var ret, hooks, notxml, nType = elem.nodeType;
      // Don't get/set properties on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
      if (notxml) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }
      if (value !== undefined) {
        return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
      } else {
        return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
      }
    },
    propHooks: {
      tabIndex: {
        get: function (elem) {
          return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
        }
      }
    }
  });
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      }
    };
  }
  jQuery.each([
    'tabIndex',
    'readOnly',
    'maxLength',
    'cellSpacing',
    'cellPadding',
    'rowSpan',
    'colSpan',
    'useMap',
    'frameBorder',
    'contentEditable'
  ], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  var rclass = /[\t\r\n\f]/g;
  jQuery.fn.extend({
    addClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === 'string' && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        // The disjunction here is for better compressibility (see removeClass)
        classes = (value || '').match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              if (cur.indexOf(' ' + clazz + ' ') < 0) {
                cur += clazz + ' ';
              }
            }
            // only assign if different to avoid unneeded rendering.
            finalValue = jQuery.trim(cur);
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    removeClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === 'string' && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || '').match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                cur = cur.replace(' ' + clazz + ' ', ' ');
              }
            }
            // Only assign if different to avoid unneeded rendering.
            finalValue = value ? jQuery.trim(cur) : '';
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    toggleClass: function (value, stateVal) {
      var type = typeof value;
      if (typeof stateVal === 'boolean' && type === 'string') {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
        });
      }
      return this.each(function () {
        if (type === 'string') {
          // Toggle individual class names
          var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }  // Toggle whole class name
        } else if (type === strundefined || type === 'boolean') {
          if (this.className) {
            // store className if set
            data_priv.set(this, '__className__', this.className);
          }
          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
        }
      });
    },
    hasClass: function (selector) {
      var className = ' ' + selector + ' ', i = 0, l = this.length;
      for (; i < l; i++) {
        if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function (value) {
      var hooks, ret, isFunction, elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
            return ret;
          }
          ret = elem.value;
          return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
        }
        return;
      }
      isFunction = jQuery.isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }
        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = '';
        } else if (typeof val === 'number') {
          val += '';
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? '' : value + '';
          });
        }
        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
        // If set returns undefined, fall back to normal setting
        if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, 'value');
          return val != null ? val : jQuery.trim(jQuery.text(elem));
        }
      },
      select: {
        get: function (elem) {
          var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];
            // IE6-9 doesn't update selected after form reset (#2551)
            if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
              // Get the specific value for the option
              value = jQuery(option).val();
              // We don't need an array for one selects
              if (one) {
                return value;
              }
              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function (elem, value) {
          var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
          while (i--) {
            option = options[i];
            if (option.selected = jQuery.inArray(option.value, values) >= 0) {
              optionSet = true;
            }
          }
          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });
  // Radios and checkboxes getter/setter
  jQuery.each([
    'radio',
    'checkbox'
  ], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute('value') === null ? 'on' : elem.value;
      };
    }
  });
  // Return jQuery for attributes-only inclusion
  jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
    }
  });
  var nonce = jQuery.now();
  var rquery = /\?/;
  // Support: Android 2.3
  // Workaround failure to string-cast null input
  jQuery.parseJSON = function (data) {
    return JSON.parse(data + '');
  };
  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, tmp;
    if (!data || typeof data !== 'string') {
      return null;
    }
    // Support: IE9
    try {
      tmp = new DOMParser();
      xml = tmp.parseFromString(data, 'text/xml');
    } catch (e) {
      xml = undefined;
    }
    if (!xml || xml.getElementsByTagName('parsererror').length) {
      jQuery.error('Invalid XML: ' + data);
    }
    return xml;
  };
  var rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
    prefilters = {},
    /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
    transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = '*/'.concat('*'),
    // Document location
    ajaxLocation = window.location.href,
    // Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== 'string') {
        func = dataTypeExpression;
        dataTypeExpression = '*';
      }
      var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
      if (jQuery.isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === '+') {
            dataType = dataType.slice(1) || '*';
            (structure[dataType] = structure[dataType] || []).unshift(func);  // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }
  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {}, seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
  }
  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
    return target;
  }
  /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === '*') {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
      }
    }
    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }
    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }
    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2, current, conv, tmp, prev, converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();
    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();
    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }
      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === '*') {
          current = prev;  // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== '*' && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + ' ' + current] || converters['* ' + current];
          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(' ');
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];  // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }
          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s['throws']) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: 'parsererror',
                  error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: 'success',
      data: response
    };
  }
  jQuery.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: ajaxLocation,
      type: 'GET',
      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
      global: true,
      processData: true,
      async: true,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      accepts: {
        '*': allTypes,
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript'
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: 'responseXML',
        text: 'responseText',
        json: 'responseJSON'
      },
      converters: {
        '* text': String,
        'text html': true,
        'text json': jQuery.parseJSON,
        'text xml': jQuery.parseXML
      },
      flatOptions: {
        url: true,
        context: true
      }
    },
    ajaxSetup: function (target, settings) {
      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === 'object') {
        options = url;
        url = undefined;
      }
      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString, responseHeaders,
        // timeout handle
        timeoutTimer,
        // Cross-domain detection vars
        parts,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {}, requestHeadersNames = {},
        // The jqXHR state
        state = 0,
        // Default abort message
        strAbort = 'canceled',
        // Fake xhr
        jqXHR = {
          readyState: 0,
          getResponseHeader: function (key) {
            var match;
            if (state === 2) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase()] = match[2];
                }
              }
              match = responseHeaders[key.toLowerCase()];
            }
            return match == null ? null : match;
          },
          getAllResponseHeaders: function () {
            return state === 2 ? responseHeadersString : null;
          },
          setRequestHeader: function (name, value) {
            var lname = name.toLowerCase();
            if (!state) {
              name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          overrideMimeType: function (type) {
            if (!state) {
              s.mimeType = type;
            }
            return this;
          },
          statusCode: function (map) {
            var code;
            if (map) {
              if (state < 2) {
                for (code in map) {
                  // Lazy-add the new callback in a way that preserves old ones
                  statusCode[code] = [
                    statusCode[code],
                    map[code]
                  ];
                }
              } else {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              }
            }
            return this;
          },
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };
      // Attach deferreds
      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;
      // Extract dataTypes list
      s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
      // A cross-domain request is in order when we have a protocol:host:port mismatch
      if (s.crossDomain == null) {
        parts = rurl.exec(s.url.toLowerCase());
        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
      }
      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== 'string') {
        s.data = jQuery.param(s.data, s.traditional);
      }
      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
      // If request was aborted inside a prefilter, stop there
      if (state === 2) {
        return jqXHR;
      }
      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
      fireGlobals = jQuery.event && s.global;
      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger('ajaxStart');
      }
      // Uppercase the type
      s.type = s.type.toUpperCase();
      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);
      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      cacheURL = s.url;
      // More options handling for requests with no content
      if (!s.hasContent) {
        // If data is available, append data to url
        if (s.data) {
          cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }
        // Add anti-cache in url if needed
        if (s.cache === false) {
          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + nonce++) : cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
        }
      }
      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
        }
      }
      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader('Content-Type', s.contentType);
      }
      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }
      // Aborting is no longer a cancellation
      strAbort = 'abort';
      // Install callbacks on deferreds
      for (i in {
          success: 1,
          error: 1,
          complete: 1
        }) {
        jqXHR[i](s[i]);
      }
      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
      // If no transport, we auto-abort
      if (!transport) {
        done(-1, 'No Transport');
      } else {
        jqXHR.readyState = 1;
        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger('ajaxSend', [
            jqXHR,
            s
          ]);
        }
        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = setTimeout(function () {
            jqXHR.abort('timeout');
          }, s.timeout);
        }
        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Propagate exception as error if not done
          if (state < 2) {
            done(-1, e);  // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }
      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
        // Called once
        if (state === 2) {
          return;
        }
        // State is "done" now
        state = 2;
        // Clear timeout if it exists
        if (timeoutTimer) {
          clearTimeout(timeoutTimer);
        }
        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;
        // Cache response headers
        responseHeadersString = headers || '';
        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;
        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;
        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }
        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);
        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader('Last-Modified');
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader('etag');
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }
          // if no content
          if (status === 204 || s.type === 'HEAD') {
            statusText = 'nocontent';  // if not modified
          } else if (status === 304) {
            statusText = 'notmodified';  // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = 'error';
            if (status < 0) {
              status = 0;
            }
          }
        }
        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + '';
        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [
            success,
            statusText,
            jqXHR
          ]);
        } else {
          deferred.rejectWith(callbackContext, [
            jqXHR,
            statusText,
            error
          ]);
        }
        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
            jqXHR,
            s,
            isSuccess ? success : error
          ]);
        }
        // Complete
        completeDeferred.fireWith(callbackContext, [
          jqXHR,
          statusText
        ]);
        if (fireGlobals) {
          globalEventContext.trigger('ajaxComplete', [
            jqXHR,
            s
          ]);
          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger('ajaxStop');
          }
        }
      }
      return jqXHR;
    },
    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, 'json');
    },
    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, 'script');
    }
  });
  jQuery.each([
    'get',
    'post'
  ], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }
      return jQuery.ajax({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      });
    };
  });
  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,
      type: 'GET',
      dataType: 'script',
      async: false,
      global: false,
      'throws': true
    });
  };
  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapAll(html.call(this, i));
        });
      }
      if (this[0]) {
        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function (html) {
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = jQuery(this), contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function (html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function () {
      return this.parent().each(function () {
        if (!jQuery.nodeName(this, 'body')) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });
  jQuery.expr.filters.hidden = function (elem) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
  };
  jQuery.expr.filters.visible = function (elem) {
    return !jQuery.expr.filters.hidden(elem);
  };
  var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (jQuery.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === 'object') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }
  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix, s = [], add = function (key, value) {
        // If value is a function, invoke it and return its value
        value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
        s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
      };
    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }
    // If an array was passed in, assume that it is an array of form elements.
    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }
    // Return the resulting serialization
    return s.join('&').replace(r20, '+');
  };
  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, 'elements');
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;
        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return {
            name: elem.name,
            value: val.replace(rCRLF, '\r\n')
          };
        }) : {
          name: elem.name,
          value: val.replace(rCRLF, '\r\n')
        };
      }).get();
    }
  });
  jQuery.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (e) {
    }
  };
  var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
      0: 200,
      1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
  // Support: IE9
  // Open requests must be manually aborted on unload (#5280)
  // See https://support.microsoft.com/kb/2856746 for more info
  if (window.attachEvent) {
    window.attachEvent('onunload', function () {
      for (var key in xhrCallbacks) {
        xhrCallbacks[key]();
      }
    });
  }
  support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var callback;
    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function (headers, complete) {
          var i, xhr = options.xhr(), id = ++xhrId;
          xhr.open(options.type, options.url, options.async, options.username, options.password);
          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }
          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }
          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }
          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }
          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                delete xhrCallbacks[id];
                callback = xhr.onload = xhr.onerror = null;
                if (type === 'abort') {
                  xhr.abort();
                } else if (type === 'error') {
                  complete(xhr.status, xhr.statusText);
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                }
              }
            };
          };
          // Listen to events
          xhr.onload = callback();
          xhr.onerror = callback('error');
          // Create the abort callback
          callback = xhrCallbacks[id] = callback('abort');
          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  // Install script dataType
  jQuery.ajaxSetup({
    accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
    contents: { script: /(?:java|ecma)script/ },
    converters: {
      'text script': function (text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });
  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter('script', function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = 'GET';
    }
  });
  // Bind script tag hack transport
  jQuery.ajaxTransport('script', function (s) {
    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery('<script>').prop({
            async: true,
            charset: s.scriptCharset,
            src: s.url
          }).on('load error', callback = function (evt) {
            script.remove();
            callback = null;
            if (evt) {
              complete(evt.type === 'error' ? 404 : 200, evt.type);
            }
          });
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
      this[callback] = true;
      return callback;
    }
  });
  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
    var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === 'jsonp') {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
      }
      // Use data converter to retrieve json after script execution
      s.converters['script json'] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + ' was not called');
        }
        return responseContainer[0];
      };
      // force json dataType
      s.dataTypes[0] = 'json';
      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };
      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // Restore preexisting value
        window[callbackName] = overwritten;
        // Save back as free
        if (s[callbackName]) {
          // make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;
          // save the callback name for future use
          oldCallbacks.push(callbackName);
        }
        // Call if it was a function and we have a response
        if (responseContainer && jQuery.isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });
      // Delegate to script
      return 'script';
    }
  });
  // data: string of html
  // context (optional): If specified, the fragment will be created in this context, defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (!data || typeof data !== 'string') {
      return null;
    }
    if (typeof context === 'boolean') {
      keepScripts = context;
      context = false;
    }
    context = context || document;
    var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = jQuery.buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }
    return jQuery.merge([], parsed.childNodes);
  };
  // Keep a copy of the old load method
  var _load = jQuery.fn.load;
  /**
 * Load a url into a page
 */
  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== 'string' && _load) {
      return _load.apply(this, arguments);
    }
    var selector, type, response, self = this, off = url.indexOf(' ');
    if (off >= 0) {
      selector = jQuery.trim(url.slice(off));
      url = url.slice(0, off);
    }
    // If it's a function
    if (jQuery.isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;  // Otherwise, build a param string
    } else if (params && typeof params === 'object') {
      type = 'POST';
    }
    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        type: type,
        dataType: 'html',
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
      }).complete(callback && function (jqXHR, status) {
        self.each(callback, response || [
          jqXHR.responseText,
          status,
          jqXHR
        ]);
      });
    }
    return this;
  };
  // Attach a bunch of functions for handling common AJAX events
  jQuery.each([
    'ajaxStart',
    'ajaxStop',
    'ajaxComplete',
    'ajaxError',
    'ajaxSuccess',
    'ajaxSend'
  ], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery.expr.filters.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  var docElem = window.document.documentElement;
  /**
 * Gets a window from an element
 */
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
  }
  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
      // Set position first, in-case top/left are set even on static elem
      if (position === 'static') {
        elem.style.position = 'relative';
      }
      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, 'top');
      curCSSLeft = jQuery.css(elem, 'left');
      calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(elem, i, curOffset);
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ('using' in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    offset: function (options) {
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }
      var docElem, win, elem = this[0], box = {
          top: 0,
          left: 0
        }, doc = elem && elem.ownerDocument;
      if (!doc) {
        return;
      }
      docElem = doc.documentElement;
      // Make sure it's not a disconnected DOM node
      if (!jQuery.contains(docElem, elem)) {
        return box;
      }
      // Support: BlackBerry 5, iOS 3 (original iPhone)
      // If we don't have gBCR, just use 0,0 rather than error
      if (typeof elem.getBoundingClientRect !== strundefined) {
        box = elem.getBoundingClientRect();
      }
      win = getWindow(doc);
      return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
      };
    },
    position: function () {
      if (!this[0]) {
        return;
      }
      var offsetParent, offset, elem = this[0], parentOffset = {
          top: 0,
          left: 0
        };
      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
      if (jQuery.css(elem, 'position') === 'fixed') {
        // Assume getBoundingClientRect is there when computed position is fixed
        offset = elem.getBoundingClientRect();
      } else {
        // Get *real* offsetParent
        offsetParent = this.offsetParent();
        // Get correct offsets
        offset = this.offset();
        if (!jQuery.nodeName(offsetParent[0], 'html')) {
          parentOffset = offsetParent.offset();
        }
        // Add offsetParent borders
        parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
        parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
      }
      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
        left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
      };
    },
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent || docElem;
        while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docElem;
      });
    }
  });
  // Create scrollLeft and scrollTop methods
  jQuery.each({
    scrollLeft: 'pageXOffset',
    scrollTop: 'pageYOffset'
  }, function (method, prop) {
    var top = 'pageYOffset' === prop;
    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        var win = getWindow(elem);
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length, null);
    };
  });
  // Support: Safari<7+, Chrome<37+
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each([
    'top',
    'left'
  ], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);
        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
      }
    });
  });
  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({
    Height: 'height',
    Width: 'width'
  }, function (name, type) {
    jQuery.each({
      padding: 'inner' + name,
      content: type,
      '': 'outer' + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
        return access(this, function (elem, type, value) {
          var doc;
          if (jQuery.isWindow(elem)) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement['client' + name];
          }
          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;
            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
          }
          return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable, null);
      };
    });
  });
  // The number of elements contained in the matched element set
  jQuery.fn.size = function () {
    return this.length;
  };
  jQuery.fn.andSelf = jQuery.fn.addBack;
  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
  if (typeof define === 'function' && define.amd) {
    define('jquery', [], function () {
      return jQuery;
    });
  }
  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;
  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }
    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }
    return jQuery;
  };
  // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if (typeof noGlobal === strundefined) {
    window.jQuery = window.$ = jQuery;
  }
  return jQuery;
}));
/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, document, undefined) {
  'use strict';
  /**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */
  function minErr(module, ErrorConstructor) {
    ErrorConstructor = ErrorConstructor || Error;
    return function () {
      var code = arguments[0], prefix = '[' + (module ? module + ':' : '') + code + '] ', template = arguments[1], templateArgs = arguments, message, i;
      message = prefix + template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1), arg;
        if (index + 2 < templateArgs.length) {
          return toDebugString(templateArgs[index + 2]);
        }
        return match;
      });
      message = message + '\nhttp://errors.angularjs.org/1.3.13/' + (module ? module + '/' : '') + code;
      for (i = 2; i < arguments.length; i++) {
        message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' + encodeURIComponent(toDebugString(arguments[i]));
      }
      return new ErrorConstructor(message);
    };
  }
  /* We need to tell jshint what variables are being exported */
  /* global angular: true,
  msie: true,
  jqLite: true,
  jQuery: true,
  slice: true,
  splice: true,
  push: true,
  toString: true,
  ngMinErr: true,
  angularModule: true,
  uid: true,
  REGEX_STRING_REGEXP: true,
  VALIDITY_STATE_PROPERTY: true,

  lowercase: true,
  uppercase: true,
  manualLowercase: true,
  manualUppercase: true,
  nodeName_: true,
  isArrayLike: true,
  forEach: true,
  sortedKeys: true,
  forEachSorted: true,
  reverseParams: true,
  nextUid: true,
  setHashKey: true,
  extend: true,
  int: true,
  inherit: true,
  noop: true,
  identity: true,
  valueFn: true,
  isUndefined: true,
  isDefined: true,
  isObject: true,
  isString: true,
  isNumber: true,
  isDate: true,
  isArray: true,
  isFunction: true,
  isRegExp: true,
  isWindow: true,
  isScope: true,
  isFile: true,
  isFormData: true,
  isBlob: true,
  isBoolean: true,
  isPromiseLike: true,
  trim: true,
  escapeForRegexp: true,
  isElement: true,
  makeMap: true,
  includes: true,
  arrayRemove: true,
  copy: true,
  shallowCopy: true,
  equals: true,
  csp: true,
  concat: true,
  sliceArgs: true,
  bind: true,
  toJsonReplacer: true,
  toJson: true,
  fromJson: true,
  startingTag: true,
  tryDecodeURIComponent: true,
  parseKeyValue: true,
  toKeyValue: true,
  encodeUriSegment: true,
  encodeUriQuery: true,
  angularInit: true,
  bootstrap: true,
  getTestability: true,
  snake_case: true,
  bindJQuery: true,
  assertArg: true,
  assertArgFn: true,
  assertNotHasOwnProperty: true,
  getter: true,
  getBlockNodes: true,
  hasOwnProperty: true,
  createMap: true,

  NODE_TYPE_ELEMENT: true,
  NODE_TYPE_TEXT: true,
  NODE_TYPE_COMMENT: true,
  NODE_TYPE_DOCUMENT: true,
  NODE_TYPE_DOCUMENT_FRAGMENT: true,
*/
  ////////////////////////////////////
  /**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */
  var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
  // The name of a form control's ValidityState property.
  // This is used so that it's possible for internal tests to create mock ValidityStates.
  var VALIDITY_STATE_PROPERTY = 'validity';
  /**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
  var lowercase = function (string) {
    return isString(string) ? string.toLowerCase() : string;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
  var uppercase = function (string) {
    return isString(string) ? string.toUpperCase() : string;
  };
  var manualLowercase = function (s) {
    /* jshint bitwise: false */
    return isString(s) ? s.replace(/[A-Z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) | 32);
    }) : s;
  };
  var manualUppercase = function (s) {
    /* jshint bitwise: false */
    return isString(s) ? s.replace(/[a-z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) & ~32);
    }) : s;
  };
  // String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
  // locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
  // with correct but slower alternatives.
  if ('i' !== 'I'.toLowerCase()) {
    lowercase = manualLowercase;
    uppercase = manualUppercase;
  }
  var msie,
    // holds major version number for IE, or NaN if UA is not IE.
    jqLite,
    // delay binding since jQuery could be loaded after us.
    jQuery,
    // delay binding
    slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, ngMinErr = minErr('ng'),
    /** @name angular */
    angular = window.angular || (window.angular = {}), angularModule, uid = 0;
  /**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
  msie = document.documentMode;
  /**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
  function isArrayLike(obj) {
    if (obj == null || isWindow(obj)) {
      return false;
    }
    var length = obj.length;
    if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
      return true;
    }
    return isString(obj) || isArray(obj) || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  /**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */
  function forEach(obj, iterator, context) {
    var key, length;
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          // Need to check if hasOwnProperty exists,
          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key, obj);
          }
        }
      } else if (isArray(obj) || isArrayLike(obj)) {
        var isPrimitive = typeof obj !== 'object';
        for (key = 0, length = obj.length; key < length; key++) {
          if (isPrimitive || key in obj) {
            iterator.call(context, obj[key], key, obj);
          }
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
      } else {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key, obj);
          }
        }
      }
    }
    return obj;
  }
  function sortedKeys(obj) {
    return Object.keys(obj).sort();
  }
  function forEachSorted(obj, iterator, context) {
    var keys = sortedKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i]);
    }
    return keys;
  }
  /**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
  function reverseParams(iteratorFn) {
    return function (value, key) {
      iteratorFn(key, value);
    };
  }
  /**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
  function nextUid() {
    return ++uid;
  }
  /**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h;
    } else {
      delete obj.$$hashKey;
    }
  }
  /**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
  function extend(dst) {
    var h = dst.$$hashKey;
    for (var i = 1, ii = arguments.length; i < ii; i++) {
      var obj = arguments[i];
      if (obj) {
        var keys = Object.keys(obj);
        for (var j = 0, jj = keys.length; j < jj; j++) {
          var key = keys[j];
          dst[key] = obj[key];
        }
      }
    }
    setHashKey(dst, h);
    return dst;
  }
  function int(str) {
    return parseInt(str, 10);
  }
  function inherit(parent, extra) {
    return extend(Object.create(parent), extra);
  }
  /**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
  function noop() {
  }
  noop.$inject = [];
  /**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
  * @param {*} value to be returned.
  * @returns {*} the value passed in.
 */
  function identity($) {
    return $;
  }
  identity.$inject = [];
  function valueFn(value) {
    return function () {
      return value;
    };
  }
  /**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
  function isUndefined(value) {
    return typeof value === 'undefined';
  }
  /**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
  function isDefined(value) {
    return typeof value !== 'undefined';
  }
  /**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
  function isObject(value) {
    // http://jsperf.com/isobject4
    return value !== null && typeof value === 'object';
  }
  /**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
  function isString(value) {
    return typeof value === 'string';
  }
  /**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
  function isNumber(value) {
    return typeof value === 'number';
  }
  /**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
  function isDate(value) {
    return toString.call(value) === '[object Date]';
  }
  /**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
  var isArray = Array.isArray;
  /**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]';
  }
  /**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
  function isWindow(obj) {
    return obj && obj.window === obj;
  }
  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch;
  }
  function isFile(obj) {
    return toString.call(obj) === '[object File]';
  }
  function isFormData(obj) {
    return toString.call(obj) === '[object FormData]';
  }
  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]';
  }
  function isBoolean(value) {
    return typeof value === 'boolean';
  }
  function isPromiseLike(obj) {
    return obj && isFunction(obj.then);
  }
  var trim = function (value) {
    return isString(value) ? value.trim() : value;
  };
  // Copied from:
  // http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
  // Prereq: s is a string.
  var escapeForRegexp = function (s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
  };
  /**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
  function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));  // we have an on and find method part of jQuery API
  }
  /**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++)
      obj[items[i]] = true;
    return obj;
  }
  function nodeName_(element) {
    return lowercase(element.nodeName || element[0] && element[0].nodeName);
  }
  function includes(array, obj) {
    return Array.prototype.indexOf.call(array, obj) != -1;
  }
  function arrayRemove(array, value) {
    var index = array.indexOf(value);
    if (index >= 0)
      array.splice(index, 1);
    return value;
  }
  /**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
  function copy(source, destination, stackSource, stackDest) {
    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws', 'Can\'t copy! Making copies of Window or Scope instances is not supported.');
    }
    if (!destination) {
      destination = source;
      if (source) {
        if (isArray(source)) {
          destination = copy(source, [], stackSource, stackDest);
        } else if (isDate(source)) {
          destination = new Date(source.getTime());
        } else if (isRegExp(source)) {
          destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
          destination.lastIndex = source.lastIndex;
        } else if (isObject(source)) {
          var emptyObject = Object.create(Object.getPrototypeOf(source));
          destination = copy(source, emptyObject, stackSource, stackDest);
        }
      }
    } else {
      if (source === destination)
        throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
      stackSource = stackSource || [];
      stackDest = stackDest || [];
      if (isObject(source)) {
        var index = stackSource.indexOf(source);
        if (index !== -1)
          return stackDest[index];
        stackSource.push(source);
        stackDest.push(destination);
      }
      var result;
      if (isArray(source)) {
        destination.length = 0;
        for (var i = 0; i < source.length; i++) {
          result = copy(source[i], null, stackSource, stackDest);
          if (isObject(source[i])) {
            stackSource.push(source[i]);
            stackDest.push(result);
          }
          destination.push(result);
        }
      } else {
        var h = destination.$$hashKey;
        if (isArray(destination)) {
          destination.length = 0;
        } else {
          forEach(destination, function (value, key) {
            delete destination[key];
          });
        }
        for (var key in source) {
          if (source.hasOwnProperty(key)) {
            result = copy(source[key], null, stackSource, stackDest);
            if (isObject(source[key])) {
              stackSource.push(source[key]);
              stackDest.push(result);
            }
            destination[key] = result;
          }
        }
        setHashKey(destination, h);
      }
    }
    return destination;
  }
  /**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || [];
      for (var i = 0, ii = src.length; i < ii; i++) {
        dst[i] = src[i];
      }
    } else if (isObject(src)) {
      dst = dst || {};
      for (var key in src) {
        if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key];
        }
      }
    }
    return dst || src;
  }
  /**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
  function equals(o1, o2) {
    if (o1 === o2)
      return true;
    if (o1 === null || o2 === null)
      return false;
    if (o1 !== o1 && o2 !== o2)
      return true;
    // NaN === NaN
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
    if (t1 == t2) {
      if (t1 == 'object') {
        if (isArray(o1)) {
          if (!isArray(o2))
            return false;
          if ((length = o1.length) == o2.length) {
            for (key = 0; key < length; key++) {
              if (!equals(o1[key], o2[key]))
                return false;
            }
            return true;
          }
        } else if (isDate(o1)) {
          if (!isDate(o2))
            return false;
          return equals(o1.getTime(), o2.getTime());
        } else if (isRegExp(o1) && isRegExp(o2)) {
          return o1.toString() == o2.toString();
        } else {
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2))
            return false;
          keySet = {};
          for (key in o1) {
            if (key.charAt(0) === '$' || isFunction(o1[key]))
              continue;
            if (!equals(o1[key], o2[key]))
              return false;
            keySet[key] = true;
          }
          for (key in o2) {
            if (!keySet.hasOwnProperty(key) && key.charAt(0) !== '$' && o2[key] !== undefined && !isFunction(o2[key]))
              return false;
          }
          return true;
        }
      }
    }
    return false;
  }
  var csp = function () {
    if (isDefined(csp.isActive_))
      return csp.isActive_;
    var active = !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]'));
    if (!active) {
      try {
        /* jshint -W031, -W054 */
        new Function('');  /* jshint +W031, +W054 */
      } catch (e) {
        active = true;
      }
    }
    return csp.isActive_ = active;
  };
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0);
  }
  /* jshint -W101 */
  /**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
  /* jshint +W101 */
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length ? function () {
        return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
      } : function () {
        return arguments.length ? fn.apply(self, arguments) : fn.call(self);
      };
    } else {
      // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
      return fn;
    }
  }
  function toJsonReplacer(key, value) {
    var val = value;
    if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
      val = undefined;
    } else if (isWindow(value)) {
      val = '$WINDOW';
    } else if (value && document === value) {
      val = '$DOCUMENT';
    } else if (isScope(value)) {
      val = '$SCOPE';
    }
    return val;
  }
  /**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean|number=} pretty If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation (the default is 2).
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
  function toJson(obj, pretty) {
    if (typeof obj === 'undefined')
      return undefined;
    if (!isNumber(pretty)) {
      pretty = pretty ? 2 : null;
    }
    return JSON.stringify(obj, toJsonReplacer, pretty);
  }
  /**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
  function fromJson(json) {
    return isString(json) ? JSON.parse(json) : json;
  }
  /**
 * @returns {string} Returns the string representation of the element.
 */
  function startingTag(element) {
    element = jqLite(element).clone();
    try {
      // turns out IE does not let you set .html() on elements which
      // are not allowed to have children. So we just ignore it.
      element.empty();
    } catch (e) {
    }
    var elemHtml = jqLite('<div>').append(element).html();
    try {
      return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (match, nodeName) {
        return '<' + lowercase(nodeName);
      });
    } catch (e) {
      return lowercase(elemHtml);
    }
  }
  /////////////////////////////////////////////////
  /**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value);
    } catch (e) {
    }
  }
  /**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
  function parseKeyValue(keyValue) {
    var obj = {}, key_value, key;
    forEach((keyValue || '').split('&'), function (keyValue) {
      if (keyValue) {
        key_value = keyValue.replace(/\+/g, '%20').split('=');
        key = tryDecodeURIComponent(key_value[0]);
        if (isDefined(key)) {
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
          if (!hasOwnProperty.call(obj, key)) {
            obj[key] = val;
          } else if (isArray(obj[key])) {
            obj[key].push(val);
          } else {
            obj[key] = [
              obj[key],
              val
            ];
          }
        }
      }
    });
    return obj;
  }
  function toKeyValue(obj) {
    var parts = [];
    forEach(obj, function (value, key) {
      if (isArray(value)) {
        forEach(value, function (arrayValue) {
          parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
        });
      } else {
        parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
      }
    });
    return parts.length ? parts.join('&') : '';
  }
  /**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
  }
  /**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
  }
  var ngAttrPrefixes = [
      'ng-',
      'data-ng-',
      'ng:',
      'x-ng-'
    ];
  function getNgAttribute(element, ngAttr) {
    var attr, i, ii = ngAttrPrefixes.length;
    element = jqLite(element);
    for (i = 0; i < ii; ++i) {
      attr = ngAttrPrefixes[i] + ngAttr;
      if (isString(attr = element.attr(attr))) {
        return attr;
      }
    }
    return null;
  }
  /**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = "World";
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
  function angularInit(element, bootstrap) {
    var appElement, module, config = {};
    // The element `element` has priority over any other element
    forEach(ngAttrPrefixes, function (prefix) {
      var name = prefix + 'app';
      if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
        appElement = element;
        module = element.getAttribute(name);
      }
    });
    forEach(ngAttrPrefixes, function (prefix) {
      var name = prefix + 'app';
      var candidate;
      if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
        appElement = candidate;
        module = candidate.getAttribute(name);
      }
    });
    if (appElement) {
      config.strictDi = getNgAttribute(appElement, 'strict-di') !== null;
      bootstrap(appElement, module ? [module] : [], config);
    }
  }
  /**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
  function bootstrap(element, modules, config) {
    if (!isObject(config))
      config = {};
    var defaultConfig = { strictDi: false };
    config = extend(defaultConfig, config);
    var doBootstrap = function () {
      element = jqLite(element);
      if (element.injector()) {
        var tag = element[0] === document ? 'document' : startingTag(element);
        //Encode angle brackets to prevent input from being sanitized to empty string #8683
        throw ngMinErr('btstrpd', 'App Already Bootstrapped with this Element \'{0}\'', tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
      }
      modules = modules || [];
      modules.unshift([
        '$provide',
        function ($provide) {
          $provide.value('$rootElement', element);
        }
      ]);
      if (config.debugInfoEnabled) {
        // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
        modules.push([
          '$compileProvider',
          function ($compileProvider) {
            $compileProvider.debugInfoEnabled(true);
          }
        ]);
      }
      modules.unshift('ng');
      var injector = createInjector(modules, config.strictDi);
      injector.invoke([
        '$rootScope',
        '$rootElement',
        '$compile',
        '$injector',
        function bootstrapApply(scope, element, compile, injector) {
          scope.$apply(function () {
            element.data('$injector', injector);
            compile(element)(scope);
          });
        }
      ]);
      return injector;
    };
    var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
    if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
      config.debugInfoEnabled = true;
      window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
    }
    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap();
    }
    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
    angular.resumeBootstrap = function (extraModules) {
      forEach(extraModules, function (module) {
        modules.push(module);
      });
      return doBootstrap();
    };
    if (isFunction(angular.resumeDeferredBootstrap)) {
      angular.resumeDeferredBootstrap();
    }
  }
  /**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
  function reloadWithDebugInfo() {
    window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
    window.location.reload();
  }
  /**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
  function getTestability(rootElement) {
    var injector = angular.element(rootElement).injector();
    if (!injector) {
      throw ngMinErr('test', 'no injector found for element argument to getTestability');
    }
    return injector.get('$$testability');
  }
  var SNAKE_CASE_REGEXP = /[A-Z]/g;
  function snake_case(name, separator) {
    separator = separator || '_';
    return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }
  var bindJQueryFired = false;
  var skipDestroyOnNextJQueryCleanData;
  function bindJQuery() {
    var originalCleanData;
    if (bindJQueryFired) {
      return;
    }
    // bind to jQuery if present;
    jQuery = window.jQuery;
    // Use jQuery if it exists with proper functionality, otherwise default to us.
    // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
    // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
    // versions. It will not work for sure with jQuery <1.7, though.
    if (jQuery && jQuery.fn.on) {
      jqLite = jQuery;
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: JQLitePrototype.controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData
      });
      // All nodes removed from the DOM via various jQuery APIs like .remove()
      // are passed through jQuery.cleanData. Monkey-patch this method to fire
      // the $destroy event on all removed nodes.
      originalCleanData = jQuery.cleanData;
      jQuery.cleanData = function (elems) {
        var events;
        if (!skipDestroyOnNextJQueryCleanData) {
          for (var i = 0, elem; (elem = elems[i]) != null; i++) {
            events = jQuery._data(elem, 'events');
            if (events && events.$destroy) {
              jQuery(elem).triggerHandler('$destroy');
            }
          }
        } else {
          skipDestroyOnNextJQueryCleanData = false;
        }
        originalCleanData(elems);
      };
    } else {
      jqLite = JQLite;
    }
    angular.element = jqLite;
    // Prevent double-proxying.
    bindJQueryFired = true;
  }
  /**
 * throw error if the argument is falsy.
 */
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', 'Argument \'{0}\' is {1}', name || '?', reason || 'required');
    }
    return arg;
  }
  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
    }
    assertArg(isFunction(arg), name, 'not a function, got ' + (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
    return arg;
  }
  /**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
    }
  }
  /**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
  //TODO(misko): this function needs to be removed
  function getter(obj, path, bindFnToScope) {
    if (!path)
      return obj;
    var keys = path.split('.');
    var key;
    var lastInstance = obj;
    var len = keys.length;
    for (var i = 0; i < len; i++) {
      key = keys[i];
      if (obj) {
        obj = (lastInstance = obj)[key];
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj);
    }
    return obj;
  }
  /**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {jqLite} jqLite collection containing the nodes
 */
  function getBlockNodes(nodes) {
    // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
    //             collection, otherwise update the original collection.
    var node = nodes[0];
    var endNode = nodes[nodes.length - 1];
    var blockNodes = [node];
    do {
      node = node.nextSibling;
      if (!node)
        break;
      blockNodes.push(node);
    } while (node !== endNode);
    return jqLite(blockNodes);
  }
  /**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
  function createMap() {
    return Object.create(null);
  }
  var NODE_TYPE_ELEMENT = 1;
  var NODE_TYPE_TEXT = 3;
  var NODE_TYPE_COMMENT = 8;
  var NODE_TYPE_DOCUMENT = 9;
  var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
  /**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */
  function setupModuleLoader(window) {
    var $injectorMinErr = minErr('$injector');
    var ngMinErr = minErr('ng');
    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory());
    }
    var angular = ensure(window, 'angular', Object);
    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
    angular.$$minErr = angular.$$minErr || minErr;
    return ensure(angular, 'module', function () {
      /** @type {Object.<string, angular.Module>} */
      var modules = {};
      /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
      return function module(name, requires, configFn) {
        var assertNotHasOwnProperty = function (name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
          }
        };
        assertNotHasOwnProperty(name, 'module');
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null;
        }
        return ensure(modules, name, function () {
          if (!requires) {
            throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' + 'the module name or forgot to load it. If registering a module ensure that you ' + 'specify the dependencies as the second argument.', name);
          }
          /** @type {!Array.<Array.<*>>} */
          var invokeQueue = [];
          /** @type {!Array.<Function>} */
          var configBlocks = [];
          /** @type {!Array.<Function>} */
          var runBlocks = [];
          var config = invokeLater('$injector', 'invoke', 'push', configBlocks);
          /** @type {angular.Module} */
          var moduleInstance = {
              _invokeQueue: invokeQueue,
              _configBlocks: configBlocks,
              _runBlocks: runBlocks,
              requires: requires,
              name: name,
              provider: invokeLater('$provide', 'provider'),
              factory: invokeLater('$provide', 'factory'),
              service: invokeLater('$provide', 'service'),
              value: invokeLater('$provide', 'value'),
              constant: invokeLater('$provide', 'constant', 'unshift'),
              animation: invokeLater('$animateProvider', 'register'),
              filter: invokeLater('$filterProvider', 'register'),
              controller: invokeLater('$controllerProvider', 'register'),
              directive: invokeLater('$compileProvider', 'directive'),
              config: config,
              run: function (block) {
                runBlocks.push(block);
                return this;
              }
            };
          if (configFn) {
            config(configFn);
          }
          return moduleInstance;
          /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
          function invokeLater(provider, method, insertMethod, queue) {
            if (!queue)
              queue = invokeQueue;
            return function () {
              queue[insertMethod || 'push']([
                provider,
                method,
                arguments
              ]);
              return moduleInstance;
            };
          }
        });
      };
    });
  }
  /* global: toDebugString: true */
  function serializeObject(obj) {
    var seen = [];
    return JSON.stringify(obj, function (key, val) {
      val = toJsonReplacer(key, val);
      if (isObject(val)) {
        if (seen.indexOf(val) >= 0)
          return '<<already seen>>';
        seen.push(val);
      }
      return val;
    });
  }
  function toDebugString(obj) {
    if (typeof obj === 'function') {
      return obj.toString().replace(/ \{[\s\S]*$/, '');
    } else if (typeof obj === 'undefined') {
      return 'undefined';
    } else if (typeof obj !== 'string') {
      return serializeObject(obj);
    }
    return obj;
  }
  /* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  styleDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCspDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DocumentProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpBackendProvider,
  $LocationProvider,
  $LogProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $$AsyncCallbackProvider,
  $WindowProvider,
  $$jqLiteProvider
*/
  /**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
  var version = {
      full: '1.3.13',
      major: 1,
      minor: 3,
      dot: 13,
      codeName: 'meticulous-riffleshuffle'
    };
  function publishExternalAPI(angular) {
    extend(angular, {
      'bootstrap': bootstrap,
      'copy': copy,
      'extend': extend,
      'equals': equals,
      'element': jqLite,
      'forEach': forEach,
      'injector': createInjector,
      'noop': noop,
      'bind': bind,
      'toJson': toJson,
      'fromJson': fromJson,
      'identity': identity,
      'isUndefined': isUndefined,
      'isDefined': isDefined,
      'isString': isString,
      'isFunction': isFunction,
      'isObject': isObject,
      'isNumber': isNumber,
      'isElement': isElement,
      'isArray': isArray,
      'version': version,
      'isDate': isDate,
      'lowercase': lowercase,
      'uppercase': uppercase,
      'callbacks': { counter: 0 },
      'getTestability': getTestability,
      '$$minErr': minErr,
      '$$csp': csp,
      'reloadWithDebugInfo': reloadWithDebugInfo
    });
    angularModule = setupModuleLoader(window);
    try {
      angularModule('ngLocale');
    } catch (e) {
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
    }
    angularModule('ng', ['ngLocale'], [
      '$provide',
      function ngModule($provide) {
        // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
        $provide.provider({ $$sanitizeUri: $$SanitizeUriProvider });
        $provide.provider('$compile', $CompileProvider).directive({
          a: htmlAnchorDirective,
          input: inputDirective,
          textarea: inputDirective,
          form: formDirective,
          script: scriptDirective,
          select: selectDirective,
          style: styleDirective,
          option: optionDirective,
          ngBind: ngBindDirective,
          ngBindHtml: ngBindHtmlDirective,
          ngBindTemplate: ngBindTemplateDirective,
          ngClass: ngClassDirective,
          ngClassEven: ngClassEvenDirective,
          ngClassOdd: ngClassOddDirective,
          ngCloak: ngCloakDirective,
          ngController: ngControllerDirective,
          ngForm: ngFormDirective,
          ngHide: ngHideDirective,
          ngIf: ngIfDirective,
          ngInclude: ngIncludeDirective,
          ngInit: ngInitDirective,
          ngNonBindable: ngNonBindableDirective,
          ngPluralize: ngPluralizeDirective,
          ngRepeat: ngRepeatDirective,
          ngShow: ngShowDirective,
          ngStyle: ngStyleDirective,
          ngSwitch: ngSwitchDirective,
          ngSwitchWhen: ngSwitchWhenDirective,
          ngSwitchDefault: ngSwitchDefaultDirective,
          ngOptions: ngOptionsDirective,
          ngTransclude: ngTranscludeDirective,
          ngModel: ngModelDirective,
          ngList: ngListDirective,
          ngChange: ngChangeDirective,
          pattern: patternDirective,
          ngPattern: patternDirective,
          required: requiredDirective,
          ngRequired: requiredDirective,
          minlength: minlengthDirective,
          ngMinlength: minlengthDirective,
          maxlength: maxlengthDirective,
          ngMaxlength: maxlengthDirective,
          ngValue: ngValueDirective,
          ngModelOptions: ngModelOptionsDirective
        }).directive({ ngInclude: ngIncludeFillContentDirective }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
        $provide.provider({
          $anchorScroll: $AnchorScrollProvider,
          $animate: $AnimateProvider,
          $browser: $BrowserProvider,
          $cacheFactory: $CacheFactoryProvider,
          $controller: $ControllerProvider,
          $document: $DocumentProvider,
          $exceptionHandler: $ExceptionHandlerProvider,
          $filter: $FilterProvider,
          $interpolate: $InterpolateProvider,
          $interval: $IntervalProvider,
          $http: $HttpProvider,
          $httpBackend: $HttpBackendProvider,
          $location: $LocationProvider,
          $log: $LogProvider,
          $parse: $ParseProvider,
          $rootScope: $RootScopeProvider,
          $q: $QProvider,
          $$q: $$QProvider,
          $sce: $SceProvider,
          $sceDelegate: $SceDelegateProvider,
          $sniffer: $SnifferProvider,
          $templateCache: $TemplateCacheProvider,
          $templateRequest: $TemplateRequestProvider,
          $$testability: $$TestabilityProvider,
          $timeout: $TimeoutProvider,
          $window: $WindowProvider,
          $$rAF: $$RAFProvider,
          $$asyncCallback: $$AsyncCallbackProvider,
          $$jqLite: $$jqLiteProvider
        });
      }
    ]);
  }
  /* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true,
*/
  //////////////////////////////////
  //JQLite
  //////////////////////////////////
  /**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */
  JQLite.expando = 'ng339';
  var jqCache = JQLite.cache = {}, jqId = 1, addEventListenerFn = function (element, type, fn) {
      element.addEventListener(type, fn, false);
    }, removeEventListenerFn = function (element, type, fn) {
      element.removeEventListener(type, fn, false);
    };
  /*
 * !!! This is an undocumented "private" function !!!
 */
  JQLite._data = function (node) {
    //jQuery always returns an object on cache miss
    return this.cache[node[this.expando]] || {};
  };
  function jqNextId() {
    return ++jqId;
  }
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var MOUSE_EVENT_MAP = {
      mouseleave: 'mouseout',
      mouseenter: 'mouseover'
    };
  var jqLiteMinErr = minErr('jqLite');
  /**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
  function camelCase(name) {
    return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).replace(MOZ_HACK_REGEXP, 'Moz$1');
  }
  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var HTML_REGEXP = /<|&#?\w+;/;
  var TAG_NAME_REGEXP = /<([\w:]+)/;
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
  var wrapMap = {
      'option': [
        1,
        '<select multiple="multiple">',
        '</select>'
      ],
      'thead': [
        1,
        '<table>',
        '</table>'
      ],
      'col': [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      'tr': [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      'td': [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      '_default': [
        0,
        '',
        ''
      ]
    };
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html);
  }
  function jqLiteAcceptsData(node) {
    // The window object can accept data but has no nodeType
    // Otherwise we are only interested in elements (1) and documents (9)
    var nodeType = node.nodeType;
    return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
  }
  function jqLiteBuildFragment(html, context) {
    var tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i;
    if (jqLiteIsTextNode(html)) {
      // Convert non-html into a text node
      nodes.push(context.createTextNode(html));
    } else {
      // Convert html into DOM nodes
      tmp = tmp || fragment.appendChild(context.createElement('div'));
      tag = (TAG_NAME_REGEXP.exec(html) || [
        '',
        ''
      ])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];
      // Descend through wrappers to the right content
      i = wrap[0];
      while (i--) {
        tmp = tmp.lastChild;
      }
      nodes = concat(nodes, tmp.childNodes);
      tmp = fragment.firstChild;
      tmp.textContent = '';
    }
    // Remove wrapper from fragment
    fragment.textContent = '';
    fragment.innerHTML = '';
    // Clear inner HTML
    forEach(nodes, function (node) {
      fragment.appendChild(node);
    });
    return fragment;
  }
  function jqLiteParseHTML(html, context) {
    context = context || document;
    var parsed;
    if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
      return [context.createElement(parsed[1])];
    }
    if (parsed = jqLiteBuildFragment(html, context)) {
      return parsed.childNodes;
    }
    return [];
  }
  /////////////////////////////////////////////
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element;
    }
    var argIsString;
    if (isString(element)) {
      element = trim(element);
      argIsString = true;
    }
    if (!(this instanceof JQLite)) {
      if (argIsString && element.charAt(0) != '<') {
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }
      return new JQLite(element);
    }
    if (argIsString) {
      jqLiteAddNodes(this, jqLiteParseHTML(element));
    } else {
      jqLiteAddNodes(this, element);
    }
  }
  function jqLiteClone(element) {
    return element.cloneNode(true);
  }
  function jqLiteDealoc(element, onlyDescendants) {
    if (!onlyDescendants)
      jqLiteRemoveData(element);
    if (element.querySelectorAll) {
      var descendants = element.querySelectorAll('*');
      for (var i = 0, l = descendants.length; i < l; i++) {
        jqLiteRemoveData(descendants[i]);
      }
    }
  }
  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported))
      throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var handle = expandoStore && expandoStore.handle;
    if (!handle)
      return;
    //no listeners registered
    if (!type) {
      for (type in events) {
        if (type !== '$destroy') {
          removeEventListenerFn(element, type, handle);
        }
        delete events[type];
      }
    } else {
      forEach(type.split(' '), function (type) {
        if (isDefined(fn)) {
          var listenerFns = events[type];
          arrayRemove(listenerFns || [], fn);
          if (listenerFns && listenerFns.length > 0) {
            return;
          }
        }
        removeEventListenerFn(element, type, handle);
        delete events[type];
      });
    }
  }
  function jqLiteRemoveData(element, name) {
    var expandoId = element.ng339;
    var expandoStore = expandoId && jqCache[expandoId];
    if (expandoStore) {
      if (name) {
        delete expandoStore.data[name];
        return;
      }
      if (expandoStore.handle) {
        if (expandoStore.events.$destroy) {
          expandoStore.handle({}, '$destroy');
        }
        jqLiteOff(element);
      }
      delete jqCache[expandoId];
      element.ng339 = undefined;  // don't delete DOM expandos. IE and Chrome don't like it
    }
  }
  function jqLiteExpandoStore(element, createIfNecessary) {
    var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
    if (createIfNecessary && !expandoStore) {
      element.ng339 = expandoId = jqNextId();
      expandoStore = jqCache[expandoId] = {
        events: {},
        data: {},
        handle: undefined
      };
    }
    return expandoStore;
  }
  function jqLiteData(element, key, value) {
    if (jqLiteAcceptsData(element)) {
      var isSimpleSetter = isDefined(value);
      var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
      var massGetter = !key;
      var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
      var data = expandoStore && expandoStore.data;
      if (isSimpleSetter) {
        // data('key', value)
        data[key] = value;
      } else {
        if (massGetter) {
          // data()
          return data;
        } else {
          if (isSimpleGetter) {
            // data('key')
            // don't force creation of expandoStore if it doesn't exist yet
            return data && data[key];
          } else {
            // mass-setter: data({key1: val1, key2: val2})
            extend(data, key);
          }
        }
      }
    }
  }
  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute)
      return false;
    return (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + selector + ' ') > -1;
  }
  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      forEach(cssClasses.split(' '), function (cssClass) {
        element.setAttribute('class', trim((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').replace(' ' + trim(cssClass) + ' ', ' ')));
      });
    }
  }
  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ');
      forEach(cssClasses.split(' '), function (cssClass) {
        cssClass = trim(cssClass);
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
          existingClasses += cssClass + ' ';
        }
      });
      element.setAttribute('class', trim(existingClasses));
    }
  }
  function jqLiteAddNodes(root, elements) {
    // THIS CODE IS VERY HOT. Don't make changes without benchmarking.
    if (elements) {
      // if a Node (the most common case)
      if (elements.nodeType) {
        root[root.length++] = elements;
      } else {
        var length = elements.length;
        // if an Array or NodeList and not a Window
        if (typeof length === 'number' && elements.window !== elements) {
          if (length) {
            for (var i = 0; i < length; i++) {
              root[root.length++] = elements[i];
            }
          }
        } else {
          root[root.length++] = elements;
        }
      }
    }
  }
  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
  }
  function jqLiteInheritedData(element, name, value) {
    // if element is the document object work with the html element instead
    // this makes $(document).scope() possible
    if (element.nodeType == NODE_TYPE_DOCUMENT) {
      element = element.documentElement;
    }
    var names = isArray(name) ? name : [name];
    while (element) {
      for (var i = 0, ii = names.length; i < ii; i++) {
        if ((value = jqLite.data(element, names[i])) !== undefined)
          return value;
      }
      // If dealing with a document fragment node with a host element, and no parent, use the host
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
      // to lookup parent controllers.
      element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
    }
  }
  function jqLiteEmpty(element) {
    jqLiteDealoc(element, true);
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }
  function jqLiteRemove(element, keepData) {
    if (!keepData)
      jqLiteDealoc(element);
    var parent = element.parentNode;
    if (parent)
      parent.removeChild(element);
  }
  function jqLiteDocumentLoaded(action, win) {
    win = win || window;
    if (win.document.readyState === 'complete') {
      // Force the action to be run async for consistent behaviour
      // from the action's point of view
      // i.e. it will definitely not be in a $apply
      win.setTimeout(action);
    } else {
      // No need to unbind this handler as load is only ever called once
      jqLite(win).on('load', action);
    }
  }
  //////////////////////////////////////////
  // Functions which are declared directly.
  //////////////////////////////////////////
  var JQLitePrototype = JQLite.prototype = {
      ready: function (fn) {
        var fired = false;
        function trigger() {
          if (fired)
            return;
          fired = true;
          fn();
        }
        // check if document is already loaded
        if (document.readyState === 'complete') {
          setTimeout(trigger);
        } else {
          this.on('DOMContentLoaded', trigger);
          // works for modern browsers and IE9
          // we can not use jqLite since we are not done loading and jQuery could be loaded later.
          // jshint -W064
          JQLite(window).on('load', trigger);  // fallback to window.onload for others
                                               // jshint +W064
        }
      },
      toString: function () {
        var value = [];
        forEach(this, function (e) {
          value.push('' + e);
        });
        return '[' + value.join(', ') + ']';
      },
      eq: function (index) {
        return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
      },
      length: 0,
      push: push,
      sort: [].sort,
      splice: [].splice
    };
  //////////////////////////////////////////
  // Functions iterating getter/setters.
  // these functions return self on setter and
  // value on get.
  //////////////////////////////////////////
  var BOOLEAN_ATTR = {};
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
    BOOLEAN_ATTR[lowercase(value)] = value;
  });
  var BOOLEAN_ELEMENTS = {};
  forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
    BOOLEAN_ELEMENTS[value] = true;
  });
  var ALIASED_ATTR = {
      'ngMinlength': 'minlength',
      'ngMaxlength': 'maxlength',
      'ngMin': 'min',
      'ngMax': 'max',
      'ngPattern': 'pattern'
    };
  function getBooleanAttrName(element, name) {
    // check dom last since we will most likely fail on name
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
    // booleanAttr is here twice to minimize DOM access
    return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
  }
  function getAliasedAttrName(element, name) {
    var nodeName = element.nodeName;
    return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
  }
  forEach({
    data: jqLiteData,
    removeData: jqLiteRemoveData
  }, function (fn, name) {
    JQLite[name] = fn;
  });
  forEach({
    data: jqLiteData,
    inheritedData: jqLiteInheritedData,
    scope: function (element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, [
        '$isolateScope',
        '$scope'
      ]);
    },
    isolateScope: function (element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
    },
    controller: jqLiteController,
    injector: function (element) {
      return jqLiteInheritedData(element, '$injector');
    },
    removeAttr: function (element, name) {
      element.removeAttribute(name);
    },
    hasClass: jqLiteHasClass,
    css: function (element, name, value) {
      name = camelCase(name);
      if (isDefined(value)) {
        element.style[name] = value;
      } else {
        return element.style[name];
      }
    },
    attr: function (element, name, value) {
      var lowercasedName = lowercase(name);
      if (BOOLEAN_ATTR[lowercasedName]) {
        if (isDefined(value)) {
          if (!!value) {
            element[name] = true;
            element.setAttribute(name, lowercasedName);
          } else {
            element[name] = false;
            element.removeAttribute(lowercasedName);
          }
        } else {
          return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
        }
      } else if (isDefined(value)) {
        element.setAttribute(name, value);
      } else if (element.getAttribute) {
        // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
        // some elements (e.g. Document) don't have get attribute, so return undefined
        var ret = element.getAttribute(name, 2);
        // normalize non-existing attributes to undefined (as jQuery)
        return ret === null ? undefined : ret;
      }
    },
    prop: function (element, name, value) {
      if (isDefined(value)) {
        element[name] = value;
      } else {
        return element[name];
      }
    },
    text: function () {
      getText.$dv = '';
      return getText;
      function getText(element, value) {
        if (isUndefined(value)) {
          var nodeType = element.nodeType;
          return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : '';
        }
        element.textContent = value;
      }
    }(),
    val: function (element, value) {
      if (isUndefined(value)) {
        if (element.multiple && nodeName_(element) === 'select') {
          var result = [];
          forEach(element.options, function (option) {
            if (option.selected) {
              result.push(option.value || option.text);
            }
          });
          return result.length === 0 ? null : result;
        }
        return element.value;
      }
      element.value = value;
    },
    html: function (element, value) {
      if (isUndefined(value)) {
        return element.innerHTML;
      }
      jqLiteDealoc(element, true);
      element.innerHTML = value;
    },
    empty: jqLiteEmpty
  }, function (fn, name) {
    /**
   * Properties: writes return selection, reads return first value
   */
    JQLite.prototype[name] = function (arg1, arg2) {
      var i, key;
      var nodeCount = this.length;
      // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
      // in a way that survives minification.
      // jqLiteEmpty takes no arguments but is a setter.
      if (fn !== jqLiteEmpty && (fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2) === undefined) {
        if (isObject(arg1)) {
          // we are a write, but the object properties are the key/values
          for (i = 0; i < nodeCount; i++) {
            if (fn === jqLiteData) {
              // data() takes the whole object in jQuery
              fn(this[i], arg1);
            } else {
              for (key in arg1) {
                fn(this[i], key, arg1[key]);
              }
            }
          }
          // return self for chaining
          return this;
        } else {
          // we are a read, so read the first child.
          // TODO: do we still need this?
          var value = fn.$dv;
          // Only if we have $dv do we iterate over all, otherwise it is just the first element.
          var jj = value === undefined ? Math.min(nodeCount, 1) : nodeCount;
          for (var j = 0; j < jj; j++) {
            var nodeValue = fn(this[j], arg1, arg2);
            value = value ? value + nodeValue : nodeValue;
          }
          return value;
        }
      } else {
        // we are a write, so apply to all children
        for (i = 0; i < nodeCount; i++) {
          fn(this[i], arg1, arg2);
        }
        // return self for chaining
        return this;
      }
    };
  });
  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      // jQuery specific api
      event.isDefaultPrevented = function () {
        return event.defaultPrevented;
      };
      var eventFns = events[type || event.type];
      var eventFnsLength = eventFns ? eventFns.length : 0;
      if (!eventFnsLength)
        return;
      if (isUndefined(event.immediatePropagationStopped)) {
        var originalStopImmediatePropagation = event.stopImmediatePropagation;
        event.stopImmediatePropagation = function () {
          event.immediatePropagationStopped = true;
          if (event.stopPropagation) {
            event.stopPropagation();
          }
          if (originalStopImmediatePropagation) {
            originalStopImmediatePropagation.call(event);
          }
        };
      }
      event.isImmediatePropagationStopped = function () {
        return event.immediatePropagationStopped === true;
      };
      // Copy event handlers in case event handlers array is modified during execution.
      if (eventFnsLength > 1) {
        eventFns = shallowCopy(eventFns);
      }
      for (var i = 0; i < eventFnsLength; i++) {
        if (!event.isImmediatePropagationStopped()) {
          eventFns[i].call(element, event);
        }
      }
    };
    // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
    //       events on `element`
    eventHandler.elem = element;
    return eventHandler;
  }
  //////////////////////////////////////////
  // Functions iterating traversal.
  // These functions chain results into a single
  // selector.
  //////////////////////////////////////////
  forEach({
    removeData: jqLiteRemoveData,
    on: function jqLiteOn(element, type, fn, unsupported) {
      if (isDefined(unsupported))
        throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
      // Do not add event handlers to non-elements because they will not be cleaned up.
      if (!jqLiteAcceptsData(element)) {
        return;
      }
      var expandoStore = jqLiteExpandoStore(element, true);
      var events = expandoStore.events;
      var handle = expandoStore.handle;
      if (!handle) {
        handle = expandoStore.handle = createEventHandler(element, events);
      }
      // http://jsperf.com/string-indexof-vs-split
      var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
      var i = types.length;
      while (i--) {
        type = types[i];
        var eventFns = events[type];
        if (!eventFns) {
          events[type] = [];
          if (type === 'mouseenter' || type === 'mouseleave') {
            // Refer to jQuery's implementation of mouseenter & mouseleave
            // Read about mouseenter and mouseleave:
            // http://www.quirksmode.org/js/events_mouse.html#link8
            jqLiteOn(element, MOUSE_EVENT_MAP[type], function (event) {
              var target = this, related = event.relatedTarget;
              // For mousenter/leave call the handler if related is outside the target.
              // NB: No relatedTarget if the mouse left/entered the browser window
              if (!related || related !== target && !target.contains(related)) {
                handle(event, type);
              }
            });
          } else {
            if (type !== '$destroy') {
              addEventListenerFn(element, type, handle);
            }
          }
          eventFns = events[type];
        }
        eventFns.push(fn);
      }
    },
    off: jqLiteOff,
    one: function (element, type, fn) {
      element = jqLite(element);
      //add the listener twice so that when it is called
      //you can remove the original function and still be
      //able to call element.off(ev, fn) normally
      element.on(type, function onFn() {
        element.off(type, fn);
        element.off(type, onFn);
      });
      element.on(type, fn);
    },
    replaceWith: function (element, replaceNode) {
      var index, parent = element.parentNode;
      jqLiteDealoc(element);
      forEach(new JQLite(replaceNode), function (node) {
        if (index) {
          parent.insertBefore(node, index.nextSibling);
        } else {
          parent.replaceChild(node, element);
        }
        index = node;
      });
    },
    children: function (element) {
      var children = [];
      forEach(element.childNodes, function (element) {
        if (element.nodeType === NODE_TYPE_ELEMENT)
          children.push(element);
      });
      return children;
    },
    contents: function (element) {
      return element.contentDocument || element.childNodes || [];
    },
    append: function (element, node) {
      var nodeType = element.nodeType;
      if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT)
        return;
      node = new JQLite(node);
      for (var i = 0, ii = node.length; i < ii; i++) {
        var child = node[i];
        element.appendChild(child);
      }
    },
    prepend: function (element, node) {
      if (element.nodeType === NODE_TYPE_ELEMENT) {
        var index = element.firstChild;
        forEach(new JQLite(node), function (child) {
          element.insertBefore(child, index);
        });
      }
    },
    wrap: function (element, wrapNode) {
      wrapNode = jqLite(wrapNode).eq(0).clone()[0];
      var parent = element.parentNode;
      if (parent) {
        parent.replaceChild(wrapNode, element);
      }
      wrapNode.appendChild(element);
    },
    remove: jqLiteRemove,
    detach: function (element) {
      jqLiteRemove(element, true);
    },
    after: function (element, newElement) {
      var index = element, parent = element.parentNode;
      newElement = new JQLite(newElement);
      for (var i = 0, ii = newElement.length; i < ii; i++) {
        var node = newElement[i];
        parent.insertBefore(node, index.nextSibling);
        index = node;
      }
    },
    addClass: jqLiteAddClass,
    removeClass: jqLiteRemoveClass,
    toggleClass: function (element, selector, condition) {
      if (selector) {
        forEach(selector.split(' '), function (className) {
          var classCondition = condition;
          if (isUndefined(classCondition)) {
            classCondition = !jqLiteHasClass(element, className);
          }
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
        });
      }
    },
    parent: function (element) {
      var parent = element.parentNode;
      return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
    },
    next: function (element) {
      return element.nextElementSibling;
    },
    find: function (element, selector) {
      if (element.getElementsByTagName) {
        return element.getElementsByTagName(selector);
      } else {
        return [];
      }
    },
    clone: jqLiteClone,
    triggerHandler: function (element, event, extraParameters) {
      var dummyEvent, eventFnsCopy, handlerArgs;
      var eventName = event.type || event;
      var expandoStore = jqLiteExpandoStore(element);
      var events = expandoStore && expandoStore.events;
      var eventFns = events && events[eventName];
      if (eventFns) {
        // Create a dummy event to pass to the handlers
        dummyEvent = {
          preventDefault: function () {
            this.defaultPrevented = true;
          },
          isDefaultPrevented: function () {
            return this.defaultPrevented === true;
          },
          stopImmediatePropagation: function () {
            this.immediatePropagationStopped = true;
          },
          isImmediatePropagationStopped: function () {
            return this.immediatePropagationStopped === true;
          },
          stopPropagation: noop,
          type: eventName,
          target: element
        };
        // If a custom event was provided then extend our dummy event with it
        if (event.type) {
          dummyEvent = extend(dummyEvent, event);
        }
        // Copy event handlers in case event handlers array is modified during execution.
        eventFnsCopy = shallowCopy(eventFns);
        handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
        forEach(eventFnsCopy, function (fn) {
          if (!dummyEvent.isImmediatePropagationStopped()) {
            fn.apply(element, handlerArgs);
          }
        });
      }
    }
  }, function (fn, name) {
    /**
   * chaining functions
   */
    JQLite.prototype[name] = function (arg1, arg2, arg3) {
      var value;
      for (var i = 0, ii = this.length; i < ii; i++) {
        if (isUndefined(value)) {
          value = fn(this[i], arg1, arg2, arg3);
          if (isDefined(value)) {
            // any function which returns a value needs to be wrapped
            value = jqLite(value);
          }
        } else {
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
        }
      }
      return isDefined(value) ? value : this;
    };
    // bind legacy bind/unbind to on/off
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
  });
  // Provider for private $$jqLite service
  function $$jqLiteProvider() {
    this.$get = function $$jqLite() {
      return extend(JQLite, {
        hasClass: function (node, classes) {
          if (node.attr)
            node = node[0];
          return jqLiteHasClass(node, classes);
        },
        addClass: function (node, classes) {
          if (node.attr)
            node = node[0];
          return jqLiteAddClass(node, classes);
        },
        removeClass: function (node, classes) {
          if (node.attr)
            node = node[0];
          return jqLiteRemoveClass(node, classes);
        }
      });
    };
  }
  /**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
  function hashKey(obj, nextUidFn) {
    var key = obj && obj.$$hashKey;
    if (key) {
      if (typeof key === 'function') {
        key = obj.$$hashKey();
      }
      return key;
    }
    var objType = typeof obj;
    if (objType == 'function' || objType == 'object' && obj !== null) {
      key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
    } else {
      key = objType + ':' + obj;
    }
    return key;
  }
  /**
 * HashMap which can use objects as keys
 */
  function HashMap(array, isolatedUid) {
    if (isolatedUid) {
      var uid = 0;
      this.nextUid = function () {
        return ++uid;
      };
    }
    forEach(array, this.put, this);
  }
  HashMap.prototype = {
    put: function (key, value) {
      this[hashKey(key, this.nextUid)] = value;
    },
    get: function (key) {
      return this[hashKey(key, this.nextUid)];
    },
    remove: function (key) {
      var value = this[key = hashKey(key, this.nextUid)];
      delete this[key];
      return value;
    }
  };
  /**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */
  /**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */
  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
  var $injectorMinErr = minErr('$injector');
  function anonFn(fn) {
    // For anonymous functions, showing at the very least the function signature can help in
    // debugging.
    var fnText = fn.toString().replace(STRIP_COMMENTS, ''), args = fnText.match(FN_ARGS);
    if (args) {
      return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
    }
    return 'fn';
  }
  function annotate(fn, strictDi, name) {
    var $inject, fnText, argDecl, last;
    if (typeof fn === 'function') {
      if (!($inject = fn.$inject)) {
        $inject = [];
        if (fn.length) {
          if (strictDi) {
            if (!isString(name) || !name) {
              name = fn.name || anonFn(fn);
            }
            throw $injectorMinErr('strictdi', '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
          }
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
            arg.replace(FN_ARG, function (all, underscore, name) {
              $inject.push(name);
            });
          });
        }
        fn.$inject = $inject;
      }
    } else if (isArray(fn)) {
      last = fn.length - 1;
      assertArgFn(fn[last], 'fn');
      $inject = fn.slice(0, last);
    } else {
      assertArgFn(fn, 'fn', true);
    }
    return $inject;
  }
  ///////////////////////////////////////
  /**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */
  /**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */
  /**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!Function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */
  /**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */
  /**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */
  /**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */
  /**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */
  /**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */
  function createInjector(modulesToLoad, strictDi) {
    strictDi = strictDi === true;
    var INSTANTIATING = {}, providerSuffix = 'Provider', path = [], loadedModules = new HashMap([], true), providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator
        }
      }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function (serviceName, caller) {
        if (angular.isString(caller)) {
          path.push(caller);
        }
        throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
      }), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function (serviceName, caller) {
        var provider = providerInjector.get(serviceName + providerSuffix, caller);
        return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
      });
    forEach(loadModules(modulesToLoad), function (fn) {
      instanceInjector.invoke(fn || noop);
    });
    return instanceInjector;
    ////////////////////////////////////
    // $provider
    ////////////////////////////////////
    function supportObject(delegate) {
      return function (key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate));
        } else {
          return delegate(key, value);
        }
      };
    }
    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service');
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
      }
      return providerCache[name + providerSuffix] = provider_;
    }
    function enforceReturnValue(name, factory) {
      return function enforcedReturnValue() {
        var result = instanceInjector.invoke(factory, this);
        if (isUndefined(result)) {
          throw $injectorMinErr('undef', 'Provider \'{0}\' must return a value from $get factory method.', name);
        }
        return result;
      };
    }
    function factory(name, factoryFn, enforce) {
      return provider(name, { $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn });
    }
    function service(name, constructor) {
      return factory(name, [
        '$injector',
        function ($injector) {
          return $injector.instantiate(constructor);
        }
      ]);
    }
    function value(name, val) {
      return factory(name, valueFn(val), false);
    }
    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant');
      providerCache[name] = value;
      instanceCache[name] = value;
    }
    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
      origProvider.$get = function () {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
      };
    }
    ////////////////////////////////////
    // Module Loading
    ////////////////////////////////////
    function loadModules(modulesToLoad) {
      var runBlocks = [], moduleFn;
      forEach(modulesToLoad, function (module) {
        if (loadedModules.get(module))
          return;
        loadedModules.put(module, true);
        function runInvokeQueue(queue) {
          var i, ii;
          for (i = 0, ii = queue.length; i < ii; i++) {
            var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
          }
        }
        try {
          if (isString(module)) {
            moduleFn = angularModule(module);
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
            runInvokeQueue(moduleFn._invokeQueue);
            runInvokeQueue(moduleFn._configBlocks);
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else {
            assertArgFn(module, 'module');
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1];
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
            // Safari & FF's stack traces don't contain error.message content
            // unlike those of Chrome and IE
            // So if stack doesn't contain message, we create a new string that contains both.
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
            /* jshint -W022 */
            e = e.message + '\n' + e.stack;
          }
          throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}', module, e.stack || e.message || e);
        }
      });
      return runBlocks;
    }
    ////////////////////////////////////
    // internal Injector
    ////////////////////////////////////
    function createInternalInjector(cache, factory) {
      function getService(serviceName, caller) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}', serviceName + ' <- ' + path.join(' <- '));
          }
          return cache[serviceName];
        } else {
          try {
            path.unshift(serviceName);
            cache[serviceName] = INSTANTIATING;
            return cache[serviceName] = factory(serviceName, caller);
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName];
            }
            throw err;
          } finally {
            path.shift();
          }
        }
      }
      function invoke(fn, self, locals, serviceName) {
        if (typeof locals === 'string') {
          serviceName = locals;
          locals = null;
        }
        var args = [], $inject = createInjector.$$annotate(fn, strictDi, serviceName), length, i, key;
        for (i = 0, length = $inject.length; i < length; i++) {
          key = $inject[i];
          if (typeof key !== 'string') {
            throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
          }
          args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
        }
        if (isArray(fn)) {
          fn = fn[length];
        }
        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      }
      function instantiate(Type, locals, serviceName) {
        // Check if Type is annotated and use just the given function at n-1 as parameter
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
        // Object creation: http://jsperf.com/create-constructor/2
        var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
        var returnedValue = invoke(Type, instance, locals, serviceName);
        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
      }
      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: createInjector.$$annotate,
        has: function (name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
        }
      };
    }
  }
  createInjector.$$annotate = annotate;
  /**
 * @ngdoc provider
 * @name $anchorScrollProvider
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
  function $AnchorScrollProvider() {
    var autoScrollingEnabled = true;
    /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
    this.disableAutoScrolling = function () {
      autoScrollingEnabled = false;
    };
    /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and
   * scrolls to the related element, according to the rules specified in the
   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function ($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function ($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
    this.$get = [
      '$window',
      '$location',
      '$rootScope',
      function ($window, $location, $rootScope) {
        var document = $window.document;
        // Helper function to get first anchor from a NodeList
        // (using `Array#some()` instead of `angular#forEach()` since it's more performant
        //  and working in all supported browsers.)
        function getFirstAnchor(list) {
          var result = null;
          Array.prototype.some.call(list, function (element) {
            if (nodeName_(element) === 'a') {
              result = element;
              return true;
            }
          });
          return result;
        }
        function getYOffset() {
          var offset = scroll.yOffset;
          if (isFunction(offset)) {
            offset = offset();
          } else if (isElement(offset)) {
            var elem = offset[0];
            var style = $window.getComputedStyle(elem);
            if (style.position !== 'fixed') {
              offset = 0;
            } else {
              offset = elem.getBoundingClientRect().bottom;
            }
          } else if (!isNumber(offset)) {
            offset = 0;
          }
          return offset;
        }
        function scrollTo(elem) {
          if (elem) {
            elem.scrollIntoView();
            var offset = getYOffset();
            if (offset) {
              // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
              // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
              // top of the viewport.
              //
              // IF the number of pixels from the top of `elem` to the end of the page's content is less
              // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
              // way down the page.
              //
              // This is often the case for elements near the bottom of the page.
              //
              // In such cases we do not need to scroll the whole `offset` up, just the difference between
              // the top of the element and the offset, which is enough to align the top of `elem` at the
              // desired position.
              var elemTop = elem.getBoundingClientRect().top;
              $window.scrollBy(0, elemTop - offset);
            }
          } else {
            $window.scrollTo(0, 0);
          }
        }
        function scroll() {
          var hash = $location.hash(), elm;
          // empty hash, scroll to the top of the page
          if (!hash)
            scrollTo(null);  // element with given id
          else if (elm = document.getElementById(hash))
            scrollTo(elm);  // first anchor with given name :-D
          else if (elm = getFirstAnchor(document.getElementsByName(hash)))
            scrollTo(elm);  // no element and hash == 'top', scroll to the top of the page
          else if (hash === 'top')
            scrollTo(null);
        }
        // does not scroll when user clicks on anchor link that is currently on
        // (no url change, no $location.hash() change), browser native does scroll
        if (autoScrollingEnabled) {
          $rootScope.$watch(function autoScrollWatch() {
            return $location.hash();
          }, function autoScrollWatchAction(newVal, oldVal) {
            // skip the initial scroll if $location.hash is empty
            if (newVal === oldVal && newVal === '')
              return;
            jqLiteDocumentLoaded(function () {
              $rootScope.$evalAsync(scroll);
            });
          });
        }
        return scroll;
      }
    ];
  }
  var $animateMinErr = minErr('$animate');
  /**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
  var $AnimateProvider = [
      '$provide',
      function ($provide) {
        this.$$selectors = {};
        /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
        this.register = function (name, factory) {
          var key = name + '-animation';
          if (name && name.charAt(0) != '.')
            throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
          this.$$selectors[name.substr(1)] = key;
          $provide.factory(key, factory);
        };
        /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
        this.classNameFilter = function (expression) {
          if (arguments.length === 1) {
            this.$$classNameFilter = expression instanceof RegExp ? expression : null;
          }
          return this.$$classNameFilter;
        };
        this.$get = [
          '$$q',
          '$$asyncCallback',
          '$rootScope',
          function ($$q, $$asyncCallback, $rootScope) {
            var currentDefer;
            function runAnimationPostDigest(fn) {
              var cancelFn, defer = $$q.defer();
              defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {
                cancelFn && cancelFn();
              };
              $rootScope.$$postDigest(function ngAnimatePostDigest() {
                cancelFn = fn(function ngAnimateNotifyComplete() {
                  defer.resolve();
                });
              });
              return defer.promise;
            }
            function resolveElementClasses(element, classes) {
              var toAdd = [], toRemove = [];
              var hasClasses = createMap();
              forEach((element.attr('class') || '').split(/\s+/), function (className) {
                hasClasses[className] = true;
              });
              forEach(classes, function (status, className) {
                var hasClass = hasClasses[className];
                // If the most recent class manipulation (via $animate) was to remove the class, and the
                // element currently has the class, the class is scheduled for removal. Otherwise, if
                // the most recent class manipulation (via $animate) was to add the class, and the
                // element does not currently have the class, the class is scheduled to be added.
                if (status === false && hasClass) {
                  toRemove.push(className);
                } else if (status === true && !hasClass) {
                  toAdd.push(className);
                }
              });
              return toAdd.length + toRemove.length > 0 && [
                toAdd.length ? toAdd : null,
                toRemove.length ? toRemove : null
              ];
            }
            function cachedClassManipulation(cache, classes, op) {
              for (var i = 0, ii = classes.length; i < ii; ++i) {
                var className = classes[i];
                cache[className] = op;
              }
            }
            function asyncPromise() {
              // only serve one instance of a promise in order to save CPU cycles
              if (!currentDefer) {
                currentDefer = $$q.defer();
                $$asyncCallback(function () {
                  currentDefer.resolve();
                  currentDefer = null;
                });
              }
              return currentDefer.promise;
            }
            function applyStyles(element, options) {
              if (angular.isObject(options)) {
                var styles = extend(options.from || {}, options.to || {});
                element.css(styles);
              }
            }
            /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
            return {
              animate: function (element, from, to) {
                applyStyles(element, {
                  from: from,
                  to: to
                });
                return asyncPromise();
              },
              enter: function (element, parent, after, options) {
                applyStyles(element, options);
                after ? after.after(element) : parent.prepend(element);
                return asyncPromise();
              },
              leave: function (element, options) {
                element.remove();
                return asyncPromise();
              },
              move: function (element, parent, after, options) {
                // Do not remove element before insert. Removing will cause data associated with the
                // element to be dropped. Insert will implicitly do the remove.
                return this.enter(element, parent, after, options);
              },
              addClass: function (element, className, options) {
                return this.setClass(element, className, [], options);
              },
              $$addClassImmediately: function (element, className, options) {
                element = jqLite(element);
                className = !isString(className) ? isArray(className) ? className.join(' ') : '' : className;
                forEach(element, function (element) {
                  jqLiteAddClass(element, className);
                });
                applyStyles(element, options);
                return asyncPromise();
              },
              removeClass: function (element, className, options) {
                return this.setClass(element, [], className, options);
              },
              $$removeClassImmediately: function (element, className, options) {
                element = jqLite(element);
                className = !isString(className) ? isArray(className) ? className.join(' ') : '' : className;
                forEach(element, function (element) {
                  jqLiteRemoveClass(element, className);
                });
                applyStyles(element, options);
                return asyncPromise();
              },
              setClass: function (element, add, remove, options) {
                var self = this;
                var STORAGE_KEY = '$$animateClasses';
                var createdCache = false;
                element = jqLite(element);
                var cache = element.data(STORAGE_KEY);
                if (!cache) {
                  cache = {
                    classes: {},
                    options: options
                  };
                  createdCache = true;
                } else if (options && cache.options) {
                  cache.options = angular.extend(cache.options || {}, options);
                }
                var classes = cache.classes;
                add = isArray(add) ? add : add.split(' ');
                remove = isArray(remove) ? remove : remove.split(' ');
                cachedClassManipulation(classes, add, true);
                cachedClassManipulation(classes, remove, false);
                if (createdCache) {
                  cache.promise = runAnimationPostDigest(function (done) {
                    var cache = element.data(STORAGE_KEY);
                    element.removeData(STORAGE_KEY);
                    // in the event that the element is removed before postDigest
                    // is run then the cache will be undefined and there will be
                    // no need anymore to add or remove and of the element classes
                    if (cache) {
                      var classes = resolveElementClasses(element, cache.classes);
                      if (classes) {
                        self.$$setClassImmediately(element, classes[0], classes[1], cache.options);
                      }
                    }
                    done();
                  });
                  element.data(STORAGE_KEY, cache);
                }
                return cache.promise;
              },
              $$setClassImmediately: function (element, add, remove, options) {
                add && this.$$addClassImmediately(element, add);
                remove && this.$$removeClassImmediately(element, remove);
                applyStyles(element, options);
                return asyncPromise();
              },
              enabled: noop,
              cancel: noop
            };
          }
        ];
      }
    ];
  function $$AsyncCallbackProvider() {
    this.$get = [
      '$$rAF',
      '$timeout',
      function ($$rAF, $timeout) {
        return $$rAF.supported ? function (fn) {
          return $$rAF(fn);
        } : function (fn) {
          return $timeout(fn, 0, false);
        };
      }
    ];
  }
  /* global stripHash: true */
  /**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
  /**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
  function Browser(window, document, $log, $sniffer) {
    var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
    self.isMock = false;
    var outstandingRequestCount = 0;
    var outstandingRequestCallbacks = [];
    // TODO(vojta): remove this temporary api
    self.$$completeOutstandingRequest = completeOutstandingRequest;
    self.$$incOutstandingRequestCount = function () {
      outstandingRequestCount++;
    };
    /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
    function completeOutstandingRequest(fn) {
      try {
        fn.apply(null, sliceArgs(arguments, 1));
      } finally {
        outstandingRequestCount--;
        if (outstandingRequestCount === 0) {
          while (outstandingRequestCallbacks.length) {
            try {
              outstandingRequestCallbacks.pop()();
            } catch (e) {
              $log.error(e);
            }
          }
        }
      }
    }
    function getHash(url) {
      var index = url.indexOf('#');
      return index === -1 ? '' : url.substr(index + 1);
    }
    /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
    self.notifyWhenNoOutstandingRequests = function (callback) {
      // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
      // at some deterministic time in respect to the test runner's actions. Leaving things up to the
      // regular poller would result in flaky tests.
      forEach(pollFns, function (pollFn) {
        pollFn();
      });
      if (outstandingRequestCount === 0) {
        callback();
      } else {
        outstandingRequestCallbacks.push(callback);
      }
    };
    //////////////////////////////////////////////////////////////
    // Poll Watcher API
    //////////////////////////////////////////////////////////////
    var pollFns = [], pollTimeout;
    /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
    self.addPollFn = function (fn) {
      if (isUndefined(pollTimeout))
        startPoller(100, setTimeout);
      pollFns.push(fn);
      return fn;
    };
    /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
    function startPoller(interval, setTimeout) {
      (function check() {
        forEach(pollFns, function (pollFn) {
          pollFn();
        });
        pollTimeout = setTimeout(check, interval);
      }());
    }
    //////////////////////////////////////////////////////////////
    // URL API
    //////////////////////////////////////////////////////////////
    var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find('base'), reloadLocation = null;
    cacheState();
    lastHistoryState = cachedState;
    /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
    self.url = function (url, replace, state) {
      // In modern browsers `history.state` is `null` by default; treating it separately
      // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
      // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
      if (isUndefined(state)) {
        state = null;
      }
      // Android Browser BFCache causes location, history reference to become stale.
      if (location !== window.location)
        location = window.location;
      if (history !== window.history)
        history = window.history;
      // setter
      if (url) {
        var sameState = lastHistoryState === state;
        // Don't change anything if previous and current URLs and states match. This also prevents
        // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
        // See https://github.com/angular/angular.js/commit/ffb2701
        if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
          return self;
        }
        var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
        lastBrowserUrl = url;
        lastHistoryState = state;
        // Don't use history API if only the hash changed
        // due to a bug in IE10/IE11 which leads
        // to not firing a `hashchange` nor `popstate` event
        // in some cases (see #9143).
        if ($sniffer.history && (!sameBase || !sameState)) {
          history[replace ? 'replaceState' : 'pushState'](state, '', url);
          cacheState();
          // Do the assignment again so that those two variables are referentially identical.
          lastHistoryState = cachedState;
        } else {
          if (!sameBase) {
            reloadLocation = url;
          }
          if (replace) {
            location.replace(url);
          } else if (!sameBase) {
            location.href = url;
          } else {
            location.hash = getHash(url);
          }
        }
        return self;  // getter
      } else {
        // - reloadLocation is needed as browsers don't allow to read out
        //   the new location.href if a reload happened.
        // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
        return reloadLocation || location.href.replace(/%27/g, '\'');
      }
    };
    /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
    self.state = function () {
      return cachedState;
    };
    var urlChangeListeners = [], urlChangeInit = false;
    function cacheStateAndFireUrlChange() {
      cacheState();
      fireUrlChange();
    }
    // This variable should be used *only* inside the cacheState function.
    var lastCachedState = null;
    function cacheState() {
      // This should be the only place in $browser where `history.state` is read.
      cachedState = window.history.state;
      cachedState = isUndefined(cachedState) ? null : cachedState;
      // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
      if (equals(cachedState, lastCachedState)) {
        cachedState = lastCachedState;
      }
      lastCachedState = cachedState;
    }
    function fireUrlChange() {
      if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
        return;
      }
      lastBrowserUrl = self.url();
      lastHistoryState = cachedState;
      forEach(urlChangeListeners, function (listener) {
        listener(self.url(), cachedState);
      });
    }
    /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
    self.onUrlChange = function (callback) {
      // TODO(vojta): refactor to use node's syntax for events
      if (!urlChangeInit) {
        // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
        // don't fire popstate when user change the address bar and don't fire hashchange when url
        // changed by push/replaceState
        // html5 history api - popstate event
        if ($sniffer.history)
          jqLite(window).on('popstate', cacheStateAndFireUrlChange);
        // hashchange event
        jqLite(window).on('hashchange', cacheStateAndFireUrlChange);
        urlChangeInit = true;
      }
      urlChangeListeners.push(callback);
      return callback;
    };
    /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
    self.$$checkUrlChange = fireUrlChange;
    //////////////////////////////////////////////////////////////
    // Misc API
    //////////////////////////////////////////////////////////////
    /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
    self.baseHref = function () {
      var href = baseElement.attr('href');
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    };
    //////////////////////////////////////////////////////////////
    // Cookies API
    //////////////////////////////////////////////////////////////
    var lastCookies = {};
    var lastCookieString = '';
    var cookiePath = self.baseHref();
    function safeDecodeURIComponent(str) {
      try {
        return decodeURIComponent(str);
      } catch (e) {
        return str;
      }
    }
    /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
    self.cookies = function (name, value) {
      var cookieLength, cookieArray, cookie, i, index;
      if (name) {
        if (value === undefined) {
          rawDocument.cookie = encodeURIComponent(name) + '=;path=' + cookiePath + ';expires=Thu, 01 Jan 1970 00:00:00 GMT';
        } else {
          if (isString(value)) {
            cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';path=' + cookiePath).length + 1;
            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            if (cookieLength > 4096) {
              $log.warn('Cookie \'' + name + '\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');
            }
          }
        }
      } else {
        if (rawDocument.cookie !== lastCookieString) {
          lastCookieString = rawDocument.cookie;
          cookieArray = lastCookieString.split('; ');
          lastCookies = {};
          for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) {
              //ignore nameless cookies
              name = safeDecodeURIComponent(cookie.substring(0, index));
              // the first value that is seen for a cookie is the most
              // specific one.  values for the same cookie name that
              // follow are for less specific paths.
              if (lastCookies[name] === undefined) {
                lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
              }
            }
          }
        }
        return lastCookies;
      }
    };
    /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
    self.defer = function (fn, delay) {
      var timeoutId;
      outstandingRequestCount++;
      timeoutId = setTimeout(function () {
        delete pendingDeferIds[timeoutId];
        completeOutstandingRequest(fn);
      }, delay || 0);
      pendingDeferIds[timeoutId] = true;
      return timeoutId;
    };
    /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
    self.defer.cancel = function (deferId) {
      if (pendingDeferIds[deferId]) {
        delete pendingDeferIds[deferId];
        clearTimeout(deferId);
        completeOutstandingRequest(noop);
        return true;
      }
      return false;
    };
  }
  function $BrowserProvider() {
    this.$get = [
      '$window',
      '$log',
      '$sniffer',
      '$document',
      function ($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
  function $CacheFactoryProvider() {
    this.$get = function () {
      var caches = {};
      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
        }
        var size = 0, stats = extend({}, options, { id: cacheId }), data = {}, capacity = options && options.capacity || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
        /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
        return caches[cacheId] = {
          put: function (key, value) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = { key: key });
              refresh(lruEntry);
            }
            if (isUndefined(value))
              return;
            if (!(key in data))
              size++;
            data[key] = value;
            if (size > capacity) {
              this.remove(staleEnd.key);
            }
            return value;
          },
          get: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              refresh(lruEntry);
            }
            return data[key];
          },
          remove: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              if (lruEntry == freshEnd)
                freshEnd = lruEntry.p;
              if (lruEntry == staleEnd)
                staleEnd = lruEntry.n;
              link(lruEntry.n, lruEntry.p);
              delete lruHash[key];
            }
            delete data[key];
            size--;
          },
          removeAll: function () {
            data = {};
            size = 0;
            lruHash = {};
            freshEnd = staleEnd = null;
          },
          destroy: function () {
            data = null;
            stats = null;
            lruHash = null;
            delete caches[cacheId];
          },
          info: function () {
            return extend({}, stats, { size: size });
          }
        };
        /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
        function refresh(entry) {
          if (entry != freshEnd) {
            if (!staleEnd) {
              staleEnd = entry;
            } else if (staleEnd == entry) {
              staleEnd = entry.n;
            }
            link(entry.n, entry.p);
            link(entry, freshEnd);
            freshEnd = entry;
            freshEnd.n = null;
          }
        }
        /**
       * bidirectionally links two entries of the LRU linked list
       */
        function link(nextEntry, prevEntry) {
          if (nextEntry != prevEntry) {
            if (nextEntry)
              nextEntry.p = prevEntry;
            //p stands for previous, 'prev' didn't minify
            if (prevEntry)
              prevEntry.n = nextEntry;  //n stands for next, 'next' didn't minify
          }
        }
      }
      /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
      cacheFactory.info = function () {
        var info = {};
        forEach(caches, function (cache, cacheId) {
          info[cacheId] = cache.info();
        });
        return info;
      };
      /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
      cacheFactory.get = function (cacheId) {
        return caches[cacheId];
      };
      return cacheFactory;
    };
  }
  /**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the $templateCache service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
  function $TemplateCacheProvider() {
    this.$get = [
      '$cacheFactory',
      function ($cacheFactory) {
        return $cacheFactory('templates');
      }
    ];
  }
  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */
  /**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       templateNamespace: 'html',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true, the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioural (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 * #### `bindToController`
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
 * is instantiated, the initial values of the isolate scope bindings are already available.
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement)`.
 *    * `scope`: optional argument to override the scope.
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
 *    * `futureParentElement`:
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkinFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element or the entire element:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude`
 *     parameter of directive controllers, see there for details.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
 * ```
 * - $rootScope
 *   - isolate
 *     - transclusion
 * ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
 * ```
 * - $rootScope
 *   - transclusion
 * - isolate
 * ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-error">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to controller instances; if given, it will make the controllers
 *        available to directives.
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */
  var $compileMinErr = minErr('$compile');
  /**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
  $CompileProvider.$inject = [
    '$provide',
    '$$sanitizeUriProvider'
  ];
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {}, Suffix = 'Directive', COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
    // The assumption is that future DOM event attribute names will begin with
    // 'on' and be composed of only English letters.
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
    function parseIsolateBindings(scope, directiveName) {
      var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;
      var bindings = {};
      forEach(scope, function (definition, scopeName) {
        var match = definition.match(LOCAL_REGEXP);
        if (!match) {
          throw $compileMinErr('iscp', 'Invalid isolate scope definition for directive \'{0}\'.' + ' Definition: {... {1}: \'{2}\' ...}', directiveName, scopeName, definition);
        }
        bindings[scopeName] = {
          mode: match[1][0],
          collection: match[2] === '*',
          optional: match[3] === '?',
          attrName: match[4] || scopeName
        };
      });
      return bindings;
    }
    /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
    this.directive = function registerDirective(name, directiveFactory) {
      assertNotHasOwnProperty(name, 'directive');
      if (isString(name)) {
        assertArg(directiveFactory, 'directiveFactory');
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = [];
          $provide.factory(name + Suffix, [
            '$injector',
            '$exceptionHandler',
            function ($injector, $exceptionHandler) {
              var directives = [];
              forEach(hasDirectives[name], function (directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory);
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) };
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link);
                  }
                  directive.priority = directive.priority || 0;
                  directive.index = index;
                  directive.name = directive.name || name;
                  directive.require = directive.require || directive.controller && directive.name;
                  directive.restrict = directive.restrict || 'EA';
                  if (isObject(directive.scope)) {
                    directive.$$isolateBindings = parseIsolateBindings(directive.scope, directive.name);
                  }
                  directives.push(directive);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
              return directives;
            }
          ]);
        }
        hasDirectives[name].push(directiveFactory);
      } else {
        forEach(name, reverseParams(registerDirective));
      }
      return this;
    };
    /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
      }
    };
    /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
      }
    };
    /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
    var debugInfoEnabled = true;
    this.debugInfoEnabled = function (enabled) {
      if (isDefined(enabled)) {
        debugInfoEnabled = enabled;
        return this;
      }
      return debugInfoEnabled;
    };
    this.$get = [
      '$injector',
      '$interpolate',
      '$exceptionHandler',
      '$templateRequest',
      '$parse',
      '$controller',
      '$rootScope',
      '$document',
      '$sce',
      '$animate',
      '$$sanitizeUri',
      function ($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
        var Attributes = function (element, attributesToCopy) {
          if (attributesToCopy) {
            var keys = Object.keys(attributesToCopy);
            var i, l, key;
            for (i = 0, l = keys.length; i < l; i++) {
              key = keys[i];
              this[key] = attributesToCopy[key];
            }
          } else {
            this.$attr = {};
          }
          this.$$element = element;
        };
        Attributes.prototype = {
          $normalize: directiveNormalize,
          $addClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal);
            }
          },
          $removeClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal);
            }
          },
          $updateClass: function (newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses);
            if (toAdd && toAdd.length) {
              $animate.addClass(this.$$element, toAdd);
            }
            var toRemove = tokenDifference(oldClasses, newClasses);
            if (toRemove && toRemove.length) {
              $animate.removeClass(this.$$element, toRemove);
            }
          },
          $set: function (key, value, writeAttr, attrName) {
            // TODO: decide whether or not to throw an error if "class"
            //is set through this function since it may cause $updateClass to
            //become unstable.
            var node = this.$$element[0], booleanKey = getBooleanAttrName(node, key), aliasedKey = getAliasedAttrName(node, key), observer = key, nodeName;
            if (booleanKey) {
              this.$$element.prop(key, value);
              attrName = booleanKey;
            } else if (aliasedKey) {
              this[aliasedKey] = value;
              observer = aliasedKey;
            }
            this[key] = value;
            // translate normalized key to actual key
            if (attrName) {
              this.$attr[key] = attrName;
            } else {
              attrName = this.$attr[key];
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-');
              }
            }
            nodeName = nodeName_(this.$$element);
            if (nodeName === 'a' && key === 'href' || nodeName === 'img' && key === 'src') {
              // sanitize a[href] and img[src] values
              this[key] = value = $$sanitizeUri(value, key === 'src');
            } else if (nodeName === 'img' && key === 'srcset') {
              // sanitize img[srcset] values
              var result = '';
              // first check if there are spaces because it's not the same pattern
              var trimmedSrcset = trim(value);
              //                (   999x   ,|   999w   ,|   ,|,   )
              var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
              var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
              // split srcset into tuple of uri and descriptor except for the last item
              var rawUris = trimmedSrcset.split(pattern);
              // for each tuples
              var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
              for (var i = 0; i < nbrUrisWith2parts; i++) {
                var innerIdx = i * 2;
                // sanitize the uri
                result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
                // add the descriptor
                result += ' ' + trim(rawUris[innerIdx + 1]);
              }
              // split the last item into uri and descriptor
              var lastTuple = trim(rawUris[i * 2]).split(/\s/);
              // sanitize the last uri
              result += $$sanitizeUri(trim(lastTuple[0]), true);
              // and add the last descriptor if any
              if (lastTuple.length === 2) {
                result += ' ' + trim(lastTuple[1]);
              }
              this[key] = value = result;
            }
            if (writeAttr !== false) {
              if (value === null || value === undefined) {
                this.$$element.removeAttr(attrName);
              } else {
                this.$$element.attr(attrName, value);
              }
            }
            // fire observers
            var $$observers = this.$$observers;
            $$observers && forEach($$observers[observer], function (fn) {
              try {
                fn(value);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          },
          $observe: function (key, fn) {
            var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = createMap()), listeners = $$observers[key] || ($$observers[key] = []);
            listeners.push(fn);
            $rootScope.$evalAsync(function () {
              if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
                // no one registered attribute interpolation function, so lets call it manually
                fn(attrs[key]);
              }
            });
            return function () {
              arrayRemove(listeners, fn);
            };
          }
        };
        function safeAddClass($element, className) {
          try {
            $element.addClass(className);
          } catch (e) {
          }
        }
        var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol == '{{' || endSymbol == '}}' ? identity : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
        compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
          var bindings = $element.data('$binding') || [];
          if (isArray(binding)) {
            bindings = bindings.concat(binding);
          } else {
            bindings.push(binding);
          }
          $element.data('$binding', bindings);
        } : noop;
        compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
          safeAddClass($element, 'ng-binding');
        } : noop;
        compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
          var dataName = isolated ? noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope' : '$scope';
          $element.data(dataName, scope);
        } : noop;
        compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
          safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
        } : noop;
        return compile;
        //================================
        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
          if (!($compileNodes instanceof jqLite)) {
            // jquery always rewraps, whereas we need to preserve the original selector so that we can
            // modify it.
            $compileNodes = jqLite($compileNodes);
          }
          // We can not compile top level text elements since text nodes can be merged and we will
          // not be able to attach scope data to them, so we will wrap them in <span>
          forEach($compileNodes, function (node, index) {
            if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/)) {
              $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
            }
          });
          var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
          compile.$$addScopeClass($compileNodes);
          var namespace = null;
          return function publicLinkFn(scope, cloneConnectFn, options) {
            assertArg(scope, 'scope');
            options = options || {};
            var parentBoundTranscludeFn = options.parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
            // When `parentBoundTranscludeFn` is passed, it is a
            // `controllersBoundTransclude` function (it was previously passed
            // as `transclude` to directive.link) so we must unwrap it to get
            // its `boundTranscludeFn`
            if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
              parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
            }
            if (!namespace) {
              namespace = detectNamespaceForChildElements(futureParentElement);
            }
            var $linkNode;
            if (namespace !== 'html') {
              // When using a directive with replace:true and templateUrl the $compileNodes
              // (or a child element inside of them)
              // might change, so we need to recreate the namespace adapted compileNodes
              // for call to the link function.
              // Note: This will already clone the nodes...
              $linkNode = jqLite(wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html()));
            } else if (cloneConnectFn) {
              // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
              // and sometimes changes the structure of the DOM.
              $linkNode = JQLitePrototype.clone.call($compileNodes);
            } else {
              $linkNode = $compileNodes;
            }
            if (transcludeControllers) {
              for (var controllerName in transcludeControllers) {
                $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
              }
            }
            compile.$$addScopeInfo($linkNode, scope);
            if (cloneConnectFn)
              cloneConnectFn($linkNode, scope);
            if (compositeLinkFn)
              compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
            return $linkNode;
          };
        }
        function detectNamespaceForChildElements(parentElement) {
          // TODO: Make this detect MathML as well...
          var node = parentElement && parentElement[0];
          if (!node) {
            return 'html';
          } else {
            return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
          }
        }
        /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
          var linkFns = [], attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes();
            // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
            nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
            if (nodeLinkFn && nodeLinkFn.scope) {
              compile.$$addScopeClass(attrs.$$element);
            }
            childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
            if (nodeLinkFn || childLinkFn) {
              linkFns.push(i, nodeLinkFn, childLinkFn);
              linkFnFound = true;
              nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
            }
            //use the previous context only for the first element in the virtual group
            previousCompileContext = null;
          }
          // return a linking function if we have found anything, null otherwise
          return linkFnFound ? compositeLinkFn : null;
          function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
            var stableNodeList;
            if (nodeLinkFnFound) {
              // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
              // offsets don't get screwed up
              var nodeListLength = nodeList.length;
              stableNodeList = new Array(nodeListLength);
              // create a sparse array by only copying the elements which have a linkFn
              for (i = 0; i < linkFns.length; i += 3) {
                idx = linkFns[i];
                stableNodeList[idx] = nodeList[idx];
              }
            } else {
              stableNodeList = nodeList;
            }
            for (i = 0, ii = linkFns.length; i < ii;) {
              node = stableNodeList[linkFns[i++]];
              nodeLinkFn = linkFns[i++];
              childLinkFn = linkFns[i++];
              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new();
                  compile.$$addScopeInfo(jqLite(node), childScope);
                } else {
                  childScope = scope;
                }
                if (nodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn, nodeLinkFn.elementTranscludeOnThisElement);
                } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                  childBoundTranscludeFn = parentBoundTranscludeFn;
                } else if (!parentBoundTranscludeFn && transcludeFn) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                } else {
                  childBoundTranscludeFn = null;
                }
                nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
              }
            }
          }
        }
        function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {
          var boundTranscludeFn = function (transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
            if (!transcludedScope) {
              transcludedScope = scope.$new(false, containingScope);
              transcludedScope.$$transcluded = true;
            }
            return transcludeFn(transcludedScope, cloneFn, {
              parentBoundTranscludeFn: previousBoundTranscludeFn,
              transcludeControllers: controllers,
              futureParentElement: futureParentElement
            });
          };
          return boundTranscludeFn;
        }
        /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType, attrsMap = attrs.$attr, match, className;
          switch (nodeType) {
          case NODE_TYPE_ELEMENT:
            /* Element */
            // use the node name: <directive>
            addDirective(directives, directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);
            // iterate over the attributes
            for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
              var attrStartName = false;
              var attrEndName = false;
              attr = nAttrs[j];
              name = attr.name;
              value = trim(attr.value);
              // support ngAttr attribute binding
              ngAttrName = directiveNormalize(name);
              if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                name = name.replace(PREFIX_REGEXP, '').substr(8).replace(/_(.)/g, function (match, letter) {
                  return letter.toUpperCase();
                });
              }
              var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
              if (directiveIsMultiElement(directiveNName)) {
                if (ngAttrName === directiveNName + 'Start') {
                  attrStartName = name;
                  attrEndName = name.substr(0, name.length - 5) + 'end';
                  name = name.substr(0, name.length - 6);
                }
              }
              nName = directiveNormalize(name.toLowerCase());
              attrsMap[nName] = name;
              if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true;  // presence means true
                }
              }
              addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
              addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
            }
            // use class as directive
            className = node.className;
            if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
            }
            if (isString(className) && className !== '') {
              while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                nName = directiveNormalize(match[2]);
                if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[3]);
                }
                className = className.substr(match.index + match[0].length);
              }
            }
            break;
          case NODE_TYPE_TEXT:
            /* Text Node */
            addTextInterpolateDirective(directives, node.nodeValue);
            break;
          case NODE_TYPE_COMMENT:
            /* Comment */
            try {
              match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
              if (match) {
                nName = directiveNormalize(match[1]);
                if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[2]);
                }
              }
            } catch (e) {
            }
            break;
          }
          directives.sort(byPriority);
          return directives;
        }
        /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
        function groupScan(node, attrStart, attrEnd) {
          var nodes = [];
          var depth = 0;
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            do {
              if (!node) {
                throw $compileMinErr('uterdir', 'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.', attrStart, attrEnd);
              }
              if (node.nodeType == NODE_TYPE_ELEMENT) {
                if (node.hasAttribute(attrStart))
                  depth++;
                if (node.hasAttribute(attrEnd))
                  depth--;
              }
              nodes.push(node);
              node = node.nextSibling;
            } while (depth > 0);
          } else {
            nodes.push(node);
          }
          return jqLite(nodes);
        }
        /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function (scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd);
            return linkFn(scope, element, attrs, controllers, transcludeFn);
          };
        }
        /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
          previousCompileContext = previousCompileContext || {};
          var terminalPriority = -Number.MAX_VALUE, newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, controllers, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, directiveValue;
          // executes all directives on the current element
          for (var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i];
            var attrStart = directive.$$start;
            var attrEnd = directive.$$end;
            // collect multiblock sections
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd);
            }
            $template = undefined;
            if (terminalPriority > directive.priority) {
              break;  // prevent further processing of directives
            }
            if (directiveValue = directive.scope) {
              // skip the check for directives with async templates, we'll check the derived sync
              // directive when the template arrives
              if (!directive.templateUrl) {
                if (isObject(directiveValue)) {
                  // This directive is trying to add an isolated scope.
                  // Check that there is no scope of any kind already
                  assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                  newIsolateScopeDirective = directive;
                } else {
                  // This directive is trying to add a child scope.
                  // Check that there is no isolated scope already
                  assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                }
              }
              newScopeDirective = newScopeDirective || directive;
            }
            directiveName = directive.name;
            if (!directive.templateUrl && directive.controller) {
              directiveValue = directive.controller;
              controllerDirectives = controllerDirectives || {};
              assertNoDuplicate('\'' + directiveName + '\' controller', controllerDirectives[directiveName], directive, $compileNode);
              controllerDirectives[directiveName] = directive;
            }
            if (directiveValue = directive.transclude) {
              hasTranscludeDirective = true;
              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
              // This option should only be used by directives that know how to safely handle element transclusion,
              // where the transcluded nodes are added or replaced after linking.
              if (!directive.$$tlb) {
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                nonTlbTranscludeDirective = directive;
              }
              if (directiveValue == 'element') {
                hasElementTranscludeDirective = true;
                terminalPriority = directive.priority;
                $template = $compileNode;
                $compileNode = templateAttrs.$$element = jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));
                compileNode = $compileNode[0];
                replaceWith(jqCollection, sliceArgs($template), compileNode);
                childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, { nonTlbTranscludeDirective: nonTlbTranscludeDirective });
              } else {
                $template = jqLite(jqLiteClone(compileNode)).contents();
                $compileNode.empty();
                // clear contents
                childTranscludeFn = compile($template, transcludeFn);
              }
            }
            if (directive.template) {
              hasTemplate = true;
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
              directiveValue = denormalizeTemplate(directiveValue);
              if (directive.replace) {
                replaceDirective = directive;
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = [];
                } else {
                  $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                }
                compileNode = $template[0];
                if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                  throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', directiveName, '');
                }
                replaceWith(jqCollection, $compileNode, compileNode);
                var newTemplateAttrs = { $attr: {} };
                // combine directives from the original node and from the template:
                // - take the array of directives for this element
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority
                // - combine directives as: processed + template + unprocessed
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                if (newIsolateScopeDirective) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                ii = directives.length;
              } else {
                $compileNode.html(directiveValue);
              }
            }
            if (directive.templateUrl) {
              hasTemplate = true;
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              if (directive.replace) {
                replaceDirective = directive;
              }
              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
              ii = directives.length;
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                if (isFunction(linkFn)) {
                  addLinkFns(null, linkFn, attrStart, attrEnd);
                } else if (linkFn) {
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode));
              }
            }
            if (directive.terminal) {
              nodeLinkFn.terminal = true;
              terminalPriority = Math.max(terminalPriority, directive.priority);
            }
          }
          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
          nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
          nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;
          nodeLinkFn.templateOnThisElement = hasTemplate;
          nodeLinkFn.transclude = childTranscludeFn;
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
          // might be normal or delayed nodeLinkFn depending on if templateUrl is present
          return nodeLinkFn;
          ////////////////////
          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart)
                pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
              pre.require = directive.require;
              pre.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, { isolateScope: true });
              }
              preLinkFns.push(pre);
            }
            if (post) {
              if (attrStart)
                post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
              post.require = directive.require;
              post.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, { isolateScope: true });
              }
              postLinkFns.push(post);
            }
          }
          function getControllers(directiveName, require, $element, elementControllers) {
            var value, retrievalMethod = 'data', optional = false;
            var $searchElement = $element;
            var match;
            if (isString(require)) {
              match = require.match(REQUIRE_PREFIX_REGEXP);
              require = require.substring(match[0].length);
              if (match[3]) {
                if (match[1])
                  match[3] = null;
                else
                  match[1] = match[3];
              }
              if (match[1] === '^') {
                retrievalMethod = 'inheritedData';
              } else if (match[1] === '^^') {
                retrievalMethod = 'inheritedData';
                $searchElement = $element.parent();
              }
              if (match[2] === '?') {
                optional = true;
              }
              value = null;
              if (elementControllers && retrievalMethod === 'data') {
                if (value = elementControllers[require]) {
                  value = value.instance;
                }
              }
              value = value || $searchElement[retrievalMethod]('$' + require + 'Controller');
              if (!value && !optional) {
                throw $compileMinErr('ctreq', 'Controller \'{0}\', required by directive \'{1}\', can\'t be found!', require, directiveName);
              }
              return value || null;
            } else if (isArray(require)) {
              value = [];
              forEach(require, function (require) {
                value.push(getControllers(directiveName, require, $element, elementControllers));
              });
            }
            return value;
          }
          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element, attrs;
            if (compileNode === linkNode) {
              attrs = templateAttrs;
              $element = templateAttrs.$$element;
            } else {
              $element = jqLite(linkNode);
              attrs = new Attributes($element, templateAttrs);
            }
            if (newIsolateScopeDirective) {
              isolateScope = scope.$new(true);
            }
            if (boundTranscludeFn) {
              // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
              // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
              transcludeFn = controllersBoundTransclude;
              transcludeFn.$$boundTransclude = boundTranscludeFn;
            }
            if (controllerDirectives) {
              // TODO: merge `controllers` and `elementControllers` into single object.
              controllers = {};
              elementControllers = {};
              forEach(controllerDirectives, function (directive) {
                var locals = {
                    $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                    $element: $element,
                    $attrs: attrs,
                    $transclude: transcludeFn
                  }, controllerInstance;
                controller = directive.controller;
                if (controller == '@') {
                  controller = attrs[directive.name];
                }
                controllerInstance = $controller(controller, locals, true, directive.controllerAs);
                // For directives with element transclusion the element is a comment,
                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                // clean up (http://bugs.jquery.com/ticket/8335).
                // Instead, we save the controllers for the element in a local hash and attach to .data
                // later, once we have the actual element.
                elementControllers[directive.name] = controllerInstance;
                if (!hasElementTranscludeDirective) {
                  $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
                }
                controllers[directive.name] = controllerInstance;
              });
            }
            if (newIsolateScopeDirective) {
              compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
              compile.$$addScopeClass($element, true);
              var isolateScopeController = controllers && controllers[newIsolateScopeDirective.name];
              var isolateBindingContext = isolateScope;
              if (isolateScopeController && isolateScopeController.identifier && newIsolateScopeDirective.bindToController === true) {
                isolateBindingContext = isolateScopeController.instance;
              }
              forEach(isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings, function (definition, scopeName) {
                var attrName = definition.attrName, optional = definition.optional, mode = definition.mode,
                  // @, =, or &
                  lastValue, parentGet, parentSet, compare;
                switch (mode) {
                case '@':
                  attrs.$observe(attrName, function (value) {
                    isolateBindingContext[scopeName] = value;
                  });
                  attrs.$$observers[attrName].$$scope = scope;
                  if (attrs[attrName]) {
                    // If the attribute has been provided then we trigger an interpolation to ensure
                    // the value is there for use in the link fn
                    isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);
                  }
                  break;
                case '=':
                  if (optional && !attrs[attrName]) {
                    return;
                  }
                  parentGet = $parse(attrs[attrName]);
                  if (parentGet.literal) {
                    compare = equals;
                  } else {
                    compare = function (a, b) {
                      return a === b || a !== a && b !== b;
                    };
                  }
                  parentSet = parentGet.assign || function () {
                    // reset the change, or we will throw this exception on every $digest
                    lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                    throw $compileMinErr('nonassign', 'Expression \'{0}\' used with directive \'{1}\' is non-assignable!', attrs[attrName], newIsolateScopeDirective.name);
                  };
                  lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                  var parentValueWatch = function parentValueWatch(parentValue) {
                    if (!compare(parentValue, isolateBindingContext[scopeName])) {
                      // we are out of sync and need to copy
                      if (!compare(parentValue, lastValue)) {
                        // parent changed and it has precedence
                        isolateBindingContext[scopeName] = parentValue;
                      } else {
                        // if the parent can be assigned then do so
                        parentSet(scope, parentValue = isolateBindingContext[scopeName]);
                      }
                    }
                    return lastValue = parentValue;
                  };
                  parentValueWatch.$stateful = true;
                  var unwatch;
                  if (definition.collection) {
                    unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                  } else {
                    unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                  }
                  isolateScope.$on('$destroy', unwatch);
                  break;
                case '&':
                  parentGet = $parse(attrs[attrName]);
                  isolateBindingContext[scopeName] = function (locals) {
                    return parentGet(scope, locals);
                  };
                  break;
                }
              });
            }
            if (controllers) {
              forEach(controllers, function (controller) {
                controller();
              });
              controllers = null;
            }
            // PRELINKING
            for (i = 0, ii = preLinkFns.length; i < ii; i++) {
              linkFn = preLinkFns[i];
              invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
            }
            // RECURSION
            // We only pass the isolate scope, if the isolate directive has a template,
            // otherwise the child elements do not belong to the isolate directive.
            var scopeToChild = scope;
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;
            }
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
            // POSTLINKING
            for (i = postLinkFns.length - 1; i >= 0; i--) {
              linkFn = postLinkFns[i];
              invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
            }
            // This is the function that is injected as `$transclude`.
            // Note: all arguments are optional!
            function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
              var transcludeControllers;
              // No scope passed in:
              if (!isScope(scope)) {
                futureParentElement = cloneAttachFn;
                cloneAttachFn = scope;
                scope = undefined;
              }
              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers;
              }
              if (!futureParentElement) {
                futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
              }
              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
            }
          }
        }
        function markDirectivesAsIsolate(directives) {
          // mark all directives as needing isolate scope.
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], { $$isolateScope: true });
          }
        }
        /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
          if (name === ignoreDirective)
            return null;
          var match = null;
          if (hasDirectives.hasOwnProperty(name)) {
            for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
              try {
                directive = directives[i];
                if ((maxPriority === undefined || maxPriority > directive.priority) && directive.restrict.indexOf(location) != -1) {
                  if (startAttrName) {
                    directive = inherit(directive, {
                      $$start: startAttrName,
                      $$end: endAttrName
                    });
                  }
                  tDirectives.push(directive);
                  match = directive;
                }
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          }
          return match;
        }
        /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
        function directiveIsMultiElement(name) {
          if (hasDirectives.hasOwnProperty(name)) {
            for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
              directive = directives[i];
              if (directive.multiElement) {
                return true;
              }
            }
          }
          return false;
        }
        /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
          // reapply the old attributes to the new element
          forEach(dst, function (value, key) {
            if (key.charAt(0) != '$') {
              if (src[key] && src[key] !== value) {
                value += (key === 'style' ? ';' : ' ') + src[key];
              }
              dst.$set(key, value, true, srcAttr[key]);
            }
          });
          // copy the new attributes on the old attrs object
          forEach(src, function (value, key) {
            if (key == 'class') {
              safeAddClass($element, value);
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
            } else if (key == 'style') {
              $element.attr('style', $element.attr('style') + ';' + value);
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;  // `dst` will never contain hasOwnProperty as DOM parser won't let it.
                                                                                // You will get an "InvalidCharacterError: DOM Exception 5" error if you
                                                                                // have an attribute like "has-own-property" or "data-has-own-property", etc.
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
              dst[key] = value;
              dstAttr[key] = srcAttr[key];
            }
          });
        }
        function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = inherit(origAsyncDirective, {
              templateUrl: null,
              transclude: null,
              replace: null,
              $$originalDirective: origAsyncDirective
            }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
          $compileNode.empty();
          $templateRequest($sce.getTrustedResourceUrl(templateUrl)).then(function (content) {
            var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
            content = denormalizeTemplate(content);
            if (origAsyncDirective.replace) {
              if (jqLiteIsTextNode(content)) {
                $template = [];
              } else {
                $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
              }
              compileNode = $template[0];
              if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', origAsyncDirective.name, templateUrl);
              }
              tempTemplateAttrs = { $attr: {} };
              replaceWith($rootElement, $compileNode, compileNode);
              var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
              if (isObject(origAsyncDirective.scope)) {
                markDirectivesAsIsolate(templateDirectives);
              }
              directives = templateDirectives.concat(directives);
              mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
            } else {
              compileNode = beforeTemplateCompileNode;
              $compileNode.html(content);
            }
            directives.unshift(derivedSyncDirective);
            afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
            forEach($rootElement, function (node, i) {
              if (node == compileNode) {
                $rootElement[i] = $compileNode[0];
              }
            });
            afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
            while (linkQueue.length) {
              var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
              if (scope.$$destroyed)
                continue;
              if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                var oldClasses = beforeTemplateLinkNode.className;
                if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                  // it was cloned therefore we have to clone as well.
                  linkNode = jqLiteClone(compileNode);
                }
                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                // Copy in CSS classes from original node
                safeAddClass(jqLite(linkNode), oldClasses);
              }
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              } else {
                childBoundTranscludeFn = boundTranscludeFn;
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
            }
            linkQueue = null;
          });
          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
            var childBoundTranscludeFn = boundTranscludeFn;
            if (scope.$$destroyed)
              return;
            if (linkQueue) {
              linkQueue.push(scope, node, rootElement, childBoundTranscludeFn);
            } else {
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
            }
          };
        }
        /**
     * Sorting function for bound directives.
     */
        function byPriority(a, b) {
          var diff = b.priority - a.priority;
          if (diff !== 0)
            return diff;
          if (a.name !== b.name)
            return a.name < b.name ? -1 : 1;
          return a.index - b.index;
        }
        function assertNoDuplicate(what, previousDirective, directive, element) {
          if (previousDirective) {
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}', previousDirective.name, directive.name, what, startingTag(element));
          }
        }
        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true);
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: function textInterpolateCompileFn(templateNode) {
                var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                // When transcluding a template that has bindings in the root
                // we don't have a parent and thus need to add the class during linking fn.
                if (hasCompileParent)
                  compile.$$addBindingClass(templateNodeParent);
                return function textInterpolateLinkFn(scope, node) {
                  var parent = node.parent();
                  if (!hasCompileParent)
                    compile.$$addBindingClass(parent);
                  compile.$$addBindingInfo(parent, interpolateFn.expressions);
                  scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                    node[0].nodeValue = value;
                  });
                };
              }
            });
          }
        }
        function wrapTemplate(type, template) {
          type = lowercase(type || 'html');
          switch (type) {
          case 'svg':
          case 'math':
            var wrapper = document.createElement('div');
            wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
            return wrapper.childNodes[0].childNodes;
          default:
            return template;
          }
        }
        function getTrustedContext(node, attrNormalizedName) {
          if (attrNormalizedName == 'srcdoc') {
            return $sce.HTML;
          }
          var tag = nodeName_(node);
          // maction[xlink:href] can source SVG.  It's not limited to <maction>.
          if (attrNormalizedName == 'xlinkHref' || tag == 'form' && attrNormalizedName == 'action' || tag != 'img' && (attrNormalizedName == 'src' || attrNormalizedName == 'ngSrc')) {
            return $sce.RESOURCE_URL;
          }
        }
        function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
          var trustedContext = getTrustedContext(node, name);
          allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;
          var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);
          // no interpolation found -> ignore
          if (!interpolateFn)
            return;
          if (name === 'multiple' && nodeName_(node) === 'select') {
            throw $compileMinErr('selmulti', 'Binding to the \'multiple\' attribute is not supported. Element: {0}', startingTag(node));
          }
          directives.push({
            priority: 100,
            compile: function () {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = attr.$$observers || (attr.$$observers = {});
                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr('nodomevents', 'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' + 'ng- versions (such as ng-click instead of onclick) instead.');
                  }
                  // If the attribute has changed since last $interpolate()ed
                  var newValue = attr[name];
                  if (newValue !== value) {
                    // we need to interpolate again since the attribute value has been updated
                    // (e.g. by another directive's compile function)
                    // ensure unset/empty values make interpolateFn falsy
                    interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                    value = newValue;
                  }
                  // if attribute was updated so that there is no interpolation going on we don't want to
                  // register any observers
                  if (!interpolateFn)
                    return;
                  // initialize attr object so that it's ready in case we need the value for isolate
                  // scope initialization, otherwise the value would not be available from isolate
                  // directive's linking fn during linking phase
                  attr[name] = interpolateFn(scope);
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
                }
              };
            }
          });
        }
        /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
          if ($rootElement) {
            for (i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] == firstElementToRemove) {
                $rootElement[i++] = newNode;
                for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2];
                  } else {
                    delete $rootElement[j];
                  }
                }
                $rootElement.length -= removeCount - 1;
                // If the replaced element is also the jQuery .context then replace it
                // .context is a deprecated jQuery api, so we should set it only when jQuery set it
                // http://api.jquery.com/context/
                if ($rootElement.context === firstElementToRemove) {
                  $rootElement.context = newNode;
                }
                break;
              }
            }
          }
          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove);
          }
          // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
          var fragment = document.createDocumentFragment();
          fragment.appendChild(firstElementToRemove);
          // Copy over user data (that includes Angular's $scope etc.). Don't copy private
          // data here because there's no public interface in jQuery to do that and copying over
          // event listeners (which is the main use of private data) wouldn't work anyway.
          jqLite(newNode).data(jqLite(firstElementToRemove).data());
          // Remove data of the replaced element. We cannot just call .remove()
          // on the element it since that would deallocate scope that is needed
          // for the new node. Instead, remove the data "manually".
          if (!jQuery) {
            delete jqLite.cache[firstElementToRemove[jqLite.expando]];
          } else {
            // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
            // the replaced element. The cleanData version monkey-patched by Angular would cause
            // the scope to be trashed and we do need the very same scope to work with the new
            // element. However, we cannot just cache the non-patched version and use it here as
            // that would break if another library patches the method after Angular does (one
            // example is jQuery UI). Instead, set a flag indicating scope destroying should be
            // skipped this one time.
            skipDestroyOnNextJQueryCleanData = true;
            jQuery.cleanData([firstElementToRemove]);
          }
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
            var element = elementsToRemove[k];
            jqLite(element).remove();
            // must do this way to clean up expando
            fragment.appendChild(element);
            delete elementsToRemove[k];
          }
          elementsToRemove[0] = newNode;
          elementsToRemove.length = 1;
        }
        function cloneAndAnnotateFn(fn, annotation) {
          return extend(function () {
            return fn.apply(null, arguments);
          }, fn, annotation);
        }
        function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
          try {
            linkFn(scope, $element, attrs, controllers, transcludeFn);
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }
      }
    ];
  }
  var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
  /**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
  function directiveNormalize(name) {
    return camelCase(name.replace(PREFIX_REGEXP, ''));
  }
  /**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */
  /**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */
  /**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */
  /**
 * Closure compiler type information
 */
  function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {
  }
  function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {
  }
  function tokenDifference(str1, str2) {
    var values = '', tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
    outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j])
            continue outer;
        }
        values += (values.length > 0 ? ' ' : '') + token;
      }
    return values;
  }
  function removeComments(jqNodes) {
    jqNodes = jqLite(jqNodes);
    var i = jqNodes.length;
    if (i <= 1) {
      return jqNodes;
    }
    while (i--) {
      var node = jqNodes[i];
      if (node.nodeType === NODE_TYPE_COMMENT) {
        splice.call(jqNodes, i, 1);
      }
    }
    return jqNodes;
  }
  var $controllerMinErr = minErr('$controller');
  /**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
  function $ControllerProvider() {
    var controllers = {}, globals = false, CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
    /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
    this.register = function (name, constructor) {
      assertNotHasOwnProperty(name, 'controller');
      if (isObject(name)) {
        extend(controllers, name);
      } else {
        controllers[name] = constructor;
      }
    };
    /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   */
    this.allowGlobals = function () {
      globals = true;
    };
    this.$get = [
      '$injector',
      '$window',
      function ($injector, $window) {
        /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
        return function (expression, locals, later, ident) {
          // PRIVATE API:
          //   param `later` --- indicates that the controller's constructor is invoked at a later time.
          //                     If true, $controller will allocate the object with the correct
          //                     prototype chain, but will not invoke the controller until a returned
          //                     callback is invoked.
          //   param `ident` --- An optional label which overrides the label parsed from the controller
          //                     expression, if any.
          var instance, match, constructor, identifier;
          later = later === true;
          if (ident && isString(ident)) {
            identifier = ident;
          }
          if (isString(expression)) {
            match = expression.match(CNTRL_REG);
            if (!match) {
              throw $controllerMinErr('ctrlfmt', 'Badly formed controller string \'{0}\'. ' + 'Must match `__name__ as __id__` or `__name__`.', expression);
            }
            constructor = match[1], identifier = identifier || match[3];
            expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || (globals ? getter($window, constructor, true) : undefined);
            assertArgFn(expression, constructor, true);
          }
          if (later) {
            // Instantiate controller later:
            // This machinery is used to create an instance of the object before calling the
            // controller's constructor itself.
            //
            // This allows properties to be added to the controller before the constructor is
            // invoked. Primarily, this is used for isolate scope bindings in $compile.
            //
            // This feature is not intended for use by applications, and is thus not documented
            // publicly.
            // Object creation: http://jsperf.com/create-constructor/2
            var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
            instance = Object.create(controllerPrototype || null);
            if (identifier) {
              addIdentifier(locals, identifier, instance, constructor || expression.name);
            }
            return extend(function () {
              $injector.invoke(expression, instance, locals, constructor);
              return instance;
            }, {
              instance: instance,
              identifier: identifier
            });
          }
          instance = $injector.instantiate(expression, locals, constructor);
          if (identifier) {
            addIdentifier(locals, identifier, instance, constructor || expression.name);
          }
          return instance;
        };
        function addIdentifier(locals, identifier, instance, name) {
          if (!(locals && isObject(locals.$scope))) {
            throw minErr('$controller')('noscp', 'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.', name, identifier);
          }
          locals.$scope[identifier] = instance;
        }
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
  function $DocumentProvider() {
    this.$get = [
      '$window',
      function (window) {
        return jqLite(window.document);
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
 *     return function(exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
  function $ExceptionHandlerProvider() {
    this.$get = [
      '$log',
      function ($log) {
        return function (exception, cause) {
          $log.error.apply($log, arguments);
        };
      }
    ];
  }
  var APPLICATION_JSON = 'application/json';
  var CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': APPLICATION_JSON + ';charset=utf-8' };
  var JSON_START = /^\[|^\{(?!\{)/;
  var JSON_ENDS = {
      '[': /]$/,
      '{': /}$/
    };
  var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
  function defaultHttpResponseTransform(data, headers) {
    if (isString(data)) {
      // Strip json vulnerability protection prefix and trim whitespace
      var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();
      if (tempData) {
        var contentType = headers('Content-Type');
        if (contentType && contentType.indexOf(APPLICATION_JSON) === 0 || isJsonLike(tempData)) {
          data = fromJson(tempData);
        }
      }
    }
    return data;
  }
  function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
  }
  /**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
  function parseHeaders(headers) {
    var parsed = createMap(), key, val, i;
    if (!headers)
      return parsed;
    forEach(headers.split('\n'), function (line) {
      i = line.indexOf(':');
      key = lowercase(trim(line.substr(0, i)));
      val = trim(line.substr(i + 1));
      if (key) {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });
    return parsed;
  }
  /**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
  function headersGetter(headers) {
    var headersObj = isObject(headers) ? headers : undefined;
    return function (name) {
      if (!headersObj)
        headersObj = parseHeaders(headers);
      if (name) {
        var value = headersObj[lowercase(name)];
        if (value === void 0) {
          value = null;
        }
        return value;
      }
      return headersObj;
    };
  }
  /**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
  function transformData(data, headers, status, fns) {
    if (isFunction(fns))
      return fns(data, headers, status);
    forEach(fns, function (fn) {
      data = fn(data, headers, status);
    });
    return data;
  }
  function isSuccess(status) {
    return 200 <= status && status < 300;
  }
  /**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
  function $HttpProvider() {
    /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
   * that will provide the cache for all requests who set their `cache` property to `true`.
   * If you set the `default.cache = false` then only requests that specify their own custom
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   **/
    var defaults = this.defaults = {
        transformResponse: [defaultHttpResponseTransform],
        transformRequest: [function (d) {
            return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
          }],
        headers: {
          common: { 'Accept': 'application/json, text/plain, */*' },
          post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
          put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
          patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
        },
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN'
      };
    var useApplyAsync = false;
    /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specifed, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
    this.useApplyAsync = function (value) {
      if (isDefined(value)) {
        useApplyAsync = !!value;
        return this;
      }
      return useApplyAsync;
    };
    /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
    var interceptorFactories = this.interceptors = [];
    this.$get = [
      '$httpBackend',
      '$browser',
      '$cacheFactory',
      '$rootScope',
      '$q',
      '$injector',
      function ($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {
        var defaultCache = $cacheFactory('$http');
        /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
        var reversedInterceptors = [];
        forEach(interceptorFactories, function (interceptorFactory) {
          reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
        });
        /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   // Simple GET request example :
     *   $http.get('/someUrl').
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * ```js
     *   // Simple POST request example (passing data) :
     *   $http.post('/someUrl', {msg:'hello word!'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' },
     * }
     *
     * $http(req).success(function(){...}).error(function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
        function $http(requestConfig) {
          if (!angular.isObject(requestConfig)) {
            throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
          }
          var config = extend({
              method: 'get',
              transformRequest: defaults.transformRequest,
              transformResponse: defaults.transformResponse
            }, requestConfig);
          config.headers = mergeHeaders(requestConfig);
          config.method = uppercase(config.method);
          var serverRequest = function (config) {
            var headers = config.headers;
            var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
            // strip content-type if data is undefined
            if (isUndefined(reqData)) {
              forEach(headers, function (value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header];
                }
              });
            }
            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials;
            }
            // send request
            return sendReq(config, reqData).then(transformResponse, transformResponse);
          };
          var chain = [
              serverRequest,
              undefined
            ];
          var promise = $q.when(config);
          // apply interceptors
          forEach(reversedInterceptors, function (interceptor) {
            if (interceptor.request || interceptor.requestError) {
              chain.unshift(interceptor.request, interceptor.requestError);
            }
            if (interceptor.response || interceptor.responseError) {
              chain.push(interceptor.response, interceptor.responseError);
            }
          });
          while (chain.length) {
            var thenFn = chain.shift();
            var rejectFn = chain.shift();
            promise = promise.then(thenFn, rejectFn);
          }
          promise.success = function (fn) {
            promise.then(function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          promise.error = function (fn) {
            promise.then(null, function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          return promise;
          function transformResponse(response) {
            // make a copy since the response must be cacheable
            var resp = extend({}, response);
            if (!response.data) {
              resp.data = response.data;
            } else {
              resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
            }
            return isSuccess(response.status) ? resp : $q.reject(resp);
          }
          function executeHeaderFns(headers) {
            var headerContent, processedHeaders = {};
            forEach(headers, function (headerFn, header) {
              if (isFunction(headerFn)) {
                headerContent = headerFn();
                if (headerContent != null) {
                  processedHeaders[header] = headerContent;
                }
              } else {
                processedHeaders[header] = headerFn;
              }
            });
            return processedHeaders;
          }
          function mergeHeaders(config) {
            var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
            // using for-in instead of forEach to avoid unecessary iteration after header has been found
            defaultHeadersIteration:
              for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);
                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }
                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }
            // execute if header value is a function for merged headers
            return executeHeaderFns(reqHeaders);
          }
        }
        $http.pendingRequests = [];
        /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        createShortMethods('get', 'delete', 'head', 'jsonp');
        /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
        createShortMethodsWithData('post', 'put', 'patch');
        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
        $http.defaults = defaults;
        return $http;
        function createShortMethods(names) {
          forEach(arguments, function (name) {
            $http[name] = function (url, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url
              }));
            };
          });
        }
        function createShortMethodsWithData(name) {
          forEach(arguments, function (name) {
            $http[name] = function (url, data, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url,
                data: data
              }));
            };
          });
        }
        /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
        function sendReq(config, reqData) {
          var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, reqHeaders = config.headers, url = buildUrl(config.url, config.params);
          $http.pendingRequests.push(config);
          promise.then(removePendingReq, removePendingReq);
          if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
            cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
          }
          if (cache) {
            cachedResp = cache.get(url);
            if (isDefined(cachedResp)) {
              if (isPromiseLike(cachedResp)) {
                // cached request has already been sent, but there is no response yet
                cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
              } else {
                // serving from cache
                if (isArray(cachedResp)) {
                  resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK');
                }
              }
            } else {
              // put the promise for the non-transformed response into cache as a placeholder
              cache.put(url, promise);
            }
          }
          // if we won't have the response in cache, set the xsrf headers and
          // send the request to the backend
          if (isUndefined(cachedResp)) {
            var xsrfValue = urlIsSameOrigin(config.url) ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
            if (xsrfValue) {
              reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
            }
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
          }
          return promise;
          /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
          function done(status, response, headersString, statusText) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [
                  status,
                  response,
                  parseHeaders(headersString),
                  statusText
                ]);
              } else {
                // remove promise from the cache
                cache.remove(url);
              }
            }
            function resolveHttpPromise() {
              resolvePromise(response, status, headersString, statusText);
            }
            if (useApplyAsync) {
              $rootScope.$applyAsync(resolveHttpPromise);
            } else {
              resolveHttpPromise();
              if (!$rootScope.$$phase)
                $rootScope.$apply();
            }
          }
          /**
       * Resolves the raw $http promise.
       */
          function resolvePromise(response, status, headers, statusText) {
            // normalize internal statuses to 0
            status = Math.max(status, 0);
            (isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText: statusText
            });
          }
          function resolvePromiseWithResult(result) {
            resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
          }
          function removePendingReq() {
            var idx = $http.pendingRequests.indexOf(config);
            if (idx !== -1)
              $http.pendingRequests.splice(idx, 1);
          }
        }
        function buildUrl(url, params) {
          if (!params)
            return url;
          var parts = [];
          forEachSorted(params, function (value, key) {
            if (value === null || isUndefined(value))
              return;
            if (!isArray(value))
              value = [value];
            forEach(value, function (v) {
              if (isObject(v)) {
                if (isDate(v)) {
                  v = v.toISOString();
                } else {
                  v = toJson(v);
                }
              }
              parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));
            });
          });
          if (parts.length > 0) {
            url += (url.indexOf('?') == -1 ? '?' : '&') + parts.join('&');
          }
          return url;
        }
      }
    ];
  }
  function createXhr() {
    return new window.XMLHttpRequest();
  }
  /**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
  function $HttpBackendProvider() {
    this.$get = [
      '$browser',
      '$window',
      '$document',
      function ($browser, $window, $document) {
        return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
      }
    ];
  }
  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    // TODO(vojta): fix the signature
    return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
      $browser.$$incOutstandingRequestCount();
      url = url || $browser.url();
      if (lowercase(method) == 'jsonp') {
        var callbackId = '_' + (callbacks.counter++).toString(36);
        callbacks[callbackId] = function (data) {
          callbacks[callbackId].data = data;
          callbacks[callbackId].called = true;
        };
        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId), callbackId, function (status, text) {
            completeRequest(callback, status, callbacks[callbackId].data, '', text);
            callbacks[callbackId] = noop;
          });
      } else {
        var xhr = createXhr();
        xhr.open(method, url, true);
        forEach(headers, function (value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
          }
        });
        xhr.onload = function requestLoaded() {
          var statusText = xhr.statusText || '';
          // responseText is the old-school way of retrieving response (supported by IE8 & 9)
          // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
          var response = 'response' in xhr ? xhr.response : xhr.responseText;
          // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
          var status = xhr.status === 1223 ? 204 : xhr.status;
          // fix status code when it is 0 (0 status is undocumented).
          // Occurs when accessing file resources or on Android 4.1 stock browser
          // while retrieving files from application cache.
          if (status === 0) {
            status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
          }
          completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText);
        };
        var requestError = function () {
          // The response is always empty
          // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
          completeRequest(callback, -1, null, null, '');
        };
        xhr.onerror = requestError;
        xhr.onabort = requestError;
        if (withCredentials) {
          xhr.withCredentials = true;
        }
        if (responseType) {
          try {
            xhr.responseType = responseType;
          } catch (e) {
            // WebKit added support for the json responseType value on 09/03/2013
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
            // known to throw when setting the value "json" as the response type. Other older
            // browsers implementing the responseType
            //
            // The json response type can be ignored if not supported, because JSON payloads are
            // parsed on the client-side regardless.
            if (responseType !== 'json') {
              throw e;
            }
          }
        }
        xhr.send(post || null);
      }
      if (timeout > 0) {
        var timeoutId = $browserDefer(timeoutRequest, timeout);
      } else if (isPromiseLike(timeout)) {
        timeout.then(timeoutRequest);
      }
      function timeoutRequest() {
        jsonpDone && jsonpDone();
        xhr && xhr.abort();
      }
      function completeRequest(callback, status, response, headersString, statusText) {
        // cancel timeout and subsequent timeout promise resolution
        if (timeoutId !== undefined) {
          $browserDefer.cancel(timeoutId);
        }
        jsonpDone = xhr = null;
        callback(status, response, headersString, statusText);
        $browser.$$completeOutstandingRequest(noop);
      }
    };
    function jsonpReq(url, callbackId, done) {
      // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
      // - fetches local scripts via XHR and evals them
      // - adds and immediately removes script elements from the document
      var script = rawDocument.createElement('script'), callback = null;
      script.type = 'text/javascript';
      script.src = url;
      script.async = true;
      callback = function (event) {
        removeEventListenerFn(script, 'load', callback);
        removeEventListenerFn(script, 'error', callback);
        rawDocument.body.removeChild(script);
        script = null;
        var status = -1;
        var text = 'unknown';
        if (event) {
          if (event.type === 'load' && !callbacks[callbackId].called) {
            event = { type: 'error' };
          }
          text = event.type;
          status = event.type === 'error' ? 404 : 200;
        }
        if (done) {
          done(status, text);
        }
      };
      addEventListenerFn(script, 'load', callback);
      addEventListenerFn(script, 'error', callback);
      rawDocument.body.appendChild(script);
      return callback;
    }
  }
  var $interpolateMinErr = minErr('$interpolate');
  /**
 * @ngdoc provider
 * @name $interpolateProvider
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
  function $InterpolateProvider() {
    var startSymbol = '{{';
    var endSymbol = '}}';
    /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
    this.startSymbol = function (value) {
      if (value) {
        startSymbol = value;
        return this;
      } else {
        return startSymbol;
      }
    };
    /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
    this.endSymbol = function (value) {
      if (value) {
        endSymbol = value;
        return this;
      } else {
        return endSymbol;
      }
    };
    this.$get = [
      '$parse',
      '$exceptionHandler',
      '$sce',
      function ($parse, $exceptionHandler, $sce) {
        var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');
        function escape(ch) {
          return '\\\\\\' + ch;
        }
        /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * ####Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example>
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
        function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
          allOrNothing = !!allOrNothing;
          var startIndex, endIndex, index = 0, expressions = [], parseFns = [], textLength = text.length, exp, concat = [], expressionPositions = [];
          while (index < textLength) {
            if ((startIndex = text.indexOf(startSymbol, index)) != -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) {
              if (index !== startIndex) {
                concat.push(unescapeText(text.substring(index, startIndex)));
              }
              exp = text.substring(startIndex + startSymbolLength, endIndex);
              expressions.push(exp);
              parseFns.push($parse(exp, parseStringifyInterceptor));
              index = endIndex + endSymbolLength;
              expressionPositions.push(concat.length);
              concat.push('');
            } else {
              // we did not find an interpolation, so we have to add the remainder to the separators array
              if (index !== textLength) {
                concat.push(unescapeText(text.substring(index)));
              }
              break;
            }
          }
          // Concatenating expressions makes it hard to reason about whether some combination of
          // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
          // single expression be used for iframe[src], object[src], etc., we ensure that the value
          // that's used is assigned or constructed by some JS code somewhere that is more testable or
          // make it obvious that you bound the value to some user controlled value.  This helps reduce
          // the load when auditing for XSS issues.
          if (trustedContext && concat.length > 1) {
            throw $interpolateMinErr('noconcat', 'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' + 'interpolations that concatenate multiple expressions when a trusted value is ' + 'required.  See http://docs.angularjs.org/api/ng.$sce', text);
          }
          if (!mustHaveExpression || expressions.length) {
            var compute = function (values) {
              for (var i = 0, ii = expressions.length; i < ii; i++) {
                if (allOrNothing && isUndefined(values[i]))
                  return;
                concat[expressionPositions[i]] = values[i];
              }
              return concat.join('');
            };
            var getValue = function (value) {
              return trustedContext ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
            };
            var stringify = function (value) {
              if (value == null) {
                // null || undefined
                return '';
              }
              switch (typeof value) {
              case 'string':
                break;
              case 'number':
                value = '' + value;
                break;
              default:
                value = toJson(value);
              }
              return value;
            };
            return extend(function interpolationFn(context) {
              var i = 0;
              var ii = expressions.length;
              var values = new Array(ii);
              try {
                for (; i < ii; i++) {
                  values[i] = parseFns[i](context);
                }
                return compute(values);
              } catch (err) {
                var newErr = $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
                $exceptionHandler(newErr);
              }
            }, {
              exp: text,
              expressions: expressions,
              $$watchDelegate: function (scope, listener, objectEquality) {
                var lastValue;
                return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
                  var currValue = compute(values);
                  if (isFunction(listener)) {
                    listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                  }
                  lastValue = currValue;
                }, objectEquality);
              }
            });
          }
          function unescapeText(text) {
            return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
          }
          function parseStringifyInterceptor(value) {
            try {
              value = getValue(value);
              return allOrNothing && !isDefined(value) ? value : stringify(value);
            } catch (err) {
              var newErr = $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
              $exceptionHandler(newErr);
            }
          }
        }
        /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
        $interpolate.startSymbol = function () {
          return startSymbol;
        };
        /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
        $interpolate.endSymbol = function () {
          return endSymbol;
        };
        return $interpolate;
      }
    ];
  }
  function $IntervalProvider() {
    this.$get = [
      '$rootScope',
      '$window',
      '$q',
      '$$q',
      function ($rootScope, $window, $q, $$q) {
        var intervals = {};
        /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
        function interval(fn, delay, count, invokeApply) {
          var setInterval = $window.setInterval, clearInterval = $window.clearInterval, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
          count = isDefined(count) ? count : 0;
          promise.then(null, null, fn);
          promise.$$intervalId = setInterval(function tick() {
            deferred.notify(iteration++);
            if (count > 0 && iteration >= count) {
              deferred.resolve(iteration);
              clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          intervals[promise.$$intervalId] = deferred;
          return promise;
        }
        /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
        interval.cancel = function (promise) {
          if (promise && promise.$$intervalId in intervals) {
            intervals[promise.$$intervalId].reject('canceled');
            $window.clearInterval(promise.$$intervalId);
            delete intervals[promise.$$intervalId];
            return true;
          }
          return false;
        };
        return interval;
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
  function $LocaleProvider() {
    this.$get = function () {
      return {
        id: 'en-us',
        NUMBER_FORMATS: {
          DECIMAL_SEP: '.',
          GROUP_SEP: ',',
          PATTERNS: [
            {
              minInt: 1,
              minFrac: 0,
              maxFrac: 3,
              posPre: '',
              posSuf: '',
              negPre: '-',
              negSuf: '',
              gSize: 3,
              lgSize: 3
            },
            {
              minInt: 1,
              minFrac: 2,
              maxFrac: 2,
              posPre: '\xa4',
              posSuf: '',
              negPre: '(\xa4',
              negSuf: ')',
              gSize: 3,
              lgSize: 3
            }
          ],
          CURRENCY_SYM: '$'
        },
        DATETIME_FORMATS: {
          MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(','),
          SHORTMONTH: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
          AMPMS: [
            'AM',
            'PM'
          ],
          medium: 'MMM d, y h:mm:ss a',
          'short': 'M/d/yy h:mm a',
          fullDate: 'EEEE, MMMM d, y',
          longDate: 'MMMM d, y',
          mediumDate: 'MMM d, y',
          shortDate: 'M/d/yy',
          mediumTime: 'h:mm:ss a',
          shortTime: 'h:mm a'
        },
        pluralCat: function (num) {
          if (num === 1) {
            return 'one';
          }
          return 'other';
        }
      };
    };
  }
  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
      'http': 80,
      'https': 443,
      'ftp': 21
    };
  var $locationMinErr = minErr('$location');
  /**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
  function encodePath(path) {
    var segments = path.split('/'), i = segments.length;
    while (i--) {
      segments[i] = encodeUriSegment(segments[i]);
    }
    return segments.join('/');
  }
  function parseAbsoluteUrl(absoluteUrl, locationObj) {
    var parsedUrl = urlResolve(absoluteUrl);
    locationObj.$$protocol = parsedUrl.protocol;
    locationObj.$$host = parsedUrl.hostname;
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
  }
  function parseAppUrl(relativeUrl, locationObj) {
    var prefixed = relativeUrl.charAt(0) !== '/';
    if (prefixed) {
      relativeUrl = '/' + relativeUrl;
    }
    var match = urlResolve(relativeUrl);
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname);
    locationObj.$$search = parseKeyValue(match.search);
    locationObj.$$hash = decodeURIComponent(match.hash);
    // make sure path starts with '/';
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
      locationObj.$$path = '/' + locationObj.$$path;
    }
  }
  /**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
  function beginsWith(begin, whole) {
    if (whole.indexOf(begin) === 0) {
      return whole.substr(begin.length);
    }
  }
  function stripHash(url) {
    var index = url.indexOf('#');
    return index == -1 ? url : url.substr(0, index);
  }
  function trimEmptyHash(url) {
    return url.replace(/(#.+)|#$/, '$1');
  }
  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
  }
  /* return the server only (scheme://host:port) */
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
  }
  /**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
  function LocationHtml5Url(appBase, basePrefix) {
    this.$$html5 = true;
    basePrefix = basePrefix || '';
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this);
    /**
   * Parse given html5 (regular) url string into properties
   * @param {string} url HTML5 url
   * @private
   */
    this.$$parse = function (url) {
      var pathUrl = beginsWith(appBaseNoFile, url);
      if (!isString(pathUrl)) {
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
      }
      parseAppUrl(pathUrl, this);
      if (!this.$$path) {
        this.$$path = '/';
      }
      this.$$compose();
    };
    /**
   * Compose url and update `absUrl` property
   * @private
   */
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1);  // first char is always '/'
    };
    this.$$parseLinkUrl = function (url, relHref) {
      if (relHref && relHref[0] === '#') {
        // special case for links to hash fragments:
        // keep the old url and only replace the hash fragment
        this.hash(relHref.slice(1));
        return true;
      }
      var appUrl, prevAppUrl;
      var rewrittenUrl;
      if ((appUrl = beginsWith(appBase, url)) !== undefined) {
        prevAppUrl = appUrl;
        if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
          rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
        } else {
          rewrittenUrl = appBase + prevAppUrl;
        }
      } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
        rewrittenUrl = appBaseNoFile + appUrl;
      } else if (appBaseNoFile == url + '/') {
        rewrittenUrl = appBaseNoFile;
      }
      if (rewrittenUrl) {
        this.$$parse(rewrittenUrl);
      }
      return !!rewrittenUrl;
    };
  }
  /**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
  function LocationHashbangUrl(appBase, hashPrefix) {
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this);
    /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
    this.$$parse = function (url) {
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
      var withoutHashUrl;
      if (withoutBaseUrl.charAt(0) === '#') {
        // The rest of the url starts with a hash so we have
        // got either a hashbang path or a plain hash fragment
        withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
        if (isUndefined(withoutHashUrl)) {
          // There was no hashbang prefix so we just have a hash fragment
          withoutHashUrl = withoutBaseUrl;
        }
      } else {
        // There was no hashbang path nor hash fragment:
        // If we are in HTML5 mode we use what is left as the path;
        // Otherwise we ignore what is left
        withoutHashUrl = this.$$html5 ? withoutBaseUrl : '';
      }
      parseAppUrl(withoutHashUrl, this);
      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
      this.$$compose();
      /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
      function removeWindowsDriveName(path, url, base) {
        /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
        var firstPathSegmentMatch;
        //Get the relative path from the input URL.
        if (url.indexOf(base) === 0) {
          url = url.replace(base, '');
        }
        // The input URL intentionally contains a first path segment that ends with a colon.
        if (windowsFilePathExp.exec(url)) {
          return path;
        }
        firstPathSegmentMatch = windowsFilePathExp.exec(path);
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
      }
    };
    /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
    };
    this.$$parseLinkUrl = function (url, relHref) {
      if (stripHash(appBase) == stripHash(url)) {
        this.$$parse(url);
        return true;
      }
      return false;
    };
  }
  /**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {
    this.$$html5 = true;
    LocationHashbangUrl.apply(this, arguments);
    var appBaseNoFile = stripFile(appBase);
    this.$$parseLinkUrl = function (url, relHref) {
      if (relHref && relHref[0] === '#') {
        // special case for links to hash fragments:
        // keep the old url and only replace the hash fragment
        this.hash(relHref.slice(1));
        return true;
      }
      var rewrittenUrl;
      var appUrl;
      if (appBase == stripHash(url)) {
        rewrittenUrl = url;
      } else if (appUrl = beginsWith(appBaseNoFile, url)) {
        rewrittenUrl = appBase + hashPrefix + appUrl;
      } else if (appBaseNoFile === url + '/') {
        rewrittenUrl = appBaseNoFile;
      }
      if (rewrittenUrl) {
        this.$$parse(rewrittenUrl);
      }
      return !!rewrittenUrl;
    };
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
      this.$$absUrl = appBase + hashPrefix + this.$$url;
    };
  }
  var locationPrototype = {
      $$html5: false,
      $$replace: false,
      absUrl: locationGetter('$$absUrl'),
      url: function (url) {
        if (isUndefined(url))
          return this.$$url;
        var match = PATH_MATCH.exec(url);
        if (match[1] || url === '')
          this.path(decodeURIComponent(match[1]));
        if (match[2] || match[1] || url === '')
          this.search(match[3] || '');
        this.hash(match[5] || '');
        return this;
      },
      protocol: locationGetter('$$protocol'),
      host: locationGetter('$$host'),
      port: locationGetter('$$port'),
      path: locationGetterSetter('$$path', function (path) {
        path = path !== null ? path.toString() : '';
        return path.charAt(0) == '/' ? path : '/' + path;
      }),
      search: function (search, paramValue) {
        switch (arguments.length) {
        case 0:
          return this.$$search;
        case 1:
          if (isString(search) || isNumber(search)) {
            search = search.toString();
            this.$$search = parseKeyValue(search);
          } else if (isObject(search)) {
            search = copy(search, {});
            // remove object undefined or null properties
            forEach(search, function (value, key) {
              if (value == null)
                delete search[key];
            });
            this.$$search = search;
          } else {
            throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
          }
          break;
        default:
          if (isUndefined(paramValue) || paramValue === null) {
            delete this.$$search[search];
          } else {
            this.$$search[search] = paramValue;
          }
        }
        this.$$compose();
        return this;
      },
      hash: locationGetterSetter('$$hash', function (hash) {
        return hash !== null ? hash.toString() : '';
      }),
      replace: function () {
        this.$$replace = true;
        return this;
      }
    };
  forEach([
    LocationHashbangInHtml5Url,
    LocationHashbangUrl,
    LocationHtml5Url
  ], function (Location) {
    Location.prototype = Object.create(locationPrototype);
    /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
    Location.prototype.state = function (state) {
      if (!arguments.length)
        return this.$$state;
      if (Location !== LocationHtml5Url || !this.$$html5) {
        throw $locationMinErr('nostate', 'History API state support is available only ' + 'in HTML5 mode and only in browsers supporting HTML5 History API');
      }
      // The user might modify `stateObject` after invoking `$location.state(stateObject)`
      // but we're changing the $$state reference to $browser.state() during the $digest
      // so the modification window is narrow.
      this.$$state = isUndefined(state) ? null : state;
      return this;
    };
  });
  function locationGetter(property) {
    return function () {
      return this[property];
    };
  }
  function locationGetterSetter(property, preprocess) {
    return function (value) {
      if (isUndefined(value))
        return this[property];
      this[property] = preprocess(value);
      this.$$compose();
      return this;
    };
  }
  /**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */
  /**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
  function $LocationProvider() {
    var hashPrefix = '', html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };
    /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.hashPrefix = function (prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix;
        return this;
      } else {
        return hashPrefix;
      }
    };
    /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables url rewriting for relative links.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
    this.html5Mode = function (mode) {
      if (isBoolean(mode)) {
        html5Mode.enabled = mode;
        return this;
      } else if (isObject(mode)) {
        if (isBoolean(mode.enabled)) {
          html5Mode.enabled = mode.enabled;
        }
        if (isBoolean(mode.requireBase)) {
          html5Mode.requireBase = mode.requireBase;
        }
        if (isBoolean(mode.rewriteLinks)) {
          html5Mode.rewriteLinks = mode.rewriteLinks;
        }
        return this;
      } else {
        return html5Mode;
      }
    };
    /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */
    /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */
    this.$get = [
      '$rootScope',
      '$browser',
      '$sniffer',
      '$rootElement',
      '$window',
      function ($rootScope, $browser, $sniffer, $rootElement, $window) {
        var $location, LocationMode, baseHref = $browser.baseHref(),
          // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(), appBase;
        if (html5Mode.enabled) {
          if (!baseHref && html5Mode.requireBase) {
            throw $locationMinErr('nobase', '$location in HTML5 mode requires a <base> tag to be present!');
          }
          appBase = serverBase(initialUrl) + (baseHref || '/');
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
        } else {
          appBase = stripHash(initialUrl);
          LocationMode = LocationHashbangUrl;
        }
        $location = new LocationMode(appBase, '#' + hashPrefix);
        $location.$$parseLinkUrl(initialUrl, initialUrl);
        $location.$$state = $browser.state();
        var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
        function setBrowserUrlWithFallback(url, replace, state) {
          var oldUrl = $location.url();
          var oldState = $location.$$state;
          try {
            $browser.url(url, replace, state);
            // Make sure $location.state() returns referentially identical (not just deeply equal)
            // state object; this makes possible quick checking if the state changed in the digest
            // loop. Checking deep equality would be too expensive.
            $location.$$state = $browser.state();
          } catch (e) {
            // Restore old values if pushState fails
            $location.url(oldUrl);
            $location.$$state = oldState;
            throw e;
          }
        }
        $rootElement.on('click', function (event) {
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
          // currently we open nice url link and redirect then
          if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2)
            return;
          var elm = jqLite(event.target);
          // traverse the DOM up to find first A tag
          while (nodeName_(elm[0]) !== 'a') {
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0])
              return;
          }
          var absHref = elm.prop('href');
          // get the actual href attribute - see
          // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
          var relHref = elm.attr('href') || elm.attr('xlink:href');
          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
            // an animation.
            absHref = urlResolve(absHref.animVal).href;
          }
          // Ignore when url is started with javascript: or mailto:
          if (IGNORE_URI_REGEXP.test(absHref))
            return;
          if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
            if ($location.$$parseLinkUrl(absHref, relHref)) {
              // We do a preventDefault for all urls that are part of the angular application,
              // in html5mode and also without, so that we are able to abort navigation without
              // getting double entries in the location history.
              event.preventDefault();
              // update location manually
              if ($location.absUrl() != $browser.url()) {
                $rootScope.$apply();
                // hack to work around FF6 bug 684208 when scenario runner clicks on links
                $window.angular['ff-684208-preventDefault'] = true;
              }
            }
          }
        });
        // rewrite hashbang url <> html5 url
        if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
          $browser.url($location.absUrl(), true);
        }
        var initializing = true;
        // update $location when $browser url changes
        $browser.onUrlChange(function (newUrl, newState) {
          $rootScope.$evalAsync(function () {
            var oldUrl = $location.absUrl();
            var oldState = $location.$$state;
            var defaultPrevented;
            $location.$$parse(newUrl);
            $location.$$state = newState;
            defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, newState, oldState).defaultPrevented;
            // if the location was changed by a `$locationChangeStart` handler then stop
            // processing this location change
            if ($location.absUrl() !== newUrl)
              return;
            if (defaultPrevented) {
              $location.$$parse(oldUrl);
              $location.$$state = oldState;
              setBrowserUrlWithFallback(oldUrl, false, oldState);
            } else {
              initializing = false;
              afterLocationChange(oldUrl, oldState);
            }
          });
          if (!$rootScope.$$phase)
            $rootScope.$digest();
        });
        // update browser
        $rootScope.$watch(function $locationWatch() {
          var oldUrl = trimEmptyHash($browser.url());
          var newUrl = trimEmptyHash($location.absUrl());
          var oldState = $browser.state();
          var currentReplace = $location.$$replace;
          var urlOrStateChanged = oldUrl !== newUrl || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;
          if (initializing || urlOrStateChanged) {
            initializing = false;
            $rootScope.$evalAsync(function () {
              var newUrl = $location.absUrl();
              var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
              // if the location was changed by a `$locationChangeStart` handler then stop
              // processing this location change
              if ($location.absUrl() !== newUrl)
                return;
              if (defaultPrevented) {
                $location.$$parse(oldUrl);
                $location.$$state = oldState;
              } else {
                if (urlOrStateChanged) {
                  setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                }
                afterLocationChange(oldUrl, oldState);
              }
            });
          }
          $location.$$replace = false;  // we don't need to return anything because $evalAsync will make the digest loop dirty when
                                        // there is a change
        });
        return $location;
        function afterLocationChange(oldUrl, oldState) {
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl, $location.$$state, oldState);
        }
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */
  /**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
  function $LogProvider() {
    var debug = true, self = this;
    /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.debugEnabled = function (flag) {
      if (isDefined(flag)) {
        debug = flag;
        return this;
      } else {
        return debug;
      }
    };
    this.$get = [
      '$window',
      function ($window) {
        return {
          log: consoleLog('log'),
          info: consoleLog('info'),
          warn: consoleLog('warn'),
          error: consoleLog('error'),
          debug: function () {
            var fn = consoleLog('debug');
            return function () {
              if (debug) {
                fn.apply(self, arguments);
              }
            };
          }()
        };
        function formatError(arg) {
          if (arg instanceof Error) {
            if (arg.stack) {
              arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\n' + arg.stack : arg.stack;
            } else if (arg.sourceURL) {
              arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
            }
          }
          return arg;
        }
        function consoleLog(type) {
          var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
          // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
          // The reason behind this is that console.log has type "object" in IE8...
          try {
            hasApply = !!logFn.apply;
          } catch (e) {
          }
          if (hasApply) {
            return function () {
              var args = [];
              forEach(arguments, function (arg) {
                args.push(formatError(arg));
              });
              return logFn.apply(console, args);
            };
          }
          // we are IE which either doesn't have window.console => this is noop and we do nothing,
          // or we are IE where console.log doesn't have apply so we log at least first 2 args
          return function (arg1, arg2) {
            logFn(arg1, arg2 == null ? '' : arg2);
          };
        }
      }
    ];
  }
  var $parseMinErr = minErr('$parse');
  // Sandboxing Angular Expressions
  // ------------------------------
  // Angular expressions are generally considered safe because these expressions only have direct
  // access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
  // obtaining a reference to native JS functions such as the Function constructor.
  //
  // As an example, consider the following Angular expression:
  //
  //   {}.toString.constructor('alert("evil JS code")')
  //
  // This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
  // against the expression language, but not to prevent exploits that were enabled by exposing
  // sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
  // practice and therefore we are not even trying to protect against interaction with an object
  // explicitly exposed in this way.
  //
  // In general, it is not possible to access a Window object from an angular expression unless a
  // window or some DOM object that has a reference to window is published onto a Scope.
  // Similarly we prevent invocations of function known to be dangerous, as well as assignments to
  // native objects.
  //
  // See https://docs.angularjs.org/guide/security
  function ensureSafeMemberName(name, fullExpression) {
    if (name === '__defineGetter__' || name === '__defineSetter__' || name === '__lookupGetter__' || name === '__lookupSetter__' || name === '__proto__') {
      throw $parseMinErr('isecfld', 'Attempting to access a disallowed field in Angular expressions! ' + 'Expression: {0}', fullExpression);
    }
    return name;
  }
  function ensureSafeObject(obj, fullExpression) {
    // nifty check if obj is Function that is fast and works across iframes and other contexts
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.window === obj) {
        throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) {
        throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj === Object) {
        throw $parseMinErr('isecobj', 'Referencing Object in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
    return obj;
  }
  var CALL = Function.prototype.call;
  var APPLY = Function.prototype.apply;
  var BIND = Function.prototype.bind;
  function ensureSafeFunction(obj, fullExpression) {
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj === CALL || obj === APPLY || obj === BIND) {
        throw $parseMinErr('isecff', 'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
  }
  //Keyword constants
  var CONSTANTS = createMap();
  forEach({
    'null': function () {
      return null;
    },
    'true': function () {
      return true;
    },
    'false': function () {
      return false;
    },
    'undefined': function () {
    }
  }, function (constantGetter, name) {
    constantGetter.constant = constantGetter.literal = constantGetter.sharedGetter = true;
    CONSTANTS[name] = constantGetter;
  });
  //Not quite a constant, but can be lex/parsed the same
  CONSTANTS['this'] = function (self) {
    return self;
  };
  CONSTANTS['this'].sharedGetter = true;
  //Operators - will be wrapped by binaryFn/unaryFn/assignment/filter
  var OPERATORS = extend(createMap(), {
      '+': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        if (isDefined(a)) {
          if (isDefined(b)) {
            return a + b;
          }
          return a;
        }
        return isDefined(b) ? b : undefined;
      },
      '-': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
      },
      '*': function (self, locals, a, b) {
        return a(self, locals) * b(self, locals);
      },
      '/': function (self, locals, a, b) {
        return a(self, locals) / b(self, locals);
      },
      '%': function (self, locals, a, b) {
        return a(self, locals) % b(self, locals);
      },
      '===': function (self, locals, a, b) {
        return a(self, locals) === b(self, locals);
      },
      '!==': function (self, locals, a, b) {
        return a(self, locals) !== b(self, locals);
      },
      '==': function (self, locals, a, b) {
        return a(self, locals) == b(self, locals);
      },
      '!=': function (self, locals, a, b) {
        return a(self, locals) != b(self, locals);
      },
      '<': function (self, locals, a, b) {
        return a(self, locals) < b(self, locals);
      },
      '>': function (self, locals, a, b) {
        return a(self, locals) > b(self, locals);
      },
      '<=': function (self, locals, a, b) {
        return a(self, locals) <= b(self, locals);
      },
      '>=': function (self, locals, a, b) {
        return a(self, locals) >= b(self, locals);
      },
      '&&': function (self, locals, a, b) {
        return a(self, locals) && b(self, locals);
      },
      '||': function (self, locals, a, b) {
        return a(self, locals) || b(self, locals);
      },
      '!': function (self, locals, a) {
        return !a(self, locals);
      },
      '=': true,
      '|': true
    });
  var ESCAPE = {
      'n': '\n',
      'f': '\f',
      'r': '\r',
      't': '\t',
      'v': '\x0B',
      '\'': '\'',
      '"': '"'
    };
  /////////////////////////////////////////
  /**
 * @constructor
 */
  var Lexer = function (options) {
    this.options = options;
  };
  Lexer.prototype = {
    constructor: Lexer,
    lex: function (text) {
      this.text = text;
      this.index = 0;
      this.tokens = [];
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        if (ch === '"' || ch === '\'') {
          this.readString(ch);
        } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
          this.readNumber();
        } else if (this.isIdent(ch)) {
          this.readIdent();
        } else if (this.is(ch, '(){}[].,;:?')) {
          this.tokens.push({
            index: this.index,
            text: ch
          });
          this.index++;
        } else if (this.isWhitespace(ch)) {
          this.index++;
        } else {
          var ch2 = ch + this.peek();
          var ch3 = ch2 + this.peek(2);
          var op1 = OPERATORS[ch];
          var op2 = OPERATORS[ch2];
          var op3 = OPERATORS[ch3];
          if (op1 || op2 || op3) {
            var token = op3 ? ch3 : op2 ? ch2 : ch;
            this.tokens.push({
              index: this.index,
              text: token,
              operator: true
            });
            this.index += token.length;
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1);
          }
        }
      }
      return this.tokens;
    },
    is: function (ch, chars) {
      return chars.indexOf(ch) !== -1;
    },
    peek: function (i) {
      var num = i || 1;
      return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
    },
    isNumber: function (ch) {
      return '0' <= ch && ch <= '9' && typeof ch === 'string';
    },
    isWhitespace: function (ch) {
      // IE treats non-breaking space as \u00A0
      return ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\x0B' || ch === '\xa0';
    },
    isIdent: function (ch) {
      return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '_' === ch || ch === '$';
    },
    isExpOperator: function (ch) {
      return ch === '-' || ch === '+' || this.isNumber(ch);
    },
    throwError: function (error, start, end) {
      end = end || this.index;
      var colStr = isDefined(start) ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']' : ' ' + end;
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
    },
    readNumber: function () {
      var number = '';
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index));
        if (ch == '.' || this.isNumber(ch)) {
          number += ch;
        } else {
          var peekCh = this.peek();
          if (ch == 'e' && this.isExpOperator(peekCh)) {
            number += ch;
          } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) == 'e') {
            number += ch;
          } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) == 'e') {
            this.throwError('Invalid exponent');
          } else {
            break;
          }
        }
        this.index++;
      }
      this.tokens.push({
        index: start,
        text: number,
        constant: true,
        value: Number(number)
      });
    },
    readIdent: function () {
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        if (!(this.isIdent(ch) || this.isNumber(ch))) {
          break;
        }
        this.index++;
      }
      this.tokens.push({
        index: start,
        text: this.text.slice(start, this.index),
        identifier: true
      });
    },
    readString: function (quote) {
      var start = this.index;
      this.index++;
      var string = '';
      var rawString = quote;
      var escape = false;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        rawString += ch;
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5);
            if (!hex.match(/[\da-f]{4}/i))
              this.throwError('Invalid unicode escape [\\u' + hex + ']');
            this.index += 4;
            string += String.fromCharCode(parseInt(hex, 16));
          } else {
            var rep = ESCAPE[ch];
            string = string + (rep || ch);
          }
          escape = false;
        } else if (ch === '\\') {
          escape = true;
        } else if (ch === quote) {
          this.index++;
          this.tokens.push({
            index: start,
            text: rawString,
            constant: true,
            value: string
          });
          return;
        } else {
          string += ch;
        }
        this.index++;
      }
      this.throwError('Unterminated quote', start);
    }
  };
  function isConstant(exp) {
    return exp.constant;
  }
  /**
 * @constructor
 */
  var Parser = function (lexer, $filter, options) {
    this.lexer = lexer;
    this.$filter = $filter;
    this.options = options;
  };
  Parser.ZERO = extend(function () {
    return 0;
  }, {
    sharedGetter: true,
    constant: true
  });
  Parser.prototype = {
    constructor: Parser,
    parse: function (text) {
      this.text = text;
      this.tokens = this.lexer.lex(text);
      var value = this.statements();
      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0]);
      }
      value.literal = !!value.literal;
      value.constant = !!value.constant;
      return value;
    },
    primary: function () {
      var primary;
      if (this.expect('(')) {
        primary = this.filterChain();
        this.consume(')');
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration();
      } else if (this.expect('{')) {
        primary = this.object();
      } else if (this.peek().identifier && this.peek().text in CONSTANTS) {
        primary = CONSTANTS[this.consume().text];
      } else if (this.peek().identifier) {
        primary = this.identifier();
      } else if (this.peek().constant) {
        primary = this.constant();
      } else {
        this.throwError('not a primary expression', this.peek());
      }
      var next, context;
      while (next = this.expect('(', '[', '.')) {
        if (next.text === '(') {
          primary = this.functionCall(primary, context);
          context = null;
        } else if (next.text === '[') {
          context = primary;
          primary = this.objectIndex(primary);
        } else if (next.text === '.') {
          context = primary;
          primary = this.fieldAccess(primary);
        } else {
          this.throwError('IMPOSSIBLE');
        }
      }
      return primary;
    },
    throwError: function (msg, token) {
      throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
    },
    peekToken: function () {
      if (this.tokens.length === 0)
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      return this.tokens[0];
    },
    peek: function (e1, e2, e3, e4) {
      return this.peekAhead(0, e1, e2, e3, e4);
    },
    peekAhead: function (i, e1, e2, e3, e4) {
      if (this.tokens.length > i) {
        var token = this.tokens[i];
        var t = token.text;
        if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
          return token;
        }
      }
      return false;
    },
    expect: function (e1, e2, e3, e4) {
      var token = this.peek(e1, e2, e3, e4);
      if (token) {
        this.tokens.shift();
        return token;
      }
      return false;
    },
    consume: function (e1) {
      if (this.tokens.length === 0) {
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      }
      var token = this.expect(e1);
      if (!token) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
      }
      return token;
    },
    unaryFn: function (op, right) {
      var fn = OPERATORS[op];
      return extend(function $parseUnaryFn(self, locals) {
        return fn(self, locals, right);
      }, {
        constant: right.constant,
        inputs: [right]
      });
    },
    binaryFn: function (left, op, right, isBranching) {
      var fn = OPERATORS[op];
      return extend(function $parseBinaryFn(self, locals) {
        return fn(self, locals, left, right);
      }, {
        constant: left.constant && right.constant,
        inputs: !isBranching && [
          left,
          right
        ]
      });
    },
    identifier: function () {
      var id = this.consume().text;
      //Continue reading each `.identifier` unless it is a method invocation
      while (this.peek('.') && this.peekAhead(1).identifier && !this.peekAhead(2, '(')) {
        id += this.consume().text + this.consume().text;
      }
      return getterFn(id, this.options, this.text);
    },
    constant: function () {
      var value = this.consume().value;
      return extend(function $parseConstant() {
        return value;
      }, {
        constant: true,
        literal: true
      });
    },
    statements: function () {
      var statements = [];
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          statements.push(this.filterChain());
        if (!this.expect(';')) {
          // optimize for the common case where there is only one statement.
          // TODO(size): maybe we should not support multiple statements?
          return statements.length === 1 ? statements[0] : function $parseStatements(self, locals) {
            var value;
            for (var i = 0, ii = statements.length; i < ii; i++) {
              value = statements[i](self, locals);
            }
            return value;
          };
        }
      }
    },
    filterChain: function () {
      var left = this.expression();
      var token;
      while (token = this.expect('|')) {
        left = this.filter(left);
      }
      return left;
    },
    filter: function (inputFn) {
      var fn = this.$filter(this.consume().text);
      var argsFn;
      var args;
      if (this.peek(':')) {
        argsFn = [];
        args = [];
        // we can safely reuse the array
        while (this.expect(':')) {
          argsFn.push(this.expression());
        }
      }
      var inputs = [inputFn].concat(argsFn || []);
      return extend(function $parseFilter(self, locals) {
        var input = inputFn(self, locals);
        if (args) {
          args[0] = input;
          var i = argsFn.length;
          while (i--) {
            args[i + 1] = argsFn[i](self, locals);
          }
          return fn.apply(undefined, args);
        }
        return fn(input);
      }, {
        constant: !fn.$stateful && inputs.every(isConstant),
        inputs: !fn.$stateful && inputs
      });
    },
    expression: function () {
      return this.assignment();
    },
    assignment: function () {
      var left = this.ternary();
      var right;
      var token;
      if (token = this.expect('=')) {
        if (!left.assign) {
          this.throwError('implies assignment but [' + this.text.substring(0, token.index) + '] can not be assigned to', token);
        }
        right = this.ternary();
        return extend(function $parseAssignment(scope, locals) {
          return left.assign(scope, right(scope, locals), locals);
        }, {
          inputs: [
            left,
            right
          ]
        });
      }
      return left;
    },
    ternary: function () {
      var left = this.logicalOR();
      var middle;
      var token;
      if (token = this.expect('?')) {
        middle = this.assignment();
        if (this.consume(':')) {
          var right = this.assignment();
          return extend(function $parseTernary(self, locals) {
            return left(self, locals) ? middle(self, locals) : right(self, locals);
          }, { constant: left.constant && middle.constant && right.constant });
        }
      }
      return left;
    },
    logicalOR: function () {
      var left = this.logicalAND();
      var token;
      while (token = this.expect('||')) {
        left = this.binaryFn(left, token.text, this.logicalAND(), true);
      }
      return left;
    },
    logicalAND: function () {
      var left = this.equality();
      var token;
      while (token = this.expect('&&')) {
        left = this.binaryFn(left, token.text, this.equality(), true);
      }
      return left;
    },
    equality: function () {
      var left = this.relational();
      var token;
      while (token = this.expect('==', '!=', '===', '!==')) {
        left = this.binaryFn(left, token.text, this.relational());
      }
      return left;
    },
    relational: function () {
      var left = this.additive();
      var token;
      while (token = this.expect('<', '>', '<=', '>=')) {
        left = this.binaryFn(left, token.text, this.additive());
      }
      return left;
    },
    additive: function () {
      var left = this.multiplicative();
      var token;
      while (token = this.expect('+', '-')) {
        left = this.binaryFn(left, token.text, this.multiplicative());
      }
      return left;
    },
    multiplicative: function () {
      var left = this.unary();
      var token;
      while (token = this.expect('*', '/', '%')) {
        left = this.binaryFn(left, token.text, this.unary());
      }
      return left;
    },
    unary: function () {
      var token;
      if (this.expect('+')) {
        return this.primary();
      } else if (token = this.expect('-')) {
        return this.binaryFn(Parser.ZERO, token.text, this.unary());
      } else if (token = this.expect('!')) {
        return this.unaryFn(token.text, this.unary());
      } else {
        return this.primary();
      }
    },
    fieldAccess: function (object) {
      var getter = this.identifier();
      return extend(function $parseFieldAccess(scope, locals, self) {
        var o = self || object(scope, locals);
        return o == null ? undefined : getter(o);
      }, {
        assign: function (scope, value, locals) {
          var o = object(scope, locals);
          if (!o)
            object.assign(scope, o = {}, locals);
          return getter.assign(o, value);
        }
      });
    },
    objectIndex: function (obj) {
      var expression = this.text;
      var indexFn = this.expression();
      this.consume(']');
      return extend(function $parseObjectIndex(self, locals) {
        var o = obj(self, locals), i = indexFn(self, locals), v;
        ensureSafeMemberName(i, expression);
        if (!o)
          return undefined;
        v = ensureSafeObject(o[i], expression);
        return v;
      }, {
        assign: function (self, value, locals) {
          var key = ensureSafeMemberName(indexFn(self, locals), expression);
          // prevent overwriting of Function.constructor which would break ensureSafeObject check
          var o = ensureSafeObject(obj(self, locals), expression);
          if (!o)
            obj.assign(self, o = {}, locals);
          return o[key] = value;
        }
      });
    },
    functionCall: function (fnGetter, contextGetter) {
      var argsFn = [];
      if (this.peekToken().text !== ')') {
        do {
          argsFn.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(')');
      var expressionText = this.text;
      // we can safely reuse the array across invocations
      var args = argsFn.length ? [] : null;
      return function $parseFunctionCall(scope, locals) {
        var context = contextGetter ? contextGetter(scope, locals) : isDefined(contextGetter) ? undefined : scope;
        var fn = fnGetter(scope, locals, context) || noop;
        if (args) {
          var i = argsFn.length;
          while (i--) {
            args[i] = ensureSafeObject(argsFn[i](scope, locals), expressionText);
          }
        }
        ensureSafeObject(context, expressionText);
        ensureSafeFunction(fn, expressionText);
        // IE doesn't have apply for some native functions
        var v = fn.apply ? fn.apply(context, args) : fn(args[0], args[1], args[2], args[3], args[4]);
        if (args) {
          // Free-up the memory (arguments of the last function call).
          args.length = 0;
        }
        return ensureSafeObject(v, expressionText);
      };
    },
    arrayDeclaration: function () {
      var elementFns = [];
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            // Support trailing commas per ES5.1.
            break;
          }
          elementFns.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(']');
      return extend(function $parseArrayLiteral(self, locals) {
        var array = [];
        for (var i = 0, ii = elementFns.length; i < ii; i++) {
          array.push(elementFns[i](self, locals));
        }
        return array;
      }, {
        literal: true,
        constant: elementFns.every(isConstant),
        inputs: elementFns
      });
    },
    object: function () {
      var keys = [], valueFns = [];
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var token = this.consume();
          if (token.constant) {
            keys.push(token.value);
          } else if (token.identifier) {
            keys.push(token.text);
          } else {
            this.throwError('invalid key', token);
          }
          this.consume(':');
          valueFns.push(this.expression());
        } while (this.expect(','));
      }
      this.consume('}');
      return extend(function $parseObjectLiteral(self, locals) {
        var object = {};
        for (var i = 0, ii = valueFns.length; i < ii; i++) {
          object[keys[i]] = valueFns[i](self, locals);
        }
        return object;
      }, {
        literal: true,
        constant: valueFns.every(isConstant),
        inputs: valueFns
      });
    }
  };
  //////////////////////////////////////////////////
  // Parser helper functions
  //////////////////////////////////////////////////
  function setter(obj, locals, path, setValue, fullExp) {
    ensureSafeObject(obj, fullExp);
    ensureSafeObject(locals, fullExp);
    var element = path.split('.'), key;
    for (var i = 0; element.length > 1; i++) {
      key = ensureSafeMemberName(element.shift(), fullExp);
      var propertyObj = i === 0 && locals && locals[key] || obj[key];
      if (!propertyObj) {
        propertyObj = {};
        obj[key] = propertyObj;
      }
      obj = ensureSafeObject(propertyObj, fullExp);
    }
    key = ensureSafeMemberName(element.shift(), fullExp);
    ensureSafeObject(obj[key], fullExp);
    obj[key] = setValue;
    return setValue;
  }
  var getterFnCacheDefault = createMap();
  var getterFnCacheExpensive = createMap();
  function isPossiblyDangerousMemberName(name) {
    return name == 'constructor';
  }
  /**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, expensiveChecks) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    ensureSafeMemberName(key2, fullExp);
    ensureSafeMemberName(key3, fullExp);
    ensureSafeMemberName(key4, fullExp);
    var eso = function (o) {
      return ensureSafeObject(o, fullExp);
    };
    var eso0 = expensiveChecks || isPossiblyDangerousMemberName(key0) ? eso : identity;
    var eso1 = expensiveChecks || isPossiblyDangerousMemberName(key1) ? eso : identity;
    var eso2 = expensiveChecks || isPossiblyDangerousMemberName(key2) ? eso : identity;
    var eso3 = expensiveChecks || isPossiblyDangerousMemberName(key3) ? eso : identity;
    var eso4 = expensiveChecks || isPossiblyDangerousMemberName(key4) ? eso : identity;
    return function cspSafeGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope;
      if (pathVal == null)
        return pathVal;
      pathVal = eso0(pathVal[key0]);
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso1(pathVal[key1]);
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso2(pathVal[key2]);
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso3(pathVal[key3]);
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = eso4(pathVal[key4]);
      return pathVal;
    };
  }
  function getterFnWithEnsureSafeObject(fn, fullExpression) {
    return function (s, l) {
      return fn(s, l, ensureSafeObject, fullExpression);
    };
  }
  function getterFn(path, options, fullExp) {
    var expensiveChecks = options.expensiveChecks;
    var getterFnCache = expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault;
    var fn = getterFnCache[path];
    if (fn)
      return fn;
    var pathKeys = path.split('.'), pathKeysLength = pathKeys.length;
    // http://jsperf.com/angularjs-parse-getter/6
    if (options.csp) {
      if (pathKeysLength < 6) {
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, expensiveChecks);
      } else {
        fn = function cspSafeGetter(scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp, expensiveChecks)(scope, locals);
            locals = undefined;
            // clear after first iteration
            scope = val;
          } while (i < pathKeysLength);
          return val;
        };
      }
    } else {
      var code = '';
      if (expensiveChecks) {
        code += 's = eso(s, fe);\nl = eso(l, fe);\n';
      }
      var needsEnsureSafeObject = expensiveChecks;
      forEach(pathKeys, function (key, index) {
        ensureSafeMemberName(key, fullExp);
        var lookupJs = (index ? 's' : '((l&&l.hasOwnProperty("' + key + '"))?l:s)') + '.' + key;
        if (expensiveChecks || isPossiblyDangerousMemberName(key)) {
          lookupJs = 'eso(' + lookupJs + ', fe)';
          needsEnsureSafeObject = true;
        }
        code += 'if(s == null) return undefined;\n' + 's=' + lookupJs + ';\n';
      });
      code += 'return s;';
      /* jshint -W054 */
      var evaledFnGetter = new Function('s', 'l', 'eso', 'fe', code);
      // s=scope, l=locals, eso=ensureSafeObject
      /* jshint +W054 */
      evaledFnGetter.toString = valueFn(code);
      if (needsEnsureSafeObject) {
        evaledFnGetter = getterFnWithEnsureSafeObject(evaledFnGetter, fullExp);
      }
      fn = evaledFnGetter;
    }
    fn.sharedGetter = true;
    fn.assign = function (self, value, locals) {
      return setter(self, locals, path, value, path);
    };
    getterFnCache[path] = fn;
    return fn;
  }
  var objectValueOf = Object.prototype.valueOf;
  function getValueOf(value) {
    return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
  }
  ///////////////////////////////////
  /**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */
  /**
 * @ngdoc provider
 * @name $parseProvider
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
  function $ParseProvider() {
    var cacheDefault = createMap();
    var cacheExpensive = createMap();
    this.$get = [
      '$filter',
      '$sniffer',
      function ($filter, $sniffer) {
        var $parseOptions = {
            csp: $sniffer.csp,
            expensiveChecks: false
          }, $parseOptionsExpensive = {
            csp: $sniffer.csp,
            expensiveChecks: true
          };
        function wrapSharedExpression(exp) {
          var wrapped = exp;
          if (exp.sharedGetter) {
            wrapped = function $parseWrapper(self, locals) {
              return exp(self, locals);
            };
            wrapped.literal = exp.literal;
            wrapped.constant = exp.constant;
            wrapped.assign = exp.assign;
          }
          return wrapped;
        }
        return function $parse(exp, interceptorFn, expensiveChecks) {
          var parsedExpression, oneTime, cacheKey;
          switch (typeof exp) {
          case 'string':
            cacheKey = exp = exp.trim();
            var cache = expensiveChecks ? cacheExpensive : cacheDefault;
            parsedExpression = cache[cacheKey];
            if (!parsedExpression) {
              if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
                oneTime = true;
                exp = exp.substring(2);
              }
              var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
              var lexer = new Lexer(parseOptions);
              var parser = new Parser(lexer, $filter, parseOptions);
              parsedExpression = parser.parse(exp);
              if (parsedExpression.constant) {
                parsedExpression.$$watchDelegate = constantWatchDelegate;
              } else if (oneTime) {
                //oneTime is not part of the exp passed to the Parser so we may have to
                //wrap the parsedExpression before adding a $$watchDelegate
                parsedExpression = wrapSharedExpression(parsedExpression);
                parsedExpression.$$watchDelegate = parsedExpression.literal ? oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
              } else if (parsedExpression.inputs) {
                parsedExpression.$$watchDelegate = inputsWatchDelegate;
              }
              cache[cacheKey] = parsedExpression;
            }
            return addInterceptor(parsedExpression, interceptorFn);
          case 'function':
            return addInterceptor(exp, interceptorFn);
          default:
            return addInterceptor(noop, interceptorFn);
          }
        };
        function collectExpressionInputs(inputs, list) {
          for (var i = 0, ii = inputs.length; i < ii; i++) {
            var input = inputs[i];
            if (!input.constant) {
              if (input.inputs) {
                collectExpressionInputs(input.inputs, list);
              } else if (list.indexOf(input) === -1) {
                // TODO(perf) can we do better?
                list.push(input);
              }
            }
          }
          return list;
        }
        function expressionInputDirtyCheck(newValue, oldValueOfValue) {
          if (newValue == null || oldValueOfValue == null) {
            // null/undefined
            return newValue === oldValueOfValue;
          }
          if (typeof newValue === 'object') {
            // attempt to convert the value to a primitive type
            // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
            //             be cheaply dirty-checked
            newValue = getValueOf(newValue);
            if (typeof newValue === 'object') {
              // objects/arrays are not supported - deep-watching them would be too expensive
              return false;
            }  // fall-through to the primitive equality check
          }
          //Primitive or NaN
          return newValue === oldValueOfValue || newValue !== newValue && oldValueOfValue !== oldValueOfValue;
        }
        function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression) {
          var inputExpressions = parsedExpression.$$inputs || (parsedExpression.$$inputs = collectExpressionInputs(parsedExpression.inputs, []));
          var lastResult;
          if (inputExpressions.length === 1) {
            var oldInputValue = expressionInputDirtyCheck;
            // init to something unique so that equals check fails
            inputExpressions = inputExpressions[0];
            return scope.$watch(function expressionInputWatch(scope) {
              var newInputValue = inputExpressions(scope);
              if (!expressionInputDirtyCheck(newInputValue, oldInputValue)) {
                lastResult = parsedExpression(scope);
                oldInputValue = newInputValue && getValueOf(newInputValue);
              }
              return lastResult;
            }, listener, objectEquality);
          }
          var oldInputValueOfValues = [];
          for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
            oldInputValueOfValues[i] = expressionInputDirtyCheck;  // init to something unique so that equals check fails
          }
          return scope.$watch(function expressionInputsWatch(scope) {
            var changed = false;
            for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
              var newInputValue = inputExpressions[i](scope);
              if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
                oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
              }
            }
            if (changed) {
              lastResult = parsedExpression(scope);
            }
            return lastResult;
          }, listener, objectEquality);
        }
        function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
          var unwatch, lastValue;
          return unwatch = scope.$watch(function oneTimeWatch(scope) {
            return parsedExpression(scope);
          }, function oneTimeListener(value, old, scope) {
            lastValue = value;
            if (isFunction(listener)) {
              listener.apply(this, arguments);
            }
            if (isDefined(value)) {
              scope.$$postDigest(function () {
                if (isDefined(lastValue)) {
                  unwatch();
                }
              });
            }
          }, objectEquality);
        }
        function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
          var unwatch, lastValue;
          return unwatch = scope.$watch(function oneTimeWatch(scope) {
            return parsedExpression(scope);
          }, function oneTimeListener(value, old, scope) {
            lastValue = value;
            if (isFunction(listener)) {
              listener.call(this, value, old, scope);
            }
            if (isAllDefined(value)) {
              scope.$$postDigest(function () {
                if (isAllDefined(lastValue))
                  unwatch();
              });
            }
          }, objectEquality);
          function isAllDefined(value) {
            var allDefined = true;
            forEach(value, function (val) {
              if (!isDefined(val))
                allDefined = false;
            });
            return allDefined;
          }
        }
        function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
          var unwatch;
          return unwatch = scope.$watch(function constantWatch(scope) {
            return parsedExpression(scope);
          }, function constantListener(value, old, scope) {
            if (isFunction(listener)) {
              listener.apply(this, arguments);
            }
            unwatch();
          }, objectEquality);
        }
        function addInterceptor(parsedExpression, interceptorFn) {
          if (!interceptorFn)
            return parsedExpression;
          var watchDelegate = parsedExpression.$$watchDelegate;
          var regularWatch = watchDelegate !== oneTimeLiteralWatchDelegate && watchDelegate !== oneTimeWatchDelegate;
          var fn = regularWatch ? function regularInterceptedExpression(scope, locals) {
              var value = parsedExpression(scope, locals);
              return interceptorFn(value, scope, locals);
            } : function oneTimeInterceptedExpression(scope, locals) {
              var value = parsedExpression(scope, locals);
              var result = interceptorFn(value, scope, locals);
              // we only return the interceptor's result if the
              // initial value is defined (for bind-once)
              return isDefined(value) ? result : value;
            };
          // Propagate $$watchDelegates other then inputsWatchDelegate
          if (parsedExpression.$$watchDelegate && parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
            fn.$$watchDelegate = parsedExpression.$$watchDelegate;
          } else if (!interceptorFn.$stateful) {
            // If there is an interceptor, but no watchDelegate then treat the interceptor like
            // we treat filters - it is assumed to be a pure function unless flagged with $stateful
            fn.$$watchDelegate = inputsWatchDelegate;
            fn.inputs = [parsedExpression];
          }
          return fn;
        }
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
  function $QProvider() {
    this.$get = [
      '$rootScope',
      '$exceptionHandler',
      function ($rootScope, $exceptionHandler) {
        return qFactory(function (callback) {
          $rootScope.$evalAsync(callback);
        }, $exceptionHandler);
      }
    ];
  }
  function $$QProvider() {
    this.$get = [
      '$browser',
      '$exceptionHandler',
      function ($browser, $exceptionHandler) {
        return qFactory(function (callback) {
          $browser.defer(callback);
        }, $exceptionHandler);
      }
    ];
  }
  /**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
  function qFactory(nextTick, exceptionHandler) {
    var $qMinErr = minErr('$q', TypeError);
    function callOnce(self, resolveFn, rejectFn) {
      var called = false;
      function wrap(fn) {
        return function (value) {
          if (called)
            return;
          called = true;
          fn.call(self, value);
        };
      }
      return [
        wrap(resolveFn),
        wrap(rejectFn)
      ];
    }
    /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
    var defer = function () {
      return new Deferred();
    };
    function Promise() {
      this.$$state = { status: 0 };
    }
    Promise.prototype = {
      then: function (onFulfilled, onRejected, progressBack) {
        var result = new Deferred();
        this.$$state.pending = this.$$state.pending || [];
        this.$$state.pending.push([
          result,
          onFulfilled,
          onRejected,
          progressBack
        ]);
        if (this.$$state.status > 0)
          scheduleProcessQueue(this.$$state);
        return result.promise;
      },
      'catch': function (callback) {
        return this.then(null, callback);
      },
      'finally': function (callback, progressBack) {
        return this.then(function (value) {
          return handleCallback(value, true, callback);
        }, function (error) {
          return handleCallback(error, false, callback);
        }, progressBack);
      }
    };
    //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
    function simpleBind(context, fn) {
      return function (value) {
        fn.call(context, value);
      };
    }
    function processQueue(state) {
      var fn, promise, pending;
      pending = state.pending;
      state.processScheduled = false;
      state.pending = undefined;
      for (var i = 0, ii = pending.length; i < ii; ++i) {
        promise = pending[i][0];
        fn = pending[i][state.status];
        try {
          if (isFunction(fn)) {
            promise.resolve(fn(state.value));
          } else if (state.status === 1) {
            promise.resolve(state.value);
          } else {
            promise.reject(state.value);
          }
        } catch (e) {
          promise.reject(e);
          exceptionHandler(e);
        }
      }
    }
    function scheduleProcessQueue(state) {
      if (state.processScheduled || !state.pending)
        return;
      state.processScheduled = true;
      nextTick(function () {
        processQueue(state);
      });
    }
    function Deferred() {
      this.promise = new Promise();
      //Necessary to support unbound execution :/
      this.resolve = simpleBind(this, this.resolve);
      this.reject = simpleBind(this, this.reject);
      this.notify = simpleBind(this, this.notify);
    }
    Deferred.prototype = {
      resolve: function (val) {
        if (this.promise.$$state.status)
          return;
        if (val === this.promise) {
          this.$$reject($qMinErr('qcycle', 'Expected promise to be resolved with value other than itself \'{0}\'', val));
        } else {
          this.$$resolve(val);
        }
      },
      $$resolve: function (val) {
        var then, fns;
        fns = callOnce(this, this.$$resolve, this.$$reject);
        try {
          if (isObject(val) || isFunction(val))
            then = val && val.then;
          if (isFunction(then)) {
            this.promise.$$state.status = -1;
            then.call(val, fns[0], fns[1], this.notify);
          } else {
            this.promise.$$state.value = val;
            this.promise.$$state.status = 1;
            scheduleProcessQueue(this.promise.$$state);
          }
        } catch (e) {
          fns[1](e);
          exceptionHandler(e);
        }
      },
      reject: function (reason) {
        if (this.promise.$$state.status)
          return;
        this.$$reject(reason);
      },
      $$reject: function (reason) {
        this.promise.$$state.value = reason;
        this.promise.$$state.status = 2;
        scheduleProcessQueue(this.promise.$$state);
      },
      notify: function (progress) {
        var callbacks = this.promise.$$state.pending;
        if (this.promise.$$state.status <= 0 && callbacks && callbacks.length) {
          nextTick(function () {
            var callback, result;
            for (var i = 0, ii = callbacks.length; i < ii; i++) {
              result = callbacks[i][0];
              callback = callbacks[i][3];
              try {
                result.notify(isFunction(callback) ? callback(progress) : progress);
              } catch (e) {
                exceptionHandler(e);
              }
            }
          });
        }
      }
    };
    /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
    var reject = function (reason) {
      var result = new Deferred();
      result.reject(reason);
      return result.promise;
    };
    var makePromise = function makePromise(value, resolved) {
      var result = new Deferred();
      if (resolved) {
        result.resolve(value);
      } else {
        result.reject(value);
      }
      return result.promise;
    };
    var handleCallback = function handleCallback(value, isResolved, callback) {
      var callbackOutput = null;
      try {
        if (isFunction(callback))
          callbackOutput = callback();
      } catch (e) {
        return makePromise(e, false);
      }
      if (isPromiseLike(callbackOutput)) {
        return callbackOutput.then(function () {
          return makePromise(value, isResolved);
        }, function (error) {
          return makePromise(error, false);
        });
      } else {
        return makePromise(value, isResolved);
      }
    };
    /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */
    var when = function (value, callback, errback, progressBack) {
      var result = new Deferred();
      result.resolve(value);
      return result.promise.then(callback, errback, progressBack);
    };
    /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */
    function all(promises) {
      var deferred = new Deferred(), counter = 0, results = isArray(promises) ? [] : {};
      forEach(promises, function (promise, key) {
        counter++;
        when(promise).then(function (value) {
          if (results.hasOwnProperty(key))
            return;
          results[key] = value;
          if (!--counter)
            deferred.resolve(results);
        }, function (reason) {
          if (results.hasOwnProperty(key))
            return;
          deferred.reject(reason);
        });
      });
      if (counter === 0) {
        deferred.resolve(results);
      }
      return deferred.promise;
    }
    var $Q = function Q(resolver) {
      if (!isFunction(resolver)) {
        throw $qMinErr('norslvr', 'Expected resolverFn, got \'{0}\'', resolver);
      }
      if (!(this instanceof Q)) {
        // More useful when $Q is the Promise itself.
        return new Q(resolver);
      }
      var deferred = new Deferred();
      function resolveFn(value) {
        deferred.resolve(value);
      }
      function rejectFn(reason) {
        deferred.reject(reason);
      }
      resolver(resolveFn, rejectFn);
      return deferred.promise;
    };
    $Q.defer = defer;
    $Q.reject = reject;
    $Q.when = when;
    $Q.all = all;
    return $Q;
  }
  function $$RAFProvider() {
    //rAF
    this.$get = [
      '$window',
      '$timeout',
      function ($window, $timeout) {
        var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame;
        var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
        var rafSupported = !!requestAnimationFrame;
        var raf = rafSupported ? function (fn) {
            var id = requestAnimationFrame(fn);
            return function () {
              cancelAnimationFrame(id);
            };
          } : function (fn) {
            var timer = $timeout(fn, 16.66, false);
            // 1000 / 60 = 16.666
            return function () {
              $timeout.cancel(timer);
            };
          };
        raf.supported = rafSupported;
        return raf;
      }
    ];
  }
  /**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */
  /**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */
  /**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */
  /**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
  function $RootScopeProvider() {
    var TTL = 10;
    var $rootScopeMinErr = minErr('$rootScope');
    var lastDirtyWatch = null;
    var applyAsyncId = null;
    this.digestTtl = function (value) {
      if (arguments.length) {
        TTL = value;
      }
      return TTL;
    };
    this.$get = [
      '$injector',
      '$exceptionHandler',
      '$parse',
      '$browser',
      function ($injector, $exceptionHandler, $parse, $browser) {
        /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
        function Scope() {
          this.$id = nextUid();
          this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
          this.$root = this;
          this.$$destroyed = false;
          this.$$listeners = {};
          this.$$listenerCount = {};
          this.$$isolateBindings = null;
        }
        /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */
        /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */
        /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */
        Scope.prototype = {
          constructor: Scope,
          $new: function (isolate, parent) {
            var child;
            parent = parent || this;
            if (isolate) {
              child = new Scope();
              child.$root = this.$root;
            } else {
              // Only create a child scope class if somebody asks for one,
              // but cache it to allow the VM to optimize lookups.
              if (!this.$$ChildScope) {
                this.$$ChildScope = function ChildScope() {
                  this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                  this.$$listeners = {};
                  this.$$listenerCount = {};
                  this.$id = nextUid();
                  this.$$ChildScope = null;
                };
                this.$$ChildScope.prototype = this;
              }
              child = new this.$$ChildScope();
            }
            child.$parent = parent;
            child.$$prevSibling = parent.$$childTail;
            if (parent.$$childHead) {
              parent.$$childTail.$$nextSibling = child;
              parent.$$childTail = child;
            } else {
              parent.$$childHead = parent.$$childTail = child;
            }
            // When the new scope is not isolated or we inherit from `this`, and
            // the parent scope is destroyed, the property `$$destroyed` is inherited
            // prototypically. In all other cases, this property needs to be set
            // when the parent scope is destroyed.
            // The listener needs to be added after the parent is set
            if (isolate || parent != this)
              child.$on('$destroy', destroyChild);
            return child;
            function destroyChild() {
              child.$$destroyed = true;
            }
          },
          $watch: function (watchExp, listener, objectEquality) {
            var get = $parse(watchExp);
            if (get.$$watchDelegate) {
              return get.$$watchDelegate(this, listener, objectEquality, get);
            }
            var scope = this, array = scope.$$watchers, watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: watchExp,
                eq: !!objectEquality
              };
            lastDirtyWatch = null;
            if (!isFunction(listener)) {
              watcher.fn = noop;
            }
            if (!array) {
              array = scope.$$watchers = [];
            }
            // we use unshift since we use a while loop in $digest for speed.
            // the while loop reads in reverse order.
            array.unshift(watcher);
            return function deregisterWatch() {
              arrayRemove(array, watcher);
              lastDirtyWatch = null;
            };
          },
          $watchGroup: function (watchExpressions, listener) {
            var oldValues = new Array(watchExpressions.length);
            var newValues = new Array(watchExpressions.length);
            var deregisterFns = [];
            var self = this;
            var changeReactionScheduled = false;
            var firstRun = true;
            if (!watchExpressions.length) {
              // No expressions means we call the listener ASAP
              var shouldCall = true;
              self.$evalAsync(function () {
                if (shouldCall)
                  listener(newValues, newValues, self);
              });
              return function deregisterWatchGroup() {
                shouldCall = false;
              };
            }
            if (watchExpressions.length === 1) {
              // Special case size of one
              return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
                newValues[0] = value;
                oldValues[0] = oldValue;
                listener(newValues, value === oldValue ? newValues : oldValues, scope);
              });
            }
            forEach(watchExpressions, function (expr, i) {
              var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
                  newValues[i] = value;
                  oldValues[i] = oldValue;
                  if (!changeReactionScheduled) {
                    changeReactionScheduled = true;
                    self.$evalAsync(watchGroupAction);
                  }
                });
              deregisterFns.push(unwatchFn);
            });
            function watchGroupAction() {
              changeReactionScheduled = false;
              if (firstRun) {
                firstRun = false;
                listener(newValues, newValues, self);
              } else {
                listener(newValues, oldValues, self);
              }
            }
            return function deregisterWatchGroup() {
              while (deregisterFns.length) {
                deregisterFns.shift()();
              }
            };
          },
          $watchCollection: function (obj, listener) {
            $watchCollectionInterceptor.$stateful = true;
            var self = this;
            // the current value, updated on each dirty-check run
            var newValue;
            // a shallow copy of the newValue from the last dirty-check run,
            // updated to match newValue during dirty-check run
            var oldValue;
            // a shallow copy of the newValue from when the last change happened
            var veryOldValue;
            // only track veryOldValue if the listener is asking for it
            var trackVeryOldValue = listener.length > 1;
            var changeDetected = 0;
            var changeDetector = $parse(obj, $watchCollectionInterceptor);
            var internalArray = [];
            var internalObject = {};
            var initRun = true;
            var oldLength = 0;
            function $watchCollectionInterceptor(_value) {
              newValue = _value;
              var newLength, key, bothNaN, newItem, oldItem;
              // If the new value is undefined, then return undefined as the watch may be a one-time watch
              if (isUndefined(newValue))
                return;
              if (!isObject(newValue)) {
                // if primitive
                if (oldValue !== newValue) {
                  oldValue = newValue;
                  changeDetected++;
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  // we are transitioning from something which was not an array into array.
                  oldValue = internalArray;
                  oldLength = oldValue.length = 0;
                  changeDetected++;
                }
                newLength = newValue.length;
                if (oldLength !== newLength) {
                  // if lengths do not match we need to trigger change notification
                  changeDetected++;
                  oldValue.length = oldLength = newLength;
                }
                // copy the items to oldValue and look for changes.
                for (var i = 0; i < newLength; i++) {
                  oldItem = oldValue[i];
                  newItem = newValue[i];
                  bothNaN = oldItem !== oldItem && newItem !== newItem;
                  if (!bothNaN && oldItem !== newItem) {
                    changeDetected++;
                    oldValue[i] = newItem;
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  // we are transitioning from something which was not an object into object.
                  oldValue = internalObject = {};
                  oldLength = 0;
                  changeDetected++;
                }
                // copy the items to oldValue and look for changes.
                newLength = 0;
                for (key in newValue) {
                  if (newValue.hasOwnProperty(key)) {
                    newLength++;
                    newItem = newValue[key];
                    oldItem = oldValue[key];
                    if (key in oldValue) {
                      bothNaN = oldItem !== oldItem && newItem !== newItem;
                      if (!bothNaN && oldItem !== newItem) {
                        changeDetected++;
                        oldValue[key] = newItem;
                      }
                    } else {
                      oldLength++;
                      oldValue[key] = newItem;
                      changeDetected++;
                    }
                  }
                }
                if (oldLength > newLength) {
                  // we used to have more keys, need to find them and destroy them.
                  changeDetected++;
                  for (key in oldValue) {
                    if (!newValue.hasOwnProperty(key)) {
                      oldLength--;
                      delete oldValue[key];
                    }
                  }
                }
              }
              return changeDetected;
            }
            function $watchCollectionAction() {
              if (initRun) {
                initRun = false;
                listener(newValue, newValue, self);
              } else {
                listener(newValue, veryOldValue, self);
              }
              // make a copy for the next time a collection is changed
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  //primitive
                  veryOldValue = newValue;
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length);
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i];
                  }
                } else {
                  // if object
                  veryOldValue = {};
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key];
                    }
                  }
                }
              }
            }
            return this.$watch(changeDetector, $watchCollectionAction);
          },
          $digest: function () {
            var watch, value, last, watchers, length, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, logMsg, asyncTask;
            beginPhase('$digest');
            // Check for changes to browser url that happened in sync before the call to $digest
            $browser.$$checkUrlChange();
            if (this === $rootScope && applyAsyncId !== null) {
              // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
              // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
              $browser.defer.cancel(applyAsyncId);
              flushApplyAsync();
            }
            lastDirtyWatch = null;
            do {
              // "while dirty" loop
              dirty = false;
              current = target;
              while (asyncQueue.length) {
                try {
                  asyncTask = asyncQueue.shift();
                  asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
                } catch (e) {
                  $exceptionHandler(e);
                }
                lastDirtyWatch = null;
              }
              traverseScopesLoop:
                do {
                  // "traverse the scopes" loop
                  if (watchers = current.$$watchers) {
                    // process our watches
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        // Most common watches are on primitives, in which case we can short
                        // circuit it with === operator, only when === fails do we use .equals
                        if (watch) {
                          if ((value = watch.get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : typeof value === 'number' && typeof last === 'number' && isNaN(value) && isNaN(last))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value, null) : value;
                            watch.fn(value, last === initWatchVal ? value : last, current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx])
                                watchLog[logIdx] = [];
                              watchLog[logIdx].push({
                                msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                newVal: value,
                                oldVal: last
                              });
                            }
                          } else if (watch === lastDirtyWatch) {
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        $exceptionHandler(e);
                      }
                    }
                  }
                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $broadcast
                  if (!(next = current.$$childHead || current !== target && current.$$nextSibling)) {
                    while (current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while (current = next);
              // `break traverseScopesLoop;` takes us to here
              if ((dirty || asyncQueue.length) && !ttl--) {
                clearPhase();
                throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' + 'Watchers fired in the last 5 iterations: {1}', TTL, watchLog);
              }
            } while (dirty || asyncQueue.length);
            clearPhase();
            while (postDigestQueue.length) {
              try {
                postDigestQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          },
          $destroy: function () {
            // we can't destroy the root scope or a scope that has been already destroyed
            if (this.$$destroyed)
              return;
            var parent = this.$parent;
            this.$broadcast('$destroy');
            this.$$destroyed = true;
            if (this === $rootScope)
              return;
            for (var eventName in this.$$listenerCount) {
              decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
            }
            // sever all the references to parent scopes (after this cleanup, the current scope should
            // not be retained by any of our references and should be eligible for garbage collection)
            if (parent.$$childHead == this)
              parent.$$childHead = this.$$nextSibling;
            if (parent.$$childTail == this)
              parent.$$childTail = this.$$prevSibling;
            if (this.$$prevSibling)
              this.$$prevSibling.$$nextSibling = this.$$nextSibling;
            if (this.$$nextSibling)
              this.$$nextSibling.$$prevSibling = this.$$prevSibling;
            // Disable listeners, watchers and apply/digest methods
            this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
            this.$on = this.$watch = this.$watchGroup = function () {
              return noop;
            };
            this.$$listeners = {};
            // All of the code below is bogus code that works around V8's memory leak via optimized code
            // and inline caches.
            //
            // see:
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = this.$$watchers = null;
          },
          $eval: function (expr, locals) {
            return $parse(expr)(this, locals);
          },
          $evalAsync: function (expr, locals) {
            // if we are outside of an $digest loop and this is the first time we are scheduling async
            // task also schedule async auto-flush
            if (!$rootScope.$$phase && !asyncQueue.length) {
              $browser.defer(function () {
                if (asyncQueue.length) {
                  $rootScope.$digest();
                }
              });
            }
            asyncQueue.push({
              scope: this,
              expression: expr,
              locals: locals
            });
          },
          $$postDigest: function (fn) {
            postDigestQueue.push(fn);
          },
          $apply: function (expr) {
            try {
              beginPhase('$apply');
              return this.$eval(expr);
            } catch (e) {
              $exceptionHandler(e);
            } finally {
              clearPhase();
              try {
                $rootScope.$digest();
              } catch (e) {
                $exceptionHandler(e);
                throw e;
              }
            }
          },
          $applyAsync: function (expr) {
            var scope = this;
            expr && applyAsyncQueue.push($applyAsyncExpression);
            scheduleApplyAsync();
            function $applyAsyncExpression() {
              scope.$eval(expr);
            }
          },
          $on: function (name, listener) {
            var namedListeners = this.$$listeners[name];
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = [];
            }
            namedListeners.push(listener);
            var current = this;
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0;
              }
              current.$$listenerCount[name]++;
            } while (current = current.$parent);
            var self = this;
            return function () {
              var indexOfListener = namedListeners.indexOf(listener);
              if (indexOfListener !== -1) {
                namedListeners[indexOfListener] = null;
                decrementListenerCount(self, 1, name);
              }
            };
          },
          $emit: function (name, args) {
            var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                name: name,
                targetScope: scope,
                stopPropagation: function () {
                  stopPropagation = true;
                },
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), i, length;
            do {
              namedListeners = scope.$$listeners[name] || empty;
              event.currentScope = scope;
              for (i = 0, length = namedListeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  //allow all listeners attached to the current scope to run
                  namedListeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              //if any listener on the current scope stops propagation, prevent bubbling
              if (stopPropagation) {
                event.currentScope = null;
                return event;
              }
              //traverse upwards
              scope = scope.$parent;
            } while (scope);
            event.currentScope = null;
            return event;
          },
          $broadcast: function (name, args) {
            var target = this, current = target, next = target, event = {
                name: name,
                targetScope: target,
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              };
            if (!target.$$listenerCount[name])
              return event;
            var listenerArgs = concat([event], arguments, 1), listeners, i, length;
            //down while you can, then up and next sibling or up and next sibling until back at root
            while (current = next) {
              event.currentScope = current;
              listeners = current.$$listeners[name] || [];
              for (i = 0, length = listeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!listeners[i]) {
                  listeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  listeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              // Insanity Warning: scope depth-first traversal
              // yes, this code is a bit crazy, but it works and we have tests to prove it!
              // this piece should be kept in sync with the traversal in $digest
              // (though it differs due to having the extra check for $$listenerCount)
              if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                while (current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent;
                }
              }
            }
            event.currentScope = null;
            return event;
          }
        };
        var $rootScope = new Scope();
        //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
        var asyncQueue = $rootScope.$$asyncQueue = [];
        var postDigestQueue = $rootScope.$$postDigestQueue = [];
        var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
        return $rootScope;
        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
          }
          $rootScope.$$phase = phase;
        }
        function clearPhase() {
          $rootScope.$$phase = null;
        }
        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count;
            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name];
            }
          } while (current = current.$parent);
        }
        /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
        function initWatchVal() {
        }
        function flushApplyAsync() {
          while (applyAsyncQueue.length) {
            try {
              applyAsyncQueue.shift()();
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          applyAsyncId = null;
        }
        function scheduleApplyAsync() {
          if (applyAsyncId === null) {
            applyAsyncId = $browser.defer(function () {
              $rootScope.$apply(flushApplyAsync);
            });
          }
        }
      }
    ];
  }
  /**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
  function $$SanitizeUriProvider() {
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
    /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationWhitelist = regexp;
        return this;
      }
      return aHrefSanitizationWhitelist;
    };
    /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationWhitelist = regexp;
        return this;
      }
      return imgSrcSanitizationWhitelist;
    };
    this.$get = function () {
      return function sanitizeUri(uri, isImage) {
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
        var normalizedVal;
        normalizedVal = urlResolve(uri).href;
        if (normalizedVal !== '' && !normalizedVal.match(regex)) {
          return 'unsafe:' + normalizedVal;
        }
        return uri;
      };
    };
  }
  var $sceMinErr = minErr('$sce');
  var SCE_CONTEXTS = {
      HTML: 'html',
      CSS: 'css',
      URL: 'url',
      RESOURCE_URL: 'resourceUrl',
      JS: 'js'
    };
  // Helper functions follow.
  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher;
    } else if (isString(matcher)) {
      // Strings match exactly except for 2 wildcards - '*' and '**'.
      // '*' matches any character except those from the set ':/.?&'.
      // '**' matches any character (like .* in a RegExp).
      // More than 2 *'s raises an error as it's ill defined.
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
      }
      matcher = escapeForRegexp(matcher).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
      return new RegExp('^' + matcher + '$');
    } else if (isRegExp(matcher)) {
      // The only other type of matcher allowed is a Regexp.
      // Match entire URL / disallow partial matches.
      // Flags are reset (i.e. no global, ignoreCase or multiline)
      return new RegExp('^' + matcher.source + '$');
    } else {
      throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
    }
  }
  function adjustMatchers(matchers) {
    var adjustedMatchers = [];
    if (isDefined(matchers)) {
      forEach(matchers, function (matcher) {
        adjustedMatchers.push(adjustMatcher(matcher));
      });
    }
    return adjustedMatchers;
  }
  /**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */
  /**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */
  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS;
    // Resource URLs can also be trusted by policy.
    var resourceUrlWhitelist = ['self'], resourceUrlBlacklist = [];
    /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
    this.resourceUrlWhitelist = function (value) {
      if (arguments.length) {
        resourceUrlWhitelist = adjustMatchers(value);
      }
      return resourceUrlWhitelist;
    };
    /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */
    this.resourceUrlBlacklist = function (value) {
      if (arguments.length) {
        resourceUrlBlacklist = adjustMatchers(value);
      }
      return resourceUrlBlacklist;
    };
    this.$get = [
      '$injector',
      function ($injector) {
        var htmlSanitizer = function htmlSanitizer(html) {
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        };
        if ($injector.has('$sanitize')) {
          htmlSanitizer = $injector.get('$sanitize');
        }
        function matchUrl(matcher, parsedUrl) {
          if (matcher === 'self') {
            return urlIsSameOrigin(parsedUrl);
          } else {
            // definitely a regex.  See adjustMatchers()
            return !!matcher.exec(parsedUrl.href);
          }
        }
        function isResourceUrlAllowedByPolicy(url) {
          var parsedUrl = urlResolve(url.toString());
          var i, n, allowed = false;
          // Ensure that at least one item from the whitelist allows this url.
          for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
            if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
              allowed = true;
              break;
            }
          }
          if (allowed) {
            // Ensure that no item from the blacklist blocked this url.
            for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
              if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                allowed = false;
                break;
              }
            }
          }
          return allowed;
        }
        function generateHolderType(Base) {
          var holderType = function TrustedValueHolderType(trustedValue) {
            this.$$unwrapTrustedValue = function () {
              return trustedValue;
            };
          };
          if (Base) {
            holderType.prototype = new Base();
          }
          holderType.prototype.valueOf = function sceValueOf() {
            return this.$$unwrapTrustedValue();
          };
          holderType.prototype.toString = function sceToString() {
            return this.$$unwrapTrustedValue().toString();
          };
          return holderType;
        }
        var trustedValueHolderBase = generateHolderType(), byType = {};
        byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
        /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
        function trustAs(type, trustedValue) {
          var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (!Constructor) {
            throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
          }
          if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
            return trustedValue;
          }
          // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
          // mutable objects, we ensure here that the value passed in is actually a string.
          if (typeof trustedValue !== 'string') {
            throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
          }
          return new Constructor(trustedValue);
        }
        /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
        function valueOf(maybeTrusted) {
          if (maybeTrusted instanceof trustedValueHolderBase) {
            return maybeTrusted.$$unwrapTrustedValue();
          } else {
            return maybeTrusted;
          }
        }
        /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
        function getTrusted(type, maybeTrusted) {
          if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
            return maybeTrusted;
          }
          var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (constructor && maybeTrusted instanceof constructor) {
            return maybeTrusted.$$unwrapTrustedValue();
          }
          // If we get here, then we may only take one of two actions.
          // 1. sanitize the value for the requested type, or
          // 2. throw an exception.
          if (type === SCE_CONTEXTS.RESOURCE_URL) {
            if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
              return maybeTrusted;
            } else {
              throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
            }
          } else if (type === SCE_CONTEXTS.HTML) {
            return htmlSanitizer(maybeTrusted);
          }
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        }
        return {
          trustAs: trustAs,
          getTrusted: getTrusted,
          valueOf: valueOf
        };
      }
    ];
  }
  /**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */
  /* jshint maxlen: false*/
  /**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *           self.userComments = userComments;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
  /* jshint maxlen: 100 */
  function $SceProvider() {
    var enabled = true;
    /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value;
      }
      return enabled;
    };
    /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */
    this.$get = [
      '$parse',
      '$sceDelegate',
      function ($parse, $sceDelegate) {
        // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
        // the "expression(javascript expression)" syntax which is insecure.
        if (enabled && msie < 8) {
          throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' + 'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' + 'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
        }
        var sce = shallowCopy(SCE_CONTEXTS);
        /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
        sce.isEnabled = function () {
          return enabled;
        };
        sce.trustAs = $sceDelegate.trustAs;
        sce.getTrusted = $sceDelegate.getTrusted;
        sce.valueOf = $sceDelegate.valueOf;
        if (!enabled) {
          sce.trustAs = sce.getTrusted = function (type, value) {
            return value;
          };
          sce.valueOf = identity;
        }
        /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        sce.parseAs = function sceParseAs(type, expr) {
          var parsed = $parse(expr);
          if (parsed.literal && parsed.constant) {
            return parsed;
          } else {
            return $parse(expr, function (value) {
              return sce.getTrusted(type, value);
            });
          }
        };
        /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        // Shorthand delegations.
        var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
        forEach(SCE_CONTEXTS, function (enumValue, name) {
          var lName = lowercase(name);
          sce[camelCase('parse_as_' + lName)] = function (expr) {
            return parse(enumValue, expr);
          };
          sce[camelCase('get_trusted_' + lName)] = function (value) {
            return getTrusted(enumValue, value);
          };
          sce[camelCase('trust_as_' + lName)] = function (value) {
            return trustAs(enumValue, value);
          };
        });
        return sce;
      }
    ];
  }
  /**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
  function $SnifferProvider() {
    this.$get = [
      '$window',
      '$document',
      function ($window, $document) {
        var eventSupport = {}, android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, vendorPrefix, vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = false, animations = false, match;
        if (bodyStyle) {
          for (var prop in bodyStyle) {
            if (match = vendorRegex.exec(prop)) {
              vendorPrefix = match[0];
              vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
              break;
            }
          }
          if (!vendorPrefix) {
            vendorPrefix = 'WebkitOpacity' in bodyStyle && 'webkit';
          }
          transitions = !!('transition' in bodyStyle || vendorPrefix + 'Transition' in bodyStyle);
          animations = !!('animation' in bodyStyle || vendorPrefix + 'Animation' in bodyStyle);
          if (android && (!transitions || !animations)) {
            transitions = isString(document.body.style.webkitTransition);
            animations = isString(document.body.style.webkitAnimation);
          }
        }
        return {
          history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
          hasEvent: function (event) {
            // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
            // it. In particular the event is not fired when backspace or delete key are pressed or
            // when cut operation is performed.
            // IE10+ implements 'input' event but it erroneously fires under various situations,
            // e.g. when placeholder changes, or a form is focused.
            if (event === 'input' && msie <= 11)
              return false;
            if (isUndefined(eventSupport[event])) {
              var divElm = document.createElement('div');
              eventSupport[event] = 'on' + event in divElm;
            }
            return eventSupport[event];
          },
          csp: csp(),
          vendorPrefix: vendorPrefix,
          transitions: transitions,
          animations: animations,
          android: android
        };
      }
    ];
  }
  var $compileMinErr = minErr('$compile');
  /**
 * @ngdoc service
 * @name $templateRequest
 *
 * @description
 * The `$templateRequest` service downloads the provided template using `$http` and, upon success,
 * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data
 * of the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted
 * by setting the 2nd parameter of the function to true).
 *
 * @param {string} tpl The HTTP request template URL
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *
 * @return {Promise} the HTTP Promise for the given.
 *
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
 */
  function $TemplateRequestProvider() {
    this.$get = [
      '$templateCache',
      '$http',
      '$q',
      function ($templateCache, $http, $q) {
        function handleRequestFn(tpl, ignoreRequestError) {
          handleRequestFn.totalPendingRequests++;
          var transformResponse = $http.defaults && $http.defaults.transformResponse;
          if (isArray(transformResponse)) {
            transformResponse = transformResponse.filter(function (transformer) {
              return transformer !== defaultHttpResponseTransform;
            });
          } else if (transformResponse === defaultHttpResponseTransform) {
            transformResponse = null;
          }
          var httpOptions = {
              cache: $templateCache,
              transformResponse: transformResponse
            };
          return $http.get(tpl, httpOptions).finally(function () {
            handleRequestFn.totalPendingRequests--;
          }).then(function (response) {
            return response.data;
          }, handleError);
          function handleError(resp) {
            if (!ignoreRequestError) {
              throw $compileMinErr('tpload', 'Failed to load template: {0}', tpl);
            }
            return $q.reject(resp);
          }
        }
        handleRequestFn.totalPendingRequests = 0;
        return handleRequestFn;
      }
    ];
  }
  function $$TestabilityProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$location',
      function ($rootScope, $browser, $location) {
        /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
        var testability = {};
        /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
        testability.findBindings = function (element, expression, opt_exactMatch) {
          var bindings = element.getElementsByClassName('ng-binding');
          var matches = [];
          forEach(bindings, function (binding) {
            var dataBinding = angular.element(binding).data('$binding');
            if (dataBinding) {
              forEach(dataBinding, function (bindingName) {
                if (opt_exactMatch) {
                  var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
                  if (matcher.test(bindingName)) {
                    matches.push(binding);
                  }
                } else {
                  if (bindingName.indexOf(expression) != -1) {
                    matches.push(binding);
                  }
                }
              });
            }
          });
          return matches;
        };
        /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
        testability.findModels = function (element, expression, opt_exactMatch) {
          var prefixes = [
              'ng-',
              'data-ng-',
              'ng\\:'
            ];
          for (var p = 0; p < prefixes.length; ++p) {
            var attributeEquals = opt_exactMatch ? '=' : '*=';
            var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
            var elements = element.querySelectorAll(selector);
            if (elements.length) {
              return elements;
            }
          }
        };
        /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
        testability.getLocation = function () {
          return $location.url();
        };
        /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
        testability.setLocation = function (url) {
          if (url !== $location.url()) {
            $location.url(url);
            $rootScope.$digest();
          }
        };
        /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
        testability.whenStable = function (callback) {
          $browser.notifyWhenNoOutstandingRequests(callback);
        };
        return testability;
      }
    ];
  }
  function $TimeoutProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$q',
      '$$q',
      '$exceptionHandler',
      function ($rootScope, $browser, $q, $$q, $exceptionHandler) {
        var deferreds = {};
        /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
        function timeout(fn, delay, invokeApply) {
          var skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise, timeoutId;
          timeoutId = $browser.defer(function () {
            try {
              deferred.resolve(fn());
            } catch (e) {
              deferred.reject(e);
              $exceptionHandler(e);
            } finally {
              delete deferreds[promise.$$timeoutId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          promise.$$timeoutId = timeoutId;
          deferreds[timeoutId] = deferred;
          return promise;
        }
        /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
        timeout.cancel = function (promise) {
          if (promise && promise.$$timeoutId in deferreds) {
            deferreds[promise.$$timeoutId].reject('canceled');
            delete deferreds[promise.$$timeoutId];
            return $browser.defer.cancel(promise.$$timeoutId);
          }
          return false;
        };
        return timeout;
      }
    ];
  }
  // NOTE:  The usage of window and document instead of $window and $document here is
  // deliberate.  This service depends on the specific behavior of anchor nodes created by the
  // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
  // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
  // doesn't know about mocked locations and resolves URLs to the real document - which is
  // exactly the behavior needed here.  There is little value is mocking these out for this
  // service.
  var urlParsingNode = document.createElement('a');
  var originUrl = urlResolve(window.location.href);
  /**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
  function urlResolve(url) {
    var href = url;
    if (msie) {
      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute('href', href);
    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }
  /**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
  function urlIsSameOrigin(requestUrl) {
    var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
    return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
  }
  /**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
  function $WindowProvider() {
    this.$get = valueFn(window);
  }
  /* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */
  /**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */
  /**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
  $FilterProvider.$inject = ['$provide'];
  function $FilterProvider($provide) {
    var suffix = 'Filter';
    /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
    function register(name, factory) {
      if (isObject(name)) {
        var filters = {};
        forEach(name, function (filter, key) {
          filters[key] = register(key, filter);
        });
        return filters;
      } else {
        return $provide.factory(name + suffix, factory);
      }
    }
    this.register = register;
    this.$get = [
      '$injector',
      function ($injector) {
        return function (name) {
          return $injector.get(name + suffix);
        };
      }
    ];
    ////////////////////////////////////////
    /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */
    register('currency', currencyFilter);
    register('date', dateFilter);
    register('filter', filterFilter);
    register('json', jsonFilter);
    register('limitTo', limitToFilter);
    register('lowercase', lowercaseFilter);
    register('number', numberFilter);
    register('orderBy', orderByFilter);
    register('uppercase', uppercaseFilter);
  }
  /**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object or its nested object properties. That's equivalent to the simple
 *     substring match with a `string` as described above. The predicate can be negated by prefixing
 *     the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The
 *     function is called for each element of `array`. The final result is an array of those
 *     elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
  function filterFilter() {
    return function (array, expression, comparator) {
      if (!isArray(array))
        return array;
      var predicateFn;
      var matchAgainstAnyProp;
      switch (typeof expression) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
      //jshint -W086
      case 'object':
        //jshint +W086
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
        break;
      default:
        return array;
      }
      return array.filter(predicateFn);
    };
  }
  // Helper functions for `filterFilter`
  function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
    var shouldMatchPrimitives = isObject(expression) && '$' in expression;
    var predicateFn;
    if (comparator === true) {
      comparator = equals;
    } else if (!isFunction(comparator)) {
      comparator = function (actual, expected) {
        if (isObject(actual) || isObject(expected)) {
          // Prevent an object to be considered equal to a string like `'[object'`
          return false;
        }
        actual = lowercase('' + actual);
        expected = lowercase('' + expected);
        return actual.indexOf(expected) !== -1;
      };
    }
    predicateFn = function (item) {
      if (shouldMatchPrimitives && !isObject(item)) {
        return deepCompare(item, expression.$, comparator, false);
      }
      return deepCompare(item, expression, comparator, matchAgainstAnyProp);
    };
    return predicateFn;
  }
  function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
    var actualType = typeof actual;
    var expectedType = typeof expected;
    if (expectedType === 'string' && expected.charAt(0) === '!') {
      return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
    } else if (isArray(actual)) {
      // In case `actual` is an array, consider it a match
      // if ANY of it's items matches `expected`
      return actual.some(function (item) {
        return deepCompare(item, expected, comparator, matchAgainstAnyProp);
      });
    }
    switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if (key.charAt(0) !== '$' && deepCompare(actual[key], expected, comparator, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal)) {
            continue;
          }
          var matchAnyProperty = key === '$';
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
      break;
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
    }
  }
  /**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
       });
     </file>
   </example>
 */
  currencyFilter.$inject = ['$locale'];
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (amount, currencySymbol, fractionSize) {
      if (isUndefined(currencySymbol)) {
        currencySymbol = formats.CURRENCY_SYM;
      }
      if (isUndefined(fractionSize)) {
        fractionSize = formats.PATTERNS[1].maxFrac;
      }
      // if null or undefined pass it through
      return amount == null ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(/\u00A4/g, currencySymbol);
    };
  }
  /**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */
  numberFilter.$inject = ['$locale'];
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (number, fractionSize) {
      // if null or undefined pass it through
      return number == null ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
    };
  }
  var DECIMAL_SEP = '.';
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (!isFinite(number) || isObject(number))
      return '';
    var isNegative = number < 0;
    number = Math.abs(number);
    var numStr = number + '', formatedText = '', parts = [];
    var hasExponent = false;
    if (numStr.indexOf('e') !== -1) {
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {
        number = 0;
      } else {
        formatedText = numStr;
        hasExponent = true;
      }
    }
    if (!hasExponent) {
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;
      // determine fractionSize if it is not specified
      if (isUndefined(fractionSize)) {
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
      }
      // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
      // inspired by:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
      number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);
      var fraction = ('' + number).split(DECIMAL_SEP);
      var whole = fraction[0];
      fraction = fraction[1] || '';
      var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
      if (whole.length >= lgroup + group) {
        pos = whole.length - lgroup;
        for (i = 0; i < pos; i++) {
          if ((pos - i) % group === 0 && i !== 0) {
            formatedText += groupSep;
          }
          formatedText += whole.charAt(i);
        }
      }
      for (i = pos; i < whole.length; i++) {
        if ((whole.length - i) % lgroup === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
      // format fraction part.
      while (fraction.length < fractionSize) {
        fraction += '0';
      }
      if (fractionSize && fractionSize !== '0')
        formatedText += decimalSep + fraction.substr(0, fractionSize);
    } else {
      if (fractionSize > 0 && number < 1) {
        formatedText = number.toFixed(fractionSize);
        number = parseFloat(formatedText);
      }
    }
    if (number === 0) {
      isNegative = false;
    }
    parts.push(isNegative ? pattern.negPre : pattern.posPre, formatedText, isNegative ? pattern.negSuf : pattern.posSuf);
    return parts.join('');
  }
  function padNumber(num, digits, trim) {
    var neg = '';
    if (num < 0) {
      neg = '-';
      num = -num;
    }
    num = '' + num;
    while (num.length < digits)
      num = '0' + num;
    if (trim)
      num = num.substr(num.length - digits);
    return neg + num;
  }
  function dateGetter(name, size, offset, trim) {
    offset = offset || 0;
    return function (date) {
      var value = date['get' + name]();
      if (offset > 0 || value > -offset)
        value += offset;
      if (value === 0 && offset == -12)
        value = 12;
      return padNumber(value, size, trim);
    };
  }
  function dateStrGetter(name, shortForm) {
    return function (date, formats) {
      var value = date['get' + name]();
      var get = uppercase(shortForm ? 'SHORT' + name : name);
      return formats[get][value];
    };
  }
  function timeZoneGetter(date) {
    var zone = -1 * date.getTimezoneOffset();
    var paddedZone = zone >= 0 ? '+' : '';
    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
    return paddedZone;
  }
  function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
  }
  function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()));
  }
  function weekGetter(size) {
    return function (date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date);
      var diff = +thisThurs - +firstThurs, result = 1 + Math.round(diff / 604800000);
      // 6.048e8 ms per week
      return padNumber(result, size);
    };
  }
  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
  }
  var DATE_FORMATS = {
      yyyy: dateGetter('FullYear', 4),
      yy: dateGetter('FullYear', 2, 0, true),
      y: dateGetter('FullYear', 1),
      MMMM: dateStrGetter('Month'),
      MMM: dateStrGetter('Month', true),
      MM: dateGetter('Month', 2, 1),
      M: dateGetter('Month', 1, 1),
      dd: dateGetter('Date', 2),
      d: dateGetter('Date', 1),
      HH: dateGetter('Hours', 2),
      H: dateGetter('Hours', 1),
      hh: dateGetter('Hours', 2, -12),
      h: dateGetter('Hours', 1, -12),
      mm: dateGetter('Minutes', 2),
      m: dateGetter('Minutes', 1),
      ss: dateGetter('Seconds', 2),
      s: dateGetter('Seconds', 1),
      sss: dateGetter('Milliseconds', 3),
      EEEE: dateStrGetter('Day'),
      EEE: dateStrGetter('Day', true),
      a: ampmGetter,
      Z: timeZoneGetter,
      ww: weekGetter(2),
      w: weekGetter(1)
    };
  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/, NUMBER_STRING = /^\-?\d+$/;
  /**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. Right now, only `'UTC'` is supported.
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
  dateFilter.$inject = ['$locale'];
  function dateFilter($locale) {
    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    // 1        2       3         4          5          6          7          8  9     10      11
    function jsonStringToDate(string) {
      var match;
      if (match = string.match(R_ISO8601_STR)) {
        var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
          tzHour = int(match[9] + match[10]);
          tzMin = int(match[9] + match[11]);
        }
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
        var h = int(match[4] || 0) - tzHour;
        var m = int(match[5] || 0) - tzMin;
        var s = int(match[6] || 0);
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }
      return string;
    }
    return function (date, format, timezone) {
      var text = '', parts = [], fn, match;
      format = format || 'mediumDate';
      format = $locale.DATETIME_FORMATS[format] || format;
      if (isString(date)) {
        date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
      }
      if (isNumber(date)) {
        date = new Date(date);
      }
      if (!isDate(date)) {
        return date;
      }
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      if (timezone && timezone === 'UTC') {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
      }
      forEach(parts, function (value) {
        fn = DATE_FORMATS[value];
        text += fn ? fn(date, $locale.DATETIME_FORMATS) : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
      });
      return text;
    };
  }
  /**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
  function jsonFilter() {
    return function (object, spacing) {
      if (isUndefined(spacing)) {
        spacing = 2;
      }
      return toJson(object, spacing);
    };
  }
  /**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
  var lowercaseFilter = valueFn(lowercase);
  /**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
  var uppercaseFilter = valueFn(uppercase);
  /**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
 * converted to a string.
 *
 * @param {Array|string|number} input Source array, string or number to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         Limit {{longNumber}} to: <input type="number" step="1" ng-model="longNumberLimit">
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
  function limitToFilter() {
    return function (input, limit) {
      if (isNumber(input))
        input = input.toString();
      if (!isArray(input) && !isString(input))
        return input;
      if (Math.abs(Number(limit)) === Infinity) {
        limit = Number(limit);
      } else {
        limit = int(limit);
      }
      //NaN check on limit
      if (limit) {
        return limit > 0 ? input.slice(0, limit) : input.slice(limit);
      } else {
        return isString(input) ? '' : [];
      }
    };
  }
  /**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
  orderByFilter.$inject = ['$parse'];
  function orderByFilter($parse) {
    return function (array, sortPredicate, reverseOrder) {
      if (!isArrayLike(array))
        return array;
      sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
      if (sortPredicate.length === 0) {
        sortPredicate = ['+'];
      }
      sortPredicate = sortPredicate.map(function (predicate) {
        var descending = false, get = predicate || identity;
        if (isString(predicate)) {
          if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {
            descending = predicate.charAt(0) == '-';
            predicate = predicate.substring(1);
          }
          if (predicate === '') {
            // Effectively no predicate was passed so we compare identity
            return reverseComparator(compare, descending);
          }
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            return reverseComparator(function (a, b) {
              return compare(a[key], b[key]);
            }, descending);
          }
        }
        return reverseComparator(function (a, b) {
          return compare(get(a), get(b));
        }, descending);
      });
      return slice.call(array).sort(reverseComparator(comparator, reverseOrder));
      function comparator(o1, o2) {
        for (var i = 0; i < sortPredicate.length; i++) {
          var comp = sortPredicate[i](o1, o2);
          if (comp !== 0)
            return comp;
        }
        return 0;
      }
      function reverseComparator(comp, descending) {
        return descending ? function (a, b) {
          return comp(b, a);
        } : comp;
      }
      function isPrimitive(value) {
        switch (typeof value) {
        case 'number':
        /* falls through */
        case 'boolean':
        /* falls through */
        case 'string':
          return true;
        default:
          return false;
        }
      }
      function objectToString(value) {
        if (value === null)
          return 'null';
        if (typeof value.valueOf === 'function') {
          value = value.valueOf();
          if (isPrimitive(value))
            return value;
        }
        if (typeof value.toString === 'function') {
          value = value.toString();
          if (isPrimitive(value))
            return value;
        }
        return '';
      }
      function compare(v1, v2) {
        var t1 = typeof v1;
        var t2 = typeof v2;
        if (t1 === t2 && t1 === 'object') {
          v1 = objectToString(v1);
          v2 = objectToString(v2);
        }
        if (t1 === t2) {
          if (t1 === 'string') {
            v1 = v1.toLowerCase();
            v2 = v2.toLowerCase();
          }
          if (v1 === v2)
            return 0;
          return v1 < v2 ? -1 : 1;
        } else {
          return t1 < t2 ? -1 : 1;
        }
      }
    };
  }
  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = { link: directive };
    }
    directive.restrict = directive.restrict || 'AC';
    return valueFn(directive);
  }
  /**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
  var htmlAnchorDirective = valueFn({
      restrict: 'E',
      compile: function (element, attr) {
        if (!attr.href && !attr.xlinkHref && !attr.name) {
          return function (scope, element) {
            // If the linked element is not an anchor tag anymore, do nothing
            if (element[0].nodeName.toLowerCase() !== 'a')
              return;
            // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
            var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
            element.on('click', function (event) {
              // if we have no href url, then don't navigate anywhere.
              if (!element.attr(href)) {
                event.preventDefault();
              }
            });
          };
        }
      }
    });
  /**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */
  /**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */
  /**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */
  /**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * We shouldn't do this, because it will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * ```html
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as disabled. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngDisabled` directive solves this problem for the `disabled` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then special attribute "disabled" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */
  var ngAttributeAliasDirectives = {};
  // boolean attrs are evaluated
  forEach(BOOLEAN_ATTR, function (propName, attrName) {
    // binding to multiple is not supported
    if (propName == 'multiple')
      return;
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        restrict: 'A',
        priority: 100,
        link: function (scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
      };
    };
  });
  // aliased input attrs are evaluated
  forEach(ALIASED_ATTR, function (htmlAttr, ngAttr) {
    ngAttributeAliasDirectives[ngAttr] = function () {
      return {
        priority: 100,
        link: function (scope, element, attr) {
          //special case ngPattern when a literal regular expression value
          //is used as the expression (this way we don't have to watch anything).
          if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) == '/') {
            var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
            if (match) {
              attr.$set('ngPattern', new RegExp(match[1], match[2]));
              return;
            }
          }
          scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
            attr.$set(ngAttr, value);
          });
        }
      };
    };
  });
  // ng-src, ng-srcset, ng-href are interpolated
  forEach([
    'src',
    'srcset',
    'href'
  ], function (attrName) {
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 99,
        link: function (scope, element, attr) {
          var propName = attrName, name = attrName;
          if (attrName === 'href' && toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
            name = 'xlinkHref';
            attr.$attr[name] = 'xlink:href';
            propName = null;
          }
          attr.$observe(normalized, function (value) {
            if (!value) {
              if (attrName === 'href') {
                attr.$set(name, null);
              }
              return;
            }
            attr.$set(name, value);
            // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
            // to set the property as well to achieve the desired effect.
            // we use attr[attrName] value since $set can sanitize the url.
            if (msie && propName)
              element.prop(propName, attr[name]);
          });
        }
      };
    };
  });
  /* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
 */
  var nullFormCtrl = {
      $addControl: noop,
      $$renameControl: nullFormRenameControl,
      $removeControl: noop,
      $setValidity: noop,
      $setDirty: noop,
      $setPristine: noop,
      $setSubmitted: noop
    }, SUBMITTED_CLASS = 'ng-submitted';
  function nullFormRenameControl(control, name) {
    control.$name = name;
  }
  /**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
  //asks for $scope to fool the BC controller module
  FormController.$inject = [
    '$element',
    '$attrs',
    '$scope',
    '$animate',
    '$interpolate'
  ];
  function FormController(element, attrs, $scope, $animate, $interpolate) {
    var form = this, controls = [];
    var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;
    // init state
    form.$error = {};
    form.$$success = {};
    form.$pending = undefined;
    form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
    form.$dirty = false;
    form.$pristine = true;
    form.$valid = true;
    form.$invalid = false;
    form.$submitted = false;
    parentForm.$addControl(form);
    /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
    form.$rollbackViewValue = function () {
      forEach(controls, function (control) {
        control.$rollbackViewValue();
      });
    };
    /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
    form.$commitViewValue = function () {
      forEach(controls, function (control) {
        control.$commitViewValue();
      });
    };
    /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
    form.$addControl = function (control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);
      if (control.$name) {
        form[control.$name] = control;
      }
    };
    // Private API: rename a form control
    form.$$renameControl = function (control, newName) {
      var oldName = control.$name;
      if (form[oldName] === control) {
        delete form[oldName];
      }
      form[newName] = control;
      control.$name = newName;
    };
    /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
    form.$removeControl = function (control) {
      if (control.$name && form[control.$name] === control) {
        delete form[control.$name];
      }
      forEach(form.$pending, function (value, name) {
        form.$setValidity(name, null, control);
      });
      forEach(form.$error, function (value, name) {
        form.$setValidity(name, null, control);
      });
      forEach(form.$$success, function (value, name) {
        form.$setValidity(name, null, control);
      });
      arrayRemove(controls, control);
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
    addSetValidityMethod({
      ctrl: this,
      $element: element,
      set: function (object, property, controller) {
        var list = object[property];
        if (!list) {
          object[property] = [controller];
        } else {
          var index = list.indexOf(controller);
          if (index === -1) {
            list.push(controller);
          }
        }
      },
      unset: function (object, property, controller) {
        var list = object[property];
        if (!list) {
          return;
        }
        arrayRemove(list, controller);
        if (list.length === 0) {
          delete object[property];
        }
      },
      parentForm: parentForm,
      $animate: $animate
    });
    /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
    form.$setDirty = function () {
      $animate.removeClass(element, PRISTINE_CLASS);
      $animate.addClass(element, DIRTY_CLASS);
      form.$dirty = true;
      form.$pristine = false;
      parentForm.$setDirty();
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
    form.$setPristine = function () {
      $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
      form.$dirty = false;
      form.$pristine = true;
      form.$submitted = false;
      forEach(controls, function (control) {
        control.$setPristine();
      });
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
    form.$setUntouched = function () {
      forEach(controls, function (control) {
        control.$setUntouched();
      });
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
    form.$setSubmitted = function () {
      $animate.addClass(element, SUBMITTED_CLASS);
      form.$submitted = true;
      parentForm.$setSubmitted();
    };
  }
  /**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */
  /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
  var formDirectiveFactory = function (isNgForm) {
    return [
      '$timeout',
      function ($timeout) {
        var formDirective = {
            name: 'form',
            restrict: isNgForm ? 'EAC' : 'E',
            controller: FormController,
            compile: function ngFormCompile(formElement) {
              // Setup initial state of the control
              formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
              return {
                pre: function ngFormPreLink(scope, formElement, attr, controller) {
                  // if `action` attr is not present on the form, prevent the default action (submission)
                  if (!('action' in attr)) {
                    // we can't use jq events because if a form is destroyed during submission the default
                    // action is not prevented. see #1238
                    //
                    // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                    // page reload if the form was destroyed by submission of the form via a click handler
                    // on a button in the form. Looks like an IE9 specific bug.
                    var handleFormSubmission = function (event) {
                      scope.$apply(function () {
                        controller.$commitViewValue();
                        controller.$setSubmitted();
                      });
                      event.preventDefault();
                    };
                    addEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                    // unregister the preventDefault listener so that we don't not leak memory but in a
                    // way that will achieve the prevention of the default action.
                    formElement.on('$destroy', function () {
                      $timeout(function () {
                        removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                      }, 0, false);
                    });
                  }
                  var parentFormCtrl = controller.$$parentForm, alias = controller.$name;
                  if (alias) {
                    setter(scope, null, alias, controller, alias);
                    attr.$observe(attr.name ? 'name' : 'ngForm', function (newValue) {
                      if (alias === newValue)
                        return;
                      setter(scope, null, alias, undefined, alias);
                      alias = newValue;
                      setter(scope, null, alias, controller, alias);
                      parentFormCtrl.$$renameControl(controller, alias);
                    });
                  }
                  formElement.on('$destroy', function () {
                    parentFormCtrl.$removeControl(controller);
                    if (alias) {
                      setter(scope, null, alias, undefined, alias);
                    }
                    extend(controller, nullFormCtrl);  //stop propagating child destruction handlers upwards
                  });
                }
              };
            }
          };
        return formDirective;
      }
    ];
  };
  var formDirective = formDirectiveFactory();
  var ngFormDirective = formDirectiveFactory(true);
  /* global VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  UNTOUCHED_CLASS: false,
  TOUCHED_CLASS: false,
  $ngModelMinErr: false,
*/
  // Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
  var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
  var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
  var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
  var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
  var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
  var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
  var inputType = {
      'text': textInputType,
      'date': createDateInputType('date', DATE_REGEXP, createDateParser(DATE_REGEXP, [
        'yyyy',
        'MM',
        'dd'
      ]), 'yyyy-MM-dd'),
      'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [
        'yyyy',
        'MM',
        'dd',
        'HH',
        'mm',
        'ss',
        'sss'
      ]), 'yyyy-MM-ddTHH:mm:ss.sss'),
      'time': createDateInputType('time', TIME_REGEXP, createDateParser(TIME_REGEXP, [
        'HH',
        'mm',
        'ss',
        'sss'
      ]), 'HH:mm:ss.sss'),
      'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),
      'month': createDateInputType('month', MONTH_REGEXP, createDateParser(MONTH_REGEXP, [
        'yyyy',
        'MM'
      ]), 'yyyy-MM'),
      'number': numberInputType,
      'url': urlInputType,
      'email': emailInputType,
      'radio': radioInputType,
      'checkbox': checkboxInputType,
      'hidden': noop,
      'button': noop,
      'submit': noop,
      'reset': noop,
      'file': noop
    };
  function stringBasedInputType(ctrl) {
    ctrl.$formatters.push(function (value) {
      return ctrl.$isEmpty(value) ? value : value.toString();
    });
  }
  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    stringBasedInputType(ctrl);
  }
  function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var type = lowercase(element[0].type);
    // In composition mode, users are still inputing intermediate text buffer,
    // hold the listener until composition is done.
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
    if (!$sniffer.android) {
      var composing = false;
      element.on('compositionstart', function (data) {
        composing = true;
      });
      element.on('compositionend', function () {
        composing = false;
        listener();
      });
    }
    var listener = function (ev) {
      if (timeout) {
        $browser.defer.cancel(timeout);
        timeout = null;
      }
      if (composing)
        return;
      var value = element.val(), event = ev && ev.type;
      // By default we will trim the value
      // If the attribute ng-trim exists we will avoid trimming
      // If input type is 'password', the value is never trimmed
      if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
        value = trim(value);
      }
      // If a control is suffering from bad input (due to native validators), browsers discard its
      // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
      // control's value is the same empty value twice in a row.
      if (ctrl.$viewValue !== value || value === '' && ctrl.$$hasNativeValidators) {
        ctrl.$setViewValue(value, event);
      }
    };
    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
    // input event on backspace, delete or cut
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener);
    } else {
      var timeout;
      var deferListener = function (ev, input, origValue) {
        if (!timeout) {
          timeout = $browser.defer(function () {
            timeout = null;
            if (!input || input.value !== origValue) {
              listener(ev);
            }
          });
        }
      };
      element.on('keydown', function (event) {
        var key = event.keyCode;
        // ignore
        //    command            modifiers                   arrows
        if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40)
          return;
        deferListener(event, this, this.value);
      });
      // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut', deferListener);
      }
    }
    // if user paste into input using mouse on older browser
    // or form autocomplete on newer browser, we need "change" event to catch it
    element.on('change', listener);
    ctrl.$render = function () {
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
    };
  }
  function weekParser(isoWeek, existingDate) {
    if (isDate(isoWeek)) {
      return isoWeek;
    }
    if (isString(isoWeek)) {
      WEEK_REGEXP.lastIndex = 0;
      var parts = WEEK_REGEXP.exec(isoWeek);
      if (parts) {
        var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = (week - 1) * 7;
        if (existingDate) {
          hours = existingDate.getHours();
          minutes = existingDate.getMinutes();
          seconds = existingDate.getSeconds();
          milliseconds = existingDate.getMilliseconds();
        }
        return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
      }
    }
    return NaN;
  }
  function createDateParser(regexp, mapping) {
    return function (iso, date) {
      var parts, map;
      if (isDate(iso)) {
        return iso;
      }
      if (isString(iso)) {
        // When a date is JSON'ified to wraps itself inside of an extra
        // set of double quotes. This makes the date parsing code unable
        // to match the date string and parse it as a date.
        if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
          iso = iso.substring(1, iso.length - 1);
        }
        if (ISO_DATE_REGEXP.test(iso)) {
          return new Date(iso);
        }
        regexp.lastIndex = 0;
        parts = regexp.exec(iso);
        if (parts) {
          parts.shift();
          if (date) {
            map = {
              yyyy: date.getFullYear(),
              MM: date.getMonth() + 1,
              dd: date.getDate(),
              HH: date.getHours(),
              mm: date.getMinutes(),
              ss: date.getSeconds(),
              sss: date.getMilliseconds() / 1000
            };
          } else {
            map = {
              yyyy: 1970,
              MM: 1,
              dd: 1,
              HH: 0,
              mm: 0,
              ss: 0,
              sss: 0
            };
          }
          forEach(parts, function (part, index) {
            if (index < mapping.length) {
              map[mapping[index]] = +part;
            }
          });
          return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
        }
      }
      return NaN;
    };
  }
  function createDateInputType(type, regexp, parseDate, format) {
    return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
      badInputChecker(scope, element, attr, ctrl);
      baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
      var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
      var previousDate;
      ctrl.$$parserName = type;
      ctrl.$parsers.push(function (value) {
        if (ctrl.$isEmpty(value))
          return null;
        if (regexp.test(value)) {
          // Note: We cannot read ctrl.$modelValue, as there might be a different
          // parser/formatter in the processing chain so that the model
          // contains some different data format!
          var parsedDate = parseDate(value, previousDate);
          if (timezone === 'UTC') {
            parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());
          }
          return parsedDate;
        }
        return undefined;
      });
      ctrl.$formatters.push(function (value) {
        if (value && !isDate(value)) {
          throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
        }
        if (isValidDate(value)) {
          previousDate = value;
          if (previousDate && timezone === 'UTC') {
            var timezoneOffset = 60000 * previousDate.getTimezoneOffset();
            previousDate = new Date(previousDate.getTime() + timezoneOffset);
          }
          return $filter('date')(value, format, timezone);
        } else {
          previousDate = null;
          return '';
        }
      });
      if (isDefined(attr.min) || attr.ngMin) {
        var minVal;
        ctrl.$validators.min = function (value) {
          return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
        };
        attr.$observe('min', function (val) {
          minVal = parseObservedDateValue(val);
          ctrl.$validate();
        });
      }
      if (isDefined(attr.max) || attr.ngMax) {
        var maxVal;
        ctrl.$validators.max = function (value) {
          return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
        };
        attr.$observe('max', function (val) {
          maxVal = parseObservedDateValue(val);
          ctrl.$validate();
        });
      }
      function isValidDate(value) {
        // Invalid Date: getTime() returns NaN
        return value && !(value.getTime && value.getTime() !== value.getTime());
      }
      function parseObservedDateValue(val) {
        return isDefined(val) ? isDate(val) ? val : parseDate(val) : undefined;
      }
    };
  }
  function badInputChecker(scope, element, attr, ctrl) {
    var node = element[0];
    var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
    if (nativeValidation) {
      ctrl.$parsers.push(function (value) {
        var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
        // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
        // - also sets validity.badInput (should only be validity.typeMismatch).
        // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
        // - can ignore this case as we can still read out the erroneous email...
        return validity.badInput && !validity.typeMismatch ? undefined : value;
      });
    }
  }
  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    ctrl.$$parserName = 'number';
    ctrl.$parsers.push(function (value) {
      if (ctrl.$isEmpty(value))
        return null;
      if (NUMBER_REGEXP.test(value))
        return parseFloat(value);
      return undefined;
    });
    ctrl.$formatters.push(function (value) {
      if (!ctrl.$isEmpty(value)) {
        if (!isNumber(value)) {
          throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
        }
        value = value.toString();
      }
      return value;
    });
    if (attr.min || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function (value) {
        return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
      };
      attr.$observe('min', function (val) {
        if (isDefined(val) && !isNumber(val)) {
          val = parseFloat(val, 10);
        }
        minVal = isNumber(val) && !isNaN(val) ? val : undefined;
        // TODO(matsko): implement validateLater to reduce number of validations
        ctrl.$validate();
      });
    }
    if (attr.max || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function (value) {
        return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
      };
      attr.$observe('max', function (val) {
        if (isDefined(val) && !isNumber(val)) {
          val = parseFloat(val, 10);
        }
        maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
        // TODO(matsko): implement validateLater to reduce number of validations
        ctrl.$validate();
      });
    }
  }
  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    // Note: no badInputChecker here by purpose as `url` is only a validation
    // in browsers, i.e. we can always read out input.value even if it is not valid!
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    stringBasedInputType(ctrl);
    ctrl.$$parserName = 'url';
    ctrl.$validators.url = function (modelValue, viewValue) {
      var value = modelValue || viewValue;
      return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
    };
  }
  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    // Note: no badInputChecker here by purpose as `url` is only a validation
    // in browsers, i.e. we can always read out input.value even if it is not valid!
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    stringBasedInputType(ctrl);
    ctrl.$$parserName = 'email';
    ctrl.$validators.email = function (modelValue, viewValue) {
      var value = modelValue || viewValue;
      return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
    };
  }
  function radioInputType(scope, element, attr, ctrl) {
    // make the name unique, if not defined
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid());
    }
    var listener = function (ev) {
      if (element[0].checked) {
        ctrl.$setViewValue(attr.value, ev && ev.type);
      }
    };
    element.on('click', listener);
    ctrl.$render = function () {
      var value = attr.value;
      element[0].checked = value == ctrl.$viewValue;
    };
    attr.$observe('value', ctrl.$render);
  }
  function parseConstantExpr($parse, context, name, expression, fallback) {
    var parseFn;
    if (isDefined(expression)) {
      parseFn = $parse(expression);
      if (!parseFn.constant) {
        throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' + '`{1}`.', name, expression);
      }
      return parseFn(context);
    }
    return fallback;
  }
  function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
    var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
    var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);
    var listener = function (ev) {
      ctrl.$setViewValue(element[0].checked, ev && ev.type);
    };
    element.on('click', listener);
    ctrl.$render = function () {
      element[0].checked = ctrl.$viewValue;
    };
    // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
    // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
    // it to a boolean.
    ctrl.$isEmpty = function (value) {
      return value === false;
    };
    ctrl.$formatters.push(function (value) {
      return equals(value, trueValue);
    });
    ctrl.$parsers.push(function (value) {
      return value ? trueValue : falseValue;
    });
  }
  /**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */
  /**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
  var inputDirective = [
      '$browser',
      '$sniffer',
      '$filter',
      '$parse',
      function ($browser, $sniffer, $filter, $parse) {
        return {
          restrict: 'E',
          require: ['?ngModel'],
          link: {
            pre: function (scope, element, attr, ctrls) {
              if (ctrls[0]) {
                (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
              }
            }
          }
        };
      }
    ];
  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
  /**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
 * the bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using
 * {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * Likewise, `ngValue` can be used to generate `<option>` elements for
 * the {@link select `select`} element. In that case however, only strings are supported
 * for the `value `attribute, so the resulting `ngModel` will always be a string.
 * Support for `select` models with non-string values is available via `ngOptions`.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
  var ngValueDirective = function () {
    return {
      restrict: 'A',
      priority: 100,
      compile: function (tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            attr.$set('value', scope.$eval(attr.ngValue));
          };
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              attr.$set('value', value);
            });
          };
        }
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
  var ngBindDirective = [
      '$compile',
      function ($compile) {
        return {
          restrict: 'AC',
          compile: function ngBindCompile(templateElement) {
            $compile.$$addBindingClass(templateElement);
            return function ngBindLink(scope, element, attr) {
              $compile.$$addBindingInfo(element, attr.ngBind);
              element = element[0];
              scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
                element.textContent = value === undefined ? '' : value;
              });
            };
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
  var ngBindTemplateDirective = [
      '$interpolate',
      '$compile',
      function ($interpolate, $compile) {
        return {
          compile: function ngBindTemplateCompile(templateElement) {
            $compile.$$addBindingClass(templateElement);
            return function ngBindTemplateLink(scope, element, attr) {
              var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
              $compile.$$addBindingInfo(element, interpolateFn.expressions);
              element = element[0];
              attr.$observe('ngBindTemplate', function (value) {
                element.textContent = value === undefined ? '' : value;
              });
            };
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
  var ngBindHtmlDirective = [
      '$sce',
      '$parse',
      '$compile',
      function ($sce, $parse, $compile) {
        return {
          restrict: 'A',
          compile: function ngBindHtmlCompile(tElement, tAttrs) {
            var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
            var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
                return (value || '').toString();
              });
            $compile.$$addBindingClass(tElement);
            return function ngBindHtmlLink(scope, element, attr) {
              $compile.$$addBindingInfo(element, attr.ngBindHtml);
              scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
                // we re-evaluate the expr because we want a TrustedValueHolderType
                // for $sce, not a string
                element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
              });
            };
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
  var ngChangeDirective = valueFn({
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        ctrl.$viewChangeListeners.push(function () {
          scope.$eval(attr.ngChange);
        });
      }
    });
  function classDirective(name, selector) {
    name = 'ngClass' + name;
    return [
      '$animate',
      function ($animate) {
        return {
          restrict: 'AC',
          link: function (scope, element, attr) {
            var oldVal;
            scope.$watch(attr[name], ngClassWatchAction, true);
            attr.$observe('class', function (value) {
              ngClassWatchAction(scope.$eval(attr[name]));
            });
            if (name !== 'ngClass') {
              scope.$watch('$index', function ($index, old$index) {
                // jshint bitwise: false
                var mod = $index & 1;
                if (mod !== (old$index & 1)) {
                  var classes = arrayClasses(scope.$eval(attr[name]));
                  mod === selector ? addClasses(classes) : removeClasses(classes);
                }
              });
            }
            function addClasses(classes) {
              var newClasses = digestClassCounts(classes, 1);
              attr.$addClass(newClasses);
            }
            function removeClasses(classes) {
              var newClasses = digestClassCounts(classes, -1);
              attr.$removeClass(newClasses);
            }
            function digestClassCounts(classes, count) {
              var classCounts = element.data('$classCounts') || {};
              var classesToUpdate = [];
              forEach(classes, function (className) {
                if (count > 0 || classCounts[className]) {
                  classCounts[className] = (classCounts[className] || 0) + count;
                  if (classCounts[className] === +(count > 0)) {
                    classesToUpdate.push(className);
                  }
                }
              });
              element.data('$classCounts', classCounts);
              return classesToUpdate.join(' ');
            }
            function updateClasses(oldClasses, newClasses) {
              var toAdd = arrayDifference(newClasses, oldClasses);
              var toRemove = arrayDifference(oldClasses, newClasses);
              toAdd = digestClassCounts(toAdd, 1);
              toRemove = digestClassCounts(toRemove, -1);
              if (toAdd && toAdd.length) {
                $animate.addClass(element, toAdd);
              }
              if (toRemove && toRemove.length) {
                $animate.removeClass(element, toRemove);
              }
            }
            function ngClassWatchAction(newVal) {
              if (selector === true || scope.$index % 2 === selector) {
                var newClasses = arrayClasses(newVal || []);
                if (!oldVal) {
                  addClasses(newClasses);
                } else if (!equals(newVal, oldVal)) {
                  var oldClasses = arrayClasses(oldVal);
                  updateClasses(oldClasses, newClasses);
                }
              }
              oldVal = shallowCopy(newVal);
            }
          }
        };
        function arrayDifference(tokens1, tokens2) {
          var values = [];
          outer:
            for (var i = 0; i < tokens1.length; i++) {
              var token = tokens1[i];
              for (var j = 0; j < tokens2.length; j++) {
                if (token == tokens2[j])
                  continue outer;
              }
              values.push(token);
            }
          return values;
        }
        function arrayClasses(classVal) {
          if (isArray(classVal)) {
            return classVal;
          } else if (isString(classVal)) {
            return classVal.split(' ');
          } else if (isObject(classVal)) {
            var classes = [];
            forEach(classVal, function (v, k) {
              if (v) {
                classes = classes.concat(k.split(' '));
              }
            });
            return classes;
          }
          return classVal;
        }
      }
    ];
  }
  /**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * **add** - happens just before the class is applied to the elements
 *
 * **remove** - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and
   {@link ng.$animate#removeClass $animate.removeClass}.
 */
  var ngClassDirective = classDirective('', true);
  /**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassOddDirective = classDirective('Odd', 0);
  /**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassEvenDirective = classDirective('Even', 1);
  /**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
  var ngCloakDirective = ngDirective({
      compile: function (element, attr) {
        attr.$set('ngCloak', undefined);
        element.removeClass('ng-cloak');
      }
    });
  /**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
  var ngControllerDirective = [function () {
        return {
          restrict: 'A',
          scope: true,
          controller: '@',
          priority: 500
        };
      }];
  /**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      // Note: the suffix `.csp` in the example name triggers
      // csp mode in our http server!
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  // jshint evil:true
                  try {
                    eval('1+2');
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('protractor/node_modules/selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */
  // ngCsp is not implemented as a proper directive any more, because we need it be processed while we
  // bootstrap the system (before $parse is instantiated), for this reason we just have
  // the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc
  /**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
  /*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
  var ngEventDirectives = {};
  // For events that might fire synchronously during DOM manipulation
  // we need to execute their event handlers asynchronously using $evalAsync,
  // so that they are not executed in an inconsistent state.
  var forceAsyncEvents = {
      'blur': true,
      'focus': true
    };
  forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = [
      '$parse',
      '$rootScope',
      function ($parse, $rootScope) {
        return {
          restrict: 'A',
          compile: function ($element, attr) {
            // We expose the powerful $event object on the scope that provides access to the Window,
            // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
            // checks at the cost of speed since event handler expressions are not executed as
            // frequently as regular change detection.
            var fn = $parse(attr[directiveName], null, true);
            return function ngEventHandler(scope, element) {
              element.on(eventName, function (event) {
                var callback = function () {
                  fn(scope, { $event: event });
                };
                if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                  scope.$evalAsync(callback);
                } else {
                  scope.$apply(callback);
                }
              });
            };
          }
        };
      }
    ];
  });
  /**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */
  /**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */
  /**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
  var ngIfDirective = [
      '$animate',
      function ($animate) {
        return {
          multiElement: true,
          transclude: 'element',
          priority: 600,
          terminal: true,
          restrict: 'A',
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var block, childScope, previousElements;
            $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
              if (value) {
                if (!childScope) {
                  $transclude(function (clone, newScope) {
                    childScope = newScope;
                    clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block = { clone: clone };
                    $animate.enter(clone, $element.parent(), $element);
                  });
                }
              } else {
                if (previousElements) {
                  previousElements.remove();
                  previousElements = null;
                }
                if (childScope) {
                  childScope.$destroy();
                  childScope = null;
                }
                if (block) {
                  previousElements = getBlockNodes(block.clone);
                  $animate.leave(previousElements).then(function () {
                    previousElements = null;
                  });
                  block = null;
                }
              }
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
  var ngIncludeDirective = [
      '$templateRequest',
      '$anchorScroll',
      '$animate',
      '$sce',
      function ($templateRequest, $anchorScroll, $animate, $sce) {
        return {
          restrict: 'ECA',
          priority: 400,
          terminal: true,
          transclude: 'element',
          controller: angular.noop,
          compile: function (element, attr) {
            var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
            return function (scope, $element, $attr, ctrl, $transclude) {
              var changeCounter = 0, currentScope, previousElement, currentElement;
              var cleanupLastIncludeContent = function () {
                if (previousElement) {
                  previousElement.remove();
                  previousElement = null;
                }
                if (currentScope) {
                  currentScope.$destroy();
                  currentScope = null;
                }
                if (currentElement) {
                  $animate.leave(currentElement).then(function () {
                    previousElement = null;
                  });
                  previousElement = currentElement;
                  currentElement = null;
                }
              };
              scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
                var afterAnimation = function () {
                  if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                    $anchorScroll();
                  }
                };
                var thisChangeId = ++changeCounter;
                if (src) {
                  //set the 2nd param to true to ignore the template request error so that the inner
                  //contents and scope can be cleaned up.
                  $templateRequest(src, true).then(function (response) {
                    if (thisChangeId !== changeCounter)
                      return;
                    var newScope = scope.$new();
                    ctrl.template = response;
                    // Note: This will also link all children of ng-include that were contained in the original
                    // html. If that content contains controllers, ... they could pollute/change the scope.
                    // However, using ng-include on an element with additional content does not make sense...
                    // Note: We can't remove them in the cloneAttchFn of $transclude as that
                    // function is called before linking the content, which would apply child
                    // directives to non existing elements.
                    var clone = $transclude(newScope, function (clone) {
                        cleanupLastIncludeContent();
                        $animate.enter(clone, null, $element).then(afterAnimation);
                      });
                    currentScope = newScope;
                    currentElement = clone;
                    currentScope.$emit('$includeContentLoaded', src);
                    scope.$eval(onloadExp);
                  }, function () {
                    if (thisChangeId === changeCounter) {
                      cleanupLastIncludeContent();
                      scope.$emit('$includeContentError', src);
                    }
                  });
                  scope.$emit('$includeContentRequested', src);
                } else {
                  cleanupLastIncludeContent();
                  ctrl.template = null;
                }
              });
            };
          }
        };
      }
    ];
  // This directive is called during the $transclude call of the first `ngInclude` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngInclude
  // is called.
  var ngIncludeFillContentDirective = [
      '$compile',
      function ($compile) {
        return {
          restrict: 'ECA',
          priority: -400,
          require: 'ngInclude',
          link: function (scope, $element, $attr, ctrl) {
            if (/SVG/.test($element[0].toString())) {
              // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
              // support innerHTML, so detect this here and try to generate the contents
              // specially.
              $element.empty();
              $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope, function namespaceAdaptedClone(clone) {
                $element.append(clone);
              }, { futureParentElement: $element });
              return;
            }
            $element.html(ctrl.template);
            $compile($element.contents())(scope);
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
  var ngInitDirective = ngDirective({
      priority: 450,
      compile: function () {
        return {
          pre: function (scope, element, attrs) {
            scope.$eval(attrs.ngInit);
          }
        };
      }
    });
  /**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      List: <input name="namesInput" ng-model="names" ng-list required>
 *      <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on whitespace
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
  var ngListDirective = function () {
    return {
      restrict: 'A',
      priority: 100,
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        // We want to control whitespace trimming so we use this convoluted approach
        // to access the ngList attribute, which doesn't pre-trim the attribute
        var ngList = element.attr(attr.$attr.ngList) || ', ';
        var trimValues = attr.ngTrim !== 'false';
        var separator = trimValues ? trim(ngList) : ngList;
        var parse = function (viewValue) {
          // If the viewValue is invalid (say required but empty) it will be `undefined`
          if (isUndefined(viewValue))
            return;
          var list = [];
          if (viewValue) {
            forEach(viewValue.split(separator), function (value) {
              if (value)
                list.push(trimValues ? trim(value) : value);
            });
          }
          return list;
        };
        ctrl.$parsers.push(parse);
        ctrl.$formatters.push(function (value) {
          if (isArray(value)) {
            return value.join(ngList);
          }
          return undefined;
        });
        // Override the standard $isEmpty because an empty array means the input is empty.
        ctrl.$isEmpty = function (value) {
          return !value || !value.length;
        };
      }
    };
  };
  /* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
*/
  var VALID_CLASS = 'ng-valid', INVALID_CLASS = 'ng-invalid', PRISTINE_CLASS = 'ng-pristine', DIRTY_CLASS = 'ng-dirty', UNTOUCHED_CLASS = 'ng-untouched', TOUCHED_CLASS = 'ng-touched', PENDING_CLASS = 'ng-pending';
  var $ngModelMinErr = new minErr('ngModel');
  /**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.  This will not work on older browsers.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if ( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
  var NgModelController = [
      '$scope',
      '$exceptionHandler',
      '$attrs',
      '$element',
      '$parse',
      '$animate',
      '$timeout',
      '$rootScope',
      '$q',
      '$interpolate',
      function ($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$$rawModelValue = undefined;
        // stores the parsed modelValue / model set from scope regardless of validity.
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = true;
        this.$touched = false;
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$error = {};
        // keep invalid keys here
        this.$$success = {};
        // keep valid keys here
        this.$pending = undefined;
        // keep pending keys here
        this.$name = $interpolate($attr.name || '', false)($scope);
        var parsedNgModel = $parse($attr.ngModel), parsedNgModelAssign = parsedNgModel.assign, ngModelGet = parsedNgModel, ngModelSet = parsedNgModelAssign, pendingDebounce = null, ctrl = this;
        this.$$setOptions = function (options) {
          ctrl.$options = options;
          if (options && options.getterSetter) {
            var invokeModelGetter = $parse($attr.ngModel + '()'), invokeModelSetter = $parse($attr.ngModel + '($$$p)');
            ngModelGet = function ($scope) {
              var modelValue = parsedNgModel($scope);
              if (isFunction(modelValue)) {
                modelValue = invokeModelGetter($scope);
              }
              return modelValue;
            };
            ngModelSet = function ($scope, newValue) {
              if (isFunction(parsedNgModel($scope))) {
                invokeModelSetter($scope, { $$$p: ctrl.$modelValue });
              } else {
                parsedNgModelAssign($scope, ctrl.$modelValue);
              }
            };
          } else if (!parsedNgModel.assign) {
            throw $ngModelMinErr('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}', $attr.ngModel, startingTag($element));
          }
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different to last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different to their previous value. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
        this.$render = noop;
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
        this.$isEmpty = function (value) {
          return isUndefined(value) || value === '' || value === null || value !== value;
        };
        var parentForm = $element.inheritedData('$formController') || nullFormCtrl, currentValidationRunId = 0;
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by Angular when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
        addSetValidityMethod({
          ctrl: this,
          $element: $element,
          set: function (object, property) {
            object[property] = true;
          },
          unset: function (object, property) {
            delete object[property];
          },
          parentForm: parentForm,
          $animate: $animate
        });
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
        this.$setPristine = function () {
          ctrl.$dirty = false;
          ctrl.$pristine = true;
          $animate.removeClass($element, DIRTY_CLASS);
          $animate.addClass($element, PRISTINE_CLASS);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
        this.$setDirty = function () {
          ctrl.$dirty = true;
          ctrl.$pristine = false;
          $animate.removeClass($element, PRISTINE_CLASS);
          $animate.addClass($element, DIRTY_CLASS);
          parentForm.$setDirty();
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
        this.$setUntouched = function () {
          ctrl.$touched = false;
          ctrl.$untouched = true;
          $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
        this.$setTouched = function () {
          ctrl.$touched = true;
          ctrl.$untouched = false;
          $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for a some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced events or events such
   * as blur you can have a situation where there is a period when the `$viewValue`
   * is out of synch with the ngModel's `$modelValue`.
   *
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.resetWithCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myForm.myInput1.$rollbackViewValue();
   *           $scope.myValue = '';
   *         }
   *       };
   *       $scope.resetWithoutCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myValue = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Try typing something in each input.  See that the model only updates when you
   *          blur off the input.
   *        </p>
   *        <p>Now see what happens if you start typing then press the Escape key</p>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <p>With $rollbackViewValue()</p>
   *         <input name="myInput1" ng-model="myValue" ng-keydown="resetWithCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *
   *         <p>Without $rollbackViewValue()</p>
   *         <input name="myInput2" ng-model="myValue" ng-keydown="resetWithoutCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *       </form>
   *     </div>
   *   </file>
   * </example>
   */
        this.$rollbackViewValue = function () {
          $timeout.cancel(pendingDebounce);
          ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
          ctrl.$render();
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * modelValue, i.e. either the last parsed value or the last value set from the scope.
   */
        this.$validate = function () {
          // ignore $validate before model is initialized
          if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
            return;
          }
          var viewValue = ctrl.$$lastCommittedViewValue;
          // Note: we use the $$rawModelValue as $modelValue might have been
          // set to undefined during a view -> model update that found validation
          // errors. We can't parse the view here, since that could change
          // the model although neither viewValue nor the model on the scope changed
          var modelValue = ctrl.$$rawModelValue;
          // Check if the there's a parse error, so we don't unset it accidentially
          var parserName = ctrl.$$parserName || 'parse';
          var parserValid = ctrl.$error[parserName] ? false : undefined;
          var prevValid = ctrl.$valid;
          var prevModelValue = ctrl.$modelValue;
          var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
          ctrl.$$runValidators(parserValid, modelValue, viewValue, function (allValid) {
            // If there was no change in validity, don't update the model
            // This prevents changing an invalid modelValue to undefined
            if (!allowInvalid && prevValid !== allValid) {
              // Note: Don't check ctrl.$valid here, as we could have
              // external validators (e.g. calculated on the server),
              // that just call $setValidity and need the model value
              // to calculate their validity.
              ctrl.$modelValue = allValid ? modelValue : undefined;
              if (ctrl.$modelValue !== prevModelValue) {
                ctrl.$$writeModelToScope();
              }
            }
          });
        };
        this.$$runValidators = function (parseValid, modelValue, viewValue, doneCallback) {
          currentValidationRunId++;
          var localValidationRunId = currentValidationRunId;
          // check parser error
          if (!processParseErrors(parseValid)) {
            validationDone(false);
            return;
          }
          if (!processSyncValidators()) {
            validationDone(false);
            return;
          }
          processAsyncValidators();
          function processParseErrors(parseValid) {
            var errorKey = ctrl.$$parserName || 'parse';
            if (parseValid === undefined) {
              setValidity(errorKey, null);
            } else {
              setValidity(errorKey, parseValid);
              if (!parseValid) {
                forEach(ctrl.$validators, function (v, name) {
                  setValidity(name, null);
                });
                forEach(ctrl.$asyncValidators, function (v, name) {
                  setValidity(name, null);
                });
                return false;
              }
            }
            return true;
          }
          function processSyncValidators() {
            var syncValidatorsValid = true;
            forEach(ctrl.$validators, function (validator, name) {
              var result = validator(modelValue, viewValue);
              syncValidatorsValid = syncValidatorsValid && result;
              setValidity(name, result);
            });
            if (!syncValidatorsValid) {
              forEach(ctrl.$asyncValidators, function (v, name) {
                setValidity(name, null);
              });
              return false;
            }
            return true;
          }
          function processAsyncValidators() {
            var validatorPromises = [];
            var allValid = true;
            forEach(ctrl.$asyncValidators, function (validator, name) {
              var promise = validator(modelValue, viewValue);
              if (!isPromiseLike(promise)) {
                throw $ngModelMinErr('$asyncValidators', 'Expected asynchronous validator to return a promise but got \'{0}\' instead.', promise);
              }
              setValidity(name, undefined);
              validatorPromises.push(promise.then(function () {
                setValidity(name, true);
              }, function (error) {
                allValid = false;
                setValidity(name, false);
              }));
            });
            if (!validatorPromises.length) {
              validationDone(true);
            } else {
              $q.all(validatorPromises).then(function () {
                validationDone(allValid);
              }, noop);
            }
          }
          function setValidity(name, isValid) {
            if (localValidationRunId === currentValidationRunId) {
              ctrl.$setValidity(name, isValid);
            }
          }
          function validationDone(allValid) {
            if (localValidationRunId === currentValidationRunId) {
              doneCallback(allValid);
            }
          }
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
        this.$commitViewValue = function () {
          var viewValue = ctrl.$viewValue;
          $timeout.cancel(pendingDebounce);
          // If the view value has not changed then we should just exit, except in the case where there is
          // a native validator on the element. In this case the validation state may have changed even though
          // the viewValue has stayed empty.
          if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
            return;
          }
          ctrl.$$lastCommittedViewValue = viewValue;
          // change to dirty
          if (ctrl.$pristine) {
            this.$setDirty();
          }
          this.$$parseAndValidate();
        };
        this.$$parseAndValidate = function () {
          var viewValue = ctrl.$$lastCommittedViewValue;
          var modelValue = viewValue;
          var parserValid = isUndefined(modelValue) ? undefined : true;
          if (parserValid) {
            for (var i = 0; i < ctrl.$parsers.length; i++) {
              modelValue = ctrl.$parsers[i](modelValue);
              if (isUndefined(modelValue)) {
                parserValid = false;
                break;
              }
            }
          }
          if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
            // ctrl.$modelValue has not been touched yet...
            ctrl.$modelValue = ngModelGet($scope);
          }
          var prevModelValue = ctrl.$modelValue;
          var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
          ctrl.$$rawModelValue = modelValue;
          if (allowInvalid) {
            ctrl.$modelValue = modelValue;
            writeToModelIfNeeded();
          }
          // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
          // This can happen if e.g. $setViewValue is called from inside a parser
          ctrl.$$runValidators(parserValid, modelValue, ctrl.$$lastCommittedViewValue, function (allValid) {
            if (!allowInvalid) {
              // Note: Don't check ctrl.$valid here, as we could have
              // external validators (e.g. calculated on the server),
              // that just call $setValidity and need the model value
              // to calculate their validity.
              ctrl.$modelValue = allValid ? modelValue : undefined;
              writeToModelIfNeeded();
            }
          });
          function writeToModelIfNeeded() {
            if (ctrl.$modelValue !== prevModelValue) {
              ctrl.$$writeModelToScope();
            }
          }
        };
        this.$$writeModelToScope = function () {
          ngModelSet($scope, ctrl.$modelValue);
          forEach(ctrl.$viewChangeListeners, function (listener) {
            try {
              listener();
            } catch (e) {
              $exceptionHandler(e);
            }
          });
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when an input directive want to change the view value; typically,
   * this is done from within a DOM event handler.
   *
   * For example {@link ng.directive:input input} calls it when the value of the input changes and
   * {@link ng.directive:select select} calls it when an option is selected.
   *
   * If the new `value` is an object (rather than a string or a number), we should make a copy of the
   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
   * watch of objects, it only looks for a change of identity. If you only change the property of
   * the object then ngModel will not realise that the object has changed and will not invoke the
   * `$parsers` and `$validators` pipelines.
   *
   * For this reason, you should not change properties of the copy once it has been passed to
   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * When this method is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   * @param {string} trigger Event that triggered the update.
   */
        this.$setViewValue = function (value, trigger) {
          ctrl.$viewValue = value;
          if (!ctrl.$options || ctrl.$options.updateOnDefault) {
            ctrl.$$debounceViewValueCommit(trigger);
          }
        };
        this.$$debounceViewValueCommit = function (trigger) {
          var debounceDelay = 0, options = ctrl.$options, debounce;
          if (options && isDefined(options.debounce)) {
            debounce = options.debounce;
            if (isNumber(debounce)) {
              debounceDelay = debounce;
            } else if (isNumber(debounce[trigger])) {
              debounceDelay = debounce[trigger];
            } else if (isNumber(debounce['default'])) {
              debounceDelay = debounce['default'];
            }
          }
          $timeout.cancel(pendingDebounce);
          if (debounceDelay) {
            pendingDebounce = $timeout(function () {
              ctrl.$commitViewValue();
            }, debounceDelay);
          } else if ($rootScope.$$phase) {
            ctrl.$commitViewValue();
          } else {
            $scope.$apply(function () {
              ctrl.$commitViewValue();
            });
          }
        };
        // model -> value
        // Note: we cannot use a normal scope.$watch as we want to detect the following:
        // 1. scope value is 'a'
        // 2. user enters 'b'
        // 3. ng-change kicks in and reverts scope value to 'a'
        //    -> scope value did not change since the last digest as
        //       ng-change executes in apply phase
        // 4. view should be changed back to 'a'
        $scope.$watch(function ngModelWatch() {
          var modelValue = ngModelGet($scope);
          // if scope model value and ngModel value are out of sync
          // TODO(perf): why not move this to the action fn?
          if (modelValue !== ctrl.$modelValue) {
            ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
            var formatters = ctrl.$formatters, idx = formatters.length;
            var viewValue = modelValue;
            while (idx--) {
              viewValue = formatters[idx](viewValue);
            }
            if (ctrl.$viewValue !== viewValue) {
              ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
              ctrl.$render();
              ctrl.$$runValidators(undefined, modelValue, viewValue, noop);
            }
          }
          return modelValue;
        });
      }
    ];
  /**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different than what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           Name:
           <input type="text" name="userName"
                  ng-model="user.name"
                  ng-model-options="{ getterSetter: true }" />
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
               if (angular.isDefined(newName)) {
                 _name = newName;
               }
               return _name;
             }
           };
         }]);
     </file>
 * </example>
 */
  var ngModelDirective = [
      '$rootScope',
      function ($rootScope) {
        return {
          restrict: 'A',
          require: [
            'ngModel',
            '^?form',
            '^?ngModelOptions'
          ],
          controller: NgModelController,
          priority: 1,
          compile: function ngModelCompile(element) {
            // Setup initial state of the control
            element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
            return {
              pre: function ngModelPreLink(scope, element, attr, ctrls) {
                var modelCtrl = ctrls[0], formCtrl = ctrls[1] || nullFormCtrl;
                modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);
                // notify others, especially parent forms
                formCtrl.$addControl(modelCtrl);
                attr.$observe('name', function (newValue) {
                  if (modelCtrl.$name !== newValue) {
                    formCtrl.$$renameControl(modelCtrl, newValue);
                  }
                });
                scope.$on('$destroy', function () {
                  formCtrl.$removeControl(modelCtrl);
                });
              },
              post: function ngModelPostLink(scope, element, attr, ctrls) {
                var modelCtrl = ctrls[0];
                if (modelCtrl.$options && modelCtrl.$options.updateOn) {
                  element.on(modelCtrl.$options.updateOn, function (ev) {
                    modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                  });
                }
                element.on('blur', function (ev) {
                  if (modelCtrl.$touched)
                    return;
                  if ($rootScope.$$phase) {
                    scope.$evalAsync(modelCtrl.$setTouched);
                  } else {
                    scope.$apply(modelCtrl.$setTouched);
                  }
                });
              }
            };
          }
        };
      }
    ];
  var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
  /**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
 * events that will trigger a model update and/or a debouncing delay so that the actual update only
 * takes place when a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different than the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
 *
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging of the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
       `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date">`, `<input type="time">`, ... . Right now, the only supported value is `'UTC'`,
 *     otherwise the default timezone of the browser will be used.
 *
 * @example

  The following example shows how to override immediate updates. Changes on the inputs within the
  form will update the model only when the control loses focus (blur event). If `escape` key is
  pressed while the input field is focused, the value is reset to the value in the current model.

  <example name="ngModelOptions-directive-blur" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ updateOn: 'blur' }"
                 ng-keyup="cancel($event)" /><br />

          Other data:
          <input type="text" ng-model="user.data" /><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say', data: '' };

          $scope.cancel = function(e) {
            if (e.keyCode == 27) {
              $scope.userForm.userName.$rollbackViewValue();
            }
          };
        }]);
    </file>
    <file name="protractor.js" type="protractor">
      var model = element(by.binding('user.name'));
      var input = element(by.model('user.name'));
      var other = element(by.model('user.data'));

      it('should allow custom events', function() {
        input.sendKeys(' hello');
        input.click();
        expect(model.getText()).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say hello');
      });

      it('should $rollbackViewValue when model changes', function() {
        input.sendKeys(' hello');
        expect(input.getAttribute('value')).toEqual('say hello');
        input.sendKeys(protractor.Key.ESCAPE);
        expect(input.getAttribute('value')).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say');
      });
    </file>
  </example>

  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

  <example name="ngModelOptions-directive-debounce" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ debounce: 1000 }" />
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say' };
        }]);
    </file>
  </example>

  This one shows how to bind to getter/setters:

  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ getterSetter: true }" />
        </form>
        <pre>user.name = <span ng-bind="user.name()"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('getterSetterExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          var _name = 'Brian';
          $scope.user = {
            name: function(newName) {
              return angular.isDefined(newName) ? (_name = newName) : _name;
            }
          };
        }]);
    </file>
  </example>
 */
  var ngModelOptionsDirective = function () {
    return {
      restrict: 'A',
      controller: [
        '$scope',
        '$attrs',
        function ($scope, $attrs) {
          var that = this;
          this.$options = $scope.$eval($attrs.ngModelOptions);
          // Allow adding/overriding bound events
          if (this.$options.updateOn !== undefined) {
            this.$options.updateOnDefault = false;
            // extract "default" pseudo-event from list of events that can trigger a model update
            this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function () {
              that.$options.updateOnDefault = true;
              return ' ';
            }));
          } else {
            this.$options.updateOnDefault = true;
          }
        }
      ]
    };
  };
  // helper methods
  function addSetValidityMethod(context) {
    var ctrl = context.ctrl, $element = context.$element, classCache = {}, set = context.set, unset = context.unset, parentForm = context.parentForm, $animate = context.$animate;
    classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));
    ctrl.$setValidity = setValidity;
    function setValidity(validationErrorKey, state, controller) {
      if (state === undefined) {
        createAndSet('$pending', validationErrorKey, controller);
      } else {
        unsetAndCleanup('$pending', validationErrorKey, controller);
      }
      if (!isBoolean(state)) {
        unset(ctrl.$error, validationErrorKey, controller);
        unset(ctrl.$$success, validationErrorKey, controller);
      } else {
        if (state) {
          unset(ctrl.$error, validationErrorKey, controller);
          set(ctrl.$$success, validationErrorKey, controller);
        } else {
          set(ctrl.$error, validationErrorKey, controller);
          unset(ctrl.$$success, validationErrorKey, controller);
        }
      }
      if (ctrl.$pending) {
        cachedToggleClass(PENDING_CLASS, true);
        ctrl.$valid = ctrl.$invalid = undefined;
        toggleValidationCss('', null);
      } else {
        cachedToggleClass(PENDING_CLASS, false);
        ctrl.$valid = isObjectEmpty(ctrl.$error);
        ctrl.$invalid = !ctrl.$valid;
        toggleValidationCss('', ctrl.$valid);
      }
      // re-read the state as the set/unset methods could have
      // combined state in ctrl.$error[validationError] (used for forms),
      // where setting/unsetting only increments/decrements the value,
      // and does not replace it.
      var combinedState;
      if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
        combinedState = undefined;
      } else if (ctrl.$error[validationErrorKey]) {
        combinedState = false;
      } else if (ctrl.$$success[validationErrorKey]) {
        combinedState = true;
      } else {
        combinedState = null;
      }
      toggleValidationCss(validationErrorKey, combinedState);
      parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
    }
    function createAndSet(name, value, controller) {
      if (!ctrl[name]) {
        ctrl[name] = {};
      }
      set(ctrl[name], value, controller);
    }
    function unsetAndCleanup(name, value, controller) {
      if (ctrl[name]) {
        unset(ctrl[name], value, controller);
      }
      if (isObjectEmpty(ctrl[name])) {
        ctrl[name] = undefined;
      }
    }
    function cachedToggleClass(className, switchValue) {
      if (switchValue && !classCache[className]) {
        $animate.addClass($element, className);
        classCache[className] = true;
      } else if (!switchValue && classCache[className]) {
        $animate.removeClass($element, className);
        classCache[className] = false;
      }
    }
    function toggleValidationCss(validationErrorKey, isValid) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
      cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
      cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
    }
  }
  function isObjectEmpty(obj) {
    if (obj) {
      for (var prop in obj) {
        return false;
      }
    }
    return true;
  }
  /**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
  var ngNonBindableDirective = ngDirective({
      terminal: true,
      priority: 1000
    });
  /**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
  var ngPluralizeDirective = [
      '$locale',
      '$interpolate',
      function ($locale, $interpolate) {
        var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
        return {
          restrict: 'EA',
          link: function (scope, element, attr) {
            var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when),
              // we have {{}} in attrs
              offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol, watchRemover = angular.noop, lastCount;
            forEach(attr, function (expression, attributeName) {
              var tmpMatch = IS_WHEN.exec(attributeName);
              if (tmpMatch) {
                var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
                whens[whenKey] = element.attr(attr.$attr[attributeName]);
              }
            });
            forEach(whens, function (expression, key) {
              whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
            });
            scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
              var count = parseFloat(newVal);
              var countIsNaN = isNaN(count);
              if (!countIsNaN && !(count in whens)) {
                // If an explicit number rule such as 1, 2, 3... is defined, just use it.
                // Otherwise, check it against pluralization rules in $locale service.
                count = $locale.pluralCat(count - offset);
              }
              // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
              // In JS `NaN !== NaN`, so we have to exlicitly check.
              if (count !== lastCount && !(countIsNaN && isNaN(lastCount))) {
                watchRemover();
                watchRemover = scope.$watch(whensExpFns[count], updateElementText);
                lastCount = count;
              }
            });
            function updateElementText(newText) {
              element.text(newText || '');
            }
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * You need to be aware that the JavaScript specification does not define what order
 * it will return the keys for an object. In order to have a guaranteed deterministic order
 * for the keys, Angular versions up to and including 1.3 **sort the keys alphabetically**.
 *
 * If this is not desired, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 * In version 1.4 we will remove the sorting, since it seems that browsers generally follow the
 * strategy of providing keys in the order in which they were defined, although there are exceptions
 * when keys are deleted and reinstated.
 *
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length == 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
  var ngRepeatDirective = [
      '$parse',
      '$animate',
      function ($parse, $animate) {
        var NG_REMOVED = '$$NG_REMOVED';
        var ngRepeatMinErr = minErr('ngRepeat');
        var updateScope = function (scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
          // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
          scope[valueIdentifier] = value;
          if (keyIdentifier)
            scope[keyIdentifier] = key;
          scope.$index = index;
          scope.$first = index === 0;
          scope.$last = index === arrayLength - 1;
          scope.$middle = !(scope.$first || scope.$last);
          // jshint bitwise: false
          scope.$odd = !(scope.$even = (index & 1) === 0);  // jshint bitwise: true
        };
        var getBlockStart = function (block) {
          return block.clone[0];
        };
        var getBlockEnd = function (block) {
          return block.clone[block.clone.length - 1];
        };
        return {
          restrict: 'A',
          multiElement: true,
          transclude: 'element',
          priority: 1000,
          terminal: true,
          $$tlb: true,
          compile: function ngRepeatCompile($element, $attr) {
            var expression = $attr.ngRepeat;
            var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');
            var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
            if (!match) {
              throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.', expression);
            }
            var lhs = match[1];
            var rhs = match[2];
            var aliasAs = match[3];
            var trackByExp = match[4];
            match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
            if (!match) {
              throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.', lhs);
            }
            var valueIdentifier = match[3] || match[1];
            var keyIdentifier = match[2];
            if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
              throw ngRepeatMinErr('badident', 'alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.', aliasAs);
            }
            var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
            var hashFnLocals = { $id: hashKey };
            if (trackByExp) {
              trackByExpGetter = $parse(trackByExp);
            } else {
              trackByIdArrayFn = function (key, value) {
                return hashKey(value);
              };
              trackByIdObjFn = function (key) {
                return key;
              };
            }
            return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
              if (trackByExpGetter) {
                trackByIdExpFn = function (key, value, index) {
                  // assign key, value, and $index to the locals so that they can be used in hash functions
                  if (keyIdentifier)
                    hashFnLocals[keyIdentifier] = key;
                  hashFnLocals[valueIdentifier] = value;
                  hashFnLocals.$index = index;
                  return trackByExpGetter($scope, hashFnLocals);
                };
              }
              // Store a list of elements from previous run. This is a hash where key is the item from the
              // iterator, and the value is objects with following properties.
              //   - scope: bound scope
              //   - element: previous element.
              //   - index: position
              //
              // We are using no-proto object so that we don't need to guard against inherited props via
              // hasOwnProperty.
              var lastBlockMap = createMap();
              //watch props
              $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
                var index, length, previousNode = $element[0],
                  // node that cloned nodes should be inserted after
                  // initialized to the comment node anchor
                  nextNode,
                  // Same as lastBlockMap but it has the current state. It will become the
                  // lastBlockMap on the next iteration.
                  nextBlockMap = createMap(), collectionLength, key, value,
                  // key/value of iteration
                  trackById, trackByIdFn, collectionKeys, block,
                  // last object information {scope, element, id}
                  nextBlockOrder, elementsToRemove;
                if (aliasAs) {
                  $scope[aliasAs] = collection;
                }
                if (isArrayLike(collection)) {
                  collectionKeys = collection;
                  trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                } else {
                  trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                  // if object, extract keys, sort them and use to determine order of iteration over obj props
                  collectionKeys = [];
                  for (var itemKey in collection) {
                    if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {
                      collectionKeys.push(itemKey);
                    }
                  }
                  collectionKeys.sort();
                }
                collectionLength = collectionKeys.length;
                nextBlockOrder = new Array(collectionLength);
                // locate existing items
                for (index = 0; index < collectionLength; index++) {
                  key = collection === collectionKeys ? index : collectionKeys[index];
                  value = collection[key];
                  trackById = trackByIdFn(key, value, index);
                  if (lastBlockMap[trackById]) {
                    // found previously seen block
                    block = lastBlockMap[trackById];
                    delete lastBlockMap[trackById];
                    nextBlockMap[trackById] = block;
                    nextBlockOrder[index] = block;
                  } else if (nextBlockMap[trackById]) {
                    // if collision detected. restore lastBlockMap and throw an error
                    forEach(nextBlockOrder, function (block) {
                      if (block && block.scope)
                        lastBlockMap[block.id] = block;
                    });
                    throw ngRepeatMinErr('dupes', 'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}', expression, trackById, value);
                  } else {
                    // new never before seen block
                    nextBlockOrder[index] = {
                      id: trackById,
                      scope: undefined,
                      clone: undefined
                    };
                    nextBlockMap[trackById] = true;
                  }
                }
                // remove leftover items
                for (var blockKey in lastBlockMap) {
                  block = lastBlockMap[blockKey];
                  elementsToRemove = getBlockNodes(block.clone);
                  $animate.leave(elementsToRemove);
                  if (elementsToRemove[0].parentNode) {
                    // if the element was not removed yet because of pending animation, mark it as deleted
                    // so that we can ignore it later
                    for (index = 0, length = elementsToRemove.length; index < length; index++) {
                      elementsToRemove[index][NG_REMOVED] = true;
                    }
                  }
                  block.scope.$destroy();
                }
                // we are not using forEach for perf reasons (trying to avoid #call)
                for (index = 0; index < collectionLength; index++) {
                  key = collection === collectionKeys ? index : collectionKeys[index];
                  value = collection[key];
                  block = nextBlockOrder[index];
                  if (block.scope) {
                    // if we have already seen this object, then we need to reuse the
                    // associated scope/element
                    nextNode = previousNode;
                    // skip nodes that are already pending removal via leave animation
                    do {
                      nextNode = nextNode.nextSibling;
                    } while (nextNode && nextNode[NG_REMOVED]);
                    if (getBlockStart(block) != nextNode) {
                      // existing item which got moved
                      $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
                    }
                    previousNode = getBlockEnd(block);
                    updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                  } else {
                    // new item which we don't know about
                    $transclude(function ngRepeatTransclude(clone, scope) {
                      block.scope = scope;
                      // http://jsperf.com/clone-vs-createcomment
                      var endNode = ngRepeatEndComment.cloneNode(false);
                      clone[clone.length++] = endNode;
                      // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                      $animate.enter(clone, null, jqLite(previousNode));
                      previousNode = endNode;
                      // Note: We only need the first/last node of the cloned nodes.
                      // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                      // by a directive with templateUrl when its template arrives.
                      block.clone = clone;
                      nextBlockMap[block.id] = block;
                      updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                    });
                  }
                }
                lastBlockMap = nextBlockMap;
              });
            };
          }
        };
      }
    ];
  var NG_HIDE_CLASS = 'ng-hide';
  var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
  /**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
 * with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   /&#42; this is required as of 1.3x to properly
 *      apply all styling in a show/hide animation &#42;/
 *   transition: 0s linear all;
 * }
 *
 * .my-element.ng-hide-add-active,
 * .my-element.ng-hide-remove-active {
 *   /&#42; the transition is defined in the active class &#42;/
 *   transition: 1s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-show {
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-show.ng-hide-add.ng-hide-add-active,
      .animate-show.ng-hide-remove.ng-hide-remove-active {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
      }

      .animate-show.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
  var ngShowDirective = [
      '$animate',
      function ($animate) {
        return {
          restrict: 'A',
          multiElement: true,
          link: function (scope, element, attr) {
            scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
              // we're adding a temporary, animation-specific class for ng-hide since this way
              // we can control when the element is actually displayed on screen without having
              // to have a global/greedy CSS selector that breaks when other animations are run.
              // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
              $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, { tempClasses: NG_HIDE_IN_PROGRESS_CLASS });
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: 0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-hide.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
  var ngHideDirective = [
      '$animate',
      function ($animate) {
        return {
          restrict: 'A',
          multiElement: true,
          link: function (scope, element, attr) {
            scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
              // The comment inside of the ngShowDirective explains why we add and
              // remove a temporary class for the show/hide animation
              $animate[value ? 'addClass' : 'removeClass'](element, NG_HIDE_CLASS, { tempClasses: NG_HIDE_IN_PROGRESS_CLASS });
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
  var ngStyleDirective = ngDirective(function (scope, element, attr) {
      scope.$watchCollection(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
        if (oldStyles && newStyles !== oldStyles) {
          forEach(oldStyles, function (val, style) {
            element.css(style, '');
          });
        }
        if (newStyles)
          element.css(newStyles);
      });
    });
  /**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
  var ngSwitchDirective = [
      '$animate',
      function ($animate) {
        return {
          restrict: 'EA',
          require: 'ngSwitch',
          controller: [
            '$scope',
            function ngSwitchController() {
              this.cases = {};
            }
          ],
          link: function (scope, element, attr, ngSwitchController) {
            var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [];
            var spliceFactory = function (array, index) {
              return function () {
                array.splice(index, 1);
              };
            };
            scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
              var i, ii;
              for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
                $animate.cancel(previousLeaveAnimations[i]);
              }
              previousLeaveAnimations.length = 0;
              for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                var selected = getBlockNodes(selectedElements[i].clone);
                selectedScopes[i].$destroy();
                var promise = previousLeaveAnimations[i] = $animate.leave(selected);
                promise.then(spliceFactory(previousLeaveAnimations, i));
              }
              selectedElements.length = 0;
              selectedScopes.length = 0;
              if (selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?']) {
                forEach(selectedTranscludes, function (selectedTransclude) {
                  selectedTransclude.transclude(function (caseElement, selectedScope) {
                    selectedScopes.push(selectedScope);
                    var anchor = selectedTransclude.element;
                    caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
                    var block = { clone: caseElement };
                    selectedElements.push(block);
                    $animate.enter(caseElement, anchor.parent(), anchor);
                  });
                });
              }
            });
          }
        };
      }
    ];
  var ngSwitchWhenDirective = ngDirective({
      transclude: 'element',
      priority: 1200,
      require: '^ngSwitch',
      multiElement: true,
      link: function (scope, element, attrs, ctrl, $transclude) {
        ctrl.cases['!' + attrs.ngSwitchWhen] = ctrl.cases['!' + attrs.ngSwitchWhen] || [];
        ctrl.cases['!' + attrs.ngSwitchWhen].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  var ngSwitchDefaultDirective = ngDirective({
      transclude: 'element',
      priority: 1200,
      require: '^ngSwitch',
      multiElement: true,
      link: function (scope, element, attr, ctrl, $transclude) {
        ctrl.cases['?'] = ctrl.cases['?'] || [];
        ctrl.cases['?'].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  /**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<ng-transclude></ng-transclude>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"> <br/>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
  var ngTranscludeDirective = ngDirective({
      restrict: 'EAC',
      link: function ($scope, $element, $attrs, controller, $transclude) {
        if (!$transclude) {
          throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element));
        }
        $transclude(function (clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    });
  /**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
  var scriptDirective = [
      '$templateCache',
      function ($templateCache) {
        return {
          restrict: 'E',
          terminal: true,
          compile: function (element, attr) {
            if (attr.type == 'text/ng-template') {
              var templateUrl = attr.id, text = element[0].text;
              $templateCache.put(templateUrl, text);
            }
          }
        };
      }
    ];
  var ngOptionsMinErr = minErr('ngOptions');
  /**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
 * increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 *  to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
 * </div>
 *
 * Consider the following example:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">
 * ```
 *
 * ```js
 * $scope.values = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 *
 * $scope.selected = { name: 'aSubItem' };
 * ```
 *
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
 * following:
 *
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
 * 2. Apply **`track by`** to the already selected value in `ngModel`.
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
 *    selected" option.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light'},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark'},
              {name:'yellow', shade:'light'}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>


          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */
  var ngOptionsDirective = valueFn({
      restrict: 'A',
      terminal: true
    });
  // jshint maxlen: false
  var selectDirective = [
      '$compile',
      '$parse',
      function ($compile, $parse) {
        //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
        var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, nullModelCtrl = { $setViewValue: noop };
        // jshint maxlen: 100
        return {
          restrict: 'E',
          require: [
            'select',
            '?ngModel'
          ],
          controller: [
            '$element',
            '$scope',
            '$attrs',
            function ($element, $scope, $attrs) {
              var self = this, optionsMap = {}, ngModelCtrl = nullModelCtrl, nullOption, unknownOption;
              self.databound = $attrs.ngModel;
              self.init = function (ngModelCtrl_, nullOption_, unknownOption_) {
                ngModelCtrl = ngModelCtrl_;
                nullOption = nullOption_;
                unknownOption = unknownOption_;
              };
              self.addOption = function (value, element) {
                assertNotHasOwnProperty(value, '"option value"');
                optionsMap[value] = true;
                if (ngModelCtrl.$viewValue == value) {
                  $element.val(value);
                  if (unknownOption.parent())
                    unknownOption.remove();
                }
                // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
                // Adding an <option selected="selected"> element to a <select required="required"> should
                // automatically select the new element
                if (element && element[0].hasAttribute('selected')) {
                  element[0].selected = true;
                }
              };
              self.removeOption = function (value) {
                if (this.hasOption(value)) {
                  delete optionsMap[value];
                  if (ngModelCtrl.$viewValue === value) {
                    this.renderUnknownOption(value);
                  }
                }
              };
              self.renderUnknownOption = function (val) {
                var unknownVal = '? ' + hashKey(val) + ' ?';
                unknownOption.val(unknownVal);
                $element.prepend(unknownOption);
                $element.val(unknownVal);
                unknownOption.prop('selected', true);  // needed for IE
              };
              self.hasOption = function (value) {
                return optionsMap.hasOwnProperty(value);
              };
              $scope.$on('$destroy', function () {
                // disable unknown option so that we don't do work when the whole select is being destroyed
                self.renderUnknownOption = noop;
              });
            }
          ],
          link: function (scope, element, attr, ctrls) {
            // if ngModel is not defined, we don't need to do anything
            if (!ctrls[1])
              return;
            var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, optionsExp = attr.ngOptions, nullOption = false,
              // if false, user will not be able to select it (used by ngOptions)
              emptyOption, renderScheduled = false,
              // we can't just jqLite('<option>') since jqLite is not smart enough
              // to create it in <select> and IE barfs otherwise.
              optionTemplate = jqLite(document.createElement('option')), optGroupTemplate = jqLite(document.createElement('optgroup')), unknownOption = optionTemplate.clone();
            // find "null" option
            for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
              if (children[i].value === '') {
                emptyOption = nullOption = children.eq(i);
                break;
              }
            }
            selectCtrl.init(ngModelCtrl, nullOption, unknownOption);
            // required validator
            if (multiple) {
              ngModelCtrl.$isEmpty = function (value) {
                return !value || value.length === 0;
              };
            }
            if (optionsExp)
              setupAsOptions(scope, element, ngModelCtrl);
            else if (multiple)
              setupAsMultiple(scope, element, ngModelCtrl);
            else
              setupAsSingle(scope, element, ngModelCtrl, selectCtrl);
            ////////////////////////////
            function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
              ngModelCtrl.$render = function () {
                var viewValue = ngModelCtrl.$viewValue;
                if (selectCtrl.hasOption(viewValue)) {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  selectElement.val(viewValue);
                  if (viewValue === '')
                    emptyOption.prop('selected', true);  // to make IE9 happy
                } else {
                  if (isUndefined(viewValue) && emptyOption) {
                    selectElement.val('');
                  } else {
                    selectCtrl.renderUnknownOption(viewValue);
                  }
                }
              };
              selectElement.on('change', function () {
                scope.$apply(function () {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  ngModelCtrl.$setViewValue(selectElement.val());
                });
              });
            }
            function setupAsMultiple(scope, selectElement, ctrl) {
              var lastView;
              ctrl.$render = function () {
                var items = new HashMap(ctrl.$viewValue);
                forEach(selectElement.find('option'), function (option) {
                  option.selected = isDefined(items.get(option.value));
                });
              };
              // we have to do it on each watch since ngModel watches reference, but
              // we need to work of an array, so we need to see if anything was inserted/removed
              scope.$watch(function selectMultipleWatch() {
                if (!equals(lastView, ctrl.$viewValue)) {
                  lastView = shallowCopy(ctrl.$viewValue);
                  ctrl.$render();
                }
              });
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var array = [];
                  forEach(selectElement.find('option'), function (option) {
                    if (option.selected) {
                      array.push(option.value);
                    }
                  });
                  ctrl.$setViewValue(array);
                });
              });
            }
            function setupAsOptions(scope, selectElement, ctrl) {
              var match;
              if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
                throw ngOptionsMinErr('iexp', 'Expected expression in form of ' + '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' + ' but got \'{0}\'. Element: {1}', optionsExp, startingTag(selectElement));
              }
              var displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], selectAs = / as /.test(match[0]) && match[1], selectAsFn = selectAs ? $parse(selectAs) : null, keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]), track = match[8], trackFn = track ? $parse(match[8]) : null, trackKeysCache = {},
                // This is an array of array of existing option groups in DOM.
                // We try to reuse these if possible
                // - optionGroupsCache[0] is the options with no option group
                // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
                optionGroupsCache = [[{
                      element: selectElement,
                      label: ''
                    }]],
                //re-usable object to represent option's locals
                locals = {};
              if (nullOption) {
                // compile the element since there might be bindings in it
                $compile(nullOption)(scope);
                // remove the class, which is added automatically because we recompile the element and it
                // becomes the compilation root
                nullOption.removeClass('ng-scope');
                // we need to remove it before calling selectElement.empty() because otherwise IE will
                // remove the label from the element. wtf?
                nullOption.remove();
              }
              // clear contents, we'll add what's needed based on the model
              selectElement.empty();
              selectElement.on('change', selectionChanged);
              ctrl.$render = render;
              scope.$watchCollection(valuesFn, scheduleRendering);
              scope.$watchCollection(getLabels, scheduleRendering);
              if (multiple) {
                scope.$watchCollection(function () {
                  return ctrl.$modelValue;
                }, scheduleRendering);
              }
              // ------------------------------------------------------------------ //
              function callExpression(exprFn, key, value) {
                locals[valueName] = value;
                if (keyName)
                  locals[keyName] = key;
                return exprFn(scope, locals);
              }
              function selectionChanged() {
                scope.$apply(function () {
                  var collection = valuesFn(scope) || [];
                  var viewValue;
                  if (multiple) {
                    viewValue = [];
                    forEach(selectElement.val(), function (selectedKey) {
                      selectedKey = trackFn ? trackKeysCache[selectedKey] : selectedKey;
                      viewValue.push(getViewValue(selectedKey, collection[selectedKey]));
                    });
                  } else {
                    var selectedKey = trackFn ? trackKeysCache[selectElement.val()] : selectElement.val();
                    viewValue = getViewValue(selectedKey, collection[selectedKey]);
                  }
                  ctrl.$setViewValue(viewValue);
                  render();
                });
              }
              function getViewValue(key, value) {
                if (key === '?') {
                  return undefined;
                } else if (key === '') {
                  return null;
                } else {
                  var viewValueFn = selectAsFn ? selectAsFn : valueFn;
                  return callExpression(viewValueFn, key, value);
                }
              }
              function getLabels() {
                var values = valuesFn(scope);
                var toDisplay;
                if (values && isArray(values)) {
                  toDisplay = new Array(values.length);
                  for (var i = 0, ii = values.length; i < ii; i++) {
                    toDisplay[i] = callExpression(displayFn, i, values[i]);
                  }
                  return toDisplay;
                } else if (values) {
                  // TODO: Add a test for this case
                  toDisplay = {};
                  for (var prop in values) {
                    if (values.hasOwnProperty(prop)) {
                      toDisplay[prop] = callExpression(displayFn, prop, values[prop]);
                    }
                  }
                }
                return toDisplay;
              }
              function createIsSelectedFn(viewValue) {
                var selectedSet;
                if (multiple) {
                  if (trackFn && isArray(viewValue)) {
                    selectedSet = new HashMap([]);
                    for (var trackIndex = 0; trackIndex < viewValue.length; trackIndex++) {
                      // tracking by key
                      selectedSet.put(callExpression(trackFn, null, viewValue[trackIndex]), true);
                    }
                  } else {
                    selectedSet = new HashMap(viewValue);
                  }
                } else if (trackFn) {
                  viewValue = callExpression(trackFn, null, viewValue);
                }
                return function isSelected(key, value) {
                  var compareValueFn;
                  if (trackFn) {
                    compareValueFn = trackFn;
                  } else if (selectAsFn) {
                    compareValueFn = selectAsFn;
                  } else {
                    compareValueFn = valueFn;
                  }
                  if (multiple) {
                    return isDefined(selectedSet.remove(callExpression(compareValueFn, key, value)));
                  } else {
                    return viewValue === callExpression(compareValueFn, key, value);
                  }
                };
              }
              function scheduleRendering() {
                if (!renderScheduled) {
                  scope.$$postDigest(render);
                  renderScheduled = true;
                }
              }
              /**
         * A new labelMap is created with each render.
         * This function is called for each existing option with added=false,
         * and each new option with added=true.
         * - Labels that are passed to this method twice,
         * (once with added=true and once with added=false) will end up with a value of 0, and
         * will cause no change to happen to the corresponding option.
         * - Labels that are passed to this method only once with added=false will end up with a
         * value of -1 and will eventually be passed to selectCtrl.removeOption()
         * - Labels that are passed to this method only once with added=true will end up with a
         * value of 1 and will eventually be passed to selectCtrl.addOption()
        */
              function updateLabelMap(labelMap, label, added) {
                labelMap[label] = labelMap[label] || 0;
                labelMap[label] += added ? 1 : -1;
              }
              function render() {
                renderScheduled = false;
                // Temporary location for the option groups before we render them
                var optionGroups = { '': [] }, optionGroupNames = [''], optionGroupName, optionGroup, option, existingParent, existingOptions, existingOption, viewValue = ctrl.$viewValue, values = valuesFn(scope) || [], keys = keyName ? sortedKeys(values) : values, key, value, groupLength, length, groupIndex, index, labelMap = {}, selected, isSelected = createIsSelectedFn(viewValue), anySelected = false, lastElement, element, label, optionId;
                trackKeysCache = {};
                // We now build up the list of options we need (we merge later)
                for (index = 0; length = keys.length, index < length; index++) {
                  key = index;
                  if (keyName) {
                    key = keys[index];
                    if (key.charAt(0) === '$')
                      continue;
                  }
                  value = values[key];
                  optionGroupName = callExpression(groupByFn, key, value) || '';
                  if (!(optionGroup = optionGroups[optionGroupName])) {
                    optionGroup = optionGroups[optionGroupName] = [];
                    optionGroupNames.push(optionGroupName);
                  }
                  selected = isSelected(key, value);
                  anySelected = anySelected || selected;
                  label = callExpression(displayFn, key, value);
                  // what will be seen by the user
                  // doing displayFn(scope, locals) || '' overwrites zero values
                  label = isDefined(label) ? label : '';
                  optionId = trackFn ? trackFn(scope, locals) : keyName ? keys[index] : index;
                  if (trackFn) {
                    trackKeysCache[optionId] = key;
                  }
                  optionGroup.push({
                    id: optionId,
                    label: label,
                    selected: selected
                  });
                }
                if (!multiple) {
                  if (nullOption || viewValue === null) {
                    // insert null option if we have a placeholder, or the model is null
                    optionGroups[''].unshift({
                      id: '',
                      label: '',
                      selected: !anySelected
                    });
                  } else if (!anySelected) {
                    // option could not be found, we have to insert the undefined item
                    optionGroups[''].unshift({
                      id: '?',
                      label: '',
                      selected: true
                    });
                  }
                }
                // Now we need to update the list of DOM nodes to match the optionGroups we computed above
                for (groupIndex = 0, groupLength = optionGroupNames.length; groupIndex < groupLength; groupIndex++) {
                  // current option group name or '' if no group
                  optionGroupName = optionGroupNames[groupIndex];
                  // list of options for that group. (first item has the parent)
                  optionGroup = optionGroups[optionGroupName];
                  if (optionGroupsCache.length <= groupIndex) {
                    // we need to grow the optionGroups
                    existingParent = {
                      element: optGroupTemplate.clone().attr('label', optionGroupName),
                      label: optionGroup.label
                    };
                    existingOptions = [existingParent];
                    optionGroupsCache.push(existingOptions);
                    selectElement.append(existingParent.element);
                  } else {
                    existingOptions = optionGroupsCache[groupIndex];
                    existingParent = existingOptions[0];
                    // either SELECT (no group) or OPTGROUP element
                    // update the OPTGROUP label if not the same.
                    if (existingParent.label != optionGroupName) {
                      existingParent.element.attr('label', existingParent.label = optionGroupName);
                    }
                  }
                  lastElement = null;
                  // start at the beginning
                  for (index = 0, length = optionGroup.length; index < length; index++) {
                    option = optionGroup[index];
                    if (existingOption = existingOptions[index + 1]) {
                      // reuse elements
                      lastElement = existingOption.element;
                      if (existingOption.label !== option.label) {
                        updateLabelMap(labelMap, existingOption.label, false);
                        updateLabelMap(labelMap, option.label, true);
                        lastElement.text(existingOption.label = option.label);
                        lastElement.prop('label', existingOption.label);
                      }
                      if (existingOption.id !== option.id) {
                        lastElement.val(existingOption.id = option.id);
                      }
                      // lastElement.prop('selected') provided by jQuery has side-effects
                      if (lastElement[0].selected !== option.selected) {
                        lastElement.prop('selected', existingOption.selected = option.selected);
                        if (msie) {
                          // See #7692
                          // The selected item wouldn't visually update on IE without this.
                          // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                          lastElement.prop('selected', existingOption.selected);
                        }
                      }
                    } else {
                      // grow elements
                      // if it's a null option
                      if (option.id === '' && nullOption) {
                        // put back the pre-compiled element
                        element = nullOption;
                      } else {
                        // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                        // in this version of jQuery on some browser the .text() returns a string
                        // rather then the element.
                        (element = optionTemplate.clone()).val(option.id).prop('selected', option.selected).attr('selected', option.selected).prop('label', option.label).text(option.label);
                      }
                      existingOptions.push(existingOption = {
                        element: element,
                        label: option.label,
                        id: option.id,
                        selected: option.selected
                      });
                      updateLabelMap(labelMap, option.label, true);
                      if (lastElement) {
                        lastElement.after(element);
                      } else {
                        existingParent.element.append(element);
                      }
                      lastElement = element;
                    }
                  }
                  // remove any excessive OPTIONs in a group
                  index++;
                  // increment since the existingOptions[0] is parent element not OPTION
                  while (existingOptions.length > index) {
                    option = existingOptions.pop();
                    updateLabelMap(labelMap, option.label, false);
                    option.element.remove();
                  }
                }
                // remove any excessive OPTGROUPs from select
                while (optionGroupsCache.length > groupIndex) {
                  // remove all the labels in the option group
                  optionGroup = optionGroupsCache.pop();
                  for (index = 1; index < optionGroup.length; ++index) {
                    updateLabelMap(labelMap, optionGroup[index].label, false);
                  }
                  optionGroup[0].element.remove();
                }
                forEach(labelMap, function (count, label) {
                  if (count > 0) {
                    selectCtrl.addOption(label);
                  } else if (count < 0) {
                    selectCtrl.removeOption(label);
                  }
                });
              }
            }
          }
        };
      }
    ];
  var optionDirective = [
      '$interpolate',
      function ($interpolate) {
        var nullSelectCtrl = {
            addOption: noop,
            removeOption: noop
          };
        return {
          restrict: 'E',
          priority: 100,
          compile: function (element, attr) {
            if (isUndefined(attr.value)) {
              var interpolateFn = $interpolate(element.text(), true);
              if (!interpolateFn) {
                attr.$set('value', element.text());
              }
            }
            return function (scope, element, attr) {
              var selectCtrlName = '$selectController', parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
              // in case we are in optgroup
              if (!selectCtrl || !selectCtrl.databound) {
                selectCtrl = nullSelectCtrl;
              }
              if (interpolateFn) {
                scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
                  attr.$set('value', newVal);
                  if (oldVal !== newVal) {
                    selectCtrl.removeOption(oldVal);
                  }
                  selectCtrl.addOption(newVal, element);
                });
              } else {
                selectCtrl.addOption(attr.value, element);
              }
              element.on('$destroy', function () {
                selectCtrl.removeOption(attr.value);
              });
            };
          }
        };
      }
    ];
  var styleDirective = valueFn({
      restrict: 'E',
      terminal: false
    });
  var requiredDirective = function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        attr.required = true;
        // force truthy in case we are on non input element
        ctrl.$validators.required = function (modelValue, viewValue) {
          return !attr.required || !ctrl.$isEmpty(viewValue);
        };
        attr.$observe('required', function () {
          ctrl.$validate();
        });
      }
    };
  };
  var patternDirective = function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        var regexp, patternExp = attr.ngPattern || attr.pattern;
        attr.$observe('pattern', function (regex) {
          if (isString(regex) && regex.length > 0) {
            regex = new RegExp('^' + regex + '$');
          }
          if (regex && !regex.test) {
            throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp, regex, startingTag(elm));
          }
          regexp = regex || undefined;
          ctrl.$validate();
        });
        ctrl.$validators.pattern = function (value) {
          return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
        };
      }
    };
  };
  var maxlengthDirective = function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        var maxlength = -1;
        attr.$observe('maxlength', function (value) {
          var intVal = int(value);
          maxlength = isNaN(intVal) ? -1 : intVal;
          ctrl.$validate();
        });
        ctrl.$validators.maxlength = function (modelValue, viewValue) {
          return maxlength < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlength;
        };
      }
    };
  };
  var minlengthDirective = function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        var minlength = 0;
        attr.$observe('minlength', function (value) {
          minlength = int(value) || 0;
          ctrl.$validate();
        });
        ctrl.$validators.minlength = function (modelValue, viewValue) {
          return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
        };
      }
    };
  };
  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }
  //try to bind to jquery now so that one can write jqLite(document).ready()
  //but we will rebind on bootstrap again.
  bindJQuery();
  publishExternalAPI(angular);
  jqLite(document).ready(function () {
    angularInit(document, bootstrap);
  });
}(window, document));
!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;
(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === 'function' && define.amd;
  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
      'function': true,
      'object': true
    };
  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this, freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == 'object' && global;
  if (freeGlobal && (freeGlobal['global'] === freeGlobal || freeGlobal['window'] === freeGlobal || freeGlobal['self'] === freeGlobal)) {
    root = freeGlobal;
  }
  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root['Object']());
    exports || (exports = root['Object']());
    // Native constructor aliases.
    var Number = context['Number'] || root['Number'], String = context['String'] || root['String'], Object = context['Object'] || root['Object'], Date = context['Date'] || root['Date'], SyntaxError = context['SyntaxError'] || root['SyntaxError'], TypeError = context['TypeError'] || root['TypeError'], Math = context['Math'] || root['Math'], nativeJSON = context['JSON'] || root['JSON'];
    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == 'object' && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }
    // Convenience aliases.
    var objectProto = Object.prototype, getClass = objectProto.toString, isProperty, forEach, undef;
    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {
    }
    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == 'bug-string-char-index') {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = 'a'[0] != 'a';
      } else if (name == 'json') {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has('json-stringify') && has('json-parse');
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == 'json-stringify') {
          var stringify = exports.stringify, stringifySupported = typeof stringify == 'function' && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported = stringify(0) === '0' && stringify(new Number()) === '0' && stringify(new String()) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === '1' && stringify([value]) == '[1]' && stringify([undef]) == '[null]' && stringify(null) == 'null' && stringify([
                undef,
                getClass,
                null
              ]) == '[null,null,null]' && stringify({
                'a': [
                  value,
                  true,
                  false,
                  null,
                  '\0\b\n\f\r\t'
                ]
              }) == serialized && stringify(null, value) === '1' && stringify([
                1,
                2
              ], null, 1) == '[\n 1,\n 2\n]' && stringify(new Date(-8640000000000000)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(8640000000000000)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-62198755200000)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == 'json-parse') {
          var parse = exports.parse;
          if (typeof parse == 'function') {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse('0') === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value['a'].length == 5 && value['a'][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse('01') !== 1;
                    } catch (exception) {
                    }
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse('1.') !== 1;
                    } catch (exception) {
                    }
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }
    if (!has('json')) {
      // Common `[[Class]]` name aliases.
      var functionClass = '[object Function]', dateClass = '[object Date]', numberClass = '[object Number]', stringClass = '[object String]', arrayClass = '[object Array]', booleanClass = '[object Boolean]';
      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has('bug-string-char-index');
      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [
            0,
            31,
            59,
            90,
            120,
            151,
            181,
            212,
            243,
            273,
            304,
            334
          ];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }
      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = { 'toString': 1 }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }
      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;
        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;
        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;
        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = [
            'valueOf',
            'toString',
            'toLocaleString',
            'propertyIsEnumerable',
            'isPrototypeOf',
            'hasOwnProperty',
            'constructor'
          ];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != 'function' && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == 'prototype') && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == 'prototype') && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == 'prototype') && isProperty.call(object, property) && !(isConstructor = property === 'constructor')) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, property = 'constructor')) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };
      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has('json-stringify')) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
            92: '\\\\',
            34: '\\"',
            8: '\\b',
            12: '\\f',
            10: '\\n',
            13: '\\r',
            9: '\\t'
          };
        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = '000000';
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };
        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = '\\u00';
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split('') : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
            case 8:
            case 9:
            case 10:
            case 12:
            case 13:
            case 34:
            case 92:
              result += Escapes[charCode];
              break;
            default:
              if (charCode < 32) {
                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                break;
              }
              result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };
        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {
          }
          if (typeof value == 'object' && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, 'toJSON')) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 86400000);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 86400000 + 86400000) % 86400000;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 3600000) % 24;
                  minutes = floor(time / 60000) % 60;
                  seconds = floor(time / 1000) % 60;
                  milliseconds = time % 1000;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 10000 ? (year < 0 ? '-' : '+') + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + '-' + toPaddedString(2, month + 1) + '-' + toPaddedString(2, date) + 'T' + toPaddedString(2, hours) + ':' + toPaddedString(2, minutes) + ':' + toPaddedString(2, seconds) + '.' + toPaddedString(3, milliseconds) + 'Z';
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == 'function' && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, 'toJSON'))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return 'null';
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return '' + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? '' + value : 'null';
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote('' + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == 'object') {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? 'null' : element);
              }
              result = results.length ? whitespace ? '[\n' + indentation + results.join(',\n' + indentation) + '\n' + prefix + ']' : '[' + results.join(',') + ']' : '[]';
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ':' + (whitespace ? ' ' : '') + element);
                }
              });
              result = results.length ? whitespace ? '{\n' + indentation + results.join(',\n' + indentation) + '\n' + prefix + '}' : '{' + results.join(',') + '}' : '{}';
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };
        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = '', width > 10 && (width = 10); whitespace.length < width; whitespace += ' ');
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize('', (value = {}, value[''] = source, value), callback, properties, whitespace, '', []);
        };
      }
      // Public: Parses a JSON source string.
      if (!has('json-parse')) {
        var fromCharCode = String.fromCharCode;
        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
            92: '\\',
            34: '"',
            47: '/',
            98: '\b',
            116: '\t',
            110: '\n',
            102: '\f',
            114: '\r'
          };
        // Internal: Stores the parser state.
        var Index, Source;
        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };
        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
            case 9:
            case 10:
            case 13:
            case 32:
              // Skip whitespace tokens, including tabs, carriage returns, line
              // feeds, and space characters.
              Index++;
              break;
            case 123:
            case 125:
            case 91:
            case 93:
            case 58:
            case 44:
              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
              // the current position.
              value = charIndexBuggy ? source.charAt(Index) : source[Index];
              Index++;
              return value;
            case 34:
              // `"` delimits a JSON string; advance to the next character and
              // begin parsing the string. String tokens are prefixed with the
              // sentinel `@` character to distinguish them from punctuators and
              // end-of-string tokens.
              for (value = '@', Index++; Index < length;) {
                charCode = source.charCodeAt(Index);
                if (charCode < 32) {
                  // Unescaped ASCII control characters (those with a code unit
                  // less than the space character) are not permitted.
                  abort();
                } else if (charCode == 92) {
                  // A reverse solidus (`\`) marks the beginning of an escaped
                  // control character (including `"`, `\`, and `/`) or Unicode
                  // escape sequence.
                  charCode = source.charCodeAt(++Index);
                  switch (charCode) {
                  case 92:
                  case 34:
                  case 47:
                  case 98:
                  case 116:
                  case 110:
                  case 102:
                  case 114:
                    // Revive escaped control characters.
                    value += Unescapes[charCode];
                    Index++;
                    break;
                  case 117:
                    // `\u` marks the beginning of a Unicode escape sequence.
                    // Advance to the first character and validate the
                    // four-digit code point.
                    begin = ++Index;
                    for (position = Index + 4; Index < position; Index++) {
                      charCode = source.charCodeAt(Index);
                      // A valid sequence comprises four hexdigits (case-
                      // insensitive) that form a single hexadecimal value.
                      if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                        // Invalid Unicode escape sequence.
                        abort();
                      }
                    }
                    // Revive the escaped character.
                    value += fromCharCode('0x' + source.slice(begin, Index));
                    break;
                  default:
                    // Invalid escape sequence.
                    abort();
                  }
                } else {
                  if (charCode == 34) {
                    // An unescaped double-quote character marks the end of the
                    // string.
                    break;
                  }
                  charCode = source.charCodeAt(Index);
                  begin = Index;
                  // Optimize for the common case where a string is valid.
                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
                    charCode = source.charCodeAt(++Index);
                  }
                  // Append the string as-is.
                  value += source.slice(begin, Index);
                }
              }
              if (source.charCodeAt(Index) == 34) {
                // Advance to the next character and return the revived string.
                Index++;
                return value;
              }
              // Unterminated string.
              abort();
            default:
              // Parse numbers and literals.
              begin = Index;
              // Advance past the negative sign, if one is specified.
              if (charCode == 45) {
                isSigned = true;
                charCode = source.charCodeAt(++Index);
              }
              // Parse an integer or floating-point value.
              if (charCode >= 48 && charCode <= 57) {
                // Leading zeroes are interpreted as octal literals.
                if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                  // Illegal octal literal.
                  abort();
                }
                isSigned = false;
                // Parse the integer component.
                for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++);
                // Floats cannot contain a leading decimal point; however, this
                // case is already accounted for by the parser.
                if (source.charCodeAt(Index) == 46) {
                  position = ++Index;
                  // Parse the decimal component.
                  for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);
                  if (position == Index) {
                    // Illegal trailing decimal.
                    abort();
                  }
                  Index = position;
                }
                // Parse exponents. The `e` denoting the exponent is
                // case-insensitive.
                charCode = source.charCodeAt(Index);
                if (charCode == 101 || charCode == 69) {
                  charCode = source.charCodeAt(++Index);
                  // Skip past the sign following the exponent, if one is
                  // specified.
                  if (charCode == 43 || charCode == 45) {
                    Index++;
                  }
                  // Parse the exponential component.
                  for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);
                  if (position == Index) {
                    // Illegal empty exponent.
                    abort();
                  }
                  Index = position;
                }
                // Coerce the parsed value to a JavaScript number.
                return +source.slice(begin, Index);
              }
              // A negative sign may only precede numbers.
              if (isSigned) {
                abort();
              }
              // `true`, `false`, and `null` literals.
              if (source.slice(Index, Index + 4) == 'true') {
                Index += 4;
                return true;
              } else if (source.slice(Index, Index + 5) == 'false') {
                Index += 5;
                return false;
              } else if (source.slice(Index, Index + 4) == 'null') {
                Index += 4;
                return null;
              }
              // Unrecognized token.
              abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return '$';
        };
        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == '$') {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == 'string') {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == '@') {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == '[') {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == ']') {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ',') {
                    value = lex();
                    if (value == ']') {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ',') {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == '{') {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == '}') {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ',') {
                    value = lex();
                    if (value == '}') {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == ',' || typeof value != 'string' || (charIndexBuggy ? value.charAt(0) : value[0]) != '@' || lex() != ':') {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };
        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };
        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == 'object' && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };
        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = '' + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != '$') {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[''] = result, value), '', callback) : result;
        };
      }
    }
    exports['runInContext'] = runInContext;
    return exports;
  }
  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON, previousJSON = root['JSON3'], isRestored = false;
    var JSON3 = runInContext(root, root['JSON3'] = {
        'noConflict': function () {
          if (!isRestored) {
            isRestored = true;
            root.JSON = nativeJSON;
            root['JSON3'] = previousJSON;
            nativeJSON = previousJSON = null;
          }
          return JSON3;
        }
      });
    root.JSON = {
      'parse': JSON3.parse,
      'stringify': JSON3.stringify
    };
  }
  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}.call(this));
/*!
 * Bootstrap v3.1.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}
/* ========================================================================
 * Bootstrap: transition.js v3.1.1
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================
  function transitionEnd() {
    var el = document.createElement('bootstrap');
    var transEndEventNames = {
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'oTransitionEnd otransitionend',
        'transition': 'transitionend'
      };
    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }
    return false;
  }
  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false, $el = this;
    $(this).one($.support.transition.end, function () {
      called = true;
    });
    var callback = function () {
      if (!called)
        $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };
  $(function () {
    $.support.transition = transitionEnd();
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: alert.js v3.1.1
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // ALERT CLASS DEFINITION
  // ======================
  var dismiss = '[data-dismiss="alert"]';
  var Alert = function (el) {
    $(el).on('click', dismiss, this.close);
  };
  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');
    }
    var $parent = $(selector);
    if (e)
      e.preventDefault();
    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent();
    }
    $parent.trigger(e = $.Event('close.bs.alert'));
    if (e.isDefaultPrevented())
      return;
    $parent.removeClass('in');
    function removeElement() {
      $parent.trigger('closed.bs.alert').remove();
    }
    $.support.transition && $parent.hasClass('fade') ? $parent.one($.support.transition.end, removeElement).emulateTransitionEnd(150) : removeElement();
  };
  // ALERT PLUGIN DEFINITION
  // =======================
  var old = $.fn.alert;
  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');
      if (!data)
        $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string')
        data[option].call($this);
    });
  };
  $.fn.alert.Constructor = Alert;
  // ALERT NO CONFLICT
  // =================
  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };
  // ALERT DATA-API
  // ==============
  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);
/* ========================================================================
 * Bootstrap: button.js v3.1.1
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================
  var Button = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };
  Button.DEFAULTS = { loadingText: 'loading...' };
  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();
    state = state + 'Text';
    if (!data.resetText)
      $el.data('resetText', $el[val]());
    $el[val](data[state] || this.options[state]);
    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d);
      }
    }, this), 0);
  };
  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');
    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active'))
          changed = false;
        else
          $parent.find('.active').removeClass('active');
      }
      if (changed)
        $input.prop('checked', !this.$element.hasClass('active')).trigger('change');
    }
    if (changed)
      this.$element.toggleClass('active');
  };
  // BUTTON PLUGIN DEFINITION
  // ========================
  var old = $.fn.button;
  $.fn.button = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.button', data = new Button(this, options));
      if (option == 'toggle')
        data.toggle();
      else if (option)
        data.setState(option);
    });
  };
  $.fn.button.Constructor = Button;
  // BUTTON NO CONFLICT
  // ==================
  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };
  // BUTTON DATA-API
  // ===============
  $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target);
    if (!$btn.hasClass('btn'))
      $btn = $btn.closest('.btn');
    $btn.button('toggle');
    e.preventDefault();
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: carousel.js v3.1.1
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // CAROUSEL CLASS DEFINITION
  // =========================
  var Carousel = function (element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = this.sliding = this.interval = this.$active = this.$items = null;
    this.options.pause == 'hover' && this.$element.on('mouseenter', $.proxy(this.pause, this)).on('mouseleave', $.proxy(this.cycle, this));
  };
  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true
  };
  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);
    this.interval && clearInterval(this.interval);
    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
    return this;
  };
  Carousel.prototype.getActiveIndex = function () {
    this.$active = this.$element.find('.item.active');
    this.$items = this.$active.parent().children();
    return this.$items.index(this.$active);
  };
  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getActiveIndex();
    if (pos > this.$items.length - 1 || pos < 0)
      return;
    if (this.sliding)
      return this.$element.one('slid.bs.carousel', function () {
        that.to(pos);
      });
    if (activeIndex == pos)
      return this.pause().cycle();
    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]));
  };
  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);
    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }
    this.interval = clearInterval(this.interval);
    return this;
  };
  Carousel.prototype.next = function () {
    if (this.sliding)
      return;
    return this.slide('next');
  };
  Carousel.prototype.prev = function () {
    if (this.sliding)
      return;
    return this.slide('prev');
  };
  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || $active[type]();
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var fallback = type == 'next' ? 'first' : 'last';
    var that = this;
    if (!$next.length) {
      if (!this.options.wrap)
        return;
      $next = this.$element.find('.item')[fallback]();
    }
    if ($next.hasClass('active'))
      return this.sliding = false;
    var e = $.Event('slide.bs.carousel', {
        relatedTarget: $next[0],
        direction: direction
      });
    this.$element.trigger(e);
    if (e.isDefaultPrevented())
      return;
    this.sliding = true;
    isCycling && this.pause();
    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      this.$element.one('slid.bs.carousel', function () {
        var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
        $nextIndicator && $nextIndicator.addClass('active');
      });
    }
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth;
      // force reflow
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one($.support.transition.end, function () {
        $next.removeClass([
          type,
          direction
        ].join(' ')).addClass('active');
        $active.removeClass([
          'active',
          direction
        ].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger('slid.bs.carousel');
        }, 0);
      }).emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger('slid.bs.carousel');
    }
    isCycling && this.cycle();
    return this;
  };
  // CAROUSEL PLUGIN DEFINITION
  // ==========================
  var old = $.fn.carousel;
  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;
      if (!data)
        $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number')
        data.to(option);
      else if (action)
        data[action]();
      else if (options.interval)
        data.pause().cycle();
    });
  };
  $.fn.carousel.Constructor = Carousel;
  // CAROUSEL NO CONFLICT
  // ====================
  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };
  // CAROUSEL DATA-API
  // =================
  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this = $(this), href;
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''));
    //strip for ie7
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex)
      options.interval = false;
    $target.carousel(options);
    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('bs.carousel').to(slideIndex);
    }
    e.preventDefault();
  });
  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      $carousel.carousel($carousel.data());
    });
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: collapse.js v3.1.1
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================
  var Collapse = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.transitioning = null;
    if (this.options.parent)
      this.$parent = $(this.options.parent);
    if (this.options.toggle)
      this.toggle();
  };
  Collapse.DEFAULTS = { toggle: true };
  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };
  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in'))
      return;
    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented())
      return;
    var actives = this.$parent && this.$parent.find('> .panel > .in');
    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse');
      if (hasData && hasData.transitioning)
        return;
      actives.collapse('hide');
      hasData || actives.data('bs.collapse', null);
    }
    var dimension = this.dimension();
    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0);
    this.transitioning = 1;
    var complete = function () {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('auto');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };
    if (!$.support.transition)
      return complete.call(this);
    var scrollSize = $.camelCase([
        'scroll',
        dimension
      ].join('-'));
    this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
  };
  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in'))
      return;
    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented())
      return;
    var dimension = this.dimension();
    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
    this.$element.addClass('collapsing').removeClass('collapse').removeClass('in');
    this.transitioning = 1;
    var complete = function () {
      this.transitioning = 0;
      this.$element.trigger('hidden.bs.collapse').removeClass('collapsing').addClass('collapse');
    };
    if (!$.support.transition)
      return complete.call(this);
    this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350);
  };
  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };
  // COLLAPSE PLUGIN DEFINITION
  // ==========================
  var old = $.fn.collapse;
  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);
      if (!data && options.toggle && option == 'show')
        option = !option;
      if (!data)
        $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  };
  $.fn.collapse.Constructor = Collapse;
  // COLLAPSE NO CONFLICT
  // ====================
  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };
  // COLLAPSE DATA-API
  // =================
  $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this), href;
    var target = $this.attr('data-target') || e.preventDefault() || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '');
    //strip for ie7
    var $target = $(target);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();
    var parent = $this.attr('data-parent');
    var $parent = parent && $(parent);
    if (!data || !data.transitioning) {
      if ($parent)
        $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed');
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed');
    }
    $target.collapse(option);
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: dropdown.js v3.1.1
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // DROPDOWN CLASS DEFINITION
  // =========================
  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle=dropdown]';
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };
  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);
    if ($this.is('.disabled, :disabled'))
      return;
    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');
    clearMenus();
    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus);
      }
      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented())
        return;
      $parent.toggleClass('open').trigger('shown.bs.dropdown', relatedTarget);
      $this.focus();
    }
    return false;
  };
  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode))
      return;
    var $this = $(this);
    e.preventDefault();
    e.stopPropagation();
    if ($this.is('.disabled, :disabled'))
      return;
    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');
    if (!isActive || isActive && e.keyCode == 27) {
      if (e.which == 27)
        $parent.find(toggle).focus();
      return $this.click();
    }
    var desc = ' li:not(.divider):visible a';
    var $items = $parent.find('[role=menu]' + desc + ', [role=listbox]' + desc);
    if (!$items.length)
      return;
    var index = $items.index($items.filter(':focus'));
    if (e.keyCode == 38 && index > 0)
      index--;
    // up
    if (e.keyCode == 40 && index < $items.length - 1)
      index++;
    // down
    if (!~index)
      index = 0;
    $items.eq(index).focus();
  };
  function clearMenus(e) {
    $(backdrop).remove();
    $(toggle).each(function () {
      var $parent = getParent($(this));
      var relatedTarget = { relatedTarget: this };
      if (!$parent.hasClass('open'))
        return;
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented())
        return;
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);
    });
  }
  function getParent($this) {
    var selector = $this.attr('data-target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '');
    }
    var $parent = selector && $(selector);
    return $parent && $parent.length ? $parent : $this.parent();
  }
  // DROPDOWN PLUGIN DEFINITION
  // ==========================
  var old = $.fn.dropdown;
  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');
      if (!data)
        $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string')
        data[option].call($this);
    });
  };
  $.fn.dropdown.Constructor = Dropdown;
  // DROPDOWN NO CONFLICT
  // ====================
  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };
  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================
  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle + ', [role=menu], [role=listbox]', Dropdown.prototype.keydown);
}(jQuery);
/* ========================================================================
 * Bootstrap: modal.js v3.1.1
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // MODAL CLASS DEFINITION
  // ======================
  var Modal = function (element, options) {
    this.options = options;
    this.$element = $(element);
    this.$backdrop = this.isShown = null;
    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };
  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };
  Modal.prototype.toggle = function (_relatedTarget) {
    return this[!this.isShown ? 'show' : 'hide'](_relatedTarget);
  };
  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });
    this.$element.trigger(e);
    if (this.isShown || e.isDefaultPrevented())
      return;
    this.isShown = true;
    this.escape();
    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));
    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');
      if (!that.$element.parent().length) {
        that.$element.appendTo(document.body);
      }
      that.$element.show().scrollTop(0);
      if (transition) {
        that.$element[0].offsetWidth;
      }
      that.$element.addClass('in').attr('aria-hidden', false);
      that.enforceFocus();
      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });
      transition ? that.$element.find('.modal-dialog').one($.support.transition.end, function () {
        that.$element.focus().trigger(e);
      }).emulateTransitionEnd(300) : that.$element.focus().trigger(e);
    });
  };
  Modal.prototype.hide = function (e) {
    if (e)
      e.preventDefault();
    e = $.Event('hide.bs.modal');
    this.$element.trigger(e);
    if (!this.isShown || e.isDefaultPrevented())
      return;
    this.isShown = false;
    this.escape();
    $(document).off('focusin.bs.modal');
    this.$element.removeClass('in').attr('aria-hidden', true).off('click.dismiss.bs.modal');
    $.support.transition && this.$element.hasClass('fade') ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
  };
  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal').on('focusin.bs.modal', $.proxy(function (e) {
      if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.focus();
      }
    }, this));
  };
  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal');
    }
  };
  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.removeBackdrop();
      that.$element.trigger('hidden.bs.modal');
    });
  };
  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };
  Modal.prototype.backdrop = function (callback) {
    var animate = this.$element.hasClass('fade') ? 'fade' : '';
    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;
      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget)
          return;
        this.options.backdrop == 'static' ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
      }, this));
      if (doAnimate)
        this.$backdrop[0].offsetWidth;
      // force reflow
      this.$backdrop.addClass('in');
      if (!callback)
        return;
      doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
    } else if (callback) {
      callback();
    }
  };
  // MODAL PLUGIN DEFINITION
  // =======================
  var old = $.fn.modal;
  $.fn.modal = function (option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);
      if (!data)
        $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string')
        data[option](_relatedTarget);
      else if (options.show)
        data.show(_relatedTarget);
    });
  };
  $.fn.modal.Constructor = Modal;
  // MODAL NO CONFLICT
  // =================
  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };
  // MODAL DATA-API
  // ==============
  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, ''));
    //strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());
    if ($this.is('a'))
      e.preventDefault();
    $target.modal(option, this).one('hide', function () {
      $this.is(':visible') && $this.focus();
    });
  });
  $(document).on('show.bs.modal', '.modal', function () {
    $(document.body).addClass('modal-open');
  }).on('hidden.bs.modal', '.modal', function () {
    $(document.body).removeClass('modal-open');
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: tooltip.js v3.1.1
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================
  var Tooltip = function (element, options) {
    this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
    this.init('tooltip', element, options);
  };
  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false
  };
  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    var triggers = this.options.trigger.split(' ');
    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];
      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';
        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }
    this.options.selector ? this._options = $.extend({}, this.options, {
      trigger: 'manual',
      selector: ''
    }) : this.fixTitle();
  };
  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };
  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);
    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }
    return options;
  };
  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();
    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value)
        options[key] = value;
    });
    return options;
  };
  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
    clearTimeout(self.timeout);
    self.hoverState = 'in';
    if (!self.options.delay || !self.options.delay.show)
      return self.show();
    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in')
        self.show();
    }, self.options.delay.show);
  };
  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
    clearTimeout(self.timeout);
    self.hoverState = 'out';
    if (!self.options.delay || !self.options.delay.hide)
      return self.hide();
    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out')
        self.hide();
    }, self.options.delay.hide);
  };
  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);
    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);
      if (e.isDefaultPrevented())
        return;
      var that = this;
      var $tip = this.tip();
      this.setContent();
      if (this.options.animation)
        $tip.addClass('fade');
      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace)
        placement = placement.replace(autoToken, '') || 'top';
      $tip.detach().css({
        top: 0,
        left: 0,
        display: 'block'
      }).addClass(placement);
      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;
      if (autoPlace) {
        var $parent = this.$element.parent();
        var orgPlacement = placement;
        var docScroll = document.documentElement.scrollTop || document.body.scrollTop;
        var parentWidth = this.options.container == 'body' ? window.innerWidth : $parent.outerWidth();
        var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();
        var parentLeft = this.options.container == 'body' ? 0 : $parent.offset().left;
        placement = placement == 'bottom' && pos.top + pos.height + actualHeight - docScroll > parentHeight ? 'top' : placement == 'top' && pos.top - docScroll - actualHeight < 0 ? 'bottom' : placement == 'right' && pos.right + actualWidth > parentWidth ? 'left' : placement == 'left' && pos.left - actualWidth < parentLeft ? 'right' : placement;
        $tip.removeClass(orgPlacement).addClass(placement);
      }
      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
      this.applyPlacement(calculatedOffset, placement);
      this.hoverState = null;
      var complete = function () {
        that.$element.trigger('shown.bs.' + that.type);
      };
      $.support.transition && this.$tip.hasClass('fade') ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
    }
  };
  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var replace;
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;
    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);
    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))
      marginTop = 0;
    if (isNaN(marginLeft))
      marginLeft = 0;
    offset.top = offset.top + marginTop;
    offset.left = offset.left + marginLeft;
    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);
    $tip.addClass('in');
    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;
    if (placement == 'top' && actualHeight != height) {
      replace = true;
      offset.top = offset.top + height - actualHeight;
    }
    if (/bottom|top/.test(placement)) {
      var delta = 0;
      if (offset.left < 0) {
        delta = offset.left * -2;
        offset.left = 0;
        $tip.offset(offset);
        actualWidth = $tip[0].offsetWidth;
        actualHeight = $tip[0].offsetHeight;
      }
      this.replaceArrow(delta - width + actualWidth, actualWidth, 'left');
    } else {
      this.replaceArrow(actualHeight - height, actualHeight, 'top');
    }
    if (replace)
      $tip.offset(offset);
  };
  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + '%' : '');
  };
  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };
  Tooltip.prototype.hide = function () {
    var that = this;
    var $tip = this.tip();
    var e = $.Event('hide.bs.' + this.type);
    function complete() {
      if (that.hoverState != 'in')
        $tip.detach();
      that.$element.trigger('hidden.bs.' + that.type);
    }
    this.$element.trigger(e);
    if (e.isDefaultPrevented())
      return;
    $tip.removeClass('in');
    $.support.transition && this.$tip.hasClass('fade') ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
    this.hoverState = null;
    return this;
  };
  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };
  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };
  Tooltip.prototype.getPosition = function () {
    var el = this.$element[0];
    return $.extend({}, typeof el.getBoundingClientRect == 'function' ? el.getBoundingClientRect() : {
      width: el.offsetWidth,
      height: el.offsetHeight
    }, this.$element.offset());
  };
  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? {
      top: pos.top + pos.height,
      left: pos.left + pos.width / 2 - actualWidth / 2
    } : placement == 'top' ? {
      top: pos.top - actualHeight,
      left: pos.left + pos.width / 2 - actualWidth / 2
    } : placement == 'left' ? {
      top: pos.top + pos.height / 2 - actualHeight / 2,
      left: pos.left - actualWidth
    } : {
      top: pos.top + pos.height / 2 - actualHeight / 2,
      left: pos.left + pos.width
    };
  };
  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;
    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);
    return title;
  };
  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template);
  };
  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };
  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide();
      this.$element = null;
      this.options = null;
    }
  };
  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };
  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };
  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };
  Tooltip.prototype.toggle = function (e) {
    var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this;
    self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
  };
  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout);
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type);
  };
  // TOOLTIP PLUGIN DEFINITION
  // =========================
  var old = $.fn.tooltip;
  $.fn.tooltip = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = typeof option == 'object' && option;
      if (!data && option == 'destroy')
        return;
      if (!data)
        $this.data('bs.tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  };
  $.fn.tooltip.Constructor = Tooltip;
  // TOOLTIP NO CONFLICT
  // ===================
  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);
/* ========================================================================
 * Bootstrap: popover.js v3.1.1
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================
  var Popover = function (element, options) {
    this.init('popover', element, options);
  };
  if (!$.fn.tooltip)
    throw new Error('Popover requires tooltip.js');
  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });
  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================
  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
  Popover.prototype.constructor = Popover;
  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };
  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();
    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content')[this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);
    $tip.removeClass('fade top bottom left right in');
    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html())
      $tip.find('.popover-title').hide();
  };
  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };
  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;
    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };
  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };
  Popover.prototype.tip = function () {
    if (!this.$tip)
      this.$tip = $(this.options.template);
    return this.$tip;
  };
  // POPOVER PLUGIN DEFINITION
  // =========================
  var old = $.fn.popover;
  $.fn.popover = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = typeof option == 'object' && option;
      if (!data && option == 'destroy')
        return;
      if (!data)
        $this.data('bs.popover', data = new Popover(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  };
  $.fn.popover.Constructor = Popover;
  // POPOVER NO CONFLICT
  // ===================
  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);
/* ========================================================================
 * Bootstrap: scrollspy.js v3.1.1
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // SCROLLSPY CLASS DEFINITION
  // ==========================
  function ScrollSpy(element, options) {
    var href;
    var process = $.proxy(this.process, this);
    this.$element = $(element).is('body') ? $(window) : $(element);
    this.$body = $('body');
    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || (href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') || '') + ' .nav li > a';
    this.offsets = $([]);
    this.targets = $([]);
    this.activeTarget = null;
    this.refresh();
    this.process();
  }
  ScrollSpy.DEFAULTS = { offset: 10 };
  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = this.$element[0] == window ? 'offset' : 'position';
    this.offsets = $([]);
    this.targets = $([]);
    var self = this;
    var $targets = this.$body.find(this.selector).map(function () {
        var $el = $(this);
        var href = $el.data('target') || $el.attr('href');
        var $href = /^#./.test(href) && $(href);
        return $href && $href.length && $href.is(':visible') && [[
            $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()),
            href
          ]] || null;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).each(function () {
        self.offsets.push(this[0]);
        self.targets.push(this[1]);
      });
  };
  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight;
    var maxScroll = scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;
    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets.last()[0]) && this.activate(i);
    }
    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i);
    }
    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
    }
  };
  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;
    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
    var active = $(selector).parents('li').addClass('active');
    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }
    active.trigger('activate.bs.scrollspy');
  };
  // SCROLLSPY PLUGIN DEFINITION
  // ===========================
  var old = $.fn.scrollspy;
  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  };
  $.fn.scrollspy.Constructor = ScrollSpy;
  // SCROLLSPY NO CONFLICT
  // =====================
  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };
  // SCROLLSPY DATA-API
  // ==================
  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      $spy.scrollspy($spy.data());
    });
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: tab.js v3.1.1
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // TAB CLASS DEFINITION
  // ====================
  var Tab = function (element) {
    this.element = $(element);
  };
  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');
    }
    if ($this.parent('li').hasClass('active'))
      return;
    var previous = $ul.find('.active:last a')[0];
    var e = $.Event('show.bs.tab', { relatedTarget: previous });
    $this.trigger(e);
    if (e.isDefaultPrevented())
      return;
    var $target = $(selector);
    this.activate($this.parent('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      });
    });
  };
  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && $active.hasClass('fade');
    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active');
      element.addClass('active');
      if (transition) {
        element[0].offsetWidth;
        // reflow for transition
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }
      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active');
      }
      callback && callback();
    }
    transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
    $active.removeClass('in');
  };
  // TAB PLUGIN DEFINITION
  // =====================
  var old = $.fn.tab;
  $.fn.tab = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');
      if (!data)
        $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string')
        data[option]();
    });
  };
  $.fn.tab.Constructor = Tab;
  // TAB NO CONFLICT
  // ===============
  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };
  // TAB DATA-API
  // ============
  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault();
    $(this).tab('show');
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: affix.js v3.1.1
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // AFFIX CLASS DEFINITION
  // ======================
  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);
    this.$window = $(window).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));
    this.$element = $(element);
    this.affixed = this.unpin = this.pinnedOffset = null;
    this.checkPosition();
  };
  Affix.RESET = 'affix affix-top affix-bottom';
  Affix.DEFAULTS = { offset: 0 };
  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset)
      return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$window.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };
  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };
  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible'))
      return;
    var scrollHeight = $(document).height();
    var scrollTop = this.$window.scrollTop();
    var position = this.$element.offset();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    if (this.affixed == 'top')
      position.top += scrollTop;
    if (typeof offset != 'object')
      offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function')
      offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function')
      offsetBottom = offset.bottom(this.$element);
    var affix = this.unpin != null && scrollTop + this.unpin <= position.top ? false : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom ? 'bottom' : offsetTop != null && scrollTop <= offsetTop ? 'top' : false;
    if (this.affixed === affix)
      return;
    if (this.unpin)
      this.$element.css('top', '');
    var affixType = 'affix' + (affix ? '-' + affix : '');
    var e = $.Event(affixType + '.bs.affix');
    this.$element.trigger(e);
    if (e.isDefaultPrevented())
      return;
    this.affixed = affix;
    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;
    this.$element.removeClass(Affix.RESET).addClass(affixType).trigger($.Event(affixType.replace('affix', 'affixed')));
    if (affix == 'bottom') {
      this.$element.offset({ top: scrollHeight - offsetBottom - this.$element.height() });
    }
  };
  // AFFIX PLUGIN DEFINITION
  // =======================
  var old = $.fn.affix;
  $.fn.affix = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  };
  $.fn.affix.Constructor = Affix;
  // AFFIX NO CONFLICT
  // =================
  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };
  // AFFIX DATA-API
  // ==============
  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();
      data.offset = data.offset || {};
      if (data.offsetBottom)
        data.offset.bottom = data.offsetBottom;
      if (data.offsetTop)
        data.offset.top = data.offsetTop;
      $spy.affix(data);
    });
  });
}(jQuery);
/**
 * @license AngularJS v1.2.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  var $resourceMinErr = angular.$$minErr('$resource');
  // Helper functions and regex to lookup a dotted path on an object
  // stopping at undefined/null.  The path must be composed of ASCII
  // identifiers (just like $parse)
  var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;
  function isValidDottedPath(path) {
    return path != null && path !== '' && path !== 'hasOwnProperty' && MEMBER_NAME_REGEX.test('.' + path);
  }
  function lookupDottedPath(obj, path) {
    if (!isValidDottedPath(path)) {
      throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
    }
    var keys = path.split('.');
    for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {
      var key = keys[i];
      obj = obj !== null ? obj[key] : undefined;
    }
    return obj;
  }
  /**
 * Create a shallow copy of an object and clear other fields from the destination
 */
  function shallowClearAndCopy(src, dst) {
    dst = dst || {};
    angular.forEach(dst, function (value, key) {
      delete dst[key];
    });
    for (var key in src) {
      if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
    return dst;
  }
  /**
 * @ngdoc module
 * @name ngResource
 * @description
 *
 * # ngResource
 *
 * The `ngResource` module provides interaction support with RESTful services
 * via the $resource service.
 *
 *
 * <div doc-module-components="ngResource"></div>
 *
 * See {@link ngResource.$resource `$resource`} for usage.
 */
  /**
 * @ngdoc service
 * @name $resource
 * @requires $http
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * @param {string} url A parametrized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If any of the parameter value is a function, it will be executed every time
 *   when a param value needs to be obtained for a request (unless the param was overridden).
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@` then the value of that parameter is extracted from
 *   the data object (useful for non-GET operations).
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom action that should extend
 *   the default set of resource actions. The declaration should be created in the format of {@link
 *   ng.$http#usage_parameters $http.config}:
 *
 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
 *        ...}
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – HTTP request method. Valid methods are: `GET`, `POST`, `PUT`,
 *     `DELETE`, and `JSONP`.
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be executed every time when a param value needs to
 *     be obtained for a request (unless the param was overridden).
 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     response body and headers and returns its transformed (typically deserialized) version.
 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
 *     GET request, otherwise if a cache instance built with
 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
 *     caching.
 *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that
 *     should abort the request when resolved.
 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
 *     for more information.
 *   - **`responseType`** - `{string}` - see
 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
 *     with `http response` object. See {@link ng.$http $http interceptors}.
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   { 'get':    {method:'GET'},
 *     'save':   {method:'POST'},
 *     'query':  {method:'GET', isArray:true},
 *     'remove': {method:'DELETE'},
 *     'delete': {method:'DELETE'} };
 *   ```
 *
 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
 *   destination and parameters. When the data is returned from the server then the object is an
 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
 *   read, update, delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId:'@id'});
 *   var user = User.get({userId:123}, function() {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a $resource object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
 *
 *   Success callback is called with (value, responseHeaders) arguments. Error callback is called
 *   with (httpResponse) argument.
 *
 *   Class actions return empty instance (with additional properties below).
 *   Instance actions return promise of the action.
 *
 *   The Resource instances and collection have these additional properties:
 *
 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in
 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is resolved with the {@link ng.$http http response} object, without
 *     the `resource` property.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the interceptor.
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding.
 *
 * @example
 *
 * # Credit card resource
 *
 * ```js
     // Define CreditCard class
     var CreditCard = $resource('/user/:userId/card/:cardId',
      {userId:123, cardId:'@id'}, {
       charge: {method:'POST', params:{charge:true}}
      });

     // We can retrieve a collection from the server
     var cards = CreditCard.query(function() {
       // GET: /user/123/card
       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

       var card = cards[0];
       // each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);
       card.name = "J. Smith";
       // non GET methods are mapped onto the instances
       card.$save();
       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
       // server returns: {id:456, number:'1234', name: 'J. Smith'};

       // our custom method is mapped as well.
       card.$charge({amount:9.99});
       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
     });

     // we can create an instance as well
     var newCard = new CreditCard({number:'0123'});
     newCard.name = "Mike Smith";
     newCard.$save();
     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
     expect(newCard.id).toEqual(789);
 * ```
 *
 * The object returned from this function execution is a resource "class" which has "static" method
 * for each action in the definition.
 *
 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
 * `headers`.
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.

   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
 * in the response that came from the server as well as $http header getter function, so one
 * could rewrite the above example and get access to http headers as:
 *
   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(u, getResponseHeaders){
       u.abc = true;
       u.$save(function(u, putResponseHeaders) {
         //u => saved user object
         //putResponseHeaders => $http header getter
       });
     });
   ```
 *
 * You can also access the raw `$http` promise via the `$promise` property on the object returned
 *
   ```
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123})
         .$promise.then(function(user) {
           $scope.user = user;
         });
   ```

 * # Creating a custom 'PUT' request
 * In this example we create a custom method on our resource to make a PUT request
 * ```js
 *		var app = angular.module('app', ['ngResource', 'ngRoute']);
 *
 *		// Some APIs expect a PUT request in the format URL/object/ID
 *		// Here we are creating an 'update' method
 *		app.factory('Notes', ['$resource', function($resource) {
 *    return $resource('/notes/:id', null,
 *        {
 *            'update': { method:'PUT' }
 *        });
 *		}]);
 *
 *		// In our controller we get the ID from the URL using ngRoute and $routeParams
 *		// We pass in $routeParams and our Notes factory along with $scope
 *		app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                      function($scope, $routeParams, Notes) {
 *    // First get a note object from the factory
 *    var note = Notes.get({ id:$routeParams.id });
 *    $id = note.id;
 *
 *    // Now call update passing in the ID first then the object you are updating
 *    Notes.update({ id:$id }, note);
 *
 *    // This will PUT /notes/ID with the note object in the request payload
 *		}]);
 * ```
 */
  angular.module('ngResource', ['ng']).factory('$resource', [
    '$http',
    '$q',
    function ($http, $q) {
      var DEFAULT_ACTIONS = {
          'get': { method: 'GET' },
          'save': { method: 'POST' },
          'query': {
            method: 'GET',
            isArray: true
          },
          'remove': { method: 'DELETE' },
          'delete': { method: 'DELETE' }
        };
      var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isFunction = angular.isFunction;
      /**
     * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
     * segments:
     *    segment       = *pchar
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
      }
      /**
     * This method is intended for encoding *key* or *value* parts of query component. We need a
     * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
     * have to be encoded per http://tools.ietf.org/html/rfc3986:
     *    query       = *( pchar / "/" / "?" )
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
      }
      function Route(template, defaults) {
        this.template = template;
        this.defaults = defaults || {};
        this.urlParams = {};
      }
      Route.prototype = {
        setUrlParams: function (config, params, actionUrl) {
          var self = this, url = actionUrl || self.template, val, encodedVal;
          var urlParams = self.urlParams = {};
          forEach(url.split(/\W/), function (param) {
            if (param === 'hasOwnProperty') {
              throw $resourceMinErr('badname', 'hasOwnProperty is not a valid parameter name.');
            }
            if (!new RegExp('^\\d+$').test(param) && param && new RegExp('(^|[^\\\\]):' + param + '(\\W|$)').test(url)) {
              urlParams[param] = true;
            }
          });
          url = url.replace(/\\:/g, ':');
          params = params || {};
          forEach(self.urlParams, function (_, urlParam) {
            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
            if (angular.isDefined(val) && val !== null) {
              encodedVal = encodeUriSegment(val);
              url = url.replace(new RegExp(':' + urlParam + '(\\W|$)', 'g'), function (match, p1) {
                return encodedVal + p1;
              });
            } else {
              url = url.replace(new RegExp('(/?):' + urlParam + '(\\W|$)', 'g'), function (match, leadingSlashes, tail) {
                if (tail.charAt(0) == '/') {
                  return tail;
                } else {
                  return leadingSlashes + tail;
                }
              });
            }
          });
          // strip trailing slashes and set the url
          url = url.replace(/\/+$/, '') || '/';
          // then replace collapse `/.` if found in the last URL path segment before the query
          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
          // replace escaped `/\.` with `/.`
          config.url = url.replace(/\/\\\./, '/.');
          // set params - delegate param encoding to $http
          forEach(params, function (value, key) {
            if (!self.urlParams[key]) {
              config.params = config.params || {};
              config.params[key] = value;
            }
          });
        }
      };
      function resourceFactory(url, paramDefaults, actions) {
        var route = new Route(url);
        actions = extend({}, DEFAULT_ACTIONS, actions);
        function extractParams(data, actionParams) {
          var ids = {};
          actionParams = extend({}, paramDefaults, actionParams);
          forEach(actionParams, function (value, key) {
            if (isFunction(value)) {
              value = value();
            }
            ids[key] = value && value.charAt && value.charAt(0) == '@' ? lookupDottedPath(data, value.substr(1)) : value;
          });
          return ids;
        }
        function defaultResponseInterceptor(response) {
          return response.resource;
        }
        function Resource(value) {
          shallowClearAndCopy(value || {}, this);
        }
        forEach(actions, function (action, name) {
          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
          Resource[name] = function (a1, a2, a3, a4) {
            var params = {}, data, success, error;
            /* jshint -W086 */
            /* (purposefully fall through case statements) */
            switch (arguments.length) {
            case 4:
              error = a4;
              success = a3;
            //fallthrough
            case 3:
            case 2:
              if (isFunction(a2)) {
                if (isFunction(a1)) {
                  success = a1;
                  error = a2;
                  break;
                }
                success = a2;
                error = a3;  //fallthrough
              } else {
                params = a1;
                data = a2;
                success = a3;
                break;
              }
            case 1:
              if (isFunction(a1))
                success = a1;
              else if (hasBody)
                data = a1;
              else
                params = a1;
              break;
            case 0:
              break;
            default:
              throw $resourceMinErr('badargs', 'Expected up to 4 arguments [params, data, success, error], got {0} arguments', arguments.length);
            }
            /* jshint +W086 */
            /* (purposefully fall through case statements) */
            var isInstanceCall = this instanceof Resource;
            var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data);
            var httpConfig = {};
            var responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor;
            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;
            forEach(action, function (value, key) {
              if (key != 'params' && key != 'isArray' && key != 'interceptor') {
                httpConfig[key] = copy(value);
              }
            });
            if (hasBody)
              httpConfig.data = data;
            route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
            var promise = $http(httpConfig).then(function (response) {
                var data = response.data, promise = value.$promise;
                if (data) {
                  // Need to convert action.isArray to boolean in case it is undefined
                  // jshint -W018
                  if (angular.isArray(data) !== !!action.isArray) {
                    throw $resourceMinErr('badcfg', 'Error in resource configuration. Expected ' + 'response to contain an {0} but got an {1}', action.isArray ? 'array' : 'object', angular.isArray(data) ? 'array' : 'object');
                  }
                  // jshint +W018
                  if (action.isArray) {
                    value.length = 0;
                    forEach(data, function (item) {
                      value.push(new Resource(item));
                    });
                  } else {
                    shallowClearAndCopy(data, value);
                    value.$promise = promise;
                  }
                }
                value.$resolved = true;
                response.resource = value;
                return response;
              }, function (response) {
                value.$resolved = true;
                (error || noop)(response);
                return $q.reject(response);
              });
            promise = promise.then(function (response) {
              var value = responseInterceptor(response);
              (success || noop)(value, response.headers);
              return value;
            }, responseErrorInterceptor);
            if (!isInstanceCall) {
              // we are creating instance / collection
              // - set the initial promise
              // - return the instance / collection
              value.$promise = promise;
              value.$resolved = false;
              return value;
            }
            // instance call
            return promise;
          };
          Resource.prototype['$' + name] = function (params, success, error) {
            if (isFunction(params)) {
              error = success;
              success = params;
              params = {};
            }
            var result = Resource[name].call(this, params, this, success, error);
            return result.$promise || result;
          };
        });
        Resource.bind = function (additionalParamDefaults) {
          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
        };
        return Resource;
      }
      return resourceFactory;
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
 *
 *
 * <div doc-module-components="ngCookies"></div>
 *
 * See {@link ngCookies.$cookies `$cookies`} and
 * {@link ngCookies.$cookieStore `$cookieStore`} for usage.
 */
  angular.module('ngCookies', ['ng']).factory('$cookies', [
    '$rootScope',
    '$browser',
    function ($rootScope, $browser) {
      var cookies = {}, lastCookies = {}, lastBrowserCookies, runEval = false, copy = angular.copy, isUndefined = angular.isUndefined;
      //creates a poller fn that copies all cookies from the $browser to service & inits the service
      $browser.addPollFn(function () {
        var currentCookies = $browser.cookies();
        if (lastBrowserCookies != currentCookies) {
          //relies on browser.cookies() impl
          lastBrowserCookies = currentCookies;
          copy(currentCookies, lastCookies);
          copy(currentCookies, cookies);
          if (runEval)
            $rootScope.$apply();
        }
      })();
      runEval = true;
      //at the end of each eval, push cookies
      //TODO: this should happen before the "delayed" watches fire, because if some cookies are not
      //      strings or browser refuses to store some cookies, we update the model in the push fn.
      $rootScope.$watch(push);
      return cookies;
      /**
       * Pushes all the cookies from the service to the browser and verifies if all cookies were
       * stored.
       */
      function push() {
        var name, value, browserCookies, updated;
        //delete any cookies deleted in $cookies
        for (name in lastCookies) {
          if (isUndefined(cookies[name])) {
            $browser.cookies(name, undefined);
          }
        }
        //update all cookies updated in $cookies
        for (name in cookies) {
          value = cookies[name];
          if (!angular.isString(value)) {
            value = '' + value;
            cookies[name] = value;
          }
          if (value !== lastCookies[name]) {
            $browser.cookies(name, value);
            updated = true;
          }
        }
        //verify what was actually stored
        if (updated) {
          updated = false;
          browserCookies = $browser.cookies();
          for (name in cookies) {
            if (cookies[name] !== browserCookies[name]) {
              //delete or reset all cookies that the browser dropped from $cookies
              if (isUndefined(browserCookies[name])) {
                delete cookies[name];
              } else {
                cookies[name] = browserCookies[name];
              }
              updated = true;
            }
          }
        }
      }
    }
  ]).factory('$cookieStore', [
    '$cookies',
    function ($cookies) {
      return {
        get: function (key) {
          var value = $cookies[key];
          return value ? angular.fromJson(value) : value;
        },
        put: function (key, value) {
          $cookies[key] = angular.toJson(value);
        },
        remove: function (key) {
          delete $cookies[key];
        }
      };
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  var $sanitizeMinErr = angular.$$minErr('$sanitize');
  /**
 * @ngdoc module
 * @name ngSanitize
 * @description
 *
 * # ngSanitize
 *
 * The `ngSanitize` module provides functionality to sanitize HTML.
 *
 *
 * <div doc-module-components="ngSanitize"></div>
 *
 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
 */
  /*
 * HTML Parser By Misko Hevery (misko@hevery.com)
 * based on:  HTML Parser By John Resig (ejohn.org)
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 */
  /**
 * @ngdoc service
 * @name $sanitize
 * @function
 *
 * @description
 *   The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are
 *   then serialized back to properly escaped html string. This means that no unsafe input can make
 *   it into the returned string, however, since our parser is more strict than a typical browser
 *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
 *   browser, won't make it through the sanitizer.
 *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
 *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
 *
 * @param {string} html Html input.
 * @returns {string} Sanitized html.
 *
 * @example
   <example module="ngSanitize" deps="angular-sanitize.js">
   <file name="index.html">
     <script>
       function Ctrl($scope, $sce) {
         $scope.snippet =
           '<p style="color:blue">an html\n' +
           '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
           'snippet</p>';
         $scope.deliberatelyTrustDangerousSnippet = function() {
           return $sce.trustAsHtml($scope.snippet);
         };
       }
     </script>
     <div ng-controller="Ctrl">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getInnerHtml()).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */
  function $SanitizeProvider() {
    this.$get = [
      '$$sanitizeUri',
      function ($$sanitizeUri) {
        return function (html) {
          var buf = [];
          htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {
            return !/^unsafe/.test($$sanitizeUri(uri, isImage));
          }));
          return buf.join('');
        };
      }
    ];
  }
  function sanitizeText(chars) {
    var buf = [];
    var writer = htmlSanitizeWriter(buf, angular.noop);
    writer.chars(chars);
    return buf.join('');
  }
  // Regular Expressions for parsing tags and attributes
  var START_TAG_REGEXP = /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/, END_TAG_REGEXP = /^<\s*\/\s*([\w:-]+)[^>]*>/, ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, BEGIN_TAG_REGEXP = /^</, BEGING_END_TAGE_REGEXP = /^<\s*\//, COMMENT_REGEXP = /<!--(.*?)-->/g, DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i, CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g,
    // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;
  // Good source of info about elements and attributes
  // http://dev.w3.org/html5/spec/Overview.html#semantics
  // http://simon.html5.org/html-elements
  // Safe Void Elements - HTML5
  // http://dev.w3.org/html5/spec/Overview.html#void-elements
  var voidElements = makeMap('area,br,col,hr,img,wbr');
  // Elements that you can, intentionally, leave open (and which close themselves)
  // http://dev.w3.org/html5/spec/Overview.html#optional-tags
  var optionalEndTagBlockElements = makeMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'), optionalEndTagInlineElements = makeMap('rp,rt'), optionalEndTagElements = angular.extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);
  // Safe Block Elements - HTML5
  var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap('address,article,' + 'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul'));
  // Inline Elements - HTML5
  var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap('a,abbr,acronym,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' + 'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));
  // Special Elements (can contain anything)
  var specialElements = makeMap('script,style');
  var validElements = angular.extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);
  //Attributes that have href and hence need to be sanitized
  var uriAttrs = makeMap('background,cite,href,longdesc,src,usemap');
  var validAttrs = angular.extend({}, uriAttrs, makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' + 'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' + 'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' + 'scope,scrolling,shape,size,span,start,summary,target,title,type,' + 'valign,value,vspace,width'));
  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++)
      obj[items[i]] = true;
    return obj;
  }
  /**
 * @example
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * @param {string} html string
 * @param {object} handler
 */
  function htmlParser(html, handler) {
    var index, chars, match, stack = [], last = html;
    stack.last = function () {
      return stack[stack.length - 1];
    };
    while (html) {
      chars = true;
      // Make sure we're not in a script or style element
      if (!stack.last() || !specialElements[stack.last()]) {
        // Comment
        if (html.indexOf('<!--') === 0) {
          // comments containing -- are not allowed unless they terminate the comment
          index = html.indexOf('--', 4);
          if (index >= 0 && html.lastIndexOf('-->', index) === index) {
            if (handler.comment)
              handler.comment(html.substring(4, index));
            html = html.substring(index + 3);
            chars = false;
          }  // DOCTYPE
        } else if (DOCTYPE_REGEXP.test(html)) {
          match = html.match(DOCTYPE_REGEXP);
          if (match) {
            html = html.replace(match[0], '');
            chars = false;
          }  // end tag
        } else if (BEGING_END_TAGE_REGEXP.test(html)) {
          match = html.match(END_TAG_REGEXP);
          if (match) {
            html = html.substring(match[0].length);
            match[0].replace(END_TAG_REGEXP, parseEndTag);
            chars = false;
          }  // start tag
        } else if (BEGIN_TAG_REGEXP.test(html)) {
          match = html.match(START_TAG_REGEXP);
          if (match) {
            html = html.substring(match[0].length);
            match[0].replace(START_TAG_REGEXP, parseStartTag);
            chars = false;
          }
        }
        if (chars) {
          index = html.indexOf('<');
          var text = index < 0 ? html : html.substring(0, index);
          html = index < 0 ? '' : html.substring(index);
          if (handler.chars)
            handler.chars(decodeEntities(text));
        }
      } else {
        html = html.replace(new RegExp('(.*)<\\s*\\/\\s*' + stack.last() + '[^>]*>', 'i'), function (all, text) {
          text = text.replace(COMMENT_REGEXP, '$1').replace(CDATA_REGEXP, '$1');
          if (handler.chars)
            handler.chars(decodeEntities(text));
          return '';
        });
        parseEndTag('', stack.last());
      }
      if (html == last) {
        throw $sanitizeMinErr('badparse', 'The sanitizer was unable to parse the following block ' + 'of html: {0}', html);
      }
      last = html;
    }
    // Clean up any remaining tags
    parseEndTag();
    function parseStartTag(tag, tagName, rest, unary) {
      tagName = angular.lowercase(tagName);
      if (blockElements[tagName]) {
        while (stack.last() && inlineElements[stack.last()]) {
          parseEndTag('', stack.last());
        }
      }
      if (optionalEndTagElements[tagName] && stack.last() == tagName) {
        parseEndTag('', tagName);
      }
      unary = voidElements[tagName] || !!unary;
      if (!unary)
        stack.push(tagName);
      var attrs = {};
      rest.replace(ATTR_REGEXP, function (match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
        var value = doubleQuotedValue || singleQuotedValue || unquotedValue || '';
        attrs[name] = decodeEntities(value);
      });
      if (handler.start)
        handler.start(tagName, attrs, unary);
    }
    function parseEndTag(tag, tagName) {
      var pos = 0, i;
      tagName = angular.lowercase(tagName);
      if (tagName)
        // Find the closest opened tag of the same type
        for (pos = stack.length - 1; pos >= 0; pos--)
          if (stack[pos] == tagName)
            break;
      if (pos >= 0) {
        // Close all the open elements, up the stack
        for (i = stack.length - 1; i >= pos; i--)
          if (handler.end)
            handler.end(stack[i]);
        // Remove the open elements from the stack
        stack.length = pos;
      }
    }
  }
  var hiddenPre = document.createElement('pre');
  var spaceRe = /^(\s*)([\s\S]*?)(\s*)$/;
  /**
 * decodes all entities into regular string
 * @param value
 * @returns {string} A string with decoded entities.
 */
  function decodeEntities(value) {
    if (!value) {
      return '';
    }
    // Note: IE8 does not preserve spaces at the start/end of innerHTML
    // so we must capture them and reattach them afterward
    var parts = spaceRe.exec(value);
    var spaceBefore = parts[1];
    var spaceAfter = parts[3];
    var content = parts[2];
    if (content) {
      hiddenPre.innerHTML = content.replace(/</g, '&lt;');
      // innerText depends on styling as it doesn't display hidden elements.
      // Therefore, it's better to use textContent not to cause unnecessary
      // reflows. However, IE<9 don't support textContent so the innerText
      // fallback is necessary.
      content = 'textContent' in hiddenPre ? hiddenPre.textContent : hiddenPre.innerText;
    }
    return spaceBefore + content + spaceAfter;
  }
  /**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param value
 * @returns {string} escaped text
 */
  function encodeEntities(value) {
    return value.replace(/&/g, '&amp;').replace(NON_ALPHANUMERIC_REGEXP, function (value) {
      return '&#' + value.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  /**
 * create an HTML/XML writer which writes to buffer
 * @param {Array} buf use buf.jain('') to get out sanitized html string
 * @returns {object} in the form of {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * }
 */
  function htmlSanitizeWriter(buf, uriValidator) {
    var ignore = false;
    var out = angular.bind(buf, buf.push);
    return {
      start: function (tag, attrs, unary) {
        tag = angular.lowercase(tag);
        if (!ignore && specialElements[tag]) {
          ignore = tag;
        }
        if (!ignore && validElements[tag] === true) {
          out('<');
          out(tag);
          angular.forEach(attrs, function (value, key) {
            var lkey = angular.lowercase(key);
            var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';
            if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
              out(' ');
              out(key);
              out('="');
              out(encodeEntities(value));
              out('"');
            }
          });
          out(unary ? '/>' : '>');
        }
      },
      end: function (tag) {
        tag = angular.lowercase(tag);
        if (!ignore && validElements[tag] === true) {
          out('</');
          out(tag);
          out('>');
        }
        if (tag == ignore) {
          ignore = false;
        }
      },
      chars: function (chars) {
        if (!ignore) {
          out(encodeEntities(chars));
        }
      }
    };
  }
  // define ngSanitize module and register $sanitize service
  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);
  /* global sanitizeText: false */
  /**
 * @ngdoc filter
 * @name linky
 * @function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
 * @returns {string} Html-linkified text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="ngSanitize" deps="angular-sanitize.js">
     <file name="index.html">
       <script>
         function Ctrl($scope) {
           $scope.snippet =
             'Pretty text with some links:\n'+
             'http://angularjs.org/,\n'+
             'mailto:us@somewhere.org,\n'+
             'another@somewhere.org,\n'+
             'and one more: ftp://127.0.0.1/.';
           $scope.snippetWithTarget = 'http://angularjs.org/';
         }
       </script>
       <div ng-controller="Ctrl">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Filter</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });
     </file>
   </example>
 */
  angular.module('ngSanitize').filter('linky', [
    '$sanitize',
    function ($sanitize) {
      var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/, MAILTO_REGEXP = /^mailto:/;
      return function (text, target) {
        if (!text)
          return text;
        var match;
        var raw = text;
        var html = [];
        var url;
        var i;
        while (match = raw.match(LINKY_URL_REGEXP)) {
          // We can not end in these as they are sometimes found at the end of the sentence
          url = match[0];
          // if we did not match ftp/http/mailto then assume mailto
          if (match[2] == match[3])
            url = 'mailto:' + url;
          i = match.index;
          addText(raw.substr(0, i));
          addLink(url, match[0].replace(MAILTO_REGEXP, ''));
          raw = raw.substring(i + match[0].length);
        }
        addText(raw);
        return $sanitize(html.join(''));
        function addText(text) {
          if (!text) {
            return;
          }
          html.push(sanitizeText(text));
        }
        function addLink(url, text) {
          html.push('<a ');
          if (angular.isDefined(target)) {
            html.push('target="');
            html.push(target);
            html.push('" ');
          }
          html.push('href="');
          html.push(url);
          html.push('">');
          addText(text);
          html.push('</a>');
        }
      };
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /* jshint maxlen: false */
  /**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 *
 * To see animations in action, all that is required is to define the appropriate CSS classes
 * or to register a JavaScript animation via the `myModule.animation()` function. The directives that support animation automatically are:
 * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
 * by using the `$animate` service.
 *
 * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * You can find out more information about animations upon visiting each directive page.
 *
 * Below is an example of how to apply animations to a directive that supports animation hooks:
 *
 * ```html
 * <style type="text/css">
 * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
 *
 * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
 * .slide.ng-enter.ng-enter-active { } /&#42; terminal animations for enter &#42;/
 * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
 * .slide.ng-leave.ng-leave-active { } /&#42; terminal animations for leave &#42;/
 * </style>
 *
 * <!--
 * the animate service will automatically add .ng-enter and .ng-leave to the element
 * to trigger the CSS transition/animations
 * -->
 * <ANY class="slide" ng-include="..."></ANY>
 * ```
 *
 * Keep in mind that, by default, if an animation is running, any child elements cannot be animated
 * until the parent element's animation has completed. This blocking feature can be overridden by
 * placing the `ng-animate-children` attribute on a parent container tag.
 *
 * ```html
 * <div class="slide-animation" ng-if="on" ng-animate-children>
 *   <div class="fade-animation" ng-if="on">
 *     <div class="explode-animation" ng-if="on">
 *        ...
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * When the `on` expression value changes and an animation is triggered then each of the elements within
 * will all animate without the block being applied to child elements.
 *
 * ## Are animations run when the application starts?
 * No they are not. When an application is bootstrapped Angular will disable animations from running to avoid
 * a frenzy of animations from being triggered as soon as the browser has rendered the screen. For this to work,
 * Angular will wait for two digest cycles until enabling animations. From there on, any animation-triggering
 * layout changes in the application will trigger animations as normal.
 *
 * In addition, upon bootstrap, if the routing system or any directives or load remote data (via $http) then Angular
 * will automatically extend the wait time to enable animations once **all** of the outbound HTTP requests
 * are complete.
 *
 * ## CSS-defined Animations
 * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
 * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
 * and can be used to play along with this naming structure.
 *
 * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
 *
 * ```html
 * <style type="text/css">
 * /&#42;
 *  The animate class is apart of the element and the ng-enter class
 *  is attached to the element once the enter animation event is triggered
 * &#42;/
 * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
 *
 * /&#42;
 *  Keep in mind that you want to combine both CSS
 *  classes together to avoid any CSS-specificity
 *  conflicts
 * &#42;/
 * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
 *
 * ```html
 * <style type="text/css">
 * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
 * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
 *
 * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
 * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
 * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
 * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
 * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
 * has no CSS transition/animation classes applied to it.
 *
 * ### Structural transition animations
 *
 * Structural transitions (such as enter, leave and move) will always apply a `0s none` transition
 * value to force the browser into rendering the styles defined in the setup (`.ng-enter`, `.ng-leave`
 * or `.ng-move`) class. This means that any active transition animations operating on the element
 * will be cut off to make way for the enter, leave or move animation.
 *
 * ### Class-based transition animations
 *
 * Class-based transitions refer to transition animations that are triggered when a CSS class is
 * added to or removed from the element (via `$animate.addClass`, `$animate.removeClass`,
 * `$animate.setClass`, or by directives such as `ngClass`, `ngModel` and `form`).
 * They are different when compared to structural animations since they **do not cancel existing
 * animations** nor do they **block successive transitions** from rendering on the same element.
 * This distinction allows for **multiple class-based transitions** to be performed on the same element.
 *
 * In addition to ngAnimate supporting the default (natural) functionality of class-based transition
 * animations, ngAnimate also decorates the element with starting and ending CSS classes to aid the
 * developer in further styling the element throughout the transition animation. Earlier versions
 * of ngAnimate may have caused natural CSS transitions to break and not render properly due to
 * $animate temporarily blocking transitions using `0s none` in order to allow the setup CSS class
 * (the `-add` or `-remove` class) to be applied without triggering an animation. However, as of
 * **version 1.3**, this workaround has been removed with ngAnimate and all non-ngAnimate CSS
 * class transitions are compatible with ngAnimate.
 *
 * There is, however, one special case when dealing with class-based transitions in ngAnimate.
 * When rendering class-based transitions that make use of the setup and active CSS classes
 * (e.g. `.fade-add` and `.fade-add-active` for when `.fade` is added) be sure to define
 * the transition value **on the active CSS class** and not the setup class.
 *
 * ```css
 * .fade-add {
 *   /&#42; remember to place a 0s transition here
 *      to ensure that the styles are applied instantly
 *      even if the element already has a transition style &#42;/
 *   transition:0s linear all;
 *
 *   /&#42; starting CSS styles &#42;/
 *   opacity:1;
 * }
 * .fade-add.fade-add-active {
 *   /&#42; this will be the length of the animation &#42;/
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * The setup CSS class (in this case `.fade-add`) also has a transition style property, however, it
 * has a duration of zero. This may not be required, however, incase the browser is unable to render
 * the styling present in this CSS class instantly then it could be that the browser is attempting
 * to perform an unnecessary transition.
 *
 * This workaround, however, does not apply to  standard class-based transitions that are rendered
 * when a CSS class containing a transition is applied to an element:
 *
 * ```css
 * /&#42; this works as expected &#42;/
 * .fade {
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * Please keep this in mind when coding the CSS markup that will be used within class-based transitions.
 * Also, try not to mix the two class-based animation flavors together since the CSS code may become
 * overly complex.
 *
 *
 * ### Preventing Collisions With Third Party Libraries
 *
 * Some third-party frameworks place animation duration defaults across many element or className
 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
 * is expecting actual animations on these elements and has to wait for their completion.
 *
 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
 *
 * ```css
 * /&#42; prefixed with animate- &#42;/
 * .animate-fade-add.animate-fade-add-active {
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * You then configure `$animate` to enforce this prefix:
 *
 * ```js
 * $animateProvider.classNameFilter(/animate-/);
 * ```
 * </div>
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if more than 10ms has passed after the last animation has been fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ## JavaScript-defined Animations
 * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
 * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
 *
 * ```js
 * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
 * var ngModule = angular.module('YourApp', ['ngAnimate']);
 * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
 * ```
 *
 * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
 * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
 * the element's CSS class attribute value and then run the matching animation event function (if found).
 * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
 * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
 *
 * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
 * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
 * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
 * or transition code that is defined via a stylesheet).
 *
 *
 * ### Applying Directive-specific Styles to an Animation
 * In some cases a directive or service may want to provide `$animate` with extra details that the animation will
 * include into its animation. Let's say for example we wanted to render an animation that animates an element
 * towards the mouse coordinates as to where the user clicked last. By collecting the X/Y coordinates of the click
 * (via the event parameter) we can set the `top` and `left` styles into an object and pass that into our function
 * call to `$animate.addClass`.
 *
 * ```js
 * canvas.on('click', function(e) {
 *   $animate.addClass(element, 'on', {
 *     to: {
 *       left : e.client.x + 'px',
 *       top : e.client.y + 'px'
 *     }
 *   }):
 * });
 * ```
 *
 * Now when the animation runs, and a transition or keyframe animation is picked up, then the animation itself will
 * also include and transition the styling of the `left` and `top` properties into its running animation. If we want
 * to provide some starting animation values then we can do so by placing the starting animations styles into an object
 * called `from` in the same object as the `to` animations.
 *
 * ```js
 * canvas.on('click', function(e) {
 *   $animate.addClass(element, 'on', {
 *     from: {
 *        position: 'absolute',
 *        left: '0px',
 *        top: '0px'
 *     },
 *     to: {
 *       left : e.client.x + 'px',
 *       top : e.client.y + 'px'
 *     }
 *   }):
 * });
 * ```
 *
 * Once the animation is complete or cancelled then the union of both the before and after styles are applied to the
 * element. If `ngAnimate` is not present then the styles will be applied immediately.
 *
 */
  angular.module('ngAnimate', ['ng']).directive('ngAnimateChildren', function () {
    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
    return function (scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (angular.isString(val) && val.length === 0) {
        //empty attribute
        element.data(NG_ANIMATE_CHILDREN, true);
      } else {
        scope.$watch(val, function (value) {
          element.data(NG_ANIMATE_CHILDREN, !!value);
        });
      }
    };
  }).factory('$$animateReflow', [
    '$$rAF',
    '$document',
    function ($$rAF, $document) {
      var bod = $document[0].body;
      return function (fn) {
        //the returned function acts as the cancellation function
        return $$rAF(function () {
          //the line below will force the browser to perform a repaint
          //so that all the animated elements within the animation frame
          //will be properly updated and drawn on screen. This is
          //required to perform multi-class CSS based animations with
          //Firefox. DO NOT REMOVE THIS LINE.
          var a = bod.offsetWidth + 1;
          fn();
        });
      };
    }
  ]).config([
    '$provide',
    '$animateProvider',
    function ($provide, $animateProvider) {
      var noop = angular.noop;
      var forEach = angular.forEach;
      var selectors = $animateProvider.$$selectors;
      var isArray = angular.isArray;
      var isString = angular.isString;
      var isObject = angular.isObject;
      var ELEMENT_NODE = 1;
      var NG_ANIMATE_STATE = '$$ngAnimateState';
      var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
      var NG_ANIMATE_CLASS_NAME = 'ng-animate';
      var rootAnimateState = { running: true };
      function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
          var elm = element[i];
          if (elm.nodeType == ELEMENT_NODE) {
            return elm;
          }
        }
      }
      function prepareElement(element) {
        return element && angular.element(element);
      }
      function stripCommentsFromElement(element) {
        return angular.element(extractElementNode(element));
      }
      function isMatchingElement(elm1, elm2) {
        return extractElementNode(elm1) == extractElementNode(elm2);
      }
      var $$jqLite;
      $provide.decorator('$animate', [
        '$delegate',
        '$$q',
        '$injector',
        '$sniffer',
        '$rootElement',
        '$$asyncCallback',
        '$rootScope',
        '$document',
        '$templateRequest',
        '$$jqLite',
        function ($delegate, $$q, $injector, $sniffer, $rootElement, $$asyncCallback, $rootScope, $document, $templateRequest, $$$jqLite) {
          $$jqLite = $$$jqLite;
          $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);
          // Wait until all directive and route-related templates are downloaded and
          // compiled. The $templateRequest.totalPendingRequests variable keeps track of
          // all of the remote templates being currently downloaded. If there are no
          // templates currently downloading then the watcher will still fire anyway.
          var deregisterWatch = $rootScope.$watch(function () {
              return $templateRequest.totalPendingRequests;
            }, function (val, oldVal) {
              if (val !== 0)
                return;
              deregisterWatch();
              // Now that all templates have been downloaded, $animate will wait until
              // the post digest queue is empty before enabling animations. By having two
              // calls to $postDigest calls we can ensure that the flag is enabled at the
              // very end of the post digest queue. Since all of the animations in $animate
              // use $postDigest, it's important that the code below executes at the end.
              // This basically means that the page is fully downloaded and compiled before
              // any animations are triggered.
              $rootScope.$$postDigest(function () {
                $rootScope.$$postDigest(function () {
                  rootAnimateState.running = false;
                });
              });
            });
          var globalAnimationCounter = 0;
          var classNameFilter = $animateProvider.classNameFilter();
          var isAnimatableClassName = !classNameFilter ? function () {
              return true;
            } : function (className) {
              return classNameFilter.test(className);
            };
          function classBasedAnimationsBlocked(element, setter) {
            var data = element.data(NG_ANIMATE_STATE) || {};
            if (setter) {
              data.running = true;
              data.structural = true;
              element.data(NG_ANIMATE_STATE, data);
            }
            return data.disabled || data.running && data.structural;
          }
          function runAnimationPostDigest(fn) {
            var cancelFn, defer = $$q.defer();
            defer.promise.$$cancelFn = function () {
              cancelFn && cancelFn();
            };
            $rootScope.$$postDigest(function () {
              cancelFn = fn(function () {
                defer.resolve();
              });
            });
            return defer.promise;
          }
          function parseAnimateOptions(options) {
            // some plugin code may still be passing in the callback
            // function as the last param for the $animate methods so
            // it's best to only allow string or array values for now
            if (isObject(options)) {
              if (options.tempClasses && isString(options.tempClasses)) {
                options.tempClasses = options.tempClasses.split(/\s+/);
              }
              return options;
            }
          }
          function resolveElementClasses(element, cache, runningAnimations) {
            runningAnimations = runningAnimations || {};
            var lookup = {};
            forEach(runningAnimations, function (data, selector) {
              forEach(selector.split(' '), function (s) {
                lookup[s] = data;
              });
            });
            var hasClasses = Object.create(null);
            forEach((element.attr('class') || '').split(/\s+/), function (className) {
              hasClasses[className] = true;
            });
            var toAdd = [], toRemove = [];
            forEach(cache && cache.classes || [], function (status, className) {
              var hasClass = hasClasses[className];
              var matchingAnimation = lookup[className] || {};
              // When addClass and removeClass is called then $animate will check to
              // see if addClass and removeClass cancel each other out. When there are
              // more calls to removeClass than addClass then the count falls below 0
              // and then the removeClass animation will be allowed. Otherwise if the
              // count is above 0 then that means an addClass animation will commence.
              // Once an animation is allowed then the code will also check to see if
              // there exists any on-going animation that is already adding or remvoing
              // the matching CSS class.
              if (status === false) {
                //does it have the class or will it have the class
                if (hasClass || matchingAnimation.event == 'addClass') {
                  toRemove.push(className);
                }
              } else if (status === true) {
                //is the class missing or will it be removed?
                if (!hasClass || matchingAnimation.event == 'removeClass') {
                  toAdd.push(className);
                }
              }
            });
            return toAdd.length + toRemove.length > 0 && [
              toAdd.join(' '),
              toRemove.join(' ')
            ];
          }
          function lookup(name) {
            if (name) {
              var matches = [], flagMap = {}, classes = name.substr(1).split('.');
              //the empty string value is the default animation
              //operation which performs CSS transition and keyframe
              //animations sniffing. This is always included for each
              //element animation procedure if the browser supports
              //transitions and/or keyframe animations. The default
              //animation is added to the top of the list to prevent
              //any previous animations from affecting the element styling
              //prior to the element being animated.
              if ($sniffer.transitions || $sniffer.animations) {
                matches.push($injector.get(selectors['']));
              }
              for (var i = 0; i < classes.length; i++) {
                var klass = classes[i], selectorFactoryName = selectors[klass];
                if (selectorFactoryName && !flagMap[klass]) {
                  matches.push($injector.get(selectorFactoryName));
                  flagMap[klass] = true;
                }
              }
              return matches;
            }
          }
          function animationRunner(element, animationEvent, className, options) {
            //transcluded directives may sometimes fire an animation using only comment nodes
            //best to catch this early on to prevent any animation operations from occurring
            var node = element[0];
            if (!node) {
              return;
            }
            if (options) {
              options.to = options.to || {};
              options.from = options.from || {};
            }
            var classNameAdd;
            var classNameRemove;
            if (isArray(className)) {
              classNameAdd = className[0];
              classNameRemove = className[1];
              if (!classNameAdd) {
                className = classNameRemove;
                animationEvent = 'removeClass';
              } else if (!classNameRemove) {
                className = classNameAdd;
                animationEvent = 'addClass';
              } else {
                className = classNameAdd + ' ' + classNameRemove;
              }
            }
            var isSetClassOperation = animationEvent == 'setClass';
            var isClassBased = isSetClassOperation || animationEvent == 'addClass' || animationEvent == 'removeClass' || animationEvent == 'animate';
            var currentClassName = element.attr('class');
            var classes = currentClassName + ' ' + className;
            if (!isAnimatableClassName(classes)) {
              return;
            }
            var beforeComplete = noop, beforeCancel = [], before = [], afterComplete = noop, afterCancel = [], after = [];
            var animationLookup = (' ' + classes).replace(/\s+/g, '.');
            forEach(lookup(animationLookup), function (animationFactory) {
              var created = registerAnimation(animationFactory, animationEvent);
              if (!created && isSetClassOperation) {
                registerAnimation(animationFactory, 'addClass');
                registerAnimation(animationFactory, 'removeClass');
              }
            });
            function registerAnimation(animationFactory, event) {
              var afterFn = animationFactory[event];
              var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
              if (afterFn || beforeFn) {
                if (event == 'leave') {
                  beforeFn = afterFn;
                  //when set as null then animation knows to skip this phase
                  afterFn = null;
                }
                after.push({
                  event: event,
                  fn: afterFn
                });
                before.push({
                  event: event,
                  fn: beforeFn
                });
                return true;
              }
            }
            function run(fns, cancellations, allCompleteFn) {
              var animations = [];
              forEach(fns, function (animation) {
                animation.fn && animations.push(animation);
              });
              var count = 0;
              function afterAnimationComplete(index) {
                if (cancellations) {
                  (cancellations[index] || noop)();
                  if (++count < animations.length)
                    return;
                  cancellations = null;
                }
                allCompleteFn();
              }
              //The code below adds directly to the array in order to work with
              //both sync and async animations. Sync animations are when the done()
              //operation is called right away. DO NOT REFACTOR!
              forEach(animations, function (animation, index) {
                var progress = function () {
                  afterAnimationComplete(index);
                };
                switch (animation.event) {
                case 'setClass':
                  cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress, options));
                  break;
                case 'animate':
                  cancellations.push(animation.fn(element, className, options.from, options.to, progress));
                  break;
                case 'addClass':
                  cancellations.push(animation.fn(element, classNameAdd || className, progress, options));
                  break;
                case 'removeClass':
                  cancellations.push(animation.fn(element, classNameRemove || className, progress, options));
                  break;
                default:
                  cancellations.push(animation.fn(element, progress, options));
                  break;
                }
              });
              if (cancellations && cancellations.length === 0) {
                allCompleteFn();
              }
            }
            return {
              node: node,
              event: animationEvent,
              className: className,
              isClassBased: isClassBased,
              isSetClassOperation: isSetClassOperation,
              applyStyles: function () {
                if (options) {
                  element.css(angular.extend(options.from || {}, options.to || {}));
                }
              },
              before: function (allCompleteFn) {
                beforeComplete = allCompleteFn;
                run(before, beforeCancel, function () {
                  beforeComplete = noop;
                  allCompleteFn();
                });
              },
              after: function (allCompleteFn) {
                afterComplete = allCompleteFn;
                run(after, afterCancel, function () {
                  afterComplete = noop;
                  allCompleteFn();
                });
              },
              cancel: function () {
                if (beforeCancel) {
                  forEach(beforeCancel, function (cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  beforeComplete(true);
                }
                if (afterCancel) {
                  forEach(afterCancel, function (cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  afterComplete(true);
                }
              }
            };
          }
          /**
       * @ngdoc service
       * @name $animate
       * @kind object
       *
       * @description
       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
       * When any of these operations are run, the $animate service
       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
       *
       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
       * will work out of the box without any extra configuration.
       *
       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
       *
       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
       * ## Callback Promises
       * With AngularJS 1.3, each of the animation methods, on the `$animate` service, return a promise when called. The
       * promise itself is then resolved once the animation has completed itself, has been cancelled or has been
       * skipped due to animations being disabled. (Note that even if the animation is cancelled it will still
       * call the resolve function of the animation.)
       *
       * ```js
       * $animate.enter(element, container).then(function() {
       *   //...this is called once the animation is complete...
       * });
       * ```
       *
       * Also note that, due to the nature of the callback promise, if any Angular-specific code (like changing the scope,
       * location of the page, etc...) is executed within the callback promise then be sure to wrap the code using
       * `$scope.$apply(...)`;
       *
       * ```js
       * $animate.leave(element).then(function() {
       *   $scope.$apply(function() {
       *     $location.path('/new-page');
       *   });
       * });
       * ```
       *
       * An animation can also be cancelled by calling the `$animate.cancel(promise)` method with the provided
       * promise that was returned when the animation was started.
       *
       * ```js
       * var promise = $animate.addClass(element, 'super-long-animation');
       * promise.then(function() {
       *   //this will still be called even if cancelled
       * });
       *
       * element.on('click', function() {
       *   //tooo lazy to wait for the animation to end
       *   $animate.cancel(promise);
       * });
       * ```
       *
       * (Keep in mind that the promise cancellation is unique to `$animate` since promises in
       * general cannot be cancelled.)
       *
       */
          return {
            animate: function (element, from, to, className, options) {
              className = className || 'ng-inline-animate';
              options = parseAnimateOptions(options) || {};
              options.from = to ? from : null;
              options.to = to ? to : from;
              return runAnimationPostDigest(function (done) {
                return performAnimation('animate', className, stripCommentsFromElement(element), null, null, noop, options, done);
              });
            },
            enter: function (element, parentElement, afterElement, options) {
              options = parseAnimateOptions(options);
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);
              classBasedAnimationsBlocked(element, true);
              $delegate.enter(element, parentElement, afterElement);
              return runAnimationPostDigest(function (done) {
                return performAnimation('enter', 'ng-enter', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);
              });
            },
            leave: function (element, options) {
              options = parseAnimateOptions(options);
              element = angular.element(element);
              cancelChildAnimations(element);
              classBasedAnimationsBlocked(element, true);
              return runAnimationPostDigest(function (done) {
                return performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function () {
                  $delegate.leave(element);
                }, options, done);
              });
            },
            move: function (element, parentElement, afterElement, options) {
              options = parseAnimateOptions(options);
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);
              cancelChildAnimations(element);
              classBasedAnimationsBlocked(element, true);
              $delegate.move(element, parentElement, afterElement);
              return runAnimationPostDigest(function (done) {
                return performAnimation('move', 'ng-move', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);
              });
            },
            addClass: function (element, className, options) {
              return this.setClass(element, className, [], options);
            },
            removeClass: function (element, className, options) {
              return this.setClass(element, [], className, options);
            },
            setClass: function (element, add, remove, options) {
              options = parseAnimateOptions(options);
              var STORAGE_KEY = '$$animateClasses';
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              if (classBasedAnimationsBlocked(element)) {
                return $delegate.$$setClassImmediately(element, add, remove, options);
              }
              // we're using a combined array for both the add and remove
              // operations since the ORDER OF addClass and removeClass matters
              var classes, cache = element.data(STORAGE_KEY);
              var hasCache = !!cache;
              if (!cache) {
                cache = {};
                cache.classes = {};
              }
              classes = cache.classes;
              add = isArray(add) ? add : add.split(' ');
              forEach(add, function (c) {
                if (c && c.length) {
                  classes[c] = true;
                }
              });
              remove = isArray(remove) ? remove : remove.split(' ');
              forEach(remove, function (c) {
                if (c && c.length) {
                  classes[c] = false;
                }
              });
              if (hasCache) {
                if (options && cache.options) {
                  cache.options = angular.extend(cache.options || {}, options);
                }
                //the digest cycle will combine all the animations into one function
                return cache.promise;
              } else {
                element.data(STORAGE_KEY, cache = {
                  classes: classes,
                  options: options
                });
              }
              return cache.promise = runAnimationPostDigest(function (done) {
                var parentElement = element.parent();
                var elementNode = extractElementNode(element);
                var parentNode = elementNode.parentNode;
                // TODO(matsko): move this code into the animationsDisabled() function once #8092 is fixed
                if (!parentNode || parentNode['$$NG_REMOVED'] || elementNode['$$NG_REMOVED']) {
                  done();
                  return;
                }
                var cache = element.data(STORAGE_KEY);
                element.removeData(STORAGE_KEY);
                var state = element.data(NG_ANIMATE_STATE) || {};
                var classes = resolveElementClasses(element, cache, state.active);
                return !classes ? done() : performAnimation('setClass', classes, element, parentElement, null, function () {
                  if (classes[0])
                    $delegate.$$addClassImmediately(element, classes[0]);
                  if (classes[1])
                    $delegate.$$removeClassImmediately(element, classes[1]);
                }, cache.options, done);
              });
            },
            cancel: function (promise) {
              promise.$$cancelFn();
            },
            enabled: function (value, element) {
              switch (arguments.length) {
              case 2:
                if (value) {
                  cleanup(element);
                } else {
                  var data = element.data(NG_ANIMATE_STATE) || {};
                  data.disabled = true;
                  element.data(NG_ANIMATE_STATE, data);
                }
                break;
              case 1:
                rootAnimateState.disabled = !value;
                break;
              default:
                value = !rootAnimateState.disabled;
                break;
              }
              return !!value;
            }
          };
          /*
        all animations call this shared animation triggering function internally.
        The animationEvent variable refers to the JavaScript animation event that will be triggered
        and the className value is the name of the animation that will be applied within the
        CSS code. Element, `parentElement` and `afterElement` are provided DOM elements for the animation
        and the onComplete callback will be fired once the animation is fully complete.
      */
          function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, options, doneCallback) {
            var noopCancel = noop;
            var runner = animationRunner(element, animationEvent, className, options);
            if (!runner) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return noopCancel;
            }
            animationEvent = runner.event;
            className = runner.className;
            var elementEvents = angular.element._data(runner.node);
            elementEvents = elementEvents && elementEvents.events;
            if (!parentElement) {
              parentElement = afterElement ? afterElement.parent() : element.parent();
            }
            //skip the animation if animations are disabled, a parent is already being animated,
            //the element is not currently attached to the document body or then completely close
            //the animation if any matching animations are not found at all.
            //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
            if (animationsDisabled(element, parentElement)) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return noopCancel;
            }
            var ngAnimateState = element.data(NG_ANIMATE_STATE) || {};
            var runningAnimations = ngAnimateState.active || {};
            var totalActiveAnimations = ngAnimateState.totalActive || 0;
            var lastAnimation = ngAnimateState.last;
            var skipAnimation = false;
            if (totalActiveAnimations > 0) {
              var animationsToCancel = [];
              if (!runner.isClassBased) {
                if (animationEvent == 'leave' && runningAnimations['ng-leave']) {
                  skipAnimation = true;
                } else {
                  //cancel all animations when a structural animation takes place
                  for (var klass in runningAnimations) {
                    animationsToCancel.push(runningAnimations[klass]);
                  }
                  ngAnimateState = {};
                  cleanup(element, true);
                }
              } else if (lastAnimation.event == 'setClass') {
                animationsToCancel.push(lastAnimation);
                cleanup(element, className);
              } else if (runningAnimations[className]) {
                var current = runningAnimations[className];
                if (current.event == animationEvent) {
                  skipAnimation = true;
                } else {
                  animationsToCancel.push(current);
                  cleanup(element, className);
                }
              }
              if (animationsToCancel.length > 0) {
                forEach(animationsToCancel, function (operation) {
                  operation.cancel();
                });
              }
            }
            if (runner.isClassBased && !runner.isSetClassOperation && animationEvent != 'animate' && !skipAnimation) {
              skipAnimation = animationEvent == 'addClass' == element.hasClass(className);  //opposite of XOR
            }
            if (skipAnimation) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              fireDoneCallbackAsync();
              return noopCancel;
            }
            runningAnimations = ngAnimateState.active || {};
            totalActiveAnimations = ngAnimateState.totalActive || 0;
            if (animationEvent == 'leave') {
              //there's no need to ever remove the listener since the element
              //will be removed (destroyed) after the leave animation ends or
              //is cancelled midway
              element.one('$destroy', function (e) {
                var element = angular.element(this);
                var state = element.data(NG_ANIMATE_STATE);
                if (state) {
                  var activeLeaveAnimation = state.active['ng-leave'];
                  if (activeLeaveAnimation) {
                    activeLeaveAnimation.cancel();
                    cleanup(element, 'ng-leave');
                  }
                }
              });
            }
            //the ng-animate class does nothing, but it's here to allow for
            //parent animations to find and cancel child animations when needed
            $$jqLite.addClass(element, NG_ANIMATE_CLASS_NAME);
            if (options && options.tempClasses) {
              forEach(options.tempClasses, function (className) {
                $$jqLite.addClass(element, className);
              });
            }
            var localAnimationCount = globalAnimationCounter++;
            totalActiveAnimations++;
            runningAnimations[className] = runner;
            element.data(NG_ANIMATE_STATE, {
              last: runner,
              active: runningAnimations,
              index: localAnimationCount,
              totalActive: totalActiveAnimations
            });
            //first we run the before animations and when all of those are complete
            //then we perform the DOM operation and run the next set of animations
            fireBeforeCallbackAsync();
            runner.before(function (cancelled) {
              var data = element.data(NG_ANIMATE_STATE);
              cancelled = cancelled || !data || !data.active[className] || runner.isClassBased && data.active[className].event != animationEvent;
              fireDOMOperation();
              if (cancelled === true) {
                closeAnimation();
              } else {
                fireAfterCallbackAsync();
                runner.after(closeAnimation);
              }
            });
            return runner.cancel;
            function fireDOMCallback(animationPhase) {
              var eventName = '$animate:' + animationPhase;
              if (elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
                $$asyncCallback(function () {
                  element.triggerHandler(eventName, {
                    event: animationEvent,
                    className: className
                  });
                });
              }
            }
            function fireBeforeCallbackAsync() {
              fireDOMCallback('before');
            }
            function fireAfterCallbackAsync() {
              fireDOMCallback('after');
            }
            function fireDoneCallbackAsync() {
              fireDOMCallback('close');
              doneCallback();
            }
            //it is less complicated to use a flag than managing and canceling
            //timeouts containing multiple callbacks.
            function fireDOMOperation() {
              if (!fireDOMOperation.hasBeenRun) {
                fireDOMOperation.hasBeenRun = true;
                domOperation();
              }
            }
            function closeAnimation() {
              if (!closeAnimation.hasBeenRun) {
                if (runner) {
                  //the runner doesn't exist if it fails to instantiate
                  runner.applyStyles();
                }
                closeAnimation.hasBeenRun = true;
                if (options && options.tempClasses) {
                  forEach(options.tempClasses, function (className) {
                    $$jqLite.removeClass(element, className);
                  });
                }
                var data = element.data(NG_ANIMATE_STATE);
                if (data) {
                  /* only structural animations wait for reflow before removing an
                 animation, but class-based animations don't. An example of this
                 failing would be when a parent HTML tag has a ng-class attribute
                 causing ALL directives below to skip animations during the digest */
                  if (runner && runner.isClassBased) {
                    cleanup(element, className);
                  } else {
                    $$asyncCallback(function () {
                      var data = element.data(NG_ANIMATE_STATE) || {};
                      if (localAnimationCount == data.index) {
                        cleanup(element, className, animationEvent);
                      }
                    });
                    element.data(NG_ANIMATE_STATE, data);
                  }
                }
                fireDoneCallbackAsync();
              }
            }
          }
          function cancelChildAnimations(element) {
            var node = extractElementNode(element);
            if (node) {
              var nodes = angular.isFunction(node.getElementsByClassName) ? node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) : node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
              forEach(nodes, function (element) {
                element = angular.element(element);
                var data = element.data(NG_ANIMATE_STATE);
                if (data && data.active) {
                  forEach(data.active, function (runner) {
                    runner.cancel();
                  });
                }
              });
            }
          }
          function cleanup(element, className) {
            if (isMatchingElement(element, $rootElement)) {
              if (!rootAnimateState.disabled) {
                rootAnimateState.running = false;
                rootAnimateState.structural = false;
              }
            } else if (className) {
              var data = element.data(NG_ANIMATE_STATE) || {};
              var removeAnimations = className === true;
              if (!removeAnimations && data.active && data.active[className]) {
                data.totalActive--;
                delete data.active[className];
              }
              if (removeAnimations || !data.totalActive) {
                $$jqLite.removeClass(element, NG_ANIMATE_CLASS_NAME);
                element.removeData(NG_ANIMATE_STATE);
              }
            }
          }
          function animationsDisabled(element, parentElement) {
            if (rootAnimateState.disabled) {
              return true;
            }
            if (isMatchingElement(element, $rootElement)) {
              return rootAnimateState.running;
            }
            var allowChildAnimations, parentRunningAnimation, hasParent;
            do {
              //the element did not reach the root element which means that it
              //is not apart of the DOM. Therefore there is no reason to do
              //any animations on it
              if (parentElement.length === 0)
                break;
              var isRoot = isMatchingElement(parentElement, $rootElement);
              var state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE) || {};
              if (state.disabled) {
                return true;
              }
              //no matter what, for an animation to work it must reach the root element
              //this implies that the element is attached to the DOM when the animation is run
              if (isRoot) {
                hasParent = true;
              }
              //once a flag is found that is strictly false then everything before
              //it will be discarded and all child animations will be restricted
              if (allowChildAnimations !== false) {
                var animateChildrenFlag = parentElement.data(NG_ANIMATE_CHILDREN);
                if (angular.isDefined(animateChildrenFlag)) {
                  allowChildAnimations = animateChildrenFlag;
                }
              }
              parentRunningAnimation = parentRunningAnimation || state.running || state.last && !state.last.isClassBased;
            } while (parentElement = parentElement.parent());
            return !hasParent || !allowChildAnimations && parentRunningAnimation;
          }
        }
      ]);
      $animateProvider.register('', [
        '$window',
        '$sniffer',
        '$timeout',
        '$$animateReflow',
        function ($window, $sniffer, $timeout, $$animateReflow) {
          // Detect proper transitionend/animationend event names.
          var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;
          // If unprefixed events are not supported but webkit-prefixed are, use the latter.
          // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
          // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
          // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
          // Register both events in case `window.onanimationend` is not supported because of that,
          // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
          // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
          // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
          if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
            CSS_PREFIX = '-webkit-';
            TRANSITION_PROP = 'WebkitTransition';
            TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
          } else {
            TRANSITION_PROP = 'transition';
            TRANSITIONEND_EVENT = 'transitionend';
          }
          if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
            CSS_PREFIX = '-webkit-';
            ANIMATION_PROP = 'WebkitAnimation';
            ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
          } else {
            ANIMATION_PROP = 'animation';
            ANIMATIONEND_EVENT = 'animationend';
          }
          var DURATION_KEY = 'Duration';
          var PROPERTY_KEY = 'Property';
          var DELAY_KEY = 'Delay';
          var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
          var ANIMATION_PLAYSTATE_KEY = 'PlayState';
          var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
          var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
          var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
          var CLOSING_TIME_BUFFER = 1.5;
          var ONE_SECOND = 1000;
          var lookupCache = {};
          var parentCounter = 0;
          var animationReflowQueue = [];
          var cancelAnimationReflow;
          function clearCacheAfterReflow() {
            if (!cancelAnimationReflow) {
              cancelAnimationReflow = $$animateReflow(function () {
                animationReflowQueue = [];
                cancelAnimationReflow = null;
                lookupCache = {};
              });
            }
          }
          function afterReflow(element, callback) {
            if (cancelAnimationReflow) {
              cancelAnimationReflow();
            }
            animationReflowQueue.push(callback);
            cancelAnimationReflow = $$animateReflow(function () {
              forEach(animationReflowQueue, function (fn) {
                fn();
              });
              animationReflowQueue = [];
              cancelAnimationReflow = null;
              lookupCache = {};
            });
          }
          var closingTimer = null;
          var closingTimestamp = 0;
          var animationElementQueue = [];
          function animationCloseHandler(element, totalTime) {
            var node = extractElementNode(element);
            element = angular.element(node);
            //this item will be garbage collected by the closing
            //animation timeout
            animationElementQueue.push(element);
            //but it may not need to cancel out the existing timeout
            //if the timestamp is less than the previous one
            var futureTimestamp = Date.now() + totalTime;
            if (futureTimestamp <= closingTimestamp) {
              return;
            }
            $timeout.cancel(closingTimer);
            closingTimestamp = futureTimestamp;
            closingTimer = $timeout(function () {
              closeAllAnimations(animationElementQueue);
              animationElementQueue = [];
            }, totalTime, false);
          }
          function closeAllAnimations(elements) {
            forEach(elements, function (element) {
              var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
              if (elementData) {
                forEach(elementData.closeAnimationFns, function (fn) {
                  fn();
                });
              }
            });
          }
          function getElementAnimationDetails(element, cacheKey) {
            var data = cacheKey ? lookupCache[cacheKey] : null;
            if (!data) {
              var transitionDuration = 0;
              var transitionDelay = 0;
              var animationDuration = 0;
              var animationDelay = 0;
              //we want all the styles defined before and after
              forEach(element, function (element) {
                if (element.nodeType == ELEMENT_NODE) {
                  var elementStyles = $window.getComputedStyle(element) || {};
                  var transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];
                  transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);
                  var transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];
                  transitionDelay = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);
                  var animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];
                  animationDelay = Math.max(parseMaxTime(elementStyles[ANIMATION_PROP + DELAY_KEY]), animationDelay);
                  var aDuration = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);
                  if (aDuration > 0) {
                    aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
                  }
                  animationDuration = Math.max(aDuration, animationDuration);
                }
              });
              data = {
                total: 0,
                transitionDelay: transitionDelay,
                transitionDuration: transitionDuration,
                animationDelay: animationDelay,
                animationDuration: animationDuration
              };
              if (cacheKey) {
                lookupCache[cacheKey] = data;
              }
            }
            return data;
          }
          function parseMaxTime(str) {
            var maxValue = 0;
            var values = isString(str) ? str.split(/\s*,\s*/) : [];
            forEach(values, function (value) {
              maxValue = Math.max(parseFloat(value) || 0, maxValue);
            });
            return maxValue;
          }
          function getCacheKey(element) {
            var parentElement = element.parent();
            var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
            if (!parentID) {
              parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
              parentID = parentCounter;
            }
            return parentID + '-' + extractElementNode(element).getAttribute('class');
          }
          function animateSetup(animationEvent, element, className, styles) {
            var structural = [
                'ng-enter',
                'ng-leave',
                'ng-move'
              ].indexOf(className) >= 0;
            var cacheKey = getCacheKey(element);
            var eventCacheKey = cacheKey + ' ' + className;
            var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;
            var stagger = {};
            if (itemIndex > 0) {
              var staggerClassName = className + '-stagger';
              var staggerCacheKey = cacheKey + ' ' + staggerClassName;
              var applyClasses = !lookupCache[staggerCacheKey];
              applyClasses && $$jqLite.addClass(element, staggerClassName);
              stagger = getElementAnimationDetails(element, staggerCacheKey);
              applyClasses && $$jqLite.removeClass(element, staggerClassName);
            }
            $$jqLite.addClass(element, className);
            var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};
            var timings = getElementAnimationDetails(element, eventCacheKey);
            var transitionDuration = timings.transitionDuration;
            var animationDuration = timings.animationDuration;
            if (structural && transitionDuration === 0 && animationDuration === 0) {
              $$jqLite.removeClass(element, className);
              return false;
            }
            var blockTransition = styles || structural && transitionDuration > 0;
            var blockAnimation = animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0;
            var closeAnimationFns = formerData.closeAnimationFns || [];
            element.data(NG_ANIMATE_CSS_DATA_KEY, {
              stagger: stagger,
              cacheKey: eventCacheKey,
              running: formerData.running || 0,
              itemIndex: itemIndex,
              blockTransition: blockTransition,
              closeAnimationFns: closeAnimationFns
            });
            var node = extractElementNode(element);
            if (blockTransition) {
              blockTransitions(node, true);
              if (styles) {
                element.css(styles);
              }
            }
            if (blockAnimation) {
              blockAnimations(node, true);
            }
            return true;
          }
          function animateRun(animationEvent, element, className, activeAnimationComplete, styles) {
            var node = extractElementNode(element);
            var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if (node.getAttribute('class').indexOf(className) == -1 || !elementData) {
              activeAnimationComplete();
              return;
            }
            var activeClassName = '';
            var pendingClassName = '';
            forEach(className.split(' '), function (klass, i) {
              var prefix = (i > 0 ? ' ' : '') + klass;
              activeClassName += prefix + '-active';
              pendingClassName += prefix + '-pending';
            });
            var style = '';
            var appliedStyles = [];
            var itemIndex = elementData.itemIndex;
            var stagger = elementData.stagger;
            var staggerTime = 0;
            if (itemIndex > 0) {
              var transitionStaggerDelay = 0;
              if (stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
                transitionStaggerDelay = stagger.transitionDelay * itemIndex;
              }
              var animationStaggerDelay = 0;
              if (stagger.animationDelay > 0 && stagger.animationDuration === 0) {
                animationStaggerDelay = stagger.animationDelay * itemIndex;
                appliedStyles.push(CSS_PREFIX + 'animation-play-state');
              }
              staggerTime = Math.round(Math.max(transitionStaggerDelay, animationStaggerDelay) * 100) / 100;
            }
            if (!staggerTime) {
              $$jqLite.addClass(element, activeClassName);
              if (elementData.blockTransition) {
                blockTransitions(node, false);
              }
            }
            var eventCacheKey = elementData.cacheKey + ' ' + activeClassName;
            var timings = getElementAnimationDetails(element, eventCacheKey);
            var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
            if (maxDuration === 0) {
              $$jqLite.removeClass(element, activeClassName);
              animateClose(element, className);
              activeAnimationComplete();
              return;
            }
            if (!staggerTime && styles && Object.keys(styles).length > 0) {
              if (!timings.transitionDuration) {
                element.css('transition', timings.animationDuration + 's linear all');
                appliedStyles.push('transition');
              }
              element.css(styles);
            }
            var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
            var maxDelayTime = maxDelay * ONE_SECOND;
            if (appliedStyles.length > 0) {
              //the element being animated may sometimes contain comment nodes in
              //the jqLite object, so we're safe to use a single variable to house
              //the styles since there is always only one element being animated
              var oldStyle = node.getAttribute('style') || '';
              if (oldStyle.charAt(oldStyle.length - 1) !== ';') {
                oldStyle += ';';
              }
              node.setAttribute('style', oldStyle + ' ' + style);
            }
            var startTime = Date.now();
            var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;
            var animationTime = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
            var totalTime = (staggerTime + animationTime) * ONE_SECOND;
            var staggerTimeout;
            if (staggerTime > 0) {
              $$jqLite.addClass(element, pendingClassName);
              staggerTimeout = $timeout(function () {
                staggerTimeout = null;
                if (timings.transitionDuration > 0) {
                  blockTransitions(node, false);
                }
                if (timings.animationDuration > 0) {
                  blockAnimations(node, false);
                }
                $$jqLite.addClass(element, activeClassName);
                $$jqLite.removeClass(element, pendingClassName);
                if (styles) {
                  if (timings.transitionDuration === 0) {
                    element.css('transition', timings.animationDuration + 's linear all');
                  }
                  element.css(styles);
                  appliedStyles.push('transition');
                }
              }, staggerTime * ONE_SECOND, false);
            }
            element.on(css3AnimationEvents, onAnimationProgress);
            elementData.closeAnimationFns.push(function () {
              onEnd();
              activeAnimationComplete();
            });
            elementData.running++;
            animationCloseHandler(element, totalTime);
            return onEnd;
            // This will automatically be called by $animate so
            // there is no need to attach this internally to the
            // timeout done method.
            function onEnd() {
              element.off(css3AnimationEvents, onAnimationProgress);
              $$jqLite.removeClass(element, activeClassName);
              $$jqLite.removeClass(element, pendingClassName);
              if (staggerTimeout) {
                $timeout.cancel(staggerTimeout);
              }
              animateClose(element, className);
              var node = extractElementNode(element);
              for (var i in appliedStyles) {
                node.style.removeProperty(appliedStyles[i]);
              }
            }
            function onAnimationProgress(event) {
              event.stopPropagation();
              var ev = event.originalEvent || event;
              var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();
              /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
              var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
              /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animations sometimes close off early */
              if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                activeAnimationComplete();
              }
            }
          }
          function blockTransitions(node, bool) {
            node.style[TRANSITION_PROP + PROPERTY_KEY] = bool ? 'none' : '';
          }
          function blockAnimations(node, bool) {
            node.style[ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY] = bool ? 'paused' : '';
          }
          function animateBefore(animationEvent, element, className, styles) {
            if (animateSetup(animationEvent, element, className, styles)) {
              return function (cancelled) {
                cancelled && animateClose(element, className);
              };
            }
          }
          function animateAfter(animationEvent, element, className, afterAnimationComplete, styles) {
            if (element.data(NG_ANIMATE_CSS_DATA_KEY)) {
              return animateRun(animationEvent, element, className, afterAnimationComplete, styles);
            } else {
              animateClose(element, className);
              afterAnimationComplete();
            }
          }
          function animate(animationEvent, element, className, animationComplete, options) {
            //If the animateSetup function doesn't bother returning a
            //cancellation function then it means that there is no animation
            //to perform at all
            var preReflowCancellation = animateBefore(animationEvent, element, className, options.from);
            if (!preReflowCancellation) {
              clearCacheAfterReflow();
              animationComplete();
              return;
            }
            //There are two cancellation functions: one is before the first
            //reflow animation and the second is during the active state
            //animation. The first function will take care of removing the
            //data from the element which will not make the 2nd animation
            //happen in the first place
            var cancel = preReflowCancellation;
            afterReflow(element, function () {
              //once the reflow is complete then we point cancel to
              //the new cancellation function which will remove all of the
              //animation properties from the active animation
              cancel = animateAfter(animationEvent, element, className, animationComplete, options.to);
            });
            return function (cancelled) {
              (cancel || noop)(cancelled);
            };
          }
          function animateClose(element, className) {
            $$jqLite.removeClass(element, className);
            var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if (data) {
              if (data.running) {
                data.running--;
              }
              if (!data.running || data.running === 0) {
                element.removeData(NG_ANIMATE_CSS_DATA_KEY);
              }
            }
          }
          return {
            animate: function (element, className, from, to, animationCompleted, options) {
              options = options || {};
              options.from = from;
              options.to = to;
              return animate('animate', element, className, animationCompleted, options);
            },
            enter: function (element, animationCompleted, options) {
              options = options || {};
              return animate('enter', element, 'ng-enter', animationCompleted, options);
            },
            leave: function (element, animationCompleted, options) {
              options = options || {};
              return animate('leave', element, 'ng-leave', animationCompleted, options);
            },
            move: function (element, animationCompleted, options) {
              options = options || {};
              return animate('move', element, 'ng-move', animationCompleted, options);
            },
            beforeSetClass: function (element, add, remove, animationCompleted, options) {
              options = options || {};
              var className = suffixClasses(remove, '-remove') + ' ' + suffixClasses(add, '-add');
              var cancellationMethod = animateBefore('setClass', element, className, options.from);
              if (cancellationMethod) {
                afterReflow(element, animationCompleted);
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            beforeAddClass: function (element, className, animationCompleted, options) {
              options = options || {};
              var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), options.from);
              if (cancellationMethod) {
                afterReflow(element, animationCompleted);
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            beforeRemoveClass: function (element, className, animationCompleted, options) {
              options = options || {};
              var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), options.from);
              if (cancellationMethod) {
                afterReflow(element, animationCompleted);
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            setClass: function (element, add, remove, animationCompleted, options) {
              options = options || {};
              remove = suffixClasses(remove, '-remove');
              add = suffixClasses(add, '-add');
              var className = remove + ' ' + add;
              return animateAfter('setClass', element, className, animationCompleted, options.to);
            },
            addClass: function (element, className, animationCompleted, options) {
              options = options || {};
              return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted, options.to);
            },
            removeClass: function (element, className, animationCompleted, options) {
              options = options || {};
              return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted, options.to);
            }
          };
          function suffixClasses(classes, suffix) {
            var className = '';
            classes = isArray(classes) ? classes : classes.split(/\s+/);
            forEach(classes, function (klass, i) {
              if (klass && klass.length > 0) {
                className += (i > 0 ? ' ' : '') + klass + suffix;
              }
            });
            return className;
          }
        }
      ]);
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngTouch
 * @description
 *
 * # ngTouch
 *
 * The `ngTouch` module provides touch events and other helpers for touch-enabled devices.
 * The implementation is based on jQuery Mobile touch event handling
 * ([jquerymobile.com](http://jquerymobile.com/)).
 *
 *
 * See {@link ngTouch.$swipe `$swipe`} for usage.
 *
 * <div doc-module-components="ngTouch"></div>
 *
 */
  // define ngTouch module
  /* global -ngTouch */
  var ngTouch = angular.module('ngTouch', []);
  /* global ngTouch: false */
  /**
     * @ngdoc service
     * @name $swipe
     *
     * @description
     * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe
     * behavior, to make implementing swipe-related directives more convenient.
     *
     * Requires the {@link ngTouch `ngTouch`} module to be installed.
     *
     * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by
     * `ngCarousel` in a separate component.
     *
     * # Usage
     * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element
     * which is to be watched for swipes, and an object with four handler functions. See the
     * documentation for `bind` below.
     */
  ngTouch.factory('$swipe', [function () {
      // The total distance in any direction before we make the call on swipe vs. scroll.
      var MOVE_BUFFER_RADIUS = 10;
      function getCoordinates(event) {
        var touches = event.touches && event.touches.length ? event.touches : [event];
        var e = event.changedTouches && event.changedTouches[0] || event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0] || touches[0].originalEvent || touches[0];
        return {
          x: e.clientX,
          y: e.clientY
        };
      }
      return {
        bind: function (element, eventHandlers) {
          // Absolute total movement, used to control swipe vs. scroll.
          var totalX, totalY;
          // Coordinates of the start position.
          var startCoords;
          // Last event's position.
          var lastPos;
          // Whether a swipe is active.
          var active = false;
          element.on('touchstart mousedown', function (event) {
            startCoords = getCoordinates(event);
            active = true;
            totalX = 0;
            totalY = 0;
            lastPos = startCoords;
            eventHandlers['start'] && eventHandlers['start'](startCoords, event);
          });
          element.on('touchcancel', function (event) {
            active = false;
            eventHandlers['cancel'] && eventHandlers['cancel'](event);
          });
          element.on('touchmove mousemove', function (event) {
            if (!active)
              return;
            // Android will send a touchcancel if it thinks we're starting to scroll.
            // So when the total distance (+ or - or both) exceeds 10px in either direction,
            // we either:
            // - On totalX > totalY, we send preventDefault() and treat this as a swipe.
            // - On totalY > totalX, we let the browser handle it as a scroll.
            if (!startCoords)
              return;
            var coords = getCoordinates(event);
            totalX += Math.abs(coords.x - lastPos.x);
            totalY += Math.abs(coords.y - lastPos.y);
            lastPos = coords;
            if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
              return;
            }
            // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.
            if (totalY > totalX) {
              // Allow native scrolling to take over.
              active = false;
              eventHandlers['cancel'] && eventHandlers['cancel'](event);
              return;
            } else {
              // Prevent the browser from scrolling.
              event.preventDefault();
              eventHandlers['move'] && eventHandlers['move'](coords, event);
            }
          });
          element.on('touchend mouseup', function (event) {
            if (!active)
              return;
            active = false;
            eventHandlers['end'] && eventHandlers['end'](getCoordinates(event), event);
          });
        }
      };
    }]);
  /* global ngTouch: false */
  /**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * A more powerful replacement for the default ngClick designed to be used on touchscreen
 * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending
 * the click event. This version handles them immediately, and then prevents the
 * following click event from propagating.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * This directive can fall back to using an ordinary click event, and so works on desktop
 * browsers as well as mobile.
 *
 * This directive also sets the CSS class `ng-click-active` while the element is being held
 * down (by a mouse click or touch) so you can restyle the depressed element if you wish.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate
 * upon tap. (Event object is available as `$event`)
 *
 * @example
    <example>
      <file name="index.html">
        <button ng-click="count = count + 1" ng-init="count=0">
          Increment
        </button>
        count: {{ count }}
      </file>
    </example>
 */
  ngTouch.config([
    '$provide',
    function ($provide) {
      $provide.decorator('ngClickDirective', [
        '$delegate',
        function ($delegate) {
          // drop the default ngClick directive
          $delegate.shift();
          return $delegate;
        }
      ]);
    }
  ]);
  ngTouch.directive('ngClick', [
    '$parse',
    '$timeout',
    '$rootElement',
    function ($parse, $timeout, $rootElement) {
      var TAP_DURATION = 750;
      // Shorter than 750ms is a tap, longer is a taphold or drag.
      var MOVE_TOLERANCE = 12;
      // 12px seems to work in most mobile browsers.
      var PREVENT_DURATION = 2500;
      // 2.5 seconds maximum from preventGhostClick call to click
      var CLICKBUSTER_THRESHOLD = 25;
      // 25 pixels in any dimension is the limit for busting clicks.
      var ACTIVE_CLASS_NAME = 'ng-click-active';
      var lastPreventedTime;
      var touchCoordinates;
      var lastLabelClickCoordinates;
      // TAP EVENTS AND GHOST CLICKS
      //
      // Why tap events?
      // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're
      // double-tapping, and then fire a click event.
      //
      // This delay sucks and makes mobile apps feel unresponsive.
      // So we detect touchstart, touchmove, touchcancel and touchend ourselves and determine when
      // the user has tapped on something.
      //
      // What happens when the browser then generates a click event?
      // The browser, of course, also detects the tap and fires a click after a delay. This results in
      // tapping/clicking twice. So we do "clickbusting" to prevent it.
      //
      // How does it work?
      // We attach global touchstart and click handlers, that run during the capture (early) phase.
      // So the sequence for a tap is:
      // - global touchstart: Sets an "allowable region" at the point touched.
      // - element's touchstart: Starts a touch
      // (- touchmove or touchcancel ends the touch, no click follows)
      // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold
      //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().
      // - preventGhostClick() removes the allowable region the global touchstart created.
      // - The browser generates a click event.
      // - The global click handler catches the click, and checks whether it was in an allowable region.
      //     - If preventGhostClick was called, the region will have been removed, the click is busted.
      //     - If the region is still there, the click proceeds normally. Therefore clicks on links and
      //       other elements without ngTap on them work normally.
      //
      // This is an ugly, terrible hack!
      // Yeah, tell me about it. The alternatives are using the slow click events, or making our users
      // deal with the ghost clicks, so I consider this the least of evils. Fortunately Angular
      // encapsulates this ugly logic away from the user.
      //
      // Why not just put click handlers on the element?
      // We do that too, just to be sure. The problem is that the tap event might have caused the DOM
      // to change, so that the click fires in the same position but something else is there now. So
      // the handlers are global and care only about coordinates and not elements.
      // Checks if the coordinates are close enough to be within the region.
      function hit(x1, y1, x2, y2) {
        return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
      }
      // Checks a list of allowable regions against a click location.
      // Returns true if the click should be allowed.
      // Splices out the allowable region from the list after it has been used.
      function checkAllowableRegions(touchCoordinates, x, y) {
        for (var i = 0; i < touchCoordinates.length; i += 2) {
          if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) {
            touchCoordinates.splice(i, i + 2);
            return true;  // allowable region
          }
        }
        return false;  // No allowable region; bust it.
      }
      // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick
      // was called recently.
      function onClick(event) {
        if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
          return;  // Too old.
        }
        var touches = event.touches && event.touches.length ? event.touches : [event];
        var x = touches[0].clientX;
        var y = touches[0].clientY;
        // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label
        // and on the input element). Depending on the exact browser, this second click we don't want
        // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label
        // click event
        if (x < 1 && y < 1) {
          return;  // offscreen
        }
        if (lastLabelClickCoordinates && lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {
          return;  // input click triggered by label click
        }
        // reset label click coordinates on first subsequent click
        if (lastLabelClickCoordinates) {
          lastLabelClickCoordinates = null;
        }
        // remember label click coordinates to prevent click busting of trigger click event on input
        if (event.target.tagName.toLowerCase() === 'label') {
          lastLabelClickCoordinates = [
            x,
            y
          ];
        }
        // Look for an allowable region containing this click.
        // If we find one, that means it was created by touchstart and not removed by
        // preventGhostClick, so we don't bust it.
        if (checkAllowableRegions(touchCoordinates, x, y)) {
          return;
        }
        // If we didn't find an allowable region, bust the click.
        event.stopPropagation();
        event.preventDefault();
        // Blur focused form elements
        event.target && event.target.blur();
      }
      // Global touchstart handler that creates an allowable region for a click event.
      // This allowable region can be removed by preventGhostClick if we want to bust it.
      function onTouchStart(event) {
        var touches = event.touches && event.touches.length ? event.touches : [event];
        var x = touches[0].clientX;
        var y = touches[0].clientY;
        touchCoordinates.push(x, y);
        $timeout(function () {
          // Remove the allowable region.
          for (var i = 0; i < touchCoordinates.length; i += 2) {
            if (touchCoordinates[i] == x && touchCoordinates[i + 1] == y) {
              touchCoordinates.splice(i, i + 2);
              return;
            }
          }
        }, PREVENT_DURATION, false);
      }
      // On the first call, attaches some event handlers. Then whenever it gets called, it creates a
      // zone around the touchstart where clicks will get busted.
      function preventGhostClick(x, y) {
        if (!touchCoordinates) {
          $rootElement[0].addEventListener('click', onClick, true);
          $rootElement[0].addEventListener('touchstart', onTouchStart, true);
          touchCoordinates = [];
        }
        lastPreventedTime = Date.now();
        checkAllowableRegions(touchCoordinates, x, y);
      }
      // Actual linking function.
      return function (scope, element, attr) {
        var clickHandler = $parse(attr.ngClick), tapping = false, tapElement,
          // Used to blur the element after a tap.
          startTime,
          // Used to check if the tap was held too long.
          touchStartX, touchStartY;
        function resetState() {
          tapping = false;
          element.removeClass(ACTIVE_CLASS_NAME);
        }
        element.on('touchstart', function (event) {
          tapping = true;
          tapElement = event.target ? event.target : event.srcElement;
          // IE uses srcElement.
          // Hack for Safari, which can target text nodes instead of containers.
          if (tapElement.nodeType == 3) {
            tapElement = tapElement.parentNode;
          }
          element.addClass(ACTIVE_CLASS_NAME);
          startTime = Date.now();
          var touches = event.touches && event.touches.length ? event.touches : [event];
          var e = touches[0].originalEvent || touches[0];
          touchStartX = e.clientX;
          touchStartY = e.clientY;
        });
        element.on('touchmove', function (event) {
          resetState();
        });
        element.on('touchcancel', function (event) {
          resetState();
        });
        element.on('touchend', function (event) {
          var diff = Date.now() - startTime;
          var touches = event.changedTouches && event.changedTouches.length ? event.changedTouches : event.touches && event.touches.length ? event.touches : [event];
          var e = touches[0].originalEvent || touches[0];
          var x = e.clientX;
          var y = e.clientY;
          var dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));
          if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {
            // Call preventGhostClick so the clickbuster will catch the corresponding click.
            preventGhostClick(x, y);
            // Blur the focused element (the button, probably) before firing the callback.
            // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.
            // I couldn't get anything to work reliably on Android Chrome.
            if (tapElement) {
              tapElement.blur();
            }
            if (!angular.isDefined(attr.disabled) || attr.disabled === false) {
              element.triggerHandler('click', [event]);
            }
          }
          resetState();
        });
        // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
        // something else nearby.
        element.onclick = function (event) {
        };
        // Actual click handler.
        // There are three different kinds of clicks, only two of which reach this point.
        // - On desktop browsers without touch events, their clicks will always come here.
        // - On mobile browsers, the simulated "fast" click will call this.
        // - But the browser's follow-up slow click will be "busted" before it reaches this handler.
        // Therefore it's safe to use this directive on both mobile and desktop.
        element.on('click', function (event, touchend) {
          scope.$apply(function () {
            clickHandler(scope, { $event: touchend || event });
          });
        });
        element.on('mousedown', function (event) {
          element.addClass(ACTIVE_CLASS_NAME);
        });
        element.on('mousemove mouseup', function (event) {
          element.removeClass(ACTIVE_CLASS_NAME);
        });
      };
    }
  ]);
  /* global ngTouch: false */
  /**
 * @ngdoc directive
 * @name ngSwipeLeft
 *
 * @description
 * Specify custom behavior when an element is swiped to the left on a touchscreen device.
 * A leftward swipe is a quick, right-to-left slide of the finger.
 * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate
 * upon left swipe. (Event object is available as `$event`)
 *
 * @example
    <example>
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
    </example>
 */
  /**
 * @ngdoc directive
 * @name ngSwipeRight
 *
 * @description
 * Specify custom behavior when an element is swiped to the right on a touchscreen device.
 * A rightward swipe is a quick, left-to-right slide of the finger.
 * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate
 * upon right swipe. (Event object is available as `$event`)
 *
 * @example
    <example>
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
    </example>
 */
  function makeSwipeDirective(directiveName, direction, eventName) {
    ngTouch.directive(directiveName, [
      '$parse',
      '$swipe',
      function ($parse, $swipe) {
        // The maximum vertical delta for a swipe should be less than 75px.
        var MAX_VERTICAL_DISTANCE = 75;
        // Vertical distance should not be more than a fraction of the horizontal distance.
        var MAX_VERTICAL_RATIO = 0.3;
        // At least a 30px lateral motion is necessary for a swipe.
        var MIN_HORIZONTAL_DISTANCE = 30;
        return function (scope, element, attr) {
          var swipeHandler = $parse(attr[directiveName]);
          var startCoords, valid;
          function validSwipe(coords) {
            // Check that it's within the coordinates.
            // Absolute vertical distance must be within tolerances.
            // Horizontal distance, we take the current X - the starting X.
            // This is negative for leftward swipes and positive for rightward swipes.
            // After multiplying by the direction (-1 for left, +1 for right), legal swipes
            // (ie. same direction as the directive wants) will have a positive delta and
            // illegal ones a negative delta.
            // Therefore this delta must be positive, and larger than the minimum.
            if (!startCoords)
              return false;
            var deltaY = Math.abs(coords.y - startCoords.y);
            var deltaX = (coords.x - startCoords.x) * direction;
            return valid && deltaY < MAX_VERTICAL_DISTANCE && deltaX > 0 && deltaX > MIN_HORIZONTAL_DISTANCE && deltaY / deltaX < MAX_VERTICAL_RATIO;
          }
          $swipe.bind(element, {
            'start': function (coords, event) {
              startCoords = coords;
              valid = true;
            },
            'cancel': function (event) {
              valid = false;
            },
            'end': function (coords, event) {
              if (validSwipe(coords)) {
                scope.$apply(function () {
                  element.triggerHandler(eventName);
                  swipeHandler(scope, { $event: event });
                });
              }
            }
          });
        };
      }
    ]);
  }
  // Left is negative X-coordinate, right is positive.
  makeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');
  makeSwipeDirective('ngSwipeRight', 1, 'swiperight');
}(window, window.angular));
/**
 * @license AngularJS v1.2.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngRoute
 * @description
 *
 * # ngRoute
 *
 * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 *
 * <div doc-module-components="ngRoute"></div>
 */
  /* global -ngRouteModule */
  var ngRouteModule = angular.module('ngRoute', ['ng']).provider('$route', $RouteProvider);
  /**
 * @ngdoc provider
 * @name $routeProvider
 * @function
 *
 * @description
 *
 * Used for configuring routes.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 * ## Dependencies
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 */
  function $RouteProvider() {
    function inherit(parent, extra) {
      return angular.extend(new (angular.extend(function () {
      }, { prototype: parent }))(), extra);
    }
    var routes = {};
    /**
   * @ngdoc method
   * @name $routeProvider#when
   *
   * @param {string} path Route path (matched against `$location.path`). If `$location.path`
   *    contains redundant trailing slash or is missing one, the route will still match and the
   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
   *    route definition.
   *
   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
   *        to the next slash are matched and stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain named groups starting with a colon and ending with a star:
   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
   *
   *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
   *    `/color/brown/largecode/code/with/slashes/edit` and extract:
   *
   *    * `color: brown`
   *    * `largecode: code/with/slashes`.
   *
   *
   * @param {Object} route Mapping information to be assigned to `$route.current` on route
   *    match.
   *
   *    Object properties:
   *
   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with
   *      newly created scope or the name of a {@link angular.Module#controller registered
   *      controller} if passed as a string.
   *    - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be
   *      published to scope under the `controllerAs` name.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used by {@link
   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
   *      This property takes precedence over `templateUrl`.
   *
   *      If `template` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used by {@link ngRoute.directive:ngView ngView}.
   *
   *      If `templateUrl` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
   *      be injected into the controller. If any of these dependencies are promises, the router
   *      will wait for them all to be resolved or one to be rejected before the controller is
   *      instantiated.
   *      If all the promises are resolved successfully, the values of the resolved promises are
   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
   *      fired. If any of the promises are rejected the
   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object
   *      is:
   *
   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.
   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
   *        and the return value is treated as the dependency. If the result is a promise, it is
   *        resolved before its value is injected into the controller. Be aware that
   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
   *        functions.  Use `$route.current.params` to access the new route parameters, instead.
   *
   *    - `redirectTo` – {(string|function())=} – value to update
   *      {@link ng.$location $location} path with and trigger route redirection.
   *
   *      If `redirectTo` is a function, it will be called with the following parameters:
   *
   *      - `{Object.<string>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route templateUrl.
   *      - `{string}` - current `$location.path()`
   *      - `{Object}` - current `$location.search()`
   *
   *      The custom `redirectTo` function is expected to return a string which will be used
   *      to update `$location.path()` and `$location.search()`.
   *
   *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`
   *      or `$location.hash()` changes.
   *
   *      If the option is set to `false` and url in the browser changes, then
   *      `$routeUpdate` event is broadcasted on the root scope.
   *
   *    - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive
   *
   *      If the option is set to `true`, then the particular route can be matched without being
   *      case sensitive
   *
   * @returns {Object} self
   *
   * @description
   * Adds a new route definition to the `$route` service.
   */
    this.when = function (path, route) {
      routes[path] = angular.extend({ reloadOnSearch: true }, route, path && pathRegExp(path, route));
      // create redirection for trailing slashes
      if (path) {
        var redirectPath = path[path.length - 1] == '/' ? path.substr(0, path.length - 1) : path + '/';
        routes[redirectPath] = angular.extend({ redirectTo: path }, pathRegExp(redirectPath, route));
      }
      return this;
    };
    /**
    * @param path {string} path
    * @param opts {Object} options
    * @return {?Object}
    *
    * @description
    * Normalizes the given path, returning a regular expression
    * and the original path.
    *
    * Inspired by pathRexp in visionmedia/express/lib/utils.js.
    */
    function pathRegExp(path, opts) {
      var insensitive = opts.caseInsensitiveMatch, ret = {
          originalPath: path,
          regexp: path
        }, keys = ret.keys = [];
      path = path.replace(/([().])/g, '\\$1').replace(/(\/)?:(\w+)([\?\*])?/g, function (_, slash, key, option) {
        var optional = option === '?' ? option : null;
        var star = option === '*' ? option : null;
        keys.push({
          name: key,
          optional: !!optional
        });
        slash = slash || '';
        return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (star && '(.+?)' || '([^/]+)') + (optional || '') + ')' + (optional || '');
      }).replace(/([\/$\*])/g, '\\$1');
      ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
      return ret;
    }
    /**
   * @ngdoc method
   * @name $routeProvider#otherwise
   *
   * @description
   * Sets route definition that will be used on route change when no other route definition
   * is matched.
   *
   * @param {Object} params Mapping information to be assigned to `$route.current`.
   * @returns {Object} self
   */
    this.otherwise = function (params) {
      this.when(null, params);
      return this;
    };
    this.$get = [
      '$rootScope',
      '$location',
      '$routeParams',
      '$q',
      '$injector',
      '$http',
      '$templateCache',
      '$sce',
      function ($rootScope, $location, $routeParams, $q, $injector, $http, $templateCache, $sce) {
        /**
     * @ngdoc service
     * @name $route
     * @requires $location
     * @requires $routeParams
     *
     * @property {Object} current Reference to the current route definition.
     * The route definition contains:
     *
     *   - `controller`: The controller constructor as define in route definition.
     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
     *     controller instantiation. The `locals` contain
     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
     *
     *     - `$scope` - The current route scope.
     *     - `$template` - The current route template HTML.
     *
     * @property {Object} routes Object with all route configuration Objects as its properties.
     *
     * @description
     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
     * It watches `$location.url()` and tries to map the path to an existing route definition.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
     *
     * The `$route` service is typically used in conjunction with the
     * {@link ngRoute.directive:ngView `ngView`} directive and the
     * {@link ngRoute.$routeParams `$routeParams`} service.
     *
     * @example
     * This example shows how changing the URL hash causes the `$route` to match a route against the
     * URL, and the `ngView` pulls in the partial.
     *
     * Note that this example is using {@link ng.directive:script inlined templates}
     * to get it working on jsfiddle as well.
     *
     * <example name="$route-service" module="ngRouteExample"
     *          deps="angular-route.js" fixBase="true">
     *   <file name="index.html">
     *     <div ng-controller="MainController">
     *       Choose:
     *       <a href="Book/Moby">Moby</a> |
     *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
     *       <a href="Book/Gatsby">Gatsby</a> |
     *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
     *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
     *
     *       <div ng-view></div>
     *
     *       <hr />
     *
     *       <pre>$location.path() = {{$location.path()}}</pre>
     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
     *       <pre>$route.current.params = {{$route.current.params}}</pre>
     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
     *       <pre>$routeParams = {{$routeParams}}</pre>
     *     </div>
     *   </file>
     *
     *   <file name="book.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *   </file>
     *
     *   <file name="chapter.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *     Chapter Id: {{params.chapterId}}
     *   </file>
     *
     *   <file name="script.js">
     *     angular.module('ngRouteExample', ['ngRoute'])
     *
     *      .controller('MainController', function($scope, $route, $routeParams, $location) {
     *          $scope.$route = $route;
     *          $scope.$location = $location;
     *          $scope.$routeParams = $routeParams;
     *      })
     *
     *      .controller('BookController', function($scope, $routeParams) {
     *          $scope.name = "BookController";
     *          $scope.params = $routeParams;
     *      })
     *
     *      .controller('ChapterController', function($scope, $routeParams) {
     *          $scope.name = "ChapterController";
     *          $scope.params = $routeParams;
     *      })
     *
     *     .config(function($routeProvider, $locationProvider) {
     *       $routeProvider
     *        .when('/Book/:bookId', {
     *         templateUrl: 'book.html',
     *         controller: 'BookController',
     *         resolve: {
     *           // I will cause a 1 second delay
     *           delay: function($q, $timeout) {
     *             var delay = $q.defer();
     *             $timeout(delay.resolve, 1000);
     *             return delay.promise;
     *           }
     *         }
     *       })
     *       .when('/Book/:bookId/ch/:chapterId', {
     *         templateUrl: 'chapter.html',
     *         controller: 'ChapterController'
     *       });
     *
     *       // configure html5 to get links working on jsfiddle
     *       $locationProvider.html5Mode(true);
     *     });
     *
     *   </file>
     *
     *   <file name="protractor.js" type="protractor">
     *     it('should load and compile correct template', function() {
     *       element(by.linkText('Moby: Ch1')).click();
     *       var content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: ChapterController/);
     *       expect(content).toMatch(/Book Id\: Moby/);
     *       expect(content).toMatch(/Chapter Id\: 1/);
     *
     *       element(by.partialLinkText('Scarlet')).click();
     *
     *       content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: BookController/);
     *       expect(content).toMatch(/Book Id\: Scarlet/);
     *     });
     *   </file>
     * </example>
     */
        /**
     * @ngdoc event
     * @name $route#$routeChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a route change. At this  point the route services starts
     * resolving all of the dependencies needed for the route change to occur.
     * Typically this involves fetching the view template as well as any dependencies
     * defined in `resolve` route property. Once  all of the dependencies are resolved
     * `$routeChangeSuccess` is fired.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} next Future route information.
     * @param {Route} current Current route information.
     */
        /**
     * @ngdoc event
     * @name $route#$routeChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a route dependencies are resolved.
     * {@link ngRoute.directive:ngView ngView} listens for the directive
     * to instantiate the controller and render the view.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} current Current route information.
     * @param {Route|Undefined} previous Previous route information, or undefined if current is
     * first route entered.
     */
        /**
     * @ngdoc event
     * @name $route#$routeChangeError
     * @eventType broadcast on root scope
     * @description
     * Broadcasted if any of the resolve promises are rejected.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current route information.
     * @param {Route} previous Previous route information.
     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.
     */
        /**
     * @ngdoc event
     * @name $route#$routeUpdate
     * @eventType broadcast on root scope
     * @description
     *
     * The `reloadOnSearch` property has been set to false, and we are reusing the same
     * instance of the Controller.
     */
        var forceReload = false, $route = {
            routes: routes,
            reload: function () {
              forceReload = true;
              $rootScope.$evalAsync(updateRoute);
            }
          };
        $rootScope.$on('$locationChangeSuccess', updateRoute);
        return $route;
        /////////////////////////////////////////////////////
        /**
     * @param on {string} current url
     * @param route {Object} route regexp to match the url against
     * @return {?Object}
     *
     * @description
     * Check if the route matches the current url.
     *
     * Inspired by match in
     * visionmedia/express/lib/router/router.js.
     */
        function switchRouteMatcher(on, route) {
          var keys = route.keys, params = {};
          if (!route.regexp)
            return null;
          var m = route.regexp.exec(on);
          if (!m)
            return null;
          for (var i = 1, len = m.length; i < len; ++i) {
            var key = keys[i - 1];
            var val = 'string' == typeof m[i] ? decodeURIComponent(m[i]) : m[i];
            if (key && val) {
              params[key.name] = val;
            }
          }
          return params;
        }
        function updateRoute() {
          var next = parseRoute(), last = $route.current;
          if (next && last && next.$$route === last.$$route && angular.equals(next.pathParams, last.pathParams) && !next.reloadOnSearch && !forceReload) {
            last.params = next.params;
            angular.copy(last.params, $routeParams);
            $rootScope.$broadcast('$routeUpdate', last);
          } else if (next || last) {
            forceReload = false;
            $rootScope.$broadcast('$routeChangeStart', next, last);
            $route.current = next;
            if (next) {
              if (next.redirectTo) {
                if (angular.isString(next.redirectTo)) {
                  $location.path(interpolate(next.redirectTo, next.params)).search(next.params).replace();
                } else {
                  $location.url(next.redirectTo(next.pathParams, $location.path(), $location.search())).replace();
                }
              }
            }
            $q.when(next).then(function () {
              if (next) {
                var locals = angular.extend({}, next.resolve), template, templateUrl;
                angular.forEach(locals, function (value, key) {
                  locals[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value);
                });
                if (angular.isDefined(template = next.template)) {
                  if (angular.isFunction(template)) {
                    template = template(next.params);
                  }
                } else if (angular.isDefined(templateUrl = next.templateUrl)) {
                  if (angular.isFunction(templateUrl)) {
                    templateUrl = templateUrl(next.params);
                  }
                  templateUrl = $sce.getTrustedResourceUrl(templateUrl);
                  if (angular.isDefined(templateUrl)) {
                    next.loadedTemplateUrl = templateUrl;
                    template = $http.get(templateUrl, { cache: $templateCache }).then(function (response) {
                      return response.data;
                    });
                  }
                }
                if (angular.isDefined(template)) {
                  locals['$template'] = template;
                }
                return $q.all(locals);
              }
            }).then(function (locals) {
              if (next == $route.current) {
                if (next) {
                  next.locals = locals;
                  angular.copy(next.params, $routeParams);
                }
                $rootScope.$broadcast('$routeChangeSuccess', next, last);
              }
            }, function (error) {
              if (next == $route.current) {
                $rootScope.$broadcast('$routeChangeError', next, last, error);
              }
            });
          }
        }
        /**
     * @returns {Object} the current active route, by matching it against the URL
     */
        function parseRoute() {
          // Match a route
          var params, match;
          angular.forEach(routes, function (route, path) {
            if (!match && (params = switchRouteMatcher($location.path(), route))) {
              match = inherit(route, {
                params: angular.extend({}, $location.search(), params),
                pathParams: params
              });
              match.$$route = route;
            }
          });
          // No route matched; fallback to "otherwise" route
          return match || routes[null] && inherit(routes[null], {
            params: {},
            pathParams: {}
          });
        }
        /**
     * @returns {string} interpolation of the redirect path with the parameters
     */
        function interpolate(string, params) {
          var result = [];
          angular.forEach((string || '').split(':'), function (segment, i) {
            if (i === 0) {
              result.push(segment);
            } else {
              var segmentMatch = segment.match(/(\w+)(.*)/);
              var key = segmentMatch[1];
              result.push(params[key]);
              result.push(segmentMatch[2] || '');
              delete params[key];
            }
          });
          return result.join('');
        }
      }
    ];
  }
  ngRouteModule.provider('$routeParams', $RouteParamsProvider);
  /**
 * @ngdoc service
 * @name $routeParams
 * @requires $route
 *
 * @description
 * The `$routeParams` service allows you to retrieve the current set of route parameters.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * The route parameters are a combination of {@link ng.$location `$location`}'s
 * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
 * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
 *
 * In case of parameter name collision, `path` params take precedence over `search` params.
 *
 * The service guarantees that the identity of the `$routeParams` object will remain unchanged
 * (but its properties will likely change) even when a route change occurs.
 *
 * Note that the `$routeParams` are only updated *after* a route change completes successfully.
 * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
 * Instead you can use `$route.current.params` to access the new route's parameters.
 *
 * @example
 * ```js
 *  // Given:
 *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
 *  // Route: /Chapter/:chapterId/Section/:sectionId
 *  //
 *  // Then
 *  $routeParams ==> {chapterId:1, sectionId:2, search:'moby'}
 * ```
 */
  function $RouteParamsProvider() {
    this.$get = function () {
      return {};
    };
  }
  ngRouteModule.directive('ngView', ngViewFactory);
  ngRouteModule.directive('ngView', ngViewFillContentFactory);
  /**
 * @ngdoc directive
 * @name ngView
 * @restrict ECA
 *
 * @description
 * # Overview
 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
 * including the rendered template of the current route into the main layout (`index.html`) file.
 * Every time the current route changes, the included view changes with it according to the
 * configuration of the `$route` service.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the view is updated.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
 *                    as an expression yields a truthy value.
 * @example
    <example name="ngView-directive" module="ngViewExample"
             deps="angular-route.js;angular-animate.js"
             animations="true" fixBase="true">
      <file name="index.html">
        <div ng-controller="MainCtrl as main">
          Choose:
          <a href="Book/Moby">Moby</a> |
          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
          <a href="Book/Gatsby">Gatsby</a> |
          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
          <a href="Book/Scarlet">Scarlet Letter</a><br/>

          <div class="view-animate-container">
            <div ng-view class="view-animate"></div>
          </div>
          <hr />

          <pre>$location.path() = {{main.$location.path()}}</pre>
          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
          <pre>$route.current.params = {{main.$route.current.params}}</pre>
          <pre>$route.current.scope.name = {{main.$route.current.scope.name}}</pre>
          <pre>$routeParams = {{main.$routeParams}}</pre>
        </div>
      </file>

      <file name="book.html">
        <div>
          controller: {{book.name}}<br />
          Book Id: {{book.params.bookId}}<br />
        </div>
      </file>

      <file name="chapter.html">
        <div>
          controller: {{chapter.name}}<br />
          Book Id: {{chapter.params.bookId}}<br />
          Chapter Id: {{chapter.params.chapterId}}
        </div>
      </file>

      <file name="animations.css">
        .view-animate-container {
          position:relative;
          height:100px!important;
          position:relative;
          background:white;
          border:1px solid black;
          height:40px;
          overflow:hidden;
        }

        .view-animate {
          padding:10px;
        }

        .view-animate.ng-enter, .view-animate.ng-leave {
          -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;
          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

          display:block;
          width:100%;
          border-left:1px solid black;

          position:absolute;
          top:0;
          left:0;
          right:0;
          bottom:0;
          padding:10px;
        }

        .view-animate.ng-enter {
          left:100%;
        }
        .view-animate.ng-enter.ng-enter-active {
          left:0;
        }
        .view-animate.ng-leave.ng-leave-active {
          left:-100%;
        }
      </file>

      <file name="script.js">
        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
          .config(['$routeProvider', '$locationProvider',
            function($routeProvider, $locationProvider) {
              $routeProvider
                .when('/Book/:bookId', {
                  templateUrl: 'book.html',
                  controller: 'BookCtrl',
                  controllerAs: 'book'
                })
                .when('/Book/:bookId/ch/:chapterId', {
                  templateUrl: 'chapter.html',
                  controller: 'ChapterCtrl',
                  controllerAs: 'chapter'
                });

              // configure html5 to get links working on jsfiddle
              $locationProvider.html5Mode(true);
          }])
          .controller('MainCtrl', ['$route', '$routeParams', '$location',
            function($route, $routeParams, $location) {
              this.$route = $route;
              this.$location = $location;
              this.$routeParams = $routeParams;
          }])
          .controller('BookCtrl', ['$routeParams', function($routeParams) {
            this.name = "BookCtrl";
            this.params = $routeParams;
          }])
          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {
            this.name = "ChapterCtrl";
            this.params = $routeParams;
          }]);

      </file>

      <file name="protractor.js" type="protractor">
        it('should load and compile correct template', function() {
          element(by.linkText('Moby: Ch1')).click();
          var content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: ChapterCtrl/);
          expect(content).toMatch(/Book Id\: Moby/);
          expect(content).toMatch(/Chapter Id\: 1/);

          element(by.partialLinkText('Scarlet')).click();

          content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: BookCtrl/);
          expect(content).toMatch(/Book Id\: Scarlet/);
        });
      </file>
    </example>
 */
  /**
 * @ngdoc event
 * @name ngView#$viewContentLoaded
 * @eventType emit on the current ngView scope
 * @description
 * Emitted every time the ngView content is reloaded.
 */
  ngViewFactory.$inject = [
    '$route',
    '$anchorScroll',
    '$animate'
  ];
  function ngViewFactory($route, $anchorScroll, $animate) {
    return {
      restrict: 'ECA',
      terminal: true,
      priority: 400,
      transclude: 'element',
      link: function (scope, $element, attr, ctrl, $transclude) {
        var currentScope, currentElement, previousElement, autoScrollExp = attr.autoscroll, onloadExp = attr.onload || '';
        scope.$on('$routeChangeSuccess', update);
        update();
        function cleanupLastView() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement, function () {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        }
        function update() {
          var locals = $route.current && $route.current.locals, template = locals && locals.$template;
          if (angular.isDefined(template)) {
            var newScope = scope.$new();
            var current = $route.current;
            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function (clone) {
                $animate.enter(clone, null, currentElement || $element, function onNgViewEnter() {
                  if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                    $anchorScroll();
                  }
                });
                cleanupLastView();
              });
            currentElement = clone;
            currentScope = current.scope = newScope;
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          } else {
            cleanupLastView();
          }
        }
      }
    };
  }
  // This directive is called during the $transclude call of the first `ngView` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngView
  // is called.
  ngViewFillContentFactory.$inject = [
    '$compile',
    '$controller',
    '$route'
  ];
  function ngViewFillContentFactory($compile, $controller, $route) {
    return {
      restrict: 'ECA',
      priority: -400,
      link: function (scope, $element) {
        var current = $route.current, locals = current.locals;
        $element.html(locals.$template);
        var link = $compile($element.contents());
        if (current.controller) {
          locals.$scope = scope;
          var controller = $controller(current.controller, locals);
          if (current.controllerAs) {
            scope[current.controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }
        link(scope);
      }
    };
  }
}(window, window.angular));
/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngAria
 * @description
 *
 * The `ngAria` module provides support for common
 * [<abbr title="Accessible Rich Internet Applications">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)
 * attributes that convey state or semantic information about the application for users
 * of assistive technologies, such as screen readers.
 *
 * <div doc-module-components="ngAria"></div>
 *
 * ## Usage
 *
 * For ngAria to do its magic, simply include the module as a dependency. The directives supported
 * by ngAria are:
 * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.
 *
 * Below is a more detailed breakdown of the attributes handled by ngAria:
 *
 * | Directive                                   | Supported Attributes                                                                   |
 * |---------------------------------------------|----------------------------------------------------------------------------------------|
 * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required |
 * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |
 * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |
 * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |
 * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event                                                               |
 * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |
 * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |
 *
 * Find out more information about each directive by reading the
 * {@link guide/accessibility ngAria Developer Guide}.
 *
 * ##Example
 * Using ngDisabled with ngAria:
 * ```html
 * <md-checkbox ng-disabled="disabled">
 * ```
 * Becomes:
 * ```html
 * <md-checkbox ng-disabled="disabled" aria-disabled="true">
 * ```
 *
 * ##Disabling Attributes
 * It's possible to disable individual attributes added by ngAria with the
 * {@link ngAria.$ariaProvider#config config} method. For more details, see the
 * {@link guide/accessibility Developer Guide}.
 */
  /* global -ngAriaModule */
  var ngAriaModule = angular.module('ngAria', ['ng']).provider('$aria', $AriaProvider);
  /**
 * @ngdoc provider
 * @name $ariaProvider
 *
 * @description
 *
 * Used for configuring the ARIA attributes injected and managed by ngAria.
 *
 * ```js
 * angular.module('myApp', ['ngAria'], function config($ariaProvider) {
 *   $ariaProvider.config({
 *     ariaValue: true,
 *     tabindex: false
 *   });
 * });
 *```
 *
 * ## Dependencies
 * Requires the {@link ngAria} module to be installed.
 *
 */
  function $AriaProvider() {
    var config = {
        ariaHidden: true,
        ariaChecked: true,
        ariaDisabled: true,
        ariaRequired: true,
        ariaInvalid: true,
        ariaMultiline: true,
        ariaValue: true,
        tabindex: true,
        bindKeypress: true
      };
    /**
   * @ngdoc method
   * @name $ariaProvider#config
   *
   * @param {object} config object to enable/disable specific ARIA attributes
   *
   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags
   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags
   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags
   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags
   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags
   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags
   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags
   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags
   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and
   *    `&lt;li&gt;` elements with ng-click
   *
   * @description
   * Enables/disables various ARIA attributes
   */
    this.config = function (newConfig) {
      config = angular.extend(config, newConfig);
    };
    function watchExpr(attrName, ariaAttr, negate) {
      return function (scope, elem, attr) {
        var ariaCamelName = attr.$normalize(ariaAttr);
        if (config[ariaCamelName] && !attr[ariaCamelName]) {
          scope.$watch(attr[attrName], function (boolVal) {
            if (negate) {
              boolVal = !boolVal;
            }
            elem.attr(ariaAttr, boolVal);
          });
        }
      };
    }
    /**
   * @ngdoc service
   * @name $aria
   *
   * @description
   *
   * The $aria service contains helper methods for applying common
   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.
   *
   * ngAria injects common accessibility attributes that tell assistive technologies when HTML
   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,
   * let's review a code snippet from ngAria itself:
   *
   *```js
   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {
   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
   * }])
   *```
   * Shown above, the ngAria module creates a directive with the same signature as the
   * traditional `ng-disabled` directive. But this ngAria version is dedicated to
   * solely managing accessibility attributes. The internal `$aria` service is used to watch the
   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,
   * `aria-disabled` is injected as an attribute with its value synchronized to the value in
   * `ngDisabled`.
   *
   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do
   * anything to enable this feature. The `aria-disabled` attribute is automatically managed
   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.
   *
   * The full list of directives that interface with ngAria:
   * * **ngModel**
   * * **ngShow**
   * * **ngHide**
   * * **ngClick**
   * * **ngDblclick**
   * * **ngMessages**
   * * **ngDisabled**
   *
   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each
   * directive.
   *
   *
   * ## Dependencies
   * Requires the {@link ngAria} module to be installed.
   */
    this.$get = function () {
      return {
        config: function (key) {
          return config[key];
        },
        $$watchExpr: watchExpr
      };
    };
  }
  ngAriaModule.directive('ngShow', [
    '$aria',
    function ($aria) {
      return $aria.$$watchExpr('ngShow', 'aria-hidden', true);
    }
  ]).directive('ngHide', [
    '$aria',
    function ($aria) {
      return $aria.$$watchExpr('ngHide', 'aria-hidden', false);
    }
  ]).directive('ngModel', [
    '$aria',
    function ($aria) {
      function shouldAttachAttr(attr, normalizedAttr, elem) {
        return $aria.config(normalizedAttr) && !elem.attr(attr);
      }
      function getShape(attr, elem) {
        var type = attr.type, role = attr.role;
        return (type || role) === 'checkbox' || role === 'menuitemcheckbox' ? 'checkbox' : (type || role) === 'radio' || role === 'menuitemradio' ? 'radio' : type === 'range' || role === 'progressbar' || role === 'slider' ? 'range' : (type || role) === 'textbox' || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';
      }
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, elem, attr, ngModel) {
          var shape = getShape(attr, elem);
          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem);
          function ngAriaWatchModelValue() {
            return ngModel.$modelValue;
          }
          function getRadioReaction() {
            if (needsTabIndex) {
              needsTabIndex = false;
              return function ngAriaRadioReaction(newVal) {
                var boolVal = newVal === attr.value;
                elem.attr('aria-checked', boolVal);
                elem.attr('tabindex', 0 - !boolVal);
              };
            } else {
              return function ngAriaRadioReaction(newVal) {
                elem.attr('aria-checked', newVal === attr.value);
              };
            }
          }
          function ngAriaCheckboxReaction(newVal) {
            elem.attr('aria-checked', !!newVal);
          }
          switch (shape) {
          case 'radio':
          case 'checkbox':
            if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {
              scope.$watch(ngAriaWatchModelValue, shape === 'radio' ? getRadioReaction() : ngAriaCheckboxReaction);
            }
            break;
          case 'range':
            if ($aria.config('ariaValue')) {
              if (attr.min && !elem.attr('aria-valuemin')) {
                elem.attr('aria-valuemin', attr.min);
              }
              if (attr.max && !elem.attr('aria-valuemax')) {
                elem.attr('aria-valuemax', attr.max);
              }
              if (!elem.attr('aria-valuenow')) {
                scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {
                  elem.attr('aria-valuenow', newVal);
                });
              }
            }
            break;
          case 'multiline':
            if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {
              elem.attr('aria-multiline', true);
            }
            break;
          }
          if (needsTabIndex) {
            elem.attr('tabindex', 0);
          }
          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {
            scope.$watch(function ngAriaRequiredWatch() {
              return ngModel.$error.required;
            }, function ngAriaRequiredReaction(newVal) {
              elem.attr('aria-required', !!newVal);
            });
          }
          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {
            scope.$watch(function ngAriaInvalidWatch() {
              return ngModel.$invalid;
            }, function ngAriaInvalidReaction(newVal) {
              elem.attr('aria-invalid', !!newVal);
            });
          }
        }
      };
    }
  ]).directive('ngDisabled', [
    '$aria',
    function ($aria) {
      return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
    }
  ]).directive('ngMessages', function () {
    return {
      restrict: 'A',
      require: '?ngMessages',
      link: function (scope, elem, attr, ngMessages) {
        if (!elem.attr('aria-live')) {
          elem.attr('aria-live', 'assertive');
        }
      }
    };
  }).directive('ngClick', [
    '$aria',
    '$parse',
    function ($aria, $parse) {
      return {
        restrict: 'A',
        compile: function (elem, attr) {
          var fn = $parse(attr.ngClick, null, true);
          return function (scope, elem, attr) {
            function isNodeOneOf(elem, nodeTypeArray) {
              if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {
                return true;
              }
            }
            if ($aria.config('tabindex') && !elem.attr('tabindex')) {
              elem.attr('tabindex', 0);
            }
            if ($aria.config('bindKeypress') && !attr.ngKeypress && isNodeOneOf(elem, [
                'DIV',
                'LI'
              ])) {
              elem.on('keypress', function (event) {
                if (event.keyCode === 32 || event.keyCode === 13) {
                  scope.$apply(callback);
                }
                function callback() {
                  fn(scope, { $event: event });
                }
              });
            }
          };
        }
      };
    }
  ]).directive('ngDblclick', [
    '$aria',
    function ($aria) {
      return function (scope, elem, attr) {
        if ($aria.config('tabindex') && !elem.attr('tabindex')) {
          elem.attr('tabindex', 0);
        }
      };
    }
  ]);
}(window, window.angular));
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
angular.module('ngMaterial', [
  'ng',
  'ngAnimate',
  'ngAria',
  'material.core',
  'material.core.theming.palette',
  'material.core.theming',
  'material.components.autocomplete',
  'material.components.backdrop',
  'material.components.bottomSheet',
  'material.components.button',
  'material.components.card',
  'material.components.checkbox',
  'material.components.content',
  'material.components.dialog',
  'material.components.divider',
  'material.components.gridList',
  'material.components.icon',
  'material.components.input',
  'material.components.list',
  'material.components.progressCircular',
  'material.components.progressLinear',
  'material.components.radioButton',
  'material.components.sidenav',
  'material.components.slider',
  'material.components.sticky',
  'material.components.subheader',
  'material.components.swipe',
  'material.components.switch',
  'material.components.tabs',
  'material.components.textField',
  'material.components.toast',
  'material.components.toolbar',
  'material.components.tooltip',
  'material.components.whiteframe'
]);
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * Initialization function that validates environment
 * requirements.
 */
  var iconProvider;
  angular.module('material.core', [
    'material.core.theming',
    'material.components.icon'
  ]).config(MdCoreConfigure).run([
    '$templateCache',
    function ($templateCache) {
      // These process is needed to pre-configure icons used internally
      // with specific components. Note: these are SVGs and not font-icons.
      //
      // NOTE: any SVGs used below that are **also** available in `material-fonts` should
      // be removed from this startup process.
      var svgRegistry = [
          {
            id: 'tabs-arrow',
            url: 'tabs-arrow.svg',
            svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g id="tabs-arrow"><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
          },
          {
            id: 'close',
            url: 'close.svg',
            svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g id="close"><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
          },
          {
            id: 'cancel',
            url: 'cancel.svg',
            svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g id="cancel"><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
          }
        ];
      svgRegistry.forEach(function (asset) {
        iconProvider.icon(asset.id, asset.url);
        $templateCache.put(asset.url, asset.svg);
      });
      // Remove reference
      iconProvider = null;
    }
  ]);
  function MdCoreConfigure($provide, $mdThemingProvider, $mdIconProvider) {
    iconProvider = $mdIconProvider;
    $provide.decorator('$$rAF', [
      '$delegate',
      rAFDecorator
    ]);
    $mdThemingProvider.theme('default').primaryPalette('indigo').accentPalette('pink').warnPalette('red').backgroundPalette('grey');
  }
  MdCoreConfigure.$inject = [
    '$provide',
    '$mdThemingProvider',
    '$mdIconProvider'
  ];
  function rAFDecorator($delegate) {
    /**
   * Use this to throttle events that come in often.
   * The throttled function will always use the *last* invocation before the
   * coming frame.
   *
   * For example, window resize events that fire many times a second:
   * If we set to use an raf-throttled callback on window resize, then
   * our callback will only be fired once per frame, with the last resize
   * event that happened before that frame.
   *
   * @param {function} callback function to debounce
   */
    $delegate.throttle = function (cb) {
      var queueArgs, alreadyQueued, queueCb, context;
      return function debounced() {
        queueArgs = arguments;
        context = this;
        queueCb = cb;
        if (!alreadyQueued) {
          alreadyQueued = true;
          $delegate(function () {
            queueCb.apply(context, queueArgs);
            alreadyQueued = false;
          });
        }
      };
    };
    return $delegate;
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core').factory('$mdConstant', MdConstantFactory);
  function MdConstantFactory($$rAF, $sniffer) {
    var webkit = /webkit/i.test($sniffer.vendorPrefix);
    function vendorProperty(name) {
      return webkit ? 'webkit' + name.charAt(0).toUpperCase() + name.substring(1) : name;
    }
    return {
      KEY_CODE: {
        ENTER: 13,
        ESCAPE: 27,
        SPACE: 32,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        TAB: 9
      },
      CSS: {
        TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),
        ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),
        TRANSFORM: vendorProperty('transform'),
        TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),
        TRANSITION: vendorProperty('transition'),
        TRANSITION_DURATION: vendorProperty('transitionDuration'),
        ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),
        ANIMATION_DURATION: vendorProperty('animationDuration'),
        ANIMATION_NAME: vendorProperty('animationName'),
        ANIMATION_TIMING: vendorProperty('animationTimingFunction'),
        ANIMATION_DIRECTION: vendorProperty('animationDirection')
      },
      MEDIA: {
        'sm': '(max-width: 600px)',
        'gt-sm': '(min-width: 600px)',
        'md': '(min-width: 600px) and (max-width: 960px)',
        'gt-md': '(min-width: 960px)',
        'lg': '(min-width: 960px) and (max-width: 1200px)',
        'gt-lg': '(min-width: 1200px)'
      },
      MEDIA_PRIORITY: [
        'gt-lg',
        'lg',
        'gt-md',
        'md',
        'gt-sm',
        'sm'
      ]
    };
  }
  MdConstantFactory.$inject = [
    '$$rAF',
    '$sniffer'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  angular.module('material.core').config([
    '$provide',
    function ($provide) {
      $provide.decorator('$mdUtil', [
        '$delegate',
        function ($delegate) {
          /**
            * Inject the iterator facade to easily support iteration and accessors
            * @see iterator below
            */
          $delegate.iterator = Iterator;
          return $delegate;
        }
      ]);
    }
  ]);
  /**
   * iterator is a list facade to easily support iteration and accessors
   *
   * @param items Array list which this iterator will enumerate
   * @param reloop Boolean enables iterator to consider the list as an endless reloop
   */
  function Iterator(items, reloop) {
    var trueFn = function () {
      return true;
    };
    if (items && !angular.isArray(items)) {
      items = Array.prototype.slice.call(items);
    }
    reloop = !!reloop;
    var _items = items || [];
    // Published API
    return {
      items: getItems,
      count: count,
      inRange: inRange,
      contains: contains,
      indexOf: indexOf,
      itemAt: itemAt,
      findBy: findBy,
      add: add,
      remove: remove,
      first: first,
      last: last,
      next: angular.bind(null, findSubsequentItem, false),
      previous: angular.bind(null, findSubsequentItem, true),
      hasPrevious: hasPrevious,
      hasNext: hasNext
    };
    /**
     * Publish copy of the enumerable set
     * @returns {Array|*}
     */
    function getItems() {
      return [].concat(_items);
    }
    /**
     * Determine length of the list
     * @returns {Array.length|*|number}
     */
    function count() {
      return _items.length;
    }
    /**
     * Is the index specified valid
     * @param index
     * @returns {Array.length|*|number|boolean}
     */
    function inRange(index) {
      return _items.length && index > -1 && index < _items.length;
    }
    /**
     * Can the iterator proceed to the next item in the list; relative to
     * the specified item.
     *
     * @param item
     * @returns {Array.length|*|number|boolean}
     */
    function hasNext(item) {
      return item ? inRange(indexOf(item) + 1) : false;
    }
    /**
     * Can the iterator proceed to the previous item in the list; relative to
     * the specified item.
     *
     * @param item
     * @returns {Array.length|*|number|boolean}
     */
    function hasPrevious(item) {
      return item ? inRange(indexOf(item) - 1) : false;
    }
    /**
     * Get item at specified index/position
     * @param index
     * @returns {*}
     */
    function itemAt(index) {
      return inRange(index) ? _items[index] : null;
    }
    /**
     * Find all elements matching the key/value pair
     * otherwise return null
     *
     * @param val
     * @param key
     *
     * @return array
     */
    function findBy(key, val) {
      return _items.filter(function (item) {
        return item[key] === val;
      });
    }
    /**
     * Add item to list
     * @param item
     * @param index
     * @returns {*}
     */
    function add(item, index) {
      if (!item)
        return -1;
      if (!angular.isNumber(index)) {
        index = _items.length;
      }
      _items.splice(index, 0, item);
      return indexOf(item);
    }
    /**
     * Remove item from list...
     * @param item
     */
    function remove(item) {
      if (contains(item)) {
        _items.splice(indexOf(item), 1);
      }
    }
    /**
     * Get the zero-based index of the target item
     * @param item
     * @returns {*}
     */
    function indexOf(item) {
      return _items.indexOf(item);
    }
    /**
     * Boolean existence check
     * @param item
     * @returns {boolean}
     */
    function contains(item) {
      return item && indexOf(item) > -1;
    }
    /**
     * Return first item in the list
     * @returns {*}
     */
    function first() {
      return _items.length ? _items[0] : null;
    }
    /**
     * Return last item in the list...
     * @returns {*}
     */
    function last() {
      return _items.length ? _items[_items.length - 1] : null;
    }
    /**
     * Find the next item. If reloop is true and at the end of the list, it will
     * go back to the first item. If given ,the `validate` callback will be used
     * determine whether the next item is valid. If not valid, it will try to find the
     * next item again.
     * @param item
     * @param {optional} validate Validate function
     * @param {optional} limit Recursion limit
     * @returns {*}
     */
    function findSubsequentItem(backwards, item, validate, limit) {
      validate = validate || trueFn;
      var curIndex = indexOf(item);
      if (!inRange(curIndex)) {
        return null;
      }
      var nextIndex = curIndex + (backwards ? -1 : 1);
      var foundItem = null;
      if (inRange(nextIndex)) {
        foundItem = _items[nextIndex];
      } else if (reloop) {
        foundItem = backwards ? last() : first();
        nextIndex = indexOf(foundItem);
      }
      if (foundItem === null || nextIndex === limit) {
        return null;
      }
      if (angular.isUndefined(limit)) {
        limit = nextIndex;
      }
      return validate(foundItem) ? foundItem : findSubsequentItem(backwards, foundItem, validate, limit);
    }
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
angular.module('material.core').factory('$mdMedia', mdMediaFactory);
/**
 * Exposes a function on the '$mdMedia' service which will return true or false,
 * whether the given media query matches. Re-evaluates on resize. Allows presets
 * for 'sm', 'md', 'lg'.
 *
 * @example $mdMedia('sm') == true if device-width <= sm
 * @example $mdMedia('(min-width: 1200px)') == true if device-width >= 1200px
 * @example $mdMedia('max-width: 300px') == true if device-width <= 300px (sanitizes input, adding parens)
 */
function mdMediaFactory($mdConstant, $rootScope, $window) {
  var queries = {};
  var mqls = {};
  var results = {};
  var normalizeCache = {};
  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;
  $mdMedia.getQuery = getQuery;
  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;
  return $mdMedia;
  function $mdMedia(query) {
    var validated = queries[query];
    if (angular.isUndefined(validated)) {
      validated = queries[query] = validate(query);
    }
    var result = results[validated];
    if (angular.isUndefined(result)) {
      result = add(validated);
    }
    return result;
  }
  function validate(query) {
    return $mdConstant.MEDIA[query] || (query.charAt(0) !== '(' ? '(' + query + ')' : query);
  }
  function add(query) {
    var result = mqls[query] = $window.matchMedia(query);
    result.addListener(onQueryChange);
    return results[result.media] = !!result.matches;
  }
  function onQueryChange(query) {
    $rootScope.$evalAsync(function () {
      results[query.media] = !!query.matches;
    });
  }
  function getQuery(name) {
    return mqls[name];
  }
  function getResponsiveAttribute(attrs, attrName) {
    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {
      var mediaName = $mdConstant.MEDIA_PRIORITY[i];
      if (!mqls[queries[mediaName]].matches) {
        continue;
      }
      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);
      if (attrs[normalizedName]) {
        return attrs[normalizedName];
      }
    }
    // fallback on unprefixed
    return attrs[getNormalizedName(attrs, attrName)];
  }
  function watchResponsiveAttributes(attrNames, attrs, watchFn) {
    var unwatchFns = [];
    attrNames.forEach(function (attrName) {
      var normalizedName = getNormalizedName(attrs, attrName);
      if (attrs[normalizedName]) {
        unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));
      }
      for (var mediaName in $mdConstant.MEDIA) {
        var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);
        if (!attrs[normalizedName]) {
          return;
        }
        unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));
      }
    });
    return function unwatch() {
      unwatchFns.forEach(function (fn) {
        fn();
      });
    };
  }
  // Improves performance dramatically
  function getNormalizedName(attrs, attrName) {
    return normalizeCache[attrName] || (normalizeCache[attrName] = attrs.$normalize(attrName));
  }
}
mdMediaFactory.$inject = [
  '$mdConstant',
  '$rootScope',
  '$window'
];
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /*
 * This var has to be outside the angular factory, otherwise when
 * there are multiple material apps on the same page, each app
 * will create its own instance of this array and the app's IDs
 * will not be unique.
 */
  var nextUniqueId = [
      '0',
      '0',
      '0'
    ];
  angular.module('material.core').factory('$mdUtil', [
    '$cacheFactory',
    '$document',
    '$timeout',
    '$q',
    '$mdConstant',
    function ($cacheFactory, $document, $timeout, $q, $mdConstant) {
      var Util;
      function getNode(el) {
        return el[0] || el;
      }
      return Util = {
        now: window.performance ? angular.bind(window.performance, window.performance.now) : Date.now,
        clientRect: function (element, offsetParent, isOffsetRect) {
          var node = getNode(element);
          offsetParent = getNode(offsetParent || node.offsetParent || document.body);
          var nodeRect = node.getBoundingClientRect();
          // The user can ask for an offsetRect: a rect relative to the offsetParent,
          // or a clientRect: a rect relative to the page
          var offsetRect = isOffsetRect ? offsetParent.getBoundingClientRect() : {
              left: 0,
              top: 0,
              width: 0,
              height: 0
            };
          return {
            left: nodeRect.left - offsetRect.left + offsetParent.scrollLeft,
            top: nodeRect.top - offsetRect.top + offsetParent.scrollTop,
            width: nodeRect.width,
            height: nodeRect.height
          };
        },
        offsetRect: function (element, offsetParent) {
          return Util.clientRect(element, offsetParent, true);
        },
        forceFocus: function (element) {
          var node = element[0] || element;
          document.addEventListener('click', function focusOnClick(ev) {
            if (ev.target === node && ev.$focus) {
              node.focus();
              ev.stopImmediatePropagation();
              ev.preventDefault();
              node.removeEventListener('click', focusOnClick);
            }
          }, true);
          var newEvent = document.createEvent('MouseEvents');
          newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0, false, false, false, false, 0, null);
          newEvent.$material = true;
          newEvent.$focus = true;
          node.dispatchEvent(newEvent);
        },
        transitionEndPromise: function (element) {
          var deferred = $q.defer();
          element.on($mdConstant.CSS.TRANSITIONEND, finished);
          function finished(ev) {
            // Make sure this transitionend didn't bubble up from a child
            if (ev.target === element[0]) {
              element.off($mdConstant.CSS.TRANSITIONEND, finished);
              deferred.resolve();
            }
          }
          return deferred.promise;
        },
        fakeNgModel: function () {
          return {
            $fake: true,
            $setTouched: angular.noop,
            $setViewValue: function (value) {
              this.$viewValue = value;
              this.$render(value);
              this.$viewChangeListeners.forEach(function (cb) {
                cb();
              });
            },
            $isEmpty: function (value) {
              return ('' + value).length === 0;
            },
            $parsers: [],
            $formatters: [],
            $viewChangeListeners: [],
            $render: angular.noop
          };
        },
        debounce: function (func, wait, scope, invokeApply) {
          var timer;
          return function debounced() {
            var context = scope, args = Array.prototype.slice.call(arguments);
            $timeout.cancel(timer);
            timer = $timeout(function () {
              timer = undefined;
              func.apply(context, args);
            }, wait || 10, invokeApply);
          };
        },
        throttle: function throttle(func, delay) {
          var recent;
          return function throttled() {
            var context = this;
            var args = arguments;
            var now = Util.now();
            if (!recent || now - recent > delay) {
              func.apply(context, args);
              recent = now;
            }
          };
        },
        time: function time(cb) {
          var start = Util.now();
          cb();
          return Util.now() - start;
        },
        nextUid: function () {
          var index = nextUniqueId.length;
          var digit;
          while (index) {
            index--;
            digit = nextUniqueId[index].charCodeAt(0);
            if (digit == 57) {
              nextUniqueId[index] = 'A';
              return nextUniqueId.join('');
            }
            if (digit == 90) {
              nextUniqueId[index] = '0';
            } else {
              nextUniqueId[index] = String.fromCharCode(digit + 1);
              return nextUniqueId.join('');
            }
          }
          nextUniqueId.unshift('0');
          return nextUniqueId.join('');
        },
        disconnectScope: function disconnectScope(scope) {
          if (!scope)
            return;
          // we can't destroy the root scope or a scope that has been already destroyed
          if (scope.$root === scope)
            return;
          if (scope.$$destroyed)
            return;
          var parent = scope.$parent;
          scope.$$disconnected = true;
          // See Scope.$destroy
          if (parent.$$childHead === scope)
            parent.$$childHead = scope.$$nextSibling;
          if (parent.$$childTail === scope)
            parent.$$childTail = scope.$$prevSibling;
          if (scope.$$prevSibling)
            scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;
          if (scope.$$nextSibling)
            scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;
          scope.$$nextSibling = scope.$$prevSibling = null;
        },
        reconnectScope: function reconnectScope(scope) {
          if (!scope)
            return;
          // we can't disconnect the root node or scope already disconnected
          if (scope.$root === scope)
            return;
          if (!scope.$$disconnected)
            return;
          var child = scope;
          var parent = child.$parent;
          child.$$disconnected = false;
          // See Scope.$new for this logic...
          child.$$prevSibling = parent.$$childTail;
          if (parent.$$childHead) {
            parent.$$childTail.$$nextSibling = child;
            parent.$$childTail = child;
          } else {
            parent.$$childHead = parent.$$childTail = child;
          }
        },
        getClosest: function getClosest(el, tagName) {
          tagName = tagName.toUpperCase();
          do {
            if (el.nodeName === tagName) {
              return el;
            }
          } while (el = el.parentNode);
          return null;
        }
      };
    }
  ]);
  /*
 * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.
 *
 * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.
 *
 * TODO(ajoslin): This should be added in a better place later.
 */
  angular.element.prototype.focus = angular.element.prototype.focus || function () {
    if (this.length) {
      this[0].focus();
    }
    return this;
  };
  angular.element.prototype.blur = angular.element.prototype.blur || function () {
    if (this.length) {
      this[0].blur();
    }
    return this;
  };
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core').service('$mdAria', AriaService);
  function AriaService($$rAF, $log, $window) {
    return {
      expect: expect,
      expectAsync: expectAsync,
      expectWithText: expectWithText
    };
    /**
   * Check if expected attribute has been specified on the target element or child
   * @param element
   * @param attrName
   * @param {optional} defaultValue What to set the attr to if no value is found
   */
    function expect(element, attrName, defaultValue) {
      var node = element[0];
      if (!node.hasAttribute(attrName) && !childHasAttribute(node, attrName)) {
        defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';
        if (defaultValue.length) {
          element.attr(attrName, defaultValue);
        } else {
          $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);
        }
      }
    }
    function expectAsync(element, attrName, defaultValueGetter) {
      // Problem: when retrieving the element's contents synchronously to find the label,
      // the text may not be defined yet in the case of a binding.
      // There is a higher chance that a binding will be defined if we wait one frame.
      $$rAF(function () {
        expect(element, attrName, defaultValueGetter());
      });
    }
    function expectWithText(element, attrName) {
      expectAsync(element, attrName, function () {
        return getText(element);
      });
    }
    function getText(element) {
      return element.text().trim();
    }
    function childHasAttribute(node, attrName) {
      var hasChildren = node.hasChildNodes(), hasAttr = false;
      function isHidden(el) {
        var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);
        return style.display === 'none';
      }
      if (hasChildren) {
        var children = node.childNodes;
        for (var i = 0; i < children.length; i++) {
          var child = children[i];
          if (child.nodeType === 1 && child.hasAttribute(attrName)) {
            if (!isHidden(child)) {
              hasAttr = true;
            }
          }
        }
      }
      return hasAttr;
    }
  }
  AriaService.$inject = [
    '$$rAF',
    '$log',
    '$window'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core').service('$mdCompiler', mdCompilerService);
  function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {
    /* jshint validthis: true */
    /*
   * @ngdoc service
   * @name $mdCompiler
   * @module material.core
   * @description
   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer
   * to easily compile an element with a templateUrl, controller, and locals.
   *
   * @usage
   * <hljs lang="js">
   * $mdCompiler.compile({
   *   templateUrl: 'modal.html',
   *   controller: 'ModalCtrl',
   *   locals: {
   *     modal: myModalInstance;
   *   }
   * }).then(function(compileData) {
   *   compileData.element; // modal.html's template in an element
   *   compileData.link(myScope); //attach controller & scope to element
   * });
   * </hljs>
   */
    /*
    * @ngdoc method
    * @name $mdCompiler#compile
    * @description A helper to compile an HTML template/templateUrl with a given controller,
    * locals, and scope.
    * @param {object} options An options object, with the following properties:
    *
    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with
    *      newly created scope or the name of a registered controller if passed as a string.
    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be
    *      published to scope under the `controllerAs` name.
    *    - `template` - `{string=}` An html template as a string.
    *    - `templateUrl` - `{string=}` A path to an html template.
    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after
    *      it is loaded. It will be given the template string as a parameter, and should
    *      return a a new string representing the transformed template.
    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
    *      be injected into the controller. If any of these dependencies are promises, the compiler
    *      will wait for them all to be resolved, or if one is rejected before the controller is
    *      instantiated `compile()` will fail..
    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.
    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.
    *        Otherwise if function, then it is injected and the return value is treated as the
    *        dependency. If the result is a promise, it is resolved before its value is 
    *        injected into the controller.
    *
    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.
    * `compileData` has the following properties: 
    *
    *   - `element` - `{element}`: an uncompiled element matching the provided template.
    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile
    *     the element and instantiate the provided controller (if given).
    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is
    *     called. If `bindToController` is true, they will be coppied to the ctrl instead
    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
    */
    this.compile = function (options) {
      var templateUrl = options.templateUrl;
      var template = options.template || '';
      var controller = options.controller;
      var controllerAs = options.controllerAs;
      var resolve = options.resolve || {};
      var locals = options.locals || {};
      var transformTemplate = options.transformTemplate || angular.identity;
      var bindToController = options.bindToController;
      // Take resolve values and invoke them.  
      // Resolves can either be a string (value: 'MyRegisteredAngularConst'),
      // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})
      angular.forEach(resolve, function (value, key) {
        if (angular.isString(value)) {
          resolve[key] = $injector.get(value);
        } else {
          resolve[key] = $injector.invoke(value);
        }
      });
      //Add the locals, which are just straight values to inject
      //eg locals: { three: 3 }, will inject three into the controller
      angular.extend(resolve, locals);
      if (templateUrl) {
        resolve.$template = $http.get(templateUrl, { cache: $templateCache }).then(function (response) {
          return response.data;
        });
      } else {
        resolve.$template = $q.when(template);
      }
      // Wait for all the resolves to finish if they are promises
      return $q.all(resolve).then(function (locals) {
        var template = transformTemplate(locals.$template);
        var element = angular.element('<div>').html(template.trim()).contents();
        var linkFn = $compile(element);
        //Return a linking function that can be used later when the element is ready
        return {
          locals: locals,
          element: element,
          link: function link(scope) {
            locals.$scope = scope;
            //Instantiate controller if it exists, because we have scope
            if (controller) {
              var ctrl = $controller(controller, locals);
              if (bindToController) {
                angular.extend(ctrl, locals);
              }
              //See angular-route source for this logic
              element.data('$ngControllerController', ctrl);
              element.children().data('$ngControllerController', ctrl);
              if (controllerAs) {
                scope[controllerAs] = ctrl;
              }
            }
            return linkFn(scope);
          }
        };
      });
    };
  }
  mdCompilerService.$inject = [
    '$q',
    '$http',
    '$injector',
    '$compile',
    '$controller',
    '$templateCache'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /*
 * TODO: Add support for multiple fingers on the `pointer` object (enables pinch gesture)
 */
  var START_EVENTS = 'mousedown touchstart pointerdown';
  var MOVE_EVENTS = 'mousemove touchmove pointermove';
  var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';
  var HANDLERS;
  document.contains || (document.contains = function (node) {
    return document.body.contains(node);
  });
  // TODO add windows phone to this
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
  var isIos = userAgent.match(/iPad/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPod/i);
  var isAndroid = userAgent.match(/Android/i);
  var shouldHijackClicks = isIos || isAndroid;
  if (shouldHijackClicks) {
    document.addEventListener('click', function (ev) {
      // Space/enter on a button, and submit events, can send clicks
      var isKeyClick = ev.clientX === 0 && ev.clientY === 0;
      if (isKeyClick || ev.$material)
        return;
      // Prevent clicks unless they're sent by material
      ev.preventDefault();
      ev.stopPropagation();
    }, true);
  }
  angular.element(document).on(START_EVENTS, gestureStart).on(MOVE_EVENTS, gestureMove).on(END_EVENTS, gestureEnd).on('$$mdGestureReset', function () {
    lastPointer = pointer = null;
  });
  // The state of the current and previous 'pointer' (user's hand)
  var pointer, lastPointer;
  function runHandlers(handlerEvent, event) {
    var handler;
    for (var handlerName in HANDLERS) {
      handler = HANDLERS[handlerName];
      if (handlerEvent === 'start') {
        // Run cancel to reset any handlers' state
        handler.cancel();
      }
      handler[handlerEvent](event, pointer);
    }
  }
  function gestureStart(ev) {
    // If we're already touched down, abort
    if (pointer)
      return;
    var now = +Date.now();
    // iOS & old android bug: after a touch event, a click event is sent 350 ms later.
    // If <400ms have passed, don't allow an event of a different type than the previous event
    if (lastPointer && !typesMatch(ev, lastPointer) && now - lastPointer.endTime < 1500) {
      return;
    }
    pointer = makeStartPointer(ev);
    runHandlers('start', ev);
  }
  function gestureMove(ev) {
    if (!pointer || !typesMatch(ev, pointer))
      return;
    updatePointerState(ev, pointer);
    runHandlers('move', ev);
  }
  function gestureEnd(ev) {
    if (!pointer || !typesMatch(ev, pointer))
      return;
    updatePointerState(ev, pointer);
    pointer.endTime = +Date.now();
    runHandlers('end', ev);
    lastPointer = pointer;
    pointer = null;
  }
  /******** Helpers *********/
  function typesMatch(ev, pointer) {
    return ev && pointer && ev.type.charAt(0) === pointer.type;
  }
  function getEventPoint(ev) {
    ev = ev.originalEvent || ev;
    // support jQuery events
    return ev.touches && ev.touches[0] || ev.changedTouches && ev.changedTouches[0] || ev;
  }
  function updatePointerState(ev, pointer) {
    var point = getEventPoint(ev);
    var x = pointer.x = point.pageX;
    var y = pointer.y = point.pageY;
    pointer.distanceX = x - pointer.startX;
    pointer.distanceY = y - pointer.startY;
    pointer.distance = Math.sqrt(pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY);
    pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';
    pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';
    pointer.duration = +Date.now() - pointer.startTime;
    pointer.velocityX = pointer.distanceX / pointer.duration;
    pointer.velocityY = pointer.distanceY / pointer.duration;
  }
  function makeStartPointer(ev) {
    var point = getEventPoint(ev);
    var startPointer = {
        startTime: +Date.now(),
        target: ev.target,
        type: ev.type.charAt(0)
      };
    startPointer.startX = startPointer.x = point.pageX;
    startPointer.startY = startPointer.y = point.pageY;
    return startPointer;
  }
  angular.module('material.core').run([
    '$mdGesture',
    function ($mdGesture) {
    }
  ]).factory('$mdGesture', [
    '$$MdGestureHandler',
    '$$rAF',
    '$timeout',
    function ($$MdGestureHandler, $$rAF, $timeout) {
      HANDLERS = {};
      if (shouldHijackClicks) {
        addHandler('click', {
          options: { maxDistance: 6 },
          onEnd: function (ev, pointer) {
            if (pointer.distance < this.state.options.maxDistance) {
              this.dispatchEvent(ev, 'click');
            }
          }
        });
      }
      addHandler('press', {
        onStart: function (ev, pointer) {
          this.dispatchEvent(ev, '$md.pressdown');
        },
        onEnd: function (ev, pointer) {
          this.dispatchEvent(ev, '$md.pressup');
        }
      });
      addHandler('hold', {
        options: {
          maxDistance: 6,
          delay: 500
        },
        onCancel: function () {
          $timeout.cancel(this.state.timeout);
        },
        onStart: function (ev, pointer) {
          // For hold, require a parent to be registered with $mdGesture.register()
          // Because we prevent scroll events, this is necessary.
          if (!this.state.registeredParent)
            return this.cancel();
          this.state.pos = {
            x: pointer.x,
            y: pointer.y
          };
          this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {
            this.dispatchEvent(ev, '$md.hold');
            this.cancel();  //we're done!
          }), this.state.options.delay, false);
        },
        onMove: function (ev, pointer) {
          // Don't scroll while waiting for hold
          ev.preventDefault();
          var dx = this.state.pos.x - pointer.x;
          var dy = this.state.pos.y - pointer.y;
          if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {
            this.cancel();
          }
        },
        onEnd: function (ev, pointer) {
          this.onCancel();
        }
      });
      addHandler('drag', {
        options: {
          minDistance: 6,
          horizontal: true
        },
        onStart: function (ev) {
          // For drag, require a parent to be registered with $mdGesture.register()
          if (!this.state.registeredParent)
            this.cancel();
        },
        onMove: function (ev, pointer) {
          var shouldStartDrag, shouldCancel;
          // Don't allow touch events to scroll while we're dragging or
          // deciding if this touchmove is a proper drag
          ev.preventDefault();
          if (!this.state.dragPointer) {
            if (this.state.options.horizontal) {
              shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;
              shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * 1.5;
            } else {
              shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;
              shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * 1.5;
            }
            if (shouldStartDrag) {
              // Create a new pointer, starting at this point where the drag started.
              this.state.dragPointer = makeStartPointer(ev);
              updatePointerState(ev, this.state.dragPointer);
              this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);
            } else if (shouldCancel) {
              this.cancel();
            }
          } else {
            this.dispatchDragMove(ev);
          }
        },
        dispatchDragMove: $$rAF.throttle(function (ev) {
          // Make sure the drag didn't stop while waiting for the next frame
          if (this.state.isRunning) {
            updatePointerState(ev, this.state.dragPointer);
            this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);
          }
        }),
        onEnd: function (ev, pointer) {
          if (this.state.dragPointer) {
            updatePointerState(ev, this.state.dragPointer);
            this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);
          }
        }
      });
      addHandler('swipe', {
        options: {
          minVelocity: 0.65,
          minDistance: 10
        },
        onEnd: function (ev, pointer) {
          if (Math.abs(pointer.velocityX) > this.state.options.minVelocity && Math.abs(pointer.distanceX) > this.state.options.minDistance) {
            var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';
            this.dispatchEvent(ev, eventType);
          }
        }
      });
      var self;
      return self = {
        handler: addHandler,
        register: register
      };
      function addHandler(name, definition) {
        var handler = new $$MdGestureHandler(name);
        angular.extend(handler, definition);
        HANDLERS[name] = handler;
        return self;
      }
      function register(element, handlerName, options) {
        var handler = HANDLERS[handlerName.replace(/^\$md./, '')];
        if (!handler) {
          throw new Error('Failed to register element with handler ' + handlerName + '. ' + 'Available handlers: ' + Object.keys(HANDLERS).join(', '));
        }
        return handler.registerElement(element, options);
      }
    }
  ]).factory('$$MdGestureHandler', [
    '$$rAF',
    function ($$rAF) {
      function GestureHandler(name) {
        this.name = name;
        this.state = {};
      }
      GestureHandler.prototype = {
        onStart: angular.noop,
        onMove: angular.noop,
        onEnd: angular.noop,
        onCancel: angular.noop,
        options: {},
        dispatchEvent: typeof window.jQuery !== 'undefined' && angular.element === window.jQuery ? jQueryDispatchEvent : nativeDispatchEvent,
        start: function (ev, pointer) {
          if (this.state.isRunning)
            return;
          var parentTarget = this.getNearestParent(ev.target);
          var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};
          this.state = {
            isRunning: true,
            options: angular.extend({}, this.options, parentTargetOptions),
            registeredParent: parentTarget
          };
          this.onStart(ev, pointer);
        },
        move: function (ev, pointer) {
          if (!this.state.isRunning)
            return;
          this.onMove(ev, pointer);
        },
        end: function (ev, pointer) {
          if (!this.state.isRunning)
            return;
          this.onEnd(ev, pointer);
          this.state.isRunning = false;
        },
        cancel: function (ev, pointer) {
          this.onCancel(ev, pointer);
          this.state = {};
        },
        getNearestParent: function (node) {
          var current = node;
          while (current) {
            if ((current.$mdGesture || {})[this.name]) {
              return current;
            }
            current = current.parentNode;
          }
        },
        registerElement: function (element, options) {
          var self = this;
          element[0].$mdGesture = element[0].$mdGesture || {};
          element[0].$mdGesture[this.name] = options || {};
          element.on('$destroy', onDestroy);
          return onDestroy;
          function onDestroy() {
            delete element[0].$mdGesture[self.name];
            element.off('$destroy', onDestroy);
          }
        }
      };
      function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {
        eventPointer = eventPointer || pointer;
        var eventObj = new angular.element.Event(eventType);
        eventObj.$material = true;
        eventObj.pointer = eventPointer;
        eventObj.srcEvent = srcEvent;
        angular.extend(eventObj, {
          clientX: eventPointer.x,
          clientY: eventPointer.y,
          screenX: eventPointer.x,
          screenY: eventPointer.y,
          pageX: eventPointer.x,
          pageY: eventPointer.y,
          ctrlKey: srcEvent.ctrlKey,
          altKey: srcEvent.altKey,
          shiftKey: srcEvent.shiftKey,
          metaKey: srcEvent.metaKey
        });
        angular.element(eventPointer.target).trigger(eventObj);
      }
      /*
   * NOTE: nativeDispatchEvent is very performance sensitive.
   */
      function nativeDispatchEvent(srcEvent, eventType, eventPointer) {
        eventPointer = eventPointer || pointer;
        var eventObj;
        if (eventType === 'click') {
          eventObj = document.createEvent('MouseEvents');
          eventObj.initMouseEvent('click', true, true, window, srcEvent.detail, eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y, srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey, srcEvent.button, srcEvent.relatedTarget || null);
        } else {
          eventObj = document.createEvent('CustomEvent');
          eventObj.initCustomEvent(eventType, true, true, {});
        }
        eventObj.$material = true;
        eventObj.pointer = eventPointer;
        eventObj.srcEvent = srcEvent;
        eventPointer.target.dispatchEvent(eventObj);
      }
      return GestureHandler;
    }
  ]);
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core').provider('$$interimElement', InterimElementProvider);
  /*
 * @ngdoc service
 * @name $$interimElement
 * @module material.core
 *
 * @description
 *
 * Factory that contructs `$$interimElement.$service` services.
 * Used internally in material design for elements that appear on screen temporarily.
 * The service provides a promise-like API for interacting with the temporary
 * elements.
 *
 * ```js
 * app.service('$mdToast', function($$interimElement) {
 *   var $mdToast = $$interimElement(toastDefaultOptions);
 *   return $mdToast;
 * });
 * ```
 * @param {object=} defaultOptions Options used by default for the `show` method on the service.
 *
 * @returns {$$interimElement.$service}
 *
 */
  function InterimElementProvider() {
    createInterimElementProvider.$get = InterimElementFactory;
    InterimElementFactory.$inject = [
      '$document',
      '$q',
      '$rootScope',
      '$timeout',
      '$rootElement',
      '$animate',
      '$interpolate',
      '$mdCompiler',
      '$mdTheming'
    ];
    return createInterimElementProvider;
    /**
   * Returns a new provider which allows configuration of a new interimElement
   * service. Allows configuration of default options & methods for options,
   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)
   */
    function createInterimElementProvider(interimFactoryName) {
      var EXPOSED_METHODS = [
          'onHide',
          'onShow',
          'onRemove'
        ];
      var customMethods = {};
      var providerConfig = { presets: {} };
      var provider = {
          setDefaults: setDefaults,
          addPreset: addPreset,
          addMethod: addMethod,
          $get: factory
        };
      /**
     * all interim elements will come with the 'build' preset
     */
      provider.addPreset('build', {
        methods: [
          'controller',
          'controllerAs',
          'resolve',
          'template',
          'templateUrl',
          'themable',
          'transformTemplate',
          'parent'
        ]
      });
      factory.$inject = [
        '$$interimElement',
        '$animate',
        '$injector'
      ];
      return provider;
      /**
     * Save the configured defaults to be used when the factory is instantiated
     */
      function setDefaults(definition) {
        providerConfig.optionsFactory = definition.options;
        providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);
        return provider;
      }
      /**
     * Add a method to the factory that isn't specific to any interim element operations
     */
      function addMethod(name, fn) {
        customMethods[name] = fn;
        return provider;
      }
      /**
     * Save the configured preset to be used when the factory is instantiated
     */
      function addPreset(name, definition) {
        definition = definition || {};
        definition.methods = definition.methods || [];
        definition.options = definition.options || function () {
          return {};
        };
        if (/^cancel|hide|show$/.test(name)) {
          throw new Error('Preset \'' + name + '\' in ' + interimFactoryName + ' is reserved!');
        }
        if (definition.methods.indexOf('_options') > -1) {
          throw new Error('Method \'_options\' in ' + interimFactoryName + ' is reserved!');
        }
        providerConfig.presets[name] = {
          methods: definition.methods.concat(EXPOSED_METHODS),
          optionsFactory: definition.options,
          argOption: definition.argOption
        };
        return provider;
      }
      /**
     * Create a factory that has the given methods & defaults implementing interimElement
     */
      /* @ngInject */
      function factory($$interimElement, $animate, $injector) {
        var defaultMethods;
        var defaultOptions;
        var interimElementService = $$interimElement();
        /*
       * publicService is what the developer will be using.
       * It has methods hide(), cancel(), show(), build(), and any other
       * presets which were set during the config phase.
       */
        var publicService = {
            hide: interimElementService.hide,
            cancel: interimElementService.cancel,
            show: showInterimElement
          };
        defaultMethods = providerConfig.methods || [];
        // This must be invoked after the publicService is initialized
        defaultOptions = invokeFactory(providerConfig.optionsFactory, {});
        // Copy over the simple custom methods
        angular.forEach(customMethods, function (fn, name) {
          publicService[name] = fn;
        });
        angular.forEach(providerConfig.presets, function (definition, name) {
          var presetDefaults = invokeFactory(definition.optionsFactory, {});
          var presetMethods = (definition.methods || []).concat(defaultMethods);
          // Every interimElement built with a preset has a field called `$type`,
          // which matches the name of the preset.
          // Eg in preset 'confirm', options.$type === 'confirm'
          angular.extend(presetDefaults, { $type: name });
          // This creates a preset class which has setter methods for every
          // method given in the `.addPreset()` function, as well as every
          // method given in the `.setDefaults()` function.
          //
          // @example
          // .setDefaults({
          //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],
          //   options: dialogDefaultOptions
          // })
          // .addPreset('alert', {
          //   methods: ['title', 'ok'],
          //   options: alertDialogOptions
          // })
          //
          // Set values will be passed to the options when interimElemnt.show() is called.
          function Preset(opts) {
            this._options = angular.extend({}, presetDefaults, opts);
          }
          angular.forEach(presetMethods, function (name) {
            Preset.prototype[name] = function (value) {
              this._options[name] = value;
              return this;
            };
          });
          // Create shortcut method for one-linear methods
          if (definition.argOption) {
            var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);
            publicService[methodName] = function (arg) {
              var config = publicService[name](arg);
              return publicService.show(config);
            };
          }
          // eg $mdDialog.alert() will return a new alert preset
          publicService[name] = function (arg) {
            // If argOption is supplied, eg `argOption: 'content'`, then we assume
            // if the argument is not an options object then it is the `argOption` option.
            //
            // @example `$mdToast.simple('hello')` // sets options.content to hello
            //                                     // because argOption === 'content'
            if (arguments.length && definition.argOption && !angular.isObject(arg) && !angular.isArray(arg)) {
              return new Preset()[definition.argOption](arg);
            } else {
              return new Preset(arg);
            }
          };
        });
        return publicService;
        function showInterimElement(opts) {
          // opts is either a preset which stores its options on an _options field,
          // or just an object made up of options
          if (opts && opts._options)
            opts = opts._options;
          return interimElementService.show(angular.extend({}, defaultOptions, opts));
        }
        /**
       * Helper to call $injector.invoke with a local of the factory name for
       * this provider.
       * If an $mdDialog is providing options for a dialog and tries to inject
       * $mdDialog, a circular dependency error will happen.
       * We get around that by manually injecting $mdDialog as a local.
       */
        function invokeFactory(factory, defaultVal) {
          var locals = {};
          locals[interimFactoryName] = publicService;
          return $injector.invoke(factory || function () {
            return defaultVal;
          }, {}, locals);
        }
      }
    }
    /* @ngInject */
    function InterimElementFactory($document, $q, $rootScope, $timeout, $rootElement, $animate, $interpolate, $mdCompiler, $mdTheming) {
      var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), usesStandardSymbols = startSymbol === '{{' && endSymbol === '}}', processTemplate = usesStandardSymbols ? angular.identity : replaceInterpolationSymbols;
      return function createInterimElementService() {
        /*
       * @ngdoc service
       * @name $$interimElement.$service
       *
       * @description
       * A service used to control inserting and removing an element into the DOM.
       *
       */
        var stack = [];
        var service;
        return service = {
          show: show,
          hide: hide,
          cancel: cancel
        };
        /*
       * @ngdoc method
       * @name $$interimElement.$service#show
       * @kind function
       *
       * @description
       * Adds the `$interimElement` to the DOM and returns a promise that will be resolved or rejected
       * with hide or cancel, respectively.
       *
       * @param {*} options is hashMap of settings
       * @returns a Promise
       *
       */
        function show(options) {
          if (stack.length) {
            return service.cancel().then(function () {
              return show(options);
            });
          } else {
            var interimElement = new InterimElement(options);
            stack.push(interimElement);
            return interimElement.show().then(function () {
              return interimElement.deferred.promise;
            });
          }
        }
        /*
       * @ngdoc method
       * @name $$interimElement.$service#hide
       * @kind function
       *
       * @description
       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`
       *
       * @param {*} resolveParam Data to resolve the promise with
       * @returns a Promise that will be resolved after the element has been removed.
       *
       */
        function hide(response) {
          var interimElement = stack.shift();
          return interimElement && interimElement.remove().then(function () {
            interimElement.deferred.resolve(response);
          });
        }
        /*
       * @ngdoc method
       * @name $$interimElement.$service#cancel
       * @kind function
       *
       * @description
       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`
       *
       * @param {*} reason Data to reject the promise with
       * @returns Promise that will be resolved after the element has been removed.
       *
       */
        function cancel(reason) {
          var interimElement = stack.shift();
          return $q.when(interimElement && interimElement.remove().then(function () {
            interimElement.deferred.reject(reason);
          }));
        }
        /*
       * Internal Interim Element Object
       * Used internally to manage the DOM element and related data
       */
        function InterimElement(options) {
          var self;
          var hideTimeout, element, showDone, removeDone;
          options = options || {};
          options = angular.extend({
            preserveScope: false,
            scope: options.scope || $rootScope.$new(options.isolateScope),
            onShow: function (scope, element, options) {
              return $animate.enter(element, options.parent);
            },
            onRemove: function (scope, element, options) {
              // Element could be undefined if a new element is shown before
              // the old one finishes compiling.
              return element && $animate.leave(element) || $q.when();
            }
          }, options);
          if (options.template) {
            options.template = processTemplate(options.template);
          }
          return self = {
            options: options,
            deferred: $q.defer(),
            show: function () {
              return showDone = $mdCompiler.compile(options).then(function (compileData) {
                angular.extend(compileData.locals, self.options);
                element = compileData.link(options.scope);
                // Search for parent at insertion time, if not specified
                if (angular.isFunction(options.parent)) {
                  options.parent = options.parent(options.scope, element, options);
                } else if (angular.isString(options.parent)) {
                  options.parent = angular.element($document[0].querySelector(options.parent));
                }
                // If parent querySelector/getter function fails, or it's just null,
                // find a default.
                if (!(options.parent || {}).length) {
                  options.parent = $rootElement.find('body');
                  if (!options.parent.length)
                    options.parent = $rootElement;
                }
                if (options.themable)
                  $mdTheming(element);
                var ret = options.onShow(options.scope, element, options);
                return $q.when(ret).then(function () {
                  // Issue onComplete callback when the `show()` finishes
                  (options.onComplete || angular.noop)(options.scope, element, options);
                  startHideTimeout();
                });
                function startHideTimeout() {
                  if (options.hideDelay) {
                    hideTimeout = $timeout(service.cancel, options.hideDelay);
                  }
                }
              }, function (reason) {
                showDone = true;
                self.deferred.reject(reason);
              });
            },
            cancelTimeout: function () {
              if (hideTimeout) {
                $timeout.cancel(hideTimeout);
                hideTimeout = undefined;
              }
            },
            remove: function () {
              self.cancelTimeout();
              return removeDone = $q.when(showDone).then(function () {
                var ret = element ? options.onRemove(options.scope, element, options) : true;
                return $q.when(ret).then(function () {
                  if (!options.preserveScope)
                    options.scope.$destroy();
                  removeDone = true;
                });
              });
            }
          };
        }
      };
      /*
     * Replace `{{` and `}}` in a string (usually a template) with the actual start-/endSymbols used
     * for interpolation. This allows pre-defined templates (for components such as dialog, toast etc)
     * to continue to work in apps that use custom interpolation start-/endSymbols.
     *
     * @param {string} text The text in which to replace `{{` / `}}`
     * @returns {string} The modified string using the actual interpolation start-/endSymbols
     */
      function replaceInterpolationSymbols(text) {
        if (!text || !angular.isString(text))
          return text;
        return text.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
      }
    }
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name material.core.componentRegistry
   *
   * @description
   * A component instance registration service.
   * Note: currently this as a private service in the SideNav component.
   */
  angular.module('material.core').factory('$mdComponentRegistry', ComponentRegistry);
  /*
   * @private
   * @ngdoc factory
   * @name ComponentRegistry
   * @module material.core.componentRegistry
   *
   */
  function ComponentRegistry($log, $q) {
    var self;
    var instances = [];
    var pendings = {};
    return self = {
      notFoundError: function (handle) {
        $log.error('No instance found for handle', handle);
      },
      getInstances: function () {
        return instances;
      },
      get: function (handle) {
        if (!isValidID(handle))
          return null;
        var i, j, instance;
        for (i = 0, j = instances.length; i < j; i++) {
          instance = instances[i];
          if (instance.$$mdHandle === handle) {
            return instance;
          }
        }
        return null;
      },
      register: function (instance, handle) {
        if (!handle)
          return angular.noop;
        instance.$$mdHandle = handle;
        instances.push(instance);
        resolveWhen();
        return deregister;
        /**
         * Remove registration for an instance
         */
        function deregister() {
          var index = instances.indexOf(instance);
          if (index !== -1) {
            instances.splice(index, 1);
          }
        }
        /**
         * Resolve any pending promises for this instance
         */
        function resolveWhen() {
          var dfd = pendings[handle];
          if (dfd) {
            dfd.resolve(instance);
            delete pendings[handle];
          }
        }
      },
      when: function (handle) {
        if (isValidID(handle)) {
          var deferred = $q.defer();
          var instance = self.get(handle);
          if (instance) {
            deferred.resolve(instance);
          } else {
            pendings[handle] = deferred;
          }
          return deferred.promise;
        }
        return $q.reject('Invalid `md-component-id` value.');
      }
    };
    function isValidID(handle) {
      return handle && handle !== '';
    }
  }
  ComponentRegistry.$inject = [
    '$log',
    '$q'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core').factory('$mdInkRipple', InkRippleService).directive('mdInkRipple', InkRippleDirective).directive('mdNoInk', attrNoDirective()).directive('mdNoBar', attrNoDirective()).directive('mdNoStretch', attrNoDirective());
  function InkRippleDirective($mdInkRipple) {
    return {
      controller: angular.noop,
      link: function (scope, element, attr) {
        if (attr.hasOwnProperty('mdInkRippleCheckbox')) {
          $mdInkRipple.attachCheckboxBehavior(scope, element);
        } else {
          $mdInkRipple.attachButtonBehavior(scope, element);
        }
      }
    };
  }
  InkRippleDirective.$inject = ['$mdInkRipple'];
  function InkRippleService($window, $timeout) {
    return {
      attachButtonBehavior: attachButtonBehavior,
      attachCheckboxBehavior: attachCheckboxBehavior,
      attachTabBehavior: attachTabBehavior,
      attach: attach
    };
    function attachButtonBehavior(scope, element, options) {
      return attach(scope, element, angular.extend({
        isFAB: element.hasClass('md-fab'),
        isMenuItem: element.hasClass('md-menu-item'),
        center: false,
        dimBackground: true
      }, options));
    }
    function attachCheckboxBehavior(scope, element, options) {
      return attach(scope, element, angular.extend({
        center: true,
        dimBackground: false,
        fitRipple: true
      }, options));
    }
    function attachTabBehavior(scope, element, options) {
      return attach(scope, element, angular.extend({
        center: false,
        dimBackground: true,
        outline: true
      }, options));
    }
    function attach(scope, element, options) {
      if (element.controller('mdNoInk'))
        return angular.noop;
      options = angular.extend({
        colorElement: element,
        mousedown: true,
        hover: true,
        focus: true,
        center: false,
        mousedownPauseTime: 150,
        dimBackground: false,
        outline: false,
        isFAB: false,
        isMenuItem: false,
        fitRipple: false
      }, options);
      var rippleSize, controller = element.controller('mdInkRipple') || {}, counter = 0, ripples = [], states = [], isActiveExpr = element.attr('md-highlight'), isActive = false, isHeld = false, node = element[0], rippleSizeSetting = element.attr('md-ripple-size'), color = parseColor(element.attr('md-ink-ripple')) || parseColor($window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');
      switch (rippleSizeSetting) {
      case 'full':
        options.isFAB = true;
        break;
      case 'partial':
        options.isFAB = false;
        break;
      }
      // expose onInput for ripple testing
      if (options.mousedown) {
        element.on('$md.pressdown', onPressDown).on('$md.pressup', onPressUp);
      }
      controller.createRipple = createRipple;
      if (isActiveExpr) {
        scope.$watch(isActiveExpr, function watchActive(newValue) {
          isActive = newValue;
          if (isActive && !ripples.length) {
            $timeout(function () {
              createRipple(0, 0);
            }, 0, false);
          }
          angular.forEach(ripples, updateElement);
        });
      }
      // Publish self-detach method if desired...
      return function detach() {
        element.off('$md.pressdown', onPressDown).off('$md.pressup', onPressUp);
        getRippleContainer().remove();
      };
      /**
     * Gets the current ripple container
     * If there is no ripple container, it creates one and returns it
     *
     * @returns {angular.element} ripple container element
     */
      function getRippleContainer() {
        var container = element.data('$mdRippleContainer');
        if (container)
          return container;
        container = angular.element('<div class="md-ripple-container">');
        element.append(container);
        element.data('$mdRippleContainer', container);
        return container;
      }
      function parseColor(color) {
        if (!color)
          return;
        if (color.indexOf('rgba') === 0)
          return color.replace(/\d?\.?\d*\s*\)\s*$/, '0.1)');
        if (color.indexOf('rgb') === 0)
          return rgbToRGBA(color);
        if (color.indexOf('#') === 0)
          return hexToRGBA(color);
        /**
       * Converts a hex value to an rgba string
       *
       * @param {string} hex value (3 or 6 digits) to be converted
       *
       * @returns {string} rgba color with 0.1 alpha
       */
        function hexToRGBA(color) {
          var hex = color.charAt(0) === '#' ? color.substr(1) : color, dig = hex.length / 3, red = hex.substr(0, dig), grn = hex.substr(dig, dig), blu = hex.substr(dig * 2);
          if (dig === 1) {
            red += red;
            grn += grn;
            blu += blu;
          }
          return 'rgba(' + parseInt(red, 16) + ',' + parseInt(grn, 16) + ',' + parseInt(blu, 16) + ',0.1)';
        }
        /**
       * Converts rgb value to rgba string
       *
       * @param {string} rgb color string
       *
       * @returns {string} rgba color with 0.1 alpha
       */
        function rgbToRGBA(color) {
          return color.replace(')', ', 0.1)').replace('(', 'a(');
        }
      }
      function removeElement(elem, wait) {
        ripples.splice(ripples.indexOf(elem), 1);
        if (ripples.length === 0) {
          getRippleContainer().css({ backgroundColor: '' });
        }
        $timeout(function () {
          elem.remove();
        }, wait, false);
      }
      function updateElement(elem) {
        var index = ripples.indexOf(elem), state = states[index] || {}, elemIsActive = ripples.length > 1 ? false : isActive, elemIsHeld = ripples.length > 1 ? false : isHeld;
        if (elemIsActive || state.animating || elemIsHeld) {
          elem.addClass('md-ripple-visible');
        } else if (elem) {
          elem.removeClass('md-ripple-visible');
          if (options.outline) {
            elem.css({
              width: rippleSize + 'px',
              height: rippleSize + 'px',
              marginLeft: rippleSize * -1 + 'px',
              marginTop: rippleSize * -1 + 'px'
            });
          }
          removeElement(elem, options.outline ? 450 : 650);
        }
      }
      /**
     * Creates a ripple at the provided coordinates
     *
     * @param {number} left cursor position
     * @param {number} top cursor position
     *
     * @returns {angular.element} the generated ripple element
     */
      function createRipple(left, top) {
        color = parseColor(element.attr('md-ink-ripple')) || parseColor($window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');
        var container = getRippleContainer(), size = getRippleSize(left, top), css = getRippleCss(size, left, top), elem = getRippleElement(css), index = ripples.indexOf(elem), state = states[index] || {};
        rippleSize = size;
        state.animating = true;
        $timeout(function () {
          if (options.dimBackground) {
            container.css({ backgroundColor: color });
          }
          elem.addClass('md-ripple-placed md-ripple-scaled');
          if (options.outline) {
            elem.css({
              borderWidth: size * 0.5 + 'px',
              marginLeft: size * -0.5 + 'px',
              marginTop: size * -0.5 + 'px'
            });
          } else {
            elem.css({
              left: '50%',
              top: '50%'
            });
          }
          updateElement(elem);
          $timeout(function () {
            state.animating = false;
            updateElement(elem);
          }, options.outline ? 450 : 225, false);
        }, 0, false);
        return elem;
        /**
       * Creates the ripple element with the provided css
       *
       * @param {object} css properties to be applied
       *
       * @returns {angular.element} the generated ripple element
       */
        function getRippleElement(css) {
          var elem = angular.element('<div class="md-ripple" data-counter="' + counter++ + '">');
          ripples.unshift(elem);
          states.unshift({ animating: true });
          container.append(elem);
          css && elem.css(css);
          return elem;
        }
        /**
       * Calculate the ripple size
       *
       * @returns {number} calculated ripple diameter
       */
        function getRippleSize(left, top) {
          var width = container.prop('offsetWidth'), height = container.prop('offsetHeight'), multiplier, size, rect;
          if (options.isMenuItem) {
            size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
          } else if (options.outline) {
            rect = node.getBoundingClientRect();
            left -= rect.left;
            top -= rect.top;
            width = Math.max(left, width - left);
            height = Math.max(top, height - top);
            size = 2 * Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
          } else {
            multiplier = options.isFAB ? 1.1 : 0.8;
            size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)) * multiplier;
            if (options.fitRipple) {
              size = Math.min(height, width, size);
            }
          }
          return size;
        }
        /**
       * Generates the ripple css
       *
       * @param {number} the diameter of the ripple
       * @param {number} the left cursor offset
       * @param {number} the top cursor offset
       *
       * @returns {{backgroundColor: *, width: string, height: string, marginLeft: string, marginTop: string}}
       */
        function getRippleCss(size, left, top) {
          var rect, css = {
              backgroundColor: rgbaToRGB(color),
              borderColor: rgbaToRGB(color),
              width: size + 'px',
              height: size + 'px'
            };
          if (options.outline) {
            css.width = 0;
            css.height = 0;
          } else {
            css.marginLeft = css.marginTop = size * -0.5 + 'px';
          }
          if (options.center) {
            css.left = css.top = '50%';
          } else {
            rect = node.getBoundingClientRect();
            css.left = Math.round((left - rect.left) / container.prop('offsetWidth') * 100) + '%';
            css.top = Math.round((top - rect.top) / container.prop('offsetHeight') * 100) + '%';
          }
          return css;
          /**
         * Converts rgba string to rgb, removing the alpha value
         *
         * @param {string} rgba color
         *
         * @returns {string} rgb color
         */
          function rgbaToRGB(color) {
            return color.replace('rgba', 'rgb').replace(/,[^\)\,]+\)/, ')');
          }
        }
      }
      /**
     * Handles user input start and stop events
     *
     */
      function onPressDown(ev) {
        if (!isRippleAllowed())
          return;
        var ripple = createRipple(ev.pointer.x, ev.pointer.y);
        isHeld = true;
      }
      function onPressUp(ev) {
        isHeld = false;
        var ripple = ripples[ripples.length - 1];
        $timeout(function () {
          updateElement(ripple);
        }, 0, false);
      }
      /**
     * Determines if the ripple is allowed
     *
     * @returns {boolean} true if the ripple is allowed, false if not
     */
      function isRippleAllowed() {
        var parent = node.parentNode;
        var grandparent = parent && parent.parentNode;
        var ancestor = grandparent && grandparent.parentNode;
        return !isDisabled(node) && !isDisabled(parent) && !isDisabled(grandparent) && !isDisabled(ancestor);
        function isDisabled(elem) {
          return elem && elem.hasAttribute && elem.hasAttribute('disabled');
        }
      }
    }
  }
  InkRippleService.$inject = [
    '$window',
    '$timeout'
  ];
  /**
 * noink/nobar/nostretch directive: make any element that has one of
 * these attributes be given a controller, so that other directives can
 * `require:` these and see if there is a `no<xxx>` parent attribute.
 *
 * @usage
 * <hljs lang="html">
 * <parent md-no-ink>
 *   <child detect-no>
 *   </child>
 * </parent>
 * </hljs>
 *
 * <hljs lang="js">
 * myApp.directive('detectNo', function() {
 *   return {
 *     require: ['^?mdNoInk', ^?mdNoBar'],
 *     link: function(scope, element, attr, ctrls) {
 *       var noinkCtrl = ctrls[0];
 *       var nobarCtrl = ctrls[1];
 *       if (noInkCtrl) {
 *         alert("the md-no-ink flag has been specified on an ancestor!");
 *       }
 *       if (nobarCtrl) {
 *         alert("the md-no-bar flag has been specified on an ancestor!");
 *       }
 *     }
 *   };
 * });
 * </hljs>
 */
  function attrNoDirective() {
    return function () {
      return { controller: angular.noop };
    };
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core.theming.palette', []).constant('$mdColorPalette', {
    'red': {
      '50': '#ffebee',
      '100': '#ffcdd2',
      '200': '#ef9a9a',
      '300': '#e57373',
      '400': '#ef5350',
      '500': '#f44336',
      '600': '#e53935',
      '700': '#d32f2f',
      '800': '#c62828',
      '900': '#b71c1c',
      'A100': '#ff8a80',
      'A200': '#ff5252',
      'A400': '#ff1744',
      'A700': '#d50000',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 300 400 A100',
      'contrastStrongLightColors': '500 600 700 A200 A400 A700'
    },
    'pink': {
      '50': '#fce4ec',
      '100': '#f8bbd0',
      '200': '#f48fb1',
      '300': '#f06292',
      '400': '#ec407a',
      '500': '#e91e63',
      '600': '#d81b60',
      '700': '#c2185b',
      '800': '#ad1457',
      '900': '#880e4f',
      'A100': '#ff80ab',
      'A200': '#ff4081',
      'A400': '#f50057',
      'A700': '#c51162',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 300 400 A100',
      'contrastStrongLightColors': '500 600 A200 A400 A700'
    },
    'purple': {
      '50': '#f3e5f5',
      '100': '#e1bee7',
      '200': '#ce93d8',
      '300': '#ba68c8',
      '400': '#ab47bc',
      '500': '#9c27b0',
      '600': '#8e24aa',
      '700': '#7b1fa2',
      '800': '#6a1b9a',
      '900': '#4a148c',
      'A100': '#ea80fc',
      'A200': '#e040fb',
      'A400': '#d500f9',
      'A700': '#aa00ff',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 A100',
      'contrastStrongLightColors': '300 400 A200 A400 A700'
    },
    'deep-purple': {
      '50': '#ede7f6',
      '100': '#d1c4e9',
      '200': '#b39ddb',
      '300': '#9575cd',
      '400': '#7e57c2',
      '500': '#673ab7',
      '600': '#5e35b1',
      '700': '#512da8',
      '800': '#4527a0',
      '900': '#311b92',
      'A100': '#b388ff',
      'A200': '#7c4dff',
      'A400': '#651fff',
      'A700': '#6200ea',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 A100',
      'contrastStrongLightColors': '300 400 A200'
    },
    'indigo': {
      '50': '#e8eaf6',
      '100': '#c5cae9',
      '200': '#9fa8da',
      '300': '#7986cb',
      '400': '#5c6bc0',
      '500': '#3f51b5',
      '600': '#3949ab',
      '700': '#303f9f',
      '800': '#283593',
      '900': '#1a237e',
      'A100': '#8c9eff',
      'A200': '#536dfe',
      'A400': '#3d5afe',
      'A700': '#304ffe',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 A100',
      'contrastStrongLightColors': '300 400 A200 A400'
    },
    'blue': {
      '50': '#e3f2fd',
      '100': '#bbdefb',
      '200': '#90caf9',
      '300': '#64b5f6',
      '400': '#42a5f5',
      '500': '#2196f3',
      '600': '#1e88e5',
      '700': '#1976d2',
      '800': '#1565c0',
      '900': '#0d47a1',
      'A100': '#82b1ff',
      'A200': '#448aff',
      'A400': '#2979ff',
      'A700': '#2962ff',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '100 200 300 400 A100',
      'contrastStrongLightColors': '500 600 700 A200 A400 A700'
    },
    'light-blue': {
      '50': '#e1f5fe',
      '100': '#b3e5fc',
      '200': '#81d4fa',
      '300': '#4fc3f7',
      '400': '#29b6f6',
      '500': '#03a9f4',
      '600': '#039be5',
      '700': '#0288d1',
      '800': '#0277bd',
      '900': '#01579b',
      'A100': '#80d8ff',
      'A200': '#40c4ff',
      'A400': '#00b0ff',
      'A700': '#0091ea',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '500 600 700 800 900 A700',
      'contrastStrongLightColors': '500 600 700 800 A700'
    },
    'cyan': {
      '50': '#e0f7fa',
      '100': '#b2ebf2',
      '200': '#80deea',
      '300': '#4dd0e1',
      '400': '#26c6da',
      '500': '#00bcd4',
      '600': '#00acc1',
      '700': '#0097a7',
      '800': '#00838f',
      '900': '#006064',
      'A100': '#84ffff',
      'A200': '#18ffff',
      'A400': '#00e5ff',
      'A700': '#00b8d4',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '500 600 700 800 900',
      'contrastStrongLightColors': '500 600 700 800'
    },
    'teal': {
      '50': '#e0f2f1',
      '100': '#b2dfdb',
      '200': '#80cbc4',
      '300': '#4db6ac',
      '400': '#26a69a',
      '500': '#009688',
      '600': '#00897b',
      '700': '#00796b',
      '800': '#00695c',
      '900': '#004d40',
      'A100': '#a7ffeb',
      'A200': '#64ffda',
      'A400': '#1de9b6',
      'A700': '#00bfa5',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '500 600 700 800 900',
      'contrastStrongLightColors': '500 600 700'
    },
    'green': {
      '50': '#e8f5e9',
      '100': '#c8e6c9',
      '200': '#a5d6a7',
      '300': '#81c784',
      '400': '#66bb6a',
      '500': '#4caf50',
      '600': '#43a047',
      '700': '#388e3c',
      '800': '#2e7d32',
      '900': '#1b5e20',
      'A100': '#b9f6ca',
      'A200': '#69f0ae',
      'A400': '#00e676',
      'A700': '#00c853',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '500 600 700 800 900',
      'contrastStrongLightColors': '500 600 700'
    },
    'light-green': {
      '50': '#f1f8e9',
      '100': '#dcedc8',
      '200': '#c5e1a5',
      '300': '#aed581',
      '400': '#9ccc65',
      '500': '#8bc34a',
      '600': '#7cb342',
      '700': '#689f38',
      '800': '#558b2f',
      '900': '#33691e',
      'A100': '#ccff90',
      'A200': '#b2ff59',
      'A400': '#76ff03',
      'A700': '#64dd17',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '800 900',
      'contrastStrongLightColors': '800 900'
    },
    'lime': {
      '50': '#f9fbe7',
      '100': '#f0f4c3',
      '200': '#e6ee9c',
      '300': '#dce775',
      '400': '#d4e157',
      '500': '#cddc39',
      '600': '#c0ca33',
      '700': '#afb42b',
      '800': '#9e9d24',
      '900': '#827717',
      'A100': '#f4ff81',
      'A200': '#eeff41',
      'A400': '#c6ff00',
      'A700': '#aeea00',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '900',
      'contrastStrongLightColors': '900'
    },
    'yellow': {
      '50': '#fffde7',
      '100': '#fff9c4',
      '200': '#fff59d',
      '300': '#fff176',
      '400': '#ffee58',
      '500': '#ffeb3b',
      '600': '#fdd835',
      '700': '#fbc02d',
      '800': '#f9a825',
      '900': '#f57f17',
      'A100': '#ffff8d',
      'A200': '#ffff00',
      'A400': '#ffea00',
      'A700': '#ffd600',
      'contrastDefaultColor': 'dark'
    },
    'amber': {
      '50': '#fff8e1',
      '100': '#ffecb3',
      '200': '#ffe082',
      '300': '#ffd54f',
      '400': '#ffca28',
      '500': '#ffc107',
      '600': '#ffb300',
      '700': '#ffa000',
      '800': '#ff8f00',
      '900': '#ff6f00',
      'A100': '#ffe57f',
      'A200': '#ffd740',
      'A400': '#ffc400',
      'A700': '#ffab00',
      'contrastDefaultColor': 'dark'
    },
    'orange': {
      '50': '#fff3e0',
      '100': '#ffe0b2',
      '200': '#ffcc80',
      '300': '#ffb74d',
      '400': '#ffa726',
      '500': '#ff9800',
      '600': '#fb8c00',
      '700': '#f57c00',
      '800': '#ef6c00',
      '900': '#e65100',
      'A100': '#ffd180',
      'A200': '#ffab40',
      'A400': '#ff9100',
      'A700': '#ff6d00',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '800 900',
      'contrastStrongLightColors': '800 900'
    },
    'deep-orange': {
      '50': '#fbe9e7',
      '100': '#ffccbc',
      '200': '#ffab91',
      '300': '#ff8a65',
      '400': '#ff7043',
      '500': '#ff5722',
      '600': '#f4511e',
      '700': '#e64a19',
      '800': '#d84315',
      '900': '#bf360c',
      'A100': '#ff9e80',
      'A200': '#ff6e40',
      'A400': '#ff3d00',
      'A700': '#dd2c00',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 300 400 A100 A200',
      'contrastStrongLightColors': '500 600 700 800 900 A400 A700'
    },
    'brown': {
      '50': '#efebe9',
      '100': '#d7ccc8',
      '200': '#bcaaa4',
      '300': '#a1887f',
      '400': '#8d6e63',
      '500': '#795548',
      '600': '#6d4c41',
      '700': '#5d4037',
      '800': '#4e342e',
      '900': '#3e2723',
      'A100': '#d7ccc8',
      'A200': '#bcaaa4',
      'A400': '#8d6e63',
      'A700': '#5d4037',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200',
      'contrastStrongLightColors': '300 400'
    },
    'grey': {
      '0': '#ffffff',
      '50': '#fafafa',
      '100': '#f5f5f5',
      '200': '#eeeeee',
      '300': '#e0e0e0',
      '400': '#bdbdbd',
      '500': '#9e9e9e',
      '600': '#757575',
      '700': '#616161',
      '800': '#424242',
      '900': '#212121',
      '1000': '#000000',
      'A100': '#ffffff',
      'A200': '#eeeeee',
      'A400': '#bdbdbd',
      'A700': '#616161',
      'contrastDefaultColor': 'dark',
      'contrastLightColors': '600 700 800 900'
    },
    'blue-grey': {
      '50': '#eceff1',
      '100': '#cfd8dc',
      '200': '#b0bec5',
      '300': '#90a4ae',
      '400': '#78909c',
      '500': '#607d8b',
      '600': '#546e7a',
      '700': '#455a64',
      '800': '#37474f',
      '900': '#263238',
      'A100': '#cfd8dc',
      'A200': '#b0bec5',
      'A400': '#78909c',
      'A700': '#455a64',
      'contrastDefaultColor': 'light',
      'contrastDarkColors': '50 100 200 300',
      'contrastStrongLightColors': '400 500'
    }
  });
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.core.theming', ['material.core.theming.palette']).directive('mdTheme', ThemingDirective).directive('mdThemable', ThemableDirective).provider('$mdTheming', ThemingProvider).run(generateThemes);
  /**
 * @ngdoc provider
 * @name $mdThemingProvider
 * @module material.core
 *
 * @description Provider to configure the `$mdTheming` service.
 */
  /**
 * @ngdoc method
 * @name $mdThemingProvider#setDefaultTheme
 * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.
 */
  /**
 * @ngdoc method
 * @name $mdThemingProvider#alwaysWatchTheme
 * @param {boolean} watch Whether or not to always watch themes for changes and re-apply
 * classes when they change. Default is `false`. Enabling can reduce performance.
 */
  // In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)
  var PALETTES;
  var THEMES;
  var themingProvider;
  var generationIsDone;
  var DARK_FOREGROUND = {
      name: 'dark',
      '1': 'rgba(0,0,0,0.87)',
      '2': 'rgba(0,0,0,0.54)',
      '3': 'rgba(0,0,0,0.26)',
      '4': 'rgba(0,0,0,0.12)'
    };
  var LIGHT_FOREGROUND = {
      name: 'light',
      '1': 'rgba(255,255,255,1.0)',
      '2': 'rgba(255,255,255,0.7)',
      '3': 'rgba(255,255,255,0.3)',
      '4': 'rgba(255,255,255,0.12)'
    };
  var DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';
  var LIGHT_SHADOW = '';
  var DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');
  var LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');
  var STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');
  var THEME_COLOR_TYPES = [
      'primary',
      'accent',
      'warn',
      'background'
    ];
  var DEFAULT_COLOR_TYPE = 'primary';
  // A color in a theme will use these hues by default, if not specified by user.
  var LIGHT_DEFAULT_HUES = {
      'accent': {
        'default': 'A200',
        'hue-1': 'A100',
        'hue-2': 'A400',
        'hue-3': 'A700'
      }
    };
  var DARK_DEFAULT_HUES = {
      'background': {
        'default': '500',
        'hue-1': '300',
        'hue-2': '600',
        'hue-3': '800'
      }
    };
  THEME_COLOR_TYPES.forEach(function (colorType) {
    // Color types with unspecified default hues will use these default hue values
    var defaultDefaultHues = {
        'default': '500',
        'hue-1': '300',
        'hue-2': '800',
        'hue-3': 'A100'
      };
    if (!LIGHT_DEFAULT_HUES[colorType])
      LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;
    if (!DARK_DEFAULT_HUES[colorType])
      DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;
  });
  var VALID_HUE_VALUES = [
      '50',
      '100',
      '200',
      '300',
      '400',
      '500',
      '600',
      '700',
      '800',
      '900',
      'A100',
      'A200',
      'A400',
      'A700'
    ];
  function ThemingProvider($mdColorPalette) {
    PALETTES = {};
    THEMES = {};
    var defaultTheme = 'default';
    var alwaysWatchTheme = false;
    // Load JS Defined Palettes
    angular.extend(PALETTES, $mdColorPalette);
    // Default theme defined in core.js
    ThemingService.$inject = [
      '$rootScope',
      '$log'
    ];
    return themingProvider = {
      definePalette: definePalette,
      extendPalette: extendPalette,
      theme: registerTheme,
      setDefaultTheme: function (theme) {
        defaultTheme = theme;
      },
      alwaysWatchTheme: function (alwaysWatch) {
        alwaysWatchTheme = alwaysWatch;
      },
      $get: ThemingService,
      _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,
      _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,
      _PALETTES: PALETTES,
      _THEMES: THEMES,
      _parseRules: parseRules,
      _rgba: rgba
    };
    // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });
    function definePalette(name, map) {
      map = map || {};
      PALETTES[name] = checkPaletteValid(name, map);
      return themingProvider;
    }
    // Returns an new object which is a copy of a given palette `name` with variables from
    // `map` overwritten
    // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });
    function extendPalette(name, map) {
      return checkPaletteValid(name, angular.extend({}, PALETTES[name] || {}, map));
    }
    // Make sure that palette has all required hues
    function checkPaletteValid(name, map) {
      var missingColors = VALID_HUE_VALUES.filter(function (field) {
          return !map[field];
        });
      if (missingColors.length) {
        throw new Error('Missing colors %1 in palette %2!'.replace('%1', missingColors.join(', ')).replace('%2', name));
      }
      return map;
    }
    // Register a theme (which is a collection of color palettes to use with various states
    // ie. warn, accent, primary )
    // Optionally inherit from an existing theme
    // $mdThemingProvider.theme('custom-theme').primaryPalette('red');
    function registerTheme(name, inheritFrom) {
      inheritFrom = inheritFrom || 'default';
      if (THEMES[name])
        return THEMES[name];
      var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;
      var theme = new Theme(name);
      if (parentTheme) {
        angular.forEach(parentTheme.colors, function (color, colorType) {
          theme.colors[colorType] = {
            name: color.name,
            hues: angular.extend({}, color.hues)
          };
        });
      }
      THEMES[name] = theme;
      return theme;
    }
    function Theme(name) {
      var self = this;
      self.name = name;
      self.colors = {};
      self.dark = setDark;
      setDark(false);
      function setDark(isDark) {
        isDark = arguments.length === 0 ? true : !!isDark;
        // If no change, abort
        if (isDark === self.isDark)
          return;
        self.isDark = isDark;
        self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;
        self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;
        // Light and dark themes have different default hues.
        // Go through each existing color type for this theme, and for every
        // hue value that is still the default hue value from the previous light/dark setting,
        // set it to the default hue value from the new light/dark setting.
        var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;
        var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;
        angular.forEach(newDefaultHues, function (newDefaults, colorType) {
          var color = self.colors[colorType];
          var oldDefaults = oldDefaultHues[colorType];
          if (color) {
            for (var hueName in color.hues) {
              if (color.hues[hueName] === oldDefaults[hueName]) {
                color.hues[hueName] = newDefaults[hueName];
              }
            }
          }
        });
        return self;
      }
      THEME_COLOR_TYPES.forEach(function (colorType) {
        var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];
        self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {
          var color = self.colors[colorType] = {
              name: paletteName,
              hues: angular.extend({}, defaultHues, hues)
            };
          Object.keys(color.hues).forEach(function (name) {
            if (!defaultHues[name]) {
              throw new Error('Invalid hue name \'%1\' in theme %2\'s %3 color %4. Available hue names: %4'.replace('%1', name).replace('%2', self.name).replace('%3', paletteName).replace('%4', Object.keys(defaultHues).join(', ')));
            }
          });
          Object.keys(color.hues).map(function (key) {
            return color.hues[key];
          }).forEach(function (hueValue) {
            if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {
              throw new Error('Invalid hue value \'%1\' in theme %2\'s %3 color %4. Available hue values: %5'.replace('%1', hueValue).replace('%2', self.name).replace('%3', colorType).replace('%4', paletteName).replace('%5', VALID_HUE_VALUES.join(', ')));
            }
          });
          return self;
        };
        self[colorType + 'Color'] = function () {
          var args = Array.prototype.slice.call(arguments);
          console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' + 'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');
          return self[colorType + 'Palette'].apply(self, args);
        };
      });
    }
    /**
   * @ngdoc service
   * @name $mdTheming
   *
   * @description
   *
   * Service that makes an element apply theming related classes to itself.
   *
   * ```js
   * app.directive('myFancyDirective', function($mdTheming) {
   *   return {
   *     restrict: 'e',
   *     link: function(scope, el, attrs) {
   *       $mdTheming(el);
   *     }
   *   };
   * });
   * ```
   * @param {el=} element to apply theming to
   */
    /* @ngInject */
    function ThemingService($rootScope, $log) {
      applyTheme.inherit = function (el, parent) {
        var ctrl = parent.controller('mdTheme');
        var attrThemeValue = el.attr('md-theme-watch');
        if ((alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {
          var deregisterWatch = $rootScope.$watch(function () {
              return ctrl && ctrl.$mdTheme || defaultTheme;
            }, changeTheme);
          el.on('$destroy', deregisterWatch);
        } else {
          var theme = ctrl && ctrl.$mdTheme || defaultTheme;
          changeTheme(theme);
        }
        function changeTheme(theme) {
          if (!registered(theme)) {
            $log.warn('Attempted to use unregistered theme \'' + theme + '\'. ' + 'Register it with $mdThemingProvider.theme().');
          }
          var oldTheme = el.data('$mdThemeName');
          if (oldTheme)
            el.removeClass('md-' + oldTheme + '-theme');
          el.addClass('md-' + theme + '-theme');
          el.data('$mdThemeName', theme);
        }
      };
      applyTheme.registered = registered;
      applyTheme.defaultTheme = function () {
        return defaultTheme;
      };
      return applyTheme;
      function registered(theme) {
        if (theme === undefined || theme === '')
          return true;
        return THEMES[theme] !== undefined;
      }
      function applyTheme(scope, el) {
        // Allow us to be invoked via a linking function signature.
        if (el === undefined) {
          el = scope;
          scope = undefined;
        }
        if (scope === undefined) {
          scope = $rootScope;
        }
        applyTheme.inherit(el, el);
      }
    }
  }
  ThemingProvider.$inject = ['$mdColorPalette'];
  function ThemingDirective($mdTheming, $interpolate, $log) {
    return {
      priority: 100,
      link: {
        pre: function (scope, el, attrs) {
          var ctrl = {
              $setTheme: function (theme) {
                if (!$mdTheming.registered(theme)) {
                  $log.warn('attempted to use unregistered theme \'' + theme + '\'');
                }
                ctrl.$mdTheme = theme;
              }
            };
          el.data('$mdThemeController', ctrl);
          ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));
          attrs.$observe('mdTheme', ctrl.$setTheme);
        }
      }
    };
  }
  ThemingDirective.$inject = [
    '$mdTheming',
    '$interpolate',
    '$log'
  ];
  function ThemableDirective($mdTheming) {
    return $mdTheming;
  }
  ThemableDirective.$inject = ['$mdTheming'];
  function parseRules(theme, colorType, rules) {
    checkValidPalette(theme, colorType);
    rules = rules.replace(/THEME_NAME/g, theme.name);
    var generatedRules = [];
    var color = theme.colors[colorType];
    var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');
    // Matches '{{ primary-color }}', etc
    var hueRegex = new RegExp('(\'|")?{{\\s*(' + colorType + ')-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}("|\')?', 'g');
    var simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?\s*\}\}'?"?/g;
    var palette = PALETTES[color.name];
    // find and replace simple variables where we use a specific hue, not angentire palette
    // eg. "{{primary-100}}"
    //\(' + THEME_COLOR_TYPES.join('\|') + '\)'
    rules = rules.replace(simpleVariableRegex, function (match, colorType, hue, opacity) {
      if (colorType === 'foreground') {
        if (hue == 'shadow') {
          return theme.foregroundShadow;
        } else {
          return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];
        }
      }
      if (hue.indexOf('hue') === 0) {
        hue = theme.colors[colorType].hues[hue];
      }
      return rgba((PALETTES[theme.colors[colorType].name][hue] || '').value, opacity);
    });
    // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)
    angular.forEach(color.hues, function (hueValue, hueName) {
      var newRule = rules.replace(hueRegex, function (match, _, colorType, hueType, opacity) {
          return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);
        });
      if (hueName !== 'default') {
        newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);
      }
      generatedRules.push(newRule);
    });
    return generatedRules.join('');
  }
  // Generate our themes at run time given the state of THEMES and PALETTES
  function generateThemes($injector) {
    var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';
    // MD_THEME_CSS is a string generated by the build process that includes all the themable
    // components as templates
    // Expose contrast colors for palettes to ensure that text is always readable
    angular.forEach(PALETTES, sanitizePalette);
    // Break the CSS into individual rules
    var rules = themeCss.split(/\}(?!(\}|'|"|;))/).filter(function (rule) {
        return rule && rule.length;
      }).map(function (rule) {
        return rule.trim() + '}';
      });
    var rulesByType = {};
    THEME_COLOR_TYPES.forEach(function (type) {
      rulesByType[type] = '';
    });
    var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');
    // Sort the rules based on type, allowing us to do color substitution on a per-type basis
    rules.forEach(function (rule) {
      var match = rule.match(ruleMatchRegex);
      // First: test that if the rule has '.md-accent', it goes into the accent set of rules
      for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {
        if (rule.indexOf('.md-' + type) > -1) {
          return rulesByType[type] += rule;
        }
      }
      // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from
      // there
      for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {
        if (rule.indexOf(type) > -1) {
          return rulesByType[type] += rule;
        }
      }
      // Default to the primary array
      return rulesByType[DEFAULT_COLOR_TYPE] += rule;
    });
    var styleString = '';
    // For each theme, use the color palettes specified for `primary`, `warn` and `accent`
    // to generate CSS rules.
    angular.forEach(THEMES, function (theme) {
      THEME_COLOR_TYPES.forEach(function (colorType) {
        styleString += parseRules(theme, colorType, rulesByType[colorType] + '');
      });
      if (theme.colors.primary.name == theme.colors.accent.name) {
        console.warn('$mdThemingProvider: Using the same palette for primary and' + ' accent. This violates the material design spec.');
      }
    });
    // Insert our newly minted styles into the DOM
    if (!generationIsDone) {
      var style = document.createElement('style');
      style.innerHTML = styleString;
      var head = document.getElementsByTagName('head')[0];
      head.insertBefore(style, head.firstElementChild);
      generationIsDone = true;
    }
    // The user specifies a 'default' contrast color as either light or dark,
    // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)
    function sanitizePalette(palette) {
      var defaultContrast = palette.contrastDefaultColor;
      var lightColors = palette.contrastLightColors || [];
      var strongLightColors = palette.contrastStrongLightColors || [];
      var darkColors = palette.contrastDarkColors || [];
      // These colors are provided as space-separated lists
      if (typeof lightColors === 'string')
        lightColors = lightColors.split(' ');
      if (typeof strongLightColors === 'string')
        strongLightColors = strongLightColors.split(' ');
      if (typeof darkColors === 'string')
        darkColors = darkColors.split(' ');
      // Cleanup after ourselves
      delete palette.contrastDefaultColor;
      delete palette.contrastLightColors;
      delete palette.contrastStrongLightColors;
      delete palette.contrastDarkColors;
      // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }
      angular.forEach(palette, function (hueValue, hueName) {
        if (angular.isObject(hueValue))
          return;
        // Already converted
        // Map everything to rgb colors
        var rgbValue = colorToRgbaArray(hueValue);
        if (!rgbValue) {
          throw new Error('Color %1, in palette %2\'s hue %3, is invalid. Hex or rgb(a) color expected.'.replace('%1', hueValue).replace('%2', palette.name).replace('%3', hueName));
        }
        palette[hueName] = {
          value: rgbValue,
          contrast: getContrastColor()
        };
        function getContrastColor() {
          if (defaultContrast === 'light') {
            if (darkColors.indexOf(hueName) > -1) {
              return DARK_CONTRAST_COLOR;
            } else {
              return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR;
            }
          } else {
            if (lightColors.indexOf(hueName) > -1) {
              return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR;
            } else {
              return DARK_CONTRAST_COLOR;
            }
          }
        }
      });
    }
  }
  generateThemes.$inject = ['$injector'];
  function checkValidPalette(theme, colorType) {
    // If theme attempts to use a palette that doesnt exist, throw error
    if (!PALETTES[(theme.colors[colorType] || {}).name]) {
      throw new Error('You supplied an invalid color palette for theme %1\'s %2 palette. Available palettes: %3'.replace('%1', theme.name).replace('%2', colorType).replace('%3', Object.keys(PALETTES).join(', ')));
    }
  }
  function colorToRgbaArray(clr) {
    if (angular.isArray(clr) && clr.length == 3)
      return clr;
    if (/^rgb/.test(clr)) {
      return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function (value, i) {
        return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);
      });
    }
    if (clr.charAt(0) == '#')
      clr = clr.substring(1);
    if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr))
      return;
    var dig = clr.length / 3;
    var red = clr.substr(0, dig);
    var grn = clr.substr(dig, dig);
    var blu = clr.substr(dig * 2);
    if (dig === 1) {
      red += red;
      grn += grn;
      blu += blu;
    }
    return [
      parseInt(red, 16),
      parseInt(grn, 16),
      parseInt(blu, 16)
    ];
  }
  function rgba(rgbArray, opacity) {
    if (rgbArray.length == 4) {
      rgbArray = angular.copy(rgbArray);
      opacity ? rgbArray.pop() : opacity = rgbArray.pop();
    }
    return opacity && (typeof opacity == 'number' || typeof opacity == 'string' && opacity.length) ? 'rgba(' + rgbArray.join(',') + ',' + opacity + ')' : 'rgb(' + rgbArray.join(',') + ')';
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name material.components.autocomplete
   */
  /*
   * @see js folder for autocomplete implementation
   */
  angular.module('material.components.autocomplete', ['material.core']);
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /*
 * @ngdoc module
 * @name material.components.backdrop
 * @description Backdrop
 */
  /**
 * @ngdoc directive
 * @name mdBackdrop
 * @module material.components.backdrop
 *
 * @restrict E
 *
 * @description
 * `<md-backdrop>` is a backdrop element used by other coponents, such as dialog and bottom sheet.
 * Apply class `opaque` to make the backdrop use the theme backdrop color.
 *
 */
  angular.module('material.components.backdrop', ['material.core']).directive('mdBackdrop', BackdropDirective);
  function BackdropDirective($mdTheming) {
    return $mdTheming;
  }
  BackdropDirective.$inject = ['$mdTheming'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.bottomSheet
 * @description
 * BottomSheet
 */
  angular.module('material.components.bottomSheet', [
    'material.core',
    'material.components.backdrop'
  ]).directive('mdBottomSheet', MdBottomSheetDirective).provider('$mdBottomSheet', MdBottomSheetProvider);
  function MdBottomSheetDirective() {
    return { restrict: 'E' };
  }
  /**
 * @ngdoc service
 * @name $mdBottomSheet
 * @module material.components.bottomSheet
 *
 * @description
 * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.
 *
 * ## Restrictions
 *
 * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.
 * - Add the `md-grid` class to the bottom sheet for a grid layout.
 * - Add the `md-list` class to the bottom sheet for a list layout.
 *
 * @usage
 * <hljs lang="html">
 * <div ng-controller="MyController">
 *   <md-button ng-click="openBottomSheet()">
 *     Open a Bottom Sheet!
 *   </md-button>
 * </div>
 * </hljs>
 * <hljs lang="js">
 * var app = angular.module('app', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdBottomSheet) {
 *   $scope.openBottomSheet = function() {
 *     $mdBottomSheet.show({
 *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'
 *     });
 *   };
 * });
 * </hljs>
 */
  /**
 * @ngdoc method
 * @name $mdBottomSheet#show
 *
 * @description
 * Show a bottom sheet with the specified options.
 *
 * @param {object} options An options object, with the following properties:
 *
 *   - `templateUrl` - `{string=}`: The url of an html template file that will
 *   be used as the content of the bottom sheet. Restrictions: the template must
 *   have an outer `md-bottom-sheet` element.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
 *   template string.
 *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
 *   be used as names of values to inject into the controller. For example,
 *   `locals: {three: 3}` would inject `three` into the controller with the value
 *   of 3.
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,
 *   the location of the click will be used as the starting point for the opening animation
 *   of the the dialog.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
 *   and the bottom sheet will not open until the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the bottom sheet to. Defaults to appending
 *     to the root element of the application.
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.
 *     Default true.
 *
 * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or
 * rejected with `$mdBottomSheet.cancel()`.
 */
  /**
 * @ngdoc method
 * @name $mdBottomSheet#hide
 *
 * @description
 * Hide the existing bottom sheet and resolve the promise returned from
 * `$mdBottomSheet.show()`.
 *
 * @param {*=} response An argument for the resolved promise.
 *
 */
  /**
 * @ngdoc method
 * @name $mdBottomSheet#cancel
 *
 * @description
 * Hide the existing bottom sheet and reject the promise returned from
 * `$mdBottomSheet.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 */
  function MdBottomSheetProvider($$interimElementProvider) {
    // how fast we need to flick down to close the sheet, pixels/ms
    var CLOSING_VELOCITY = 0.5;
    var PADDING = 80;
    // same as css
    bottomSheetDefaults.$inject = [
      '$animate',
      '$mdConstant',
      '$timeout',
      '$$rAF',
      '$compile',
      '$mdTheming',
      '$mdBottomSheet',
      '$rootElement',
      '$rootScope',
      '$mdGesture'
    ];
    return $$interimElementProvider('$mdBottomSheet').setDefaults({
      methods: [
        'disableParentScroll',
        'escapeToClose',
        'targetEvent'
      ],
      options: bottomSheetDefaults
    });
    /* @ngInject */
    function bottomSheetDefaults($animate, $mdConstant, $timeout, $$rAF, $compile, $mdTheming, $mdBottomSheet, $rootElement, $rootScope, $mdGesture) {
      var backdrop;
      return {
        themable: true,
        targetEvent: null,
        onShow: onShow,
        onRemove: onRemove,
        escapeToClose: true,
        disableParentScroll: true
      };
      function onShow(scope, element, options) {
        // Add a backdrop that will close on click
        backdrop = $compile('<md-backdrop class="md-opaque md-bottom-sheet-backdrop">')(scope);
        backdrop.on('click', function () {
          $timeout($mdBottomSheet.cancel);
        });
        $mdTheming.inherit(backdrop, options.parent);
        $animate.enter(backdrop, options.parent, null);
        var bottomSheet = new BottomSheet(element, options.parent);
        options.bottomSheet = bottomSheet;
        // Give up focus on calling item
        options.targetEvent && angular.element(options.targetEvent.target).blur();
        $mdTheming.inherit(bottomSheet.element, options.parent);
        if (options.disableParentScroll) {
          options.lastOverflow = options.parent.css('overflow');
          options.parent.css('overflow', 'hidden');
        }
        return $animate.enter(bottomSheet.element, options.parent).then(function () {
          var focusable = angular.element(element[0].querySelector('button') || element[0].querySelector('a') || element[0].querySelector('[ng-click]'));
          focusable.focus();
          if (options.escapeToClose) {
            options.rootElementKeyupCallback = function (e) {
              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                $timeout($mdBottomSheet.cancel);
              }
            };
            $rootElement.on('keyup', options.rootElementKeyupCallback);
          }
        });
      }
      function onRemove(scope, element, options) {
        var bottomSheet = options.bottomSheet;
        $animate.leave(backdrop);
        return $animate.leave(bottomSheet.element).then(function () {
          if (options.disableParentScroll) {
            options.parent.css('overflow', options.lastOverflow);
            delete options.lastOverflow;
          }
          bottomSheet.cleanup();
          // Restore focus
          options.targetEvent && angular.element(options.targetEvent.target).focus();
        });
      }
      /**
     * BottomSheet class to apply bottom-sheet behavior to an element
     */
      function BottomSheet(element, parent) {
        var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });
        parent.on('$md.dragstart', onDragStart).on('$md.drag', onDrag).on('$md.dragend', onDragEnd);
        return {
          element: element,
          cleanup: function cleanup() {
            deregister();
            parent.off('$md.dragstart', onDragStart).off('$md.drag', onDrag).off('$md.dragend', onDragEnd);
          }
        };
        function onDragStart(ev) {
          // Disable transitions on transform so that it feels fast
          element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');
        }
        function onDrag(ev) {
          var transform = ev.pointer.distanceY;
          if (transform < 5) {
            // Slow down drag when trying to drag up, and stop after PADDING
            transform = Math.max(-PADDING, transform / 2);
          }
          element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');
        }
        function onDragEnd(ev) {
          if (ev.pointer.distanceY > 0 && (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {
            var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;
            var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);
            element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');
            $timeout($mdBottomSheet.cancel);
          } else {
            element.css($mdConstant.CSS.TRANSITION_DURATION, '');
            element.css($mdConstant.CSS.TRANSFORM, '');
          }
        }
      }
    }
  }
  MdBottomSheetProvider.$inject = ['$$interimElementProvider'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.button
 * @description
 *
 * Button
 */
  angular.module('material.components.button', ['material.core']).directive('mdButton', MdButtonDirective);
  /**
 * @ngdoc directive
 * @name mdButton
 * @module material.components.button
 *
 * @restrict E
 *
 * @description
 * `<md-button>` is a button directive with optional ink ripples (default enabled).
 *
 * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will
 * become a `<button>` element.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the FAB button is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {boolean=} md-no-ink If present, disable ripple ink effects.
 * @param {expression=} ng-disabled En/Disable based on the expression
 * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`
 * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.
 * If no default text is found, a warning will be logged.
 *
 * @usage
 * <hljs lang="html">
 *  <md-button>
 *    Button
 *  </md-button>
 *  <md-button href="http://google.com" class="md-button-colored">
 *    I'm a link
 *  </md-button>
 *  <md-button ng-disabled="true" class="md-colored">
 *    I'm a disabled button
 *  </md-button>
 * </hljs>
 */
  function MdButtonDirective($mdInkRipple, $mdTheming, $mdAria) {
    return {
      restrict: 'E',
      replace: true,
      transclude: true,
      template: getTemplate,
      link: postLink
    };
    function isAnchor(attr) {
      return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref);
    }
    function getTemplate(element, attr) {
      return isAnchor(attr) ? '<a class="md-button" ng-transclude></a>' : '<button class="md-button" ng-transclude></button>';
    }
    function postLink(scope, element, attr) {
      var node = element[0];
      $mdTheming(element);
      $mdInkRipple.attachButtonBehavior(scope, element);
      var elementHasText = node.textContent.trim();
      if (!elementHasText) {
        $mdAria.expect(element, 'aria-label');
      }
      // For anchor elements, we have to set tabindex manually when the 
      // element is disabled
      if (isAnchor(attr) && angular.isDefined(attr.ngDisabled)) {
        scope.$watch(attr.ngDisabled, function (isDisabled) {
          element.attr('tabindex', isDisabled ? -1 : 0);
        });
      }
    }
  }
  MdButtonDirective.$inject = [
    '$mdInkRipple',
    '$mdTheming',
    '$mdAria'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.card
 *
 * @description
 * Card components.
 */
  angular.module('material.components.card', ['material.core']).directive('mdCard', mdCardDirective);
  /**
 * @ngdoc directive
 * @name mdCard
 * @module material.components.card
 *
 * @restrict E
 *
 * @description
 * The `<md-card>` directive is a container element used within `<md-content>` containers.
 *
 * Cards have constant width and variable heights; where the maximum height is limited to what can
 * fit within a single view on a platform, but it can temporarily expand as needed
 *
 * @usage
 * <hljs lang="html">
 * <md-card>
 *  <img src="img/washedout.png" class="md-card-image">
 *  <h2>Paracosm</h2>
 *  <p>
 *    The titles of Washed Out's breakthrough song and the first single from Paracosm share the * two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...
 *  </p>
 * </md-card>
 * </hljs>
 *
 */
  function mdCardDirective($mdTheming) {
    return {
      restrict: 'E',
      link: function ($scope, $element, $attr) {
        $mdTheming($element);
      }
    };
  }
  mdCardDirective.$inject = ['$mdTheming'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.checkbox
 * @description Checkbox module!
 */
  angular.module('material.components.checkbox', ['material.core']).directive('mdCheckbox', MdCheckboxDirective);
  /**
 * @ngdoc directive
 * @name mdCheckbox
 * @module material.components.checkbox
 * @restrict E
 *
 * @description
 * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the checkbox is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects
 * @param {string=} aria-label Adds label to checkbox for accessibility.
 * Defaults to checkbox's text. If no default text is found, a warning will be logged.
 *
 * @usage
 * <hljs lang="html">
 * <md-checkbox ng-model="isChecked" aria-label="Finished?">
 *   Finished ?
 * </md-checkbox>
 *
 * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
 *   No Ink Effects
 * </md-checkbox>
 *
 * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
 *   Disabled
 * </md-checkbox>
 *
 * </hljs>
 *
 */
  function MdCheckboxDirective(inputDirective, $mdInkRipple, $mdAria, $mdConstant, $mdTheming, $mdUtil) {
    inputDirective = inputDirective[0];
    var CHECKED_CSS = 'md-checked';
    return {
      restrict: 'E',
      transclude: true,
      require: '?ngModel',
      template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' + '<div class="md-icon"></div>' + '</div>' + '<div ng-transclude class="md-label"></div>',
      compile: compile
    };
    // **********************************************************
    // Private Methods
    // **********************************************************
    function compile(tElement, tAttrs) {
      tAttrs.type = 'checkbox';
      tAttrs.tabIndex = 0;
      tElement.attr('role', tAttrs.type);
      return function postLink(scope, element, attr, ngModelCtrl) {
        ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();
        var checked = false;
        $mdTheming(element);
        if (attr.ngChecked) {
          scope.$watch(scope.$eval.bind(scope, attr.ngChecked), ngModelCtrl.$setViewValue.bind(ngModelCtrl));
        }
        $mdAria.expectWithText(element, 'aria-label');
        // Reuse the original input[type=checkbox] directive from Angular core.
        // This is a bit hacky as we need our own event listener and own render
        // function.
        inputDirective.link.pre(scope, {
          on: angular.noop,
          0: {}
        }, attr, [ngModelCtrl]);
        element.on('click', listener).on('keypress', keypressHandler);
        ngModelCtrl.$render = render;
        function keypressHandler(ev) {
          if (ev.which === $mdConstant.KEY_CODE.SPACE) {
            ev.preventDefault();
            listener(ev);
          }
        }
        function listener(ev) {
          if (element[0].hasAttribute('disabled'))
            return;
          scope.$apply(function () {
            checked = !checked;
            ngModelCtrl.$setViewValue(checked, ev && ev.type);
            ngModelCtrl.$render();
          });
        }
        function render() {
          checked = ngModelCtrl.$viewValue;
          if (checked) {
            element.addClass(CHECKED_CSS);
          } else {
            element.removeClass(CHECKED_CSS);
          }
        }
      };
    }
  }
  MdCheckboxDirective.$inject = [
    'inputDirective',
    '$mdInkRipple',
    '$mdAria',
    '$mdConstant',
    '$mdTheming',
    '$mdUtil'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.content
 *
 * @description
 * Scrollable content
 */
  angular.module('material.components.content', ['material.core']).directive('mdContent', mdContentDirective);
  /**
 * @ngdoc directive
 * @name mdContent
 * @module material.components.content
 *
 * @restrict E
 *
 * @description
 * The `<md-content>` directive is a container element useful for scrollable content
 *
 * ### Restrictions
 *
 * - Add the `md-padding` class to make the content padded.
 *
 * @usage
 * <hljs lang="html">
 *  <md-content class="md-padding">
 *      Lorem ipsum dolor sit amet, ne quod novum mei.
 *  </md-content>
 * </hljs>
 *
 */
  function mdContentDirective($mdTheming) {
    return {
      restrict: 'E',
      controller: [
        '$scope',
        '$element',
        ContentController
      ],
      link: function (scope, element, attr) {
        var node = element[0];
        $mdTheming(element);
        scope.$broadcast('$mdContentLoaded', element);
        iosScrollFix(element[0]);
      }
    };
    function ContentController($scope, $element) {
      this.$scope = $scope;
      this.$element = $element;
    }
  }
  mdContentDirective.$inject = ['$mdTheming'];
  function iosScrollFix(node) {
    // IOS FIX:
    // If we scroll where there is no more room for the webview to scroll,
    // by default the webview itself will scroll up and down, this looks really
    // bad.  So if we are scrolling to the very top or bottom, add/subtract one
    angular.element(node).on('$md.pressdown', function (ev) {
      // Only touch events
      if (ev.pointer.type !== 't')
        return;
      // Don't let a child content's touchstart ruin it for us.
      if (ev.$materialScrollFixed)
        return;
      ev.$materialScrollFixed = true;
      if (node.scrollTop === 0) {
        node.scrollTop = 1;
      } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {
        node.scrollTop -= 1;
      }
    });
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.dialog
 */
  angular.module('material.components.dialog', [
    'material.core',
    'material.components.backdrop'
  ]).directive('mdDialog', MdDialogDirective).provider('$mdDialog', MdDialogProvider);
  function MdDialogDirective($$rAF, $mdTheming) {
    return {
      restrict: 'E',
      link: function (scope, element, attr) {
        $mdTheming(element);
        $$rAF(function () {
          var content = element[0].querySelector('md-content');
          if (content && content.scrollHeight > content.clientHeight) {
            element.addClass('md-content-overflow');
          }
        });
      }
    };
  }
  MdDialogDirective.$inject = [
    '$$rAF',
    '$mdTheming'
  ];
  /**
 * @ngdoc service
 * @name $mdDialog
 * @module material.components.dialog
 *
 * @description
 * `$mdDialog` opens a dialog over the app to inform users about critical information or require
 *  them to make decisions. There are two approaches for setup: a simple promise API
 *  and regular object syntax.
 *
 * ## Restrictions
 *
 * - The dialog is always given an isolate scope.
 * - The dialog's template must have an outer `<md-dialog>` element.
 *   Inside, use an `<md-content>` element for the dialog's content, and use
 *   an element with class `md-actions` for the dialog's actions.
 *
 * @usage
 * ### HTML
 *
 * <hljs lang="html">
 * <div  ng-app="demoApp" ng-controller="EmployeeController">
 *   <md-button ng-click="showAlert()" class="md-raised md-warn">
 *     Employee Alert!
 *   </md-button>
 *   <md-button ng-click="showDialog($event)" class="md-raised">
 *     Custom Dialog
 *   </md-button>
 *   <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">
 *     Close Alert
 *   </md-button>
 *   <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >
 *     Greet Employee
 *   </md-button>
 * </div>
 * </hljs>
 *
 * ### JavaScript: object syntax
 * <hljs lang="js">
 * (function(angular, undefined){
 *   "use strict";
 *
 *   angular
 *    .module('demoApp', ['ngMaterial'])
 *    .controller('AppCtrl', AppController);
 *
 *   function AppController($scope, $mdDialog) {
 *     var alert;
 *     $scope.showAlert = showAlert;
 *     $scope.showDialog = showDialog;
 *     $scope.items = [1, 2, 3];
 *
 *     // Internal method
 *     function showAlert() {
 *       alert = $mdDialog.alert({
 *         title: 'Attention',
 *         content: 'This is an example of how easy dialogs can be!',
 *         ok: 'Close'
 *       });
 *
 *       $mdDialog
 *         .show( alert )
 *         .finally(function() {
 *           alert = undefined;
 *         });
 *     }
 *
 *     function showDialog($event) {
 *        var parentEl = angular.element(document.body);
 *        $mdDialog.show({
 *          parent: parentEl,
 *          targetEvent: $event,
 *          template:
 *            '<md-dialog aria-label="List dialog">' +
 *            '  <md-content>'+
 *            '    <md-list>'+
 *            '      <md-item ng-repeat="item in items">'+
 *            '       <p>Number {{item}}</p>' +
 *            '      </md-item>'+
 *            '    </md-list>'+
 *            '  </md-content>' +
 *            '  <div class="md-actions">' +
 *            '    <md-button ng-click="closeDialog()">' +
 *            '      Close Dialog' +
 *            '    </md-button>' +
 *            '  </div>' +
 *            '</md-dialog>',
 *          locals: {
 *            items: $scope.items
 *          },
 *          controller: DialogController
 *       });
 *       function DialogController(scope, $mdDialog, items) {
 *         scope.items = items;
 *         scope.closeDialog = function() {
 *           $mdDialog.hide();
 *         }
 *       }
 *     }
 *
 * })(angular);
 * </hljs>
 *
 * ### JavaScript: promise API syntax, custom dialog template
 * <hljs lang="js">
 * (function(angular, undefined){
 *   "use strict";
 *
 *   angular
 *     .module('demoApp', ['ngMaterial'])
 *     .controller('EmployeeController', EmployeeEditor)
 *     .controller('GreetingController', GreetingController);
 *
 *   // Fictitious Employee Editor to show how to use simple and complex dialogs.
 *
 *   function EmployeeEditor($scope, $mdDialog) {
 *     var alert;
 *
 *     $scope.showAlert = showAlert;
 *     $scope.closeAlert = closeAlert;
 *     $scope.showGreeting = showCustomGreeting;
 *
 *     $scope.hasAlert = function() { return !!alert };
 *     $scope.userName = $scope.userName || 'Bobby';
 *
 *     // Dialog #1 - Show simple alert dialog and cache
 *     // reference to dialog instance
 *
 *     function showAlert() {
 *       alert = $mdDialog.alert()
 *         .title('Attention, ' + $scope.userName)
 *         .content('This is an example of how easy dialogs can be!')
 *         .ok('Close');
 *
 *       $mdDialog
 *           .show( alert )
 *           .finally(function() {
 *             alert = undefined;
 *           });
 *     }
 *
 *     // Close the specified dialog instance and resolve with 'finished' flag
 *     // Normally this is not needed, just use '$mdDialog.hide()' to close
 *     // the most recent dialog popup.
 *
 *     function closeAlert() {
 *       $mdDialog.hide( alert, "finished" );
 *       alert = undefined;
 *     }
 *
 *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.
 *
 *     function showCustomGreeting($event) {
 *         $mdDialog.show({
 *           targetEvent: $event,
 *           template:
 *             '<md-dialog>' +
 *
 *             '  <md-content>Hello {{ employee }}!</md-content>' +
 *
 *             '  <div class="md-actions">' +
 *             '    <md-button ng-click="closeDialog()">' +
 *             '      Close Greeting' +
 *
 *             '    </md-button>' +
 *             '  </div>' +
 *             '</md-dialog>',
 *           controller: 'GreetingController',
 *           onComplete: afterShowAnimation,
 *           locals: { employee: $scope.userName }
 *         });
 *
 *         // When the 'enter' animation finishes...
 *
 *         function afterShowAnimation(scope, element, options) {
 *            // post-show code here: DOM element focus, etc.
 *         }
 *     }
 *   }
 *
 *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog
 *
 *   function GreetingController($scope, $mdDialog, employee) {
 *     // Assigned from construction <code>locals</code> options...
 *     $scope.employee = employee;
 *
 *     $scope.closeDialog = function() {
 *       // Easily hides most recent dialog shown...
 *       // no specific instance reference is needed.
 *       $mdDialog.hide();
 *     };
 *   }
 *
 * })(angular);
 * </hljs>
 */
  /**
 * @ngdoc method
 * @name $mdDialog#alert
 *
 * @description
 * Builds a preconfigured dialog with the specified message.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * - $mdDialogPreset#title(string) - sets title to string
 * - $mdDialogPreset#content(string) - sets content / message to string
 * - $mdDialogPreset#ok(string) - sets okay button text to string
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog
 *
 */
  /**
 * @ngdoc method
 * @name $mdDialog#confirm
 *
 * @description
 * Builds a preconfigured dialog with the specified message. You can call show and the promise returned
 * will be resolved only if the user clicks the confirm action on the dialog.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * Additionally, it supports the following methods:
 *
 * - $mdDialogPreset#title(string) - sets title to string
 * - $mdDialogPreset#content(string) - sets content / message to string
 * - $mdDialogPreset#ok(string) - sets okay button text to string
 * - $mdDialogPreset#cancel(string) - sets cancel button text to string
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog
 *
 */
  /**
 * @ngdoc method
 * @name $mdDialog#show
 *
 * @description
 * Show a dialog with the specified options.
 *
 * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and
 * `confirm()`, or an options object with the following properties:
 *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content
 *   of the dialog.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,
 *     the location of the click will be used as the starting point for the opening animation
 *     of the the dialog.
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.
 *     Default true.
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.
 *     Default true.
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to
 *     close it. Default true.
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.
 *     Default true.
 *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller
 *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.
 *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names
 *     of values to inject into the controller. For example, `locals: {three: 3}` would inject
 *     `three` into the controller, with the value 3. If `bindToController` is true, they will be
 *     copied to the controller instead. 
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the
 *     dialog will not open until all of the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending
 *     to the root element of the application.
 *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is
 *     finished.
 *
 * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or
 * rejected with `$mdDialog.cancel()`.
 */
  /**
 * @ngdoc method
 * @name $mdDialog#hide
 *
 * @description
 * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.
 *
 * @param {*=} response An argument for the resolved promise.
 */
  /**
 * @ngdoc method
 * @name $mdDialog#cancel
 *
 * @description
 * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 */
  function MdDialogProvider($$interimElementProvider) {
    var alertDialogMethods = [
        'title',
        'content',
        'ariaLabel',
        'ok'
      ];
    advancedDialogOptions.$inject = [
      '$mdDialog',
      '$mdTheming'
    ];
    dialogDefaultOptions.$inject = [
      '$timeout',
      '$rootElement',
      '$compile',
      '$animate',
      '$mdAria',
      '$document',
      '$mdUtil',
      '$mdConstant',
      '$mdTheming',
      '$$rAF',
      '$q',
      '$mdDialog'
    ];
    return $$interimElementProvider('$mdDialog').setDefaults({
      methods: [
        'disableParentScroll',
        'hasBackdrop',
        'clickOutsideToClose',
        'escapeToClose',
        'targetEvent'
      ],
      options: dialogDefaultOptions
    }).addPreset('alert', {
      methods: [
        'title',
        'content',
        'ariaLabel',
        'ok',
        'theme'
      ],
      options: advancedDialogOptions
    }).addPreset('confirm', {
      methods: [
        'title',
        'content',
        'ariaLabel',
        'ok',
        'cancel',
        'theme'
      ],
      options: advancedDialogOptions
    });
    /* @ngInject */
    function advancedDialogOptions($mdDialog, $mdTheming) {
      return {
        template: [
          '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}">',
          '<md-content>',
          '<h2>{{ dialog.title }}</h2>',
          '<p>{{ dialog.content }}</p>',
          '</md-content>',
          '<div class="md-actions">',
          '<md-button ng-if="dialog.$type == \'confirm\'" ng-click="dialog.abort()">',
          '{{ dialog.cancel }}',
          '</md-button>',
          '<md-button ng-click="dialog.hide()" class="md-primary">',
          '{{ dialog.ok }}',
          '</md-button>',
          '</div>',
          '</md-dialog>'
        ].join(''),
        controller: function mdDialogCtrl() {
          this.hide = function () {
            $mdDialog.hide(true);
          };
          this.abort = function () {
            $mdDialog.cancel();
          };
        },
        controllerAs: 'dialog',
        bindToController: true,
        theme: $mdTheming.defaultTheme()
      };
    }
    /* @ngInject */
    function dialogDefaultOptions($timeout, $rootElement, $compile, $animate, $mdAria, $document, $mdUtil, $mdConstant, $mdTheming, $$rAF, $q, $mdDialog) {
      return {
        hasBackdrop: true,
        isolateScope: true,
        onShow: onShow,
        onRemove: onRemove,
        clickOutsideToClose: true,
        escapeToClose: true,
        targetEvent: null,
        disableParentScroll: true,
        transformTemplate: function (template) {
          return '<div class="md-dialog-container">' + template + '</div>';
        }
      };
      // On show method for dialogs
      function onShow(scope, element, options) {
        // Incase the user provides a raw dom element, always wrap it in jqLite
        options.parent = angular.element(options.parent);
        options.popInTarget = angular.element((options.targetEvent || {}).target);
        var closeButton = findCloseButton();
        configureAria(element.find('md-dialog'));
        if (options.hasBackdrop) {
          var parentOffset = options.parent.prop('scrollTop');
          options.backdrop = angular.element('<md-backdrop class="md-dialog-backdrop md-opaque">');
          $mdTheming.inherit(options.backdrop, options.parent);
          $animate.enter(options.backdrop, options.parent);
          element.css('top', parentOffset + 'px');
        }
        if (options.disableParentScroll) {
          options.lastOverflow = options.parent.css('overflow');
          options.parent.css('overflow', 'hidden');
        }
        return dialogPopIn(element, options.parent, options.popInTarget && options.popInTarget.length && options.popInTarget).then(function () {
          if (options.escapeToClose) {
            options.rootElementKeyupCallback = function (e) {
              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                $timeout($mdDialog.cancel);
              }
            };
            $rootElement.on('keyup', options.rootElementKeyupCallback);
          }
          if (options.clickOutsideToClose) {
            options.dialogClickOutsideCallback = function (ev) {
              // Only close if we click the flex container outside the backdrop
              if (ev.target === element[0]) {
                $timeout($mdDialog.cancel);
              }
            };
            element.on('click', options.dialogClickOutsideCallback);
          }
          closeButton.focus();
        });
        function findCloseButton() {
          //If no element with class dialog-close, try to find the last
          //button child in md-actions and assume it is a close button
          var closeButton = element[0].querySelector('.dialog-close');
          if (!closeButton) {
            var actionButtons = element[0].querySelectorAll('.md-actions button');
            closeButton = actionButtons[actionButtons.length - 1];
          }
          return angular.element(closeButton);
        }
      }
      // On remove function for all dialogs
      function onRemove(scope, element, options) {
        if (options.backdrop) {
          $animate.leave(options.backdrop);
        }
        if (options.disableParentScroll) {
          options.parent.css('overflow', options.lastOverflow);
          delete options.lastOverflow;
        }
        if (options.escapeToClose) {
          $rootElement.off('keyup', options.rootElementKeyupCallback);
        }
        if (options.clickOutsideToClose) {
          element.off('click', options.dialogClickOutsideCallback);
        }
        return dialogPopOut(element, options.parent, options.popInTarget && options.popInTarget.length && options.popInTarget).then(function () {
          options.scope.$destroy();
          element.remove();
          options.popInTarget && options.popInTarget.focus();
        });
      }
      /**
     * Inject ARIA-specific attributes appropriate for Dialogs
     */
      function configureAria(element) {
        element.attr({ 'role': 'dialog' });
        var dialogContent = element.find('md-content');
        if (dialogContent.length === 0) {
          dialogContent = element;
        }
        $mdAria.expectAsync(element, 'aria-label', function () {
          var words = dialogContent.text().split(/\s+/);
          if (words.length > 3)
            words = words.slice(0, 3).concat('...');
          return words.join(' ');
        });
      }
      function dialogPopIn(container, parentElement, clickElement) {
        var dialogEl = container.find('md-dialog');
        parentElement.append(container);
        transformToClickElement(dialogEl, clickElement);
        $$rAF(function () {
          dialogEl.addClass('transition-in').css($mdConstant.CSS.TRANSFORM, '');
        });
        return $mdUtil.transitionEndPromise(dialogEl);
      }
      function dialogPopOut(container, parentElement, clickElement) {
        var dialogEl = container.find('md-dialog');
        dialogEl.addClass('transition-out').removeClass('transition-in');
        transformToClickElement(dialogEl, clickElement);
        return $mdUtil.transitionEndPromise(dialogEl);
      }
      function transformToClickElement(dialogEl, clickElement) {
        if (clickElement) {
          var clickRect = clickElement[0].getBoundingClientRect();
          var dialogRect = dialogEl[0].getBoundingClientRect();
          var scaleX = Math.min(0.5, clickRect.width / dialogRect.width);
          var scaleY = Math.min(0.5, clickRect.height / dialogRect.height);
          dialogEl.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (-dialogRect.left + clickRect.left + clickRect.width / 2 - dialogRect.width / 2) + 'px,' + (-dialogRect.top + clickRect.top + clickRect.height / 2 - dialogRect.height / 2) + 'px,' + '0) scale(' + scaleX + ',' + scaleY + ')');
        }
      }
      function dialogTransitionEnd(dialogEl) {
        var deferred = $q.defer();
        dialogEl.on($mdConstant.CSS.TRANSITIONEND, finished);
        function finished(ev) {
          //Make sure this transitionend didn't bubble up from a child
          if (ev.target === dialogEl[0]) {
            dialogEl.off($mdConstant.CSS.TRANSITIONEND, finished);
            deferred.resolve();
          }
        }
        return deferred.promise;
      }
    }
  }
  MdDialogProvider.$inject = ['$$interimElementProvider'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.divider
 * @description Divider module!
 */
  angular.module('material.components.divider', ['material.core']).directive('mdDivider', MdDividerDirective);
  function MdDividerController() {
  }
  /**
 * @ngdoc directive
 * @name mdDivider
 * @module material.components.divider
 * @restrict E
 *
 * @description
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.
 * @usage
 * <hljs lang="html">
 * <md-divider></md-divider>
 *
 * <md-divider md-inset></md-divider>
 * </hljs>
 *
 */
  function MdDividerDirective($mdTheming) {
    return {
      restrict: 'E',
      link: $mdTheming,
      controller: [MdDividerController]
    };
  }
  MdDividerDirective.$inject = ['$mdTheming'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.gridList
 */
  angular.module('material.components.gridList', ['material.core']).directive('mdGridList', GridListDirective).directive('mdGridTile', GridTileDirective).directive('mdGridTileFooter', GridTileCaptionDirective).directive('mdGridTileHeader', GridTileCaptionDirective).factory('$mdGridLayout', GridLayoutFactory);
  /**
 * @ngdoc directive
 * @name mdGridList
 * @module material.components.gridList
 * @restrict E
 * @description
 * Grid lists are an alternative to standard list views. Grid lists are distinct
 * from grids used for layouts and other visual presentations.
 *
 * A grid list is best suited to presenting a homogenous data type, typically
 * images, and is optimized for visual comprehension and differentiating between
 * like data types.
 *
 * A grid list is a continuous element consisting of tessellated, regular
 * subdivisions called cells that contain tiles (`md-grid-tile`).
 *
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
 *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
 *    style="width: 300px; height: auto;" alt="Grid concepts legend">
 *
 * Cells are arrayed vertically and horizontally within the grid.
 *
 * Tiles hold content and can span one or more cells vertically or horizontally.
 *
 * ### Responsive Attributes
 *
 * The `md-grid-list` directive supports "responsive" attributes, which allow
 * different `md-cols`, `md-gutter` and `md-row-height` values depending on the
 * currently matching media query (as defined in `$mdConstant.MEDIA`).
 *
 * In order to set a responsive attribute, first define the fallback value with
 * the standard attribute name, then add additional attributes with the
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
 * (ie. `md-cols-lg="8"`)
 *
 * @param {number} md-cols Number of columns in the grid.
 * @param {string} md-row-height One of
 * <ul>
 *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>
 *   <li>`{width}:{height}` - Ratio of width to height (eg.
 *   `md-row-height="16:9"`)</li>
 *   <li>`"fit"` - Height will be determined by subdividing the available
 *   height by the number of rows</li>
 * </ul>
 * @param {string=} md-gutter The amount of space between tiles in CSS units
 *     (default 1px)
 * @param {expression=} md-on-layout Expression to evaluate after layout. Event
 *     object is available as `$event`, and contains performance information.
 *
 * @usage
 * Basic:
 * <hljs lang="html">
 * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Fixed-height rows:
 * <hljs lang="html">
 * <md-grid-list md-cols="4" md-row-height="200px" ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Fit rows:
 * <hljs lang="html">
 * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Using responsive attributes:
 * <hljs lang="html">
 * <md-grid-list
 *     md-cols-sm="2"
 *     md-cols-md="4"
 *     md-cols-lg="8"
 *     md-cols-gt-lg="12"
 *     ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 */
  function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia, $mdUtil) {
    return {
      restrict: 'E',
      controller: GridListController,
      scope: { mdOnLayout: '&' },
      link: postLink
    };
    function postLink(scope, element, attrs, ctrl) {
      // Apply semantics
      element.attr('role', 'list');
      // Provide the controller with a way to trigger layouts.
      ctrl.layoutDelegate = layoutDelegate;
      var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout), unwatchAttrs = watchMedia();
      scope.$on('$destroy', unwatchMedia);
      /**
     * Watches for changes in media, invalidating layout as necessary.
     */
      function watchMedia() {
        for (var mediaName in $mdConstant.MEDIA) {
          $mdMedia(mediaName);
          // initialize
          $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).addListener(invalidateLayout);
        }
        return $mdMedia.watchResponsiveAttributes([
          'md-cols',
          'md-row-height'
        ], attrs, layoutIfMediaMatch);
        ;
      }
      function unwatchMedia() {
        unwatchAttrs();
        for (var mediaName in $mdConstant.MEDIA) {
          $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).removeListener(invalidateLayout);
        }
      }
      /**
     * Performs grid layout if the provided mediaName matches the currently
     * active media type.
     */
      function layoutIfMediaMatch(mediaName) {
        if (mediaName == null) {
          // TODO(shyndman): It would be nice to only layout if we have
          // instances of attributes using this media type
          ctrl.invalidateLayout();
        } else if ($mdMedia(mediaName)) {
          ctrl.invalidateLayout();
        }
      }
      /**
     * Invokes the layout engine, and uses its results to lay out our
     * tile elements.
     */
      function layoutDelegate() {
        var tiles = getTileElements(), colCount = getColumnCount(), rowMode = getRowMode(), rowHeight = getRowHeight(), gutter = getGutter(), performance = $mdGridLayout(colCount, getTileSpans(), getTileElements()).map(function (tilePositions, rowCount) {
            return {
              grid: {
                element: element,
                style: getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight)
              },
              tiles: tilePositions.map(function (ps, i) {
                return {
                  element: angular.element(tiles[i]),
                  style: getTileStyle(ps.position, ps.spans, colCount, rowCount, gutter, rowMode, rowHeight)
                };
              })
            };
          }).reflow().performance();
        // Report layout
        scope.mdOnLayout({ $event: { performance: performance } });
      }
      var UNIT = $interpolate('{{ share }}% - ({{ gutter }} * {{ gutterShare }})');
      var POSITION = $interpolate('calc(({{ unit }}) * {{ offset }} + {{ offset }} * {{ gutter }})');
      var DIMENSION = $interpolate('calc(({{ unit }}) * {{ span }} + ({{ span }} - 1) * {{ gutter }})');
      // TODO(shyndman): Replace args with a ctx object.
      function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {
        // TODO(shyndman): There are style caching opportunities here.
        var hShare = 1 / colCount * 100, hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount, hUnit = UNIT({
            share: hShare,
            gutterShare: hGutterShare,
            gutter: gutter
          });
        var style = {
            left: POSITION({
              unit: hUnit,
              offset: position.col,
              gutter: gutter
            }),
            width: DIMENSION({
              unit: hUnit,
              span: spans.col,
              gutter: gutter
            }),
            paddingTop: '',
            marginTop: '',
            top: '',
            height: ''
          };
        switch (rowMode) {
        case 'fixed':
          style.top = POSITION({
            unit: rowHeight,
            offset: position.row,
            gutter: gutter
          });
          style.height = DIMENSION({
            unit: rowHeight,
            span: spans.row,
            gutter: gutter
          });
          break;
        case 'ratio':
          // rowHeight is width / height
          var vShare = hShare * (1 / rowHeight), vUnit = UNIT({
              share: vShare,
              gutterShare: hGutterShare,
              gutter: gutter
            });
          style.paddingTop = DIMENSION({
            unit: vUnit,
            span: spans.row,
            gutter: gutter
          });
          style.marginTop = POSITION({
            unit: vUnit,
            offset: position.row,
            gutter: gutter
          });
          break;
        case 'fit':
          var vGutterShare = rowCount === 1 ? 0 : (rowCount - 1) / rowCount, vShare = 1 / rowCount * 100, vUnit = UNIT({
              share: vShare,
              gutterShare: vGutterShare,
              gutter: gutter
            });
          style.top = POSITION({
            unit: vUnit,
            offset: position.row,
            gutter: gutter
          });
          style.height = DIMENSION({
            unit: vUnit,
            span: spans.row,
            gutter: gutter
          });
          break;
        }
        return style;
      }
      function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {
        var style = {
            height: '',
            paddingBottom: ''
          };
        switch (rowMode) {
        case 'fixed':
          style.height = DIMENSION({
            unit: rowHeight,
            span: rowCount,
            gutter: gutter
          });
          break;
        case 'ratio':
          // rowHeight is width / height
          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount, hShare = 1 / colCount * 100, vShare = hShare * (1 / rowHeight), vUnit = UNIT({
              share: vShare,
              gutterShare: hGutterShare,
              gutter: gutter
            });
          style.paddingBottom = DIMENSION({
            unit: vUnit,
            span: rowCount,
            gutter: gutter
          });
          break;
        case 'fit':
          // noop, as the height is user set
          break;
        }
        return style;
      }
      function getTileElements() {
        // element[0].querySelectorAll(':scope > md-grid-tile') would be
        // preferred, but is not yet widely supported.
        return Array.prototype.slice.call(element[0].childNodes).filter(function (child) {
          return child.tagName == 'MD-GRID-TILE';
        });
      }
      function getTileSpans() {
        return ctrl.tiles.map(function (tileAttrs) {
          return {
            row: parseInt($mdMedia.getResponsiveAttribute(tileAttrs, 'md-rowspan'), 10) || 1,
            col: parseInt($mdMedia.getResponsiveAttribute(tileAttrs, 'md-colspan'), 10) || 1
          };
        });
      }
      function getColumnCount() {
        var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);
        if (isNaN(colCount)) {
          throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';
        }
        return colCount;
      }
      function getGutter() {
        return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);
      }
      function getRowHeight() {
        var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');
        switch (getRowMode()) {
        case 'fixed':
          return applyDefaultUnit(rowHeight);
        case 'ratio':
          var whRatio = rowHeight.split(':');
          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);
        case 'fit':
          return 0;  // N/A
        }
      }
      function getRowMode() {
        var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');
        if (rowHeight == 'fit') {
          return 'fit';
        } else if (rowHeight.indexOf(':') !== -1) {
          return 'ratio';
        } else {
          return 'fixed';
        }
      }
      function applyDefaultUnit(val) {
        return /\D$/.test(val) ? val : val + 'px';
      }
    }
  }
  GridListDirective.$inject = [
    '$interpolate',
    '$mdConstant',
    '$mdGridLayout',
    '$mdMedia',
    '$mdUtil'
  ];
  /* @ngInject */
  function GridListController($timeout) {
    this.invalidated = false;
    this.$timeout_ = $timeout;
    this.tiles = [];
    this.layoutDelegate = angular.noop;
  }
  GridListController.$inject = ['$timeout'];
  GridListController.prototype = {
    addTile: function (tileAttrs, idx) {
      if (angular.isUndefined(idx)) {
        this.tiles.push(tileAttrs);
      } else {
        this.tiles.splice(idx, 0, tileAttrs);
      }
      this.invalidateLayout();
    },
    removeTile: function (tileAttrs) {
      var idx = this.tiles.indexOf(tileAttrs);
      if (idx === -1) {
        return;
      }
      this.tiles.splice(idx, 1);
      this.invalidateLayout();
    },
    invalidateLayout: function () {
      if (this.invalidated) {
        return;
      }
      this.invalidated = true;
      this.$timeout_(angular.bind(this, this.layout));
    },
    layout: function () {
      try {
        this.layoutDelegate();
      } finally {
        this.invalidated = false;
      }
    }
  };
  /* @ngInject */
  function GridLayoutFactory($mdUtil) {
    var defaultAnimator = GridTileAnimator;
    /**
   * Set the reflow animator callback
   */
    GridLayout.animateWith = function (customAnimator) {
      defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;
    };
    return GridLayout;
    /**
   * Publish layout function
   */
    function GridLayout(colCount, tileSpans) {
      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime, layoutInfo;
      layoutTime = $mdUtil.time(function () {
        layoutInfo = calculateGridFor(colCount, tileSpans);
      });
      return self = {
        layoutInfo: function () {
          return layoutInfo;
        },
        map: function (updateFn) {
          mapTime = $mdUtil.time(function () {
            var info = self.layoutInfo();
            gridStyles = updateFn(info.positioning, info.rowCount);
          });
          return self;
        },
        reflow: function (animatorFn) {
          reflowTime = $mdUtil.time(function () {
            var animator = animatorFn || defaultAnimator;
            animator(gridStyles.grid, gridStyles.tiles);
          });
          return self;
        },
        performance: function () {
          return {
            tileCount: tileSpans.length,
            layoutTime: layoutTime,
            mapTime: mapTime,
            reflowTime: reflowTime,
            totalTime: layoutTime + mapTime + reflowTime
          };
        }
      };
    }
    /**
   * Default Gridlist animator simple sets the css for each element;
   * NOTE: any transitions effects must be manually set in the CSS.
   * e.g.
   *
   *  md-grid-tile {
   *    transition: all 700ms ease-out 50ms;
   *  }
   *
   */
    function GridTileAnimator(grid, tiles) {
      grid.element.css(grid.style);
      tiles.forEach(function (t) {
        t.element.css(t.style);
      });
    }
    /**
   * Calculates the positions of tiles.
   *
   * The algorithm works as follows:
   *    An Array<Number> with length colCount (spaceTracker) keeps track of
   *    available tiling positions, where elements of value 0 represents an
   *    empty position. Space for a tile is reserved by finding a sequence of
   *    0s with length <= than the tile's colspan. When such a space has been
   *    found, the occupied tile positions are incremented by the tile's
   *    rowspan value, as these positions have become unavailable for that
   *    many rows.
   *
   *    If the end of a row has been reached without finding space for the
   *    tile, spaceTracker's elements are each decremented by 1 to a minimum
   *    of 0. Rows are searched in this fashion until space is found.
   */
    function calculateGridFor(colCount, tileSpans) {
      var curCol = 0, curRow = 0, spaceTracker = newSpaceTracker();
      return {
        positioning: tileSpans.map(function (spans, i) {
          return {
            spans: spans,
            position: reserveSpace(spans, i)
          };
        }),
        rowCount: curRow + Math.max.apply(Math, spaceTracker)
      };
      function reserveSpace(spans, i) {
        if (spans.col > colCount) {
          throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' + '(' + spans.col + ') that exceeds the column count ' + '(' + colCount + ')';
        }
        var start = 0, end = 0;
        // TODO(shyndman): This loop isn't strictly necessary if you can
        // determine the minimum number of rows before a space opens up. To do
        // this, recognize that you've iterated across an entire row looking for
        // space, and if so fast-forward by the minimum rowSpan count. Repeat
        // until the required space opens up.
        while (end - start < spans.col) {
          if (curCol >= colCount) {
            nextRow();
            continue;
          }
          start = spaceTracker.indexOf(0, curCol);
          if (start === -1 || (end = findEnd(start + 1)) === -1) {
            start = end = 0;
            nextRow();
            continue;
          }
          curCol = end + 1;
        }
        adjustRow(start, spans.col, spans.row);
        curCol = start + spans.col;
        return {
          col: start,
          row: curRow
        };
      }
      function nextRow() {
        curCol = 0;
        curRow++;
        adjustRow(0, colCount, -1);  // Decrement row spans by one
      }
      function adjustRow(from, cols, by) {
        for (var i = from; i < from + cols; i++) {
          spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);
        }
      }
      function findEnd(start) {
        var i;
        for (i = start; i < spaceTracker.length; i++) {
          if (spaceTracker[i] !== 0) {
            return i;
          }
        }
        if (i === spaceTracker.length) {
          return i;
        }
      }
      function newSpaceTracker() {
        var tracker = [];
        for (var i = 0; i < colCount; i++) {
          tracker.push(0);
        }
        return tracker;
      }
    }
  }
  GridLayoutFactory.$inject = ['$mdUtil'];
  /**
 * @ngdoc directive
 * @name mdGridTile
 * @module material.components.gridList
 * @restrict E
 * @description
 * Tiles contain the content of an `md-grid-list`. They span one or more grid
 * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to
 * display secondary content.
 *
 * ### Responsive Attributes
 *
 * The `md-grid-tile` directive supports "responsive" attributes, which allow
 * different `md-rowspan` and `md-colspan` values depending on the currently
 * matching media query (as defined in `$mdConstant.MEDIA`).
 *
 * In order to set a responsive attribute, first define the fallback value with
 * the standard attribute name, then add additional attributes with the
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
 * (ie. `md-colspan-sm="4"`)
 *
 * @param {number=} md-colspan The number of columns to span (default 1). Cannot
 *    exceed the number of columns in the grid. Supports interpolation.
 * @param {number=} md-rowspan The number of rows to span (default 1). Supports
 *     interpolation.
 *
 * @usage
 * With header:
 * <hljs lang="html">
 * <md-grid-tile>
 *   <md-grid-tile-header>
 *     <h3>This is a header</h3>
 *   </md-grid-tile-header>
 * </md-grid-tile>
 * </hljs>
 *
 * With footer:
 * <hljs lang="html">
 * <md-grid-tile>
 *   <md-grid-tile-footer>
 *     <h3>This is a footer</h3>
 *   </md-grid-tile-footer>
 * </md-grid-tile>
 * </hljs>
 *
 * Spanning multiple rows/columns:
 * <hljs lang="html">
 * <md-grid-tile md-colspan="2" md-rowspan="3">
 * </md-grid-tile>
 * </hljs>
 *
 * Responsive attributes:
 * <hljs lang="html">
 * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">
 * </md-grid-tile>
 * </hljs>
 */
  function GridTileDirective($mdMedia) {
    return {
      restrict: 'E',
      require: '^mdGridList',
      template: '<figure ng-transclude></figure>',
      transclude: true,
      link: postLink
    };
    function postLink(scope, element, attrs, gridCtrl) {
      // Apply semantics
      element.attr('role', 'listitem');
      // If our colspan or rowspan changes, trigger a layout
      var unwatchAttrs = $mdMedia.watchResponsiveAttributes([
          'md-colspan',
          'md-rowspan'
        ], attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));
      // Tile registration/deregistration
      // TODO(shyndman): Kind of gross to access parent scope like this.
      //    Consider other options.
      gridCtrl.addTile(attrs, scope.$parent.$index);
      scope.$on('$destroy', function () {
        unwatchAttrs();
        gridCtrl.removeTile(attrs);
      });
    }
  }
  GridTileDirective.$inject = ['$mdMedia'];
  function GridTileCaptionDirective() {
    return {
      template: '<figcaption ng-transclude></figcaption>',
      transclude: true
    };
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.icon
 * @description
 * Icon
 */
  angular.module('material.components.icon', ['material.core']).directive('mdIcon', mdIconDirective);
  /**
 * @ngdoc directive
 * @name mdIcon
 * @module material.components.icon
 *
 * @restrict E
 *
 * @description
 * The `md-icon` directive is an markup element useful for showing an icon based on a font-face
 * or a SVG. Both external SVGs (via URLs) or cached SVG from icon sets can be
 * easily loaded and used.
 *
 * @param {string} md-svg-src String URL [or expression ] used to load, cache, and display an external SVG.
 * @param {string} md-svg-icon String name used for lookup of the icon from the internal cache; interpolated strings or
 * expressions may also be used. Specific set names can be used with the syntax `<set name>:<icon name>`.<br/><br/>
 * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.
 * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.
 * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon
 * nor a label on the parent element, a warning will be logged to the console.
 *
 * @usage
 * <hljs lang="html">
 *  <md-icon md-font-icon="android"          alt="android " ></md-icon>
 *  <md-icon md-svg-icon="action:android"    alt="android " ></md-icon>
 *  <md-icon md-svg-src="/android.svg"       alt="android " ></md-icon>
 *  <md-icon md-svg-src="{{ getAndroid() }}" alt="android " ></md-icon>
 * </hljs>
 */
  function mdIconDirective($mdIcon, $mdTheming, $mdAria) {
    return {
      scope: {
        fontIcon: '@mdFontIcon',
        svgIcon: '@mdSvgIcon',
        svgSrc: '@mdSvgSrc'
      },
      restrict: 'E',
      template: getTemplate,
      link: postLink
    };
    function getTemplate(element, attr) {
      return attr.mdFontIcon ? '<span class="md-font" ng-class="fontIcon"></span>' : '';
    }
    /**
   * Directive postLink
   * Supports embedded SVGs, font-icons, & external SVGs
   */
    function postLink(scope, element, attr) {
      $mdTheming(element);
      var ariaLabel = attr.alt || scope.fontIcon || scope.svgIcon;
      var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');
      if (attr.alt != '' && !parentsHaveText()) {
        $mdAria.expect(element, 'aria-label', ariaLabel);
        $mdAria.expect(element, 'role', 'img');
      } else {
        // Hide from the accessibility layer.
        $mdAria.expect(element, 'aria-hidden', 'true');
      }
      if (attrName) {
        // Use either pre-configured SVG or URL source, respectively.
        attr.$observe(attrName, function (attrVal) {
          element.empty();
          if (attrVal) {
            $mdIcon(attrVal).then(function (svg) {
              element.append(svg);
            });
          }
        });
      }
      function parentsHaveText() {
        var parent = element.parent();
        if (parent.attr('aria-label') || parent.text()) {
          return true;
        } else if (parent.parent().attr('aria-label') || parent.parent().text()) {
          return true;
        }
        return false;
      }
    }
  }
  mdIconDirective.$inject = [
    '$mdIcon',
    '$mdTheming',
    '$mdAria'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.icon').provider('$mdIcon', MdIconProvider);
  /**
    * @ngdoc service
    * @name $mdIconProvider
    * @module material.components.icon
    *
    * @description
    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow
    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`
    * directives are compiled.
    *
    * Loading of the actual svg files are deferred to on-demand requests and are loaded
    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,
    * the `$mdIcon` service searches its registry for the associated source URL;
    * that URL is used to on-demand load and parse the SVG dynamically.
    *
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
    *   });
    * </hljs>
    *
    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime
    * **startup** process (shown below):
    *
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Register a default set of SVG icon definitions
    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')
    *
    *   })
    *   .run(function($http, $templateCache){
    *
    *     // Pre-fetch icons sources by URL and cache in the $templateCache...
    *     // subsequent $http calls will look there first.
    *
    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];
    *
    *     angular.forEach(urls, function(url) {
    *       $http.get(url, {cache: $templateCache});
    *     });
    *
    *   });
    *
    * </hljs>
    *
    * NOTE: the loaded SVG data is subsequently cached internally for future requests.
    *
    */
  /**
    * @ngdoc method
    * @name $mdIconProvider#icon
    *
    * @description
    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.
    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`
    *
    * @param {string} id Icon name/id used to register the icon
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons
    * in the icon set must be the same size. Default size is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
    *   });
    * </hljs>
    *
    */
  /**
    * @ngdoc method
    * @name $mdIconProvider#iconSet
    *
    * @description
    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition
    * has an icon id. Individual icons can be subsequently retrieved from this cached set using
    * `$mdIcon( <icon set name>:<icon name> )`
    *
    * @param {string} id Icon name/id used to register the iconset
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons
    * in the icon set must be the same size. Default size is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set
    *   });
    * </hljs>
    *
    */
  /**
    * @ngdoc method
    * @name $mdIconProvider#defaultIconSet
    *
    * @description
    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,
    * subsequent lookups of icons will failover to search this 'default' icon set.
    * Icon can be retrieved from this cached, default set using `$mdIcon( <icon name> )`
    *
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons
    * in the icon set must be the same size. Default size is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set
    *   });
    * </hljs>
    *
    */
  /**
    * @ngdoc method
    * @name $mdIconProvider#defaultIconSize
    *
    * @description
    * While `<md-icon />` markup can also be style with sizing CSS, this method configures
    * the default width **and** height used for all icons; unless overridden by specific CSS.
    * The default sizing is (24px, 24px).
    *
    * @param {string} iconSize Number indicating the width and height of the icons in the set. All icons
    * in the icon set must be the same size. Default size is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultIconSize(36)   // Register a default icon size (width == height)
    *   });
    * </hljs>
    *
    */
  var config = { defaultIconSize: 24 };
  function MdIconProvider() {
  }
  MdIconProvider.prototype = {
    icon: function icon(id, url, iconSize) {
      if (id.indexOf(':') == -1)
        id = '$default:' + id;
      config[id] = new ConfigurationItem(url, iconSize);
      return this;
    },
    iconSet: function iconSet(id, url, iconSize) {
      config[id] = new ConfigurationItem(url, iconSize);
      return this;
    },
    defaultIconSet: function defaultIconSet(url, iconSize) {
      var setName = '$default';
      if (!config[setName]) {
        config[setName] = new ConfigurationItem(url, iconSize);
      }
      config[setName].iconSize = iconSize || config.defaultIconSize;
      return this;
    },
    defaultIconSize: function defaultIconSize(iconSize) {
      config.defaultIconSize = iconSize;
      return this;
    },
    $get: [
      '$http',
      '$q',
      '$log',
      '$templateCache',
      function ($http, $q, $log, $templateCache) {
        return new MdIconService(config, $http, $q, $log, $templateCache);
      }
    ]
  };
  /**
    *  Configuration item stored in the Icon registry; used for lookups
    *  to load if not already cached in the `loaded` cache
    */
  function ConfigurationItem(url, iconSize) {
    this.url = url;
    this.iconSize = iconSize || config.defaultIconSize;
  }
  /**
  * @ngdoc service
  * @name $mdIcon
  * @module material.components.icon
  *
  * @description
  * The `$mdIcon` service is a function used to lookup SVG icons.
  *
  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.
  *
  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured
  * using the `$mdIconProvider`.
  *
  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.
  *
  * @usage
  * <hljs lang="js">
  * function SomeDirective($mdIcon) {
  *
  *   // See if the icon has already been loaded, if not
  *   // then lookup the icon from the registry cache, load and cache
  *   // it for future requests.
  *   // NOTE: ID queries require configuration with $mdIconProvider
  *
  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });
  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });
  *
  *   // Load and cache the external SVG using a URL
  *
  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {
  *     element.append(iconEl);
  *   });
  * };
  * </hljs>
  *
  * NOTE: The `md-icon` directive internally uses the `$mdIcon` service to query, loaded, and instantiate
  * SVG DOM elements.
  */
  function MdIconService(config, $http, $q, $log, $templateCache) {
    var iconCache = {};
    var urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;
    Icon.prototype = {
      clone: cloneSVG,
      prepare: prepareAndStyle
    };
    return function getIcon(id) {
      id = id || '';
      // If already loaded and cached, use a clone of the cached icon.
      // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.
      if (iconCache[id])
        return $q.when(iconCache[id].clone());
      if (urlRegex.test(id))
        return loadByURL(id).then(cacheIcon(id));
      if (id.indexOf(':') == -1)
        id = '$default:' + id;
      return loadByID(id).catch(loadFromIconSet).catch(announceIdNotFound).catch(announceNotFound).then(cacheIcon(id));
    };
    /**
    * Prepare and cache the loaded icon for the specified `id`
    */
    function cacheIcon(id) {
      return function updateCache(icon) {
        iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);
        return iconCache[id].clone();
      };
    }
    /**
    * Lookup the configuration in the registry, if !registered throw an error
    * otherwise load the icon [on-demand] using the registered URL.
    *
    */
    function loadByID(id) {
      var iconConfig = config[id];
      return !iconConfig ? $q.reject(id) : loadByURL(iconConfig.url).then(function (icon) {
        return new Icon(icon, iconConfig);
      });
    }
    /**
    *    Loads the file as XML and uses querySelector( <id> ) to find
    *    the desired node...
    */
    function loadFromIconSet(id) {
      var setName = id.substring(0, id.lastIndexOf(':')) || '$default';
      var iconSetConfig = config[setName];
      return !iconSetConfig ? $q.reject(id) : loadByURL(iconSetConfig.url).then(extractFromSet);
      function extractFromSet(set) {
        var iconName = id.slice(id.lastIndexOf(':') + 1);
        var icon = set.querySelector('#' + iconName);
        return !icon ? $q.reject(id) : new Icon(icon, iconSetConfig);
      }
    }
    /**
    * Load the icon by URL (may use the $templateCache).
    * Extract the data for later conversion to Icon
    */
    function loadByURL(url) {
      return $http.get(url, { cache: $templateCache }).then(function (response) {
        var els = angular.element(response.data);
        // Iterate to find first svg node, allowing for comments in loaded SVG (common with auto-generated SVGs)
        for (var i = 0; i < els.length; ++i) {
          if (els[i].nodeName == 'svg') {
            return els[i];
          }
        }
      });
    }
    /**
    * User did not specify a URL and the ID has not been registered with the $mdIcon
    * registry
    */
    function announceIdNotFound(id) {
      var msg;
      if (angular.isString(id)) {
        msg = 'icon ' + id + ' not found';
        $log.warn(msg);
      }
      return $q.reject(msg || id);
    }
    /**
    * Catch HTTP or generic errors not related to incorrect icon IDs.
    */
    function announceNotFound(err) {
      var msg = angular.isString(err) ? err : err.message || err.data || err.statusText;
      $log.warn(msg);
      return $q.reject(msg);
    }
    /**
    * Check target signature to see if it is an Icon instance.
    */
    function isIcon(target) {
      return angular.isDefined(target.element) && angular.isDefined(target.config);
    }
    /**
    *  Define the Icon class
    */
    function Icon(el, config) {
      if (el.tagName != 'svg') {
        el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0];
      }
      el = angular.element(el);
      // Inject the namespace if not available...
      if (!el.attr('xmlns')) {
        el.attr('xmlns', 'http://www.w3.org/2000/svg');
      }
      this.element = el;
      this.config = config;
      this.prepare();
    }
    /**
    *  Prepare the DOM element that will be cached in the
    *  loaded iconCache store.
    */
    function prepareAndStyle() {
      var iconSize = this.config ? this.config.iconSize : config.defaultIconSize;
      var svg = angular.element(this.element);
      svg.attr({
        'fit': '',
        'height': '100%',
        'width': '100%',
        'preserveAspectRatio': 'xMidYMid meet',
        'viewBox': svg.attr('viewBox') || '0 0 ' + iconSize + ' ' + iconSize
      }).css({
        'pointer-events': 'none',
        'display': 'block'
      });
      this.element = svg;
    }
    /**
    * Clone the Icon DOM element; which is stored as an angular.element()
    */
    function cloneSVG() {
      return angular.element(this.element[0].cloneNode(true));
    }
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  /**
 * @ngdoc module
 * @name material.components.input
 */
  angular.module('material.components.input', ['material.core']).directive('mdInputContainer', mdInputContainerDirective).directive('label', labelDirective).directive('input', inputTextareaDirective).directive('textarea', inputTextareaDirective).directive('mdMaxlength', mdMaxlengthDirective).directive('placeholder', placeholderDirective);
  /**
 * @ngdoc directive
 * @name mdInputContainer
 * @module material.components.input
 *
 * @restrict E
 *
 * @description
 * `<md-input-container>` is the parent of any input or textarea element.
 *
 * Input and textarea elements will not behave properly unless the md-input-container
 * parent is provided.
 *
 * @param md-is-error {expression=} When the given expression evaluates to true, the input container will go into error state. Defaults to erroring if the input has been touched and is invalid.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-input-container>
 *   <label>Username</label>
 *   <input type="text" ng-model="user.name">
 * </md-input-container>
 *
 * <md-input-container>
 *   <label>Description</label>
 *   <textarea ng-model="user.description"></textarea>
 * </md-input-container>
 *
 * </hljs>
 */
  function mdInputContainerDirective($mdTheming, $parse) {
    ContainerCtrl.$inject = [
      '$scope',
      '$element',
      '$attrs'
    ];
    return {
      restrict: 'E',
      link: postLink,
      controller: ContainerCtrl
    };
    function postLink(scope, element, attr) {
      $mdTheming(element);
    }
    function ContainerCtrl($scope, $element, $attrs) {
      var self = this;
      self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);
      self.element = $element;
      self.setFocused = function (isFocused) {
        $element.toggleClass('md-input-focused', !!isFocused);
      };
      self.setHasValue = function (hasValue) {
        $element.toggleClass('md-input-has-value', !!hasValue);
      };
      self.setInvalid = function (isInvalid) {
        $element.toggleClass('md-input-invalid', !!isInvalid);
      };
      $scope.$watch(function () {
        return self.label && self.input;
      }, function (hasLabelAndInput) {
        if (hasLabelAndInput && !self.label.attr('for')) {
          self.label.attr('for', self.input.attr('id'));
        }
      });
    }
  }
  mdInputContainerDirective.$inject = [
    '$mdTheming',
    '$parse'
  ];
  function labelDirective() {
    return {
      restrict: 'E',
      require: '^?mdInputContainer',
      link: function (scope, element, attr, containerCtrl) {
        if (!containerCtrl || attr.mdNoFloat)
          return;
        containerCtrl.label = element;
        scope.$on('$destroy', function () {
          containerCtrl.label = null;
        });
      }
    };
  }
  /**
 * @ngdoc directive
 * @name mdInput
 * @restrict E
 * @module material.components.input
 *
 * @description
 * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.
 *
 * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is specified, a character counter will be shown underneath the input.<br/><br/>
 * The purpose of **`md-maxength`** is exactly to show the max length counter text. If you don't want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength` or maxlength attributes.
 *
 * @usage
 * <hljs lang="html">
 * <md-input-container>
 *   <label>Color</label>
 *   <input type="text" ng-model="color" required md-maxlength="10">
 * </md-input-container>
 * </hljs>
 * <h3>With Errors (uses [ngMessages](https://docs.angularjs.org/api/ngMessages))</h3>
 * <hljs lang="html">
 * <form name="userForm">
 *   <md-input-container>
 *     <label>Last Name</label>
 *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">
 *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.bio.$dirty">
 *       <div ng-message="required">This is required!</div>
 *       <div ng-message="md-maxlength">That's too long!</div>
 *       <div ng-message="minlength">That's too short!</div>
 *     </div>
 *   </md-input-container>
 *   <md-input-container>
 *     <label>Biography</label>
 *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>
 *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">
 *       <div ng-message="required">This is required!</div>
 *       <div ng-message="md-maxlength">That's too long!</div>
 *     </div>
 *   </md-input-container>
 * </form>
 * </hljs>
 *
 * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).
 *
 */
  function inputTextareaDirective($mdUtil, $window) {
    return {
      restrict: 'E',
      require: [
        '^?mdInputContainer',
        '?ngModel'
      ],
      link: postLink
    };
    function postLink(scope, element, attr, ctrls) {
      var containerCtrl = ctrls[0];
      var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
      var isReadonly = angular.isDefined(attr.readonly);
      if (!containerCtrl)
        return;
      if (containerCtrl.input) {
        throw new Error('<md-input-container> can only have *one* <input> or <textarea> child element!');
      }
      containerCtrl.input = element;
      element.addClass('md-input');
      if (!element.attr('id')) {
        element.attr('id', 'input_' + $mdUtil.nextUid());
      }
      if (element[0].tagName.toLowerCase() === 'textarea') {
        setupTextarea();
      }
      var isErrorGetter = containerCtrl.isErrorGetter || function () {
          return ngModelCtrl.$invalid && ngModelCtrl.$touched;
        };
      scope.$watch(isErrorGetter, containerCtrl.setInvalid);
      ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);
      ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);
      element.on('input', inputCheckValue);
      if (!isReadonly) {
        element.on('focus', function (ev) {
          containerCtrl.setFocused(true);
          // Error text should not appear before user interaction with the field.
          // So we need to check on focus also
          ngModelCtrl.$setTouched();
          if (isErrorGetter())
            containerCtrl.setInvalid(true);
        }).on('blur', function (ev) {
          containerCtrl.setFocused(false);
          inputCheckValue();
        });
      }
      scope.$on('$destroy', function () {
        containerCtrl.setFocused(false);
        containerCtrl.setHasValue(false);
        containerCtrl.input = null;
      });
      /**
     *
     */
      function ngModelPipelineCheckValue(arg) {
        containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));
        return arg;
      }
      function inputCheckValue() {
        // An input's value counts if its length > 0,
        // or if the input's validity state says it has bad input (eg string in a number input)
        containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);
      }
      function setupTextarea() {
        var node = element[0];
        var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);
        function pipelineListener(value) {
          onChangeTextarea();
          return value;
        }
        if (ngModelCtrl) {
          ngModelCtrl.$formatters.push(pipelineListener);
          ngModelCtrl.$viewChangeListeners.push(pipelineListener);
        } else {
          onChangeTextarea();
        }
        element.on('keydown input', onChangeTextarea);
        element.on('scroll', onScroll);
        angular.element($window).on('resize', onChangeTextarea);
        scope.$on('$destroy', function () {
          angular.element($window).off('resize', onChangeTextarea);
        });
        function growTextarea() {
          node.style.height = 'auto';
          var line = node.scrollHeight - node.offsetHeight;
          node.scrollTop = 0;
          var height = node.offsetHeight + (line > 0 ? line : 0);
          node.style.height = height + 'px';
        }
        function onScroll(e) {
          node.scrollTop = 0;
          // for smooth new line adding
          var line = node.scrollHeight - node.offsetHeight;
          var height = node.offsetHeight + line;
          node.style.height = height + 'px';
        }
      }
    }
  }
  inputTextareaDirective.$inject = [
    '$mdUtil',
    '$window'
  ];
  function mdMaxlengthDirective($animate) {
    return {
      restrict: 'A',
      require: [
        'ngModel',
        '^mdInputContainer'
      ],
      link: postLink
    };
    function postLink(scope, element, attr, ctrls) {
      var maxlength;
      var ngModelCtrl = ctrls[0];
      var containerCtrl = ctrls[1];
      var charCountEl = angular.element('<div class="md-char-counter">');
      // Stop model from trimming. This makes it so whitespace
      // over the maxlength still counts as invalid.
      attr.$set('ngTrim', 'false');
      containerCtrl.element.append(charCountEl);
      ngModelCtrl.$formatters.push(renderCharCount);
      ngModelCtrl.$viewChangeListeners.push(renderCharCount);
      element.on('input keydown', function () {
        renderCharCount();  //make sure it's called with no args
      });
      scope.$watch(attr.mdMaxlength, function (value) {
        maxlength = value;
        if (angular.isNumber(value) && value > 0) {
          if (!charCountEl.parent().length) {
            $animate.enter(charCountEl, containerCtrl.element, angular.element(containerCtrl.element[0].lastElementChild));
          }
          renderCharCount();
        } else {
          $animate.leave(charCountEl);
        }
      });
      ngModelCtrl.$validators['md-maxlength'] = function (modelValue, viewValue) {
        if (!angular.isNumber(maxlength) || maxlength < 0) {
          return true;
        }
        return (modelValue || element.val() || viewValue || '').length <= maxlength;
      };
      function renderCharCount(value) {
        charCountEl.text((element.val() || value || '').length + '/' + maxlength);
        return value;
      }
    }
  }
  mdMaxlengthDirective.$inject = ['$animate'];
  function placeholderDirective() {
    return {
      restrict: 'A',
      require: '^^?mdInputContainer',
      link: postLink
    };
    function postLink(scope, element, attr, inputContainer) {
      if (!inputContainer)
        return;
      var placeholderText = attr.placeholder;
      element.removeAttr('placeholder');
      inputContainer.element.append('<div class="md-placeholder">' + placeholderText + '</div>');
    }
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.list
 * @description
 * List module
 */
  angular.module('material.components.list', ['material.core']).directive('mdList', mdListDirective).directive('mdItem', mdItemDirective);
  /**
 * @ngdoc directive
 * @name mdList
 * @module material.components.list
 *
 * @restrict E
 *
 * @description
 * The `<md-list>` directive is a list container for 1..n `<md-item>` tags.
 *
 * @usage
 * <hljs lang="html">
 * <md-list>
 *   <md-item ng-repeat="item in todos">
 *     <md-item-content>
 *       <div class="md-tile-left">
 *         <img ng-src="{{item.face}}" class="face" alt="{{item.who}}">
 *       </div>
 *       <div class="md-tile-content">
 *         <h3>{{item.what}}</h3>
 *         <h4>{{item.who}}</h4>
 *         <p>
 *           {{item.notes}}
 *         </p>
 *       </div>
 *     </md-item-content>
 *   </md-item>
 * </md-list>
 * </hljs>
 *
 */
  function mdListDirective() {
    return {
      restrict: 'E',
      link: function ($scope, $element, $attr) {
        $element.attr({ 'role': 'list' });
      }
    };
  }
  /**
 * @ngdoc directive
 * @name mdItem
 * @module material.components.list
 *
 * @restrict E
 *
 * @description
 * The `<md-item>` directive is a container intended for row items in a `<md-list>` container.
 *
 * @usage
 * <hljs lang="html">
 *  <md-list>
 *    <md-item>
 *            Item content in list
 *    </md-item>
 *  </md-list>
 * </hljs>
 *
 */
  function mdItemDirective() {
    return {
      restrict: 'E',
      link: function ($scope, $element, $attr) {
        $element.attr({ 'role': 'listitem' });
      }
    };
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.progressCircular
 * @description Circular Progress module!
 */
  angular.module('material.components.progressCircular', ['material.core']).directive('mdProgressCircular', MdProgressCircularDirective);
  /**
 * @ngdoc directive
 * @name mdProgressCircular
 * @module material.components.progressCircular
 * @restrict E
 *
* @description
 * The circular progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content.
 *
 * For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.
 *
 * For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.
 *
 * @param {string} md-mode Select from one of two modes: determinate and indeterminate.
 * @param {number=} value In determinate mode, this number represents the percentage of the circular progress. Default: 0
 * @param {number=} md-diameter This specifies the diamter of the circular progress. Default: 48
 *
 * @usage
 * <hljs lang="html">
 * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>
 *
 * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>
 *
 * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>
 *
 * <md-progress-circular md-mode="indeterminate"></md-progress-circular>
 * </hljs>
 */
  function MdProgressCircularDirective($$rAF, $mdConstant, $mdTheming) {
    var fillRotations = new Array(101), fixRotations = new Array(101);
    for (var i = 0; i < 101; i++) {
      var percent = i / 100;
      var rotation = Math.floor(percent * 180);
      fillRotations[i] = 'rotate(' + rotation.toString() + 'deg)';
      fixRotations[i] = 'rotate(' + (rotation * 2).toString() + 'deg)';
    }
    return {
      restrict: 'E',
      template: '<div class="md-spinner-wrapper">' + '<div class="md-inner">' + '<div class="md-gap"></div>' + '<div class="md-left">' + '<div class="md-half-circle"></div>' + '</div>' + '<div class="md-right">' + '<div class="md-half-circle"></div>' + '</div>' + '</div>' + '</div>',
      compile: compile
    };
    function compile(tElement, tAttrs, transclude) {
      tElement.attr('aria-valuemin', 0);
      tElement.attr('aria-valuemax', 100);
      tElement.attr('role', 'progressbar');
      return postLink;
    }
    function postLink(scope, element, attr) {
      $mdTheming(element);
      var circle = element[0], fill = circle.querySelectorAll('.md-fill, .md-mask.md-full'), fix = circle.querySelectorAll('.md-fill.md-fix'), i, clamped, fillRotation, fixRotation;
      var diameter = attr.mdDiameter || 48;
      var scale = diameter / 48;
      circle.style[$mdConstant.CSS.TRANSFORM] = 'scale(' + scale.toString() + ')';
      attr.$observe('value', function (value) {
        clamped = clamp(value);
        fillRotation = fillRotations[clamped];
        fixRotation = fixRotations[clamped];
        element.attr('aria-valuenow', clamped);
        for (i = 0; i < fill.length; i++) {
          fill[i].style[$mdConstant.CSS.TRANSFORM] = fillRotation;
        }
        for (i = 0; i < fix.length; i++) {
          fix[i].style[$mdConstant.CSS.TRANSFORM] = fixRotation;
        }
      });
    }
    function clamp(value) {
      if (value > 100) {
        return 100;
      }
      if (value < 0) {
        return 0;
      }
      return Math.ceil(value || 0);
    }
  }
  MdProgressCircularDirective.$inject = [
    '$$rAF',
    '$mdConstant',
    '$mdTheming'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.progressLinear
 * @description Linear Progress module!
 */
  angular.module('material.components.progressLinear', ['material.core']).directive('mdProgressLinear', MdProgressLinearDirective);
  /**
 * @ngdoc directive
 * @name mdProgressLinear
 * @module material.components.progressLinear
 * @restrict E
 *
 * @description
 * The linear progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.
 *
 * For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.
 *
 * For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.
 *
 * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.
 * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
 * @param {number=} md-buffer-value In the buffer mode, this number represents the precentage of the secondary progress bar. Default: 0
 *
 * @usage
 * <hljs lang="html">
 * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="indeterminate"></md-progress-linear>
 *
 * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="query"></md-progress-linear>
 * </hljs>
 */
  function MdProgressLinearDirective($$rAF, $mdConstant, $mdTheming) {
    return {
      restrict: 'E',
      template: '<div class="md-container">' + '<div class="md-dashed"></div>' + '<div class="md-bar md-bar1"></div>' + '<div class="md-bar md-bar2"></div>' + '</div>',
      compile: compile
    };
    function compile(tElement, tAttrs, transclude) {
      tElement.attr('aria-valuemin', 0);
      tElement.attr('aria-valuemax', 100);
      tElement.attr('role', 'progressbar');
      return postLink;
    }
    function postLink(scope, element, attr) {
      $mdTheming(element);
      var bar1Style = element[0].querySelector('.md-bar1').style, bar2Style = element[0].querySelector('.md-bar2').style, container = angular.element(element[0].querySelector('.md-container'));
      attr.$observe('value', function (value) {
        if (attr.mdMode == 'query') {
          return;
        }
        var clamped = clamp(value);
        element.attr('aria-valuenow', clamped);
        bar2Style[$mdConstant.CSS.TRANSFORM] = transforms[clamped];
      });
      attr.$observe('mdBufferValue', function (value) {
        bar1Style[$mdConstant.CSS.TRANSFORM] = transforms[clamp(value)];
      });
      $$rAF(function () {
        container.addClass('md-ready');
      });
    }
    function clamp(value) {
      if (value > 100) {
        return 100;
      }
      if (value < 0) {
        return 0;
      }
      return Math.ceil(value || 0);
    }
  }
  MdProgressLinearDirective.$inject = [
    '$$rAF',
    '$mdConstant',
    '$mdTheming'
  ];
  // **********************************************************
  // Private Methods
  // **********************************************************
  var transforms = function () {
      var values = new Array(101);
      for (var i = 0; i < 101; i++) {
        values[i] = makeTransform(i);
      }
      return values;
      function makeTransform(value) {
        var scale = value / 100;
        var translateX = (value - 100) / 2;
        return 'translateX(' + translateX.toString() + '%) scale(' + scale.toString() + ', 1)';
      }
    }();
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.radioButton
 * @description radioButton module!
 */
  angular.module('material.components.radioButton', ['material.core']).directive('mdRadioGroup', mdRadioGroupDirective).directive('mdRadioButton', mdRadioButtonDirective);
  /**
 * @ngdoc directive
 * @module material.components.radioButton
 * @name mdRadioGroup
 *
 * @restrict E
 *
 * @description
 * The `<md-radio-group>` directive identifies a grouping
 * container for the 1..n grouped radio buttons; specified using nested
 * `<md-radio-button>` tags.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the radio button is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently
 * than the native `<input type='radio'>` controls. Whereas the native controls
 * force the user to tab through all the radio buttons, `<md-radio-group>`
 * is focusable, and by default the `<md-radio-button>`s are not.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.
 *
 * @usage
 * <hljs lang="html">
 * <md-radio-group ng-model="selected">
 *
 *   <md-radio-button
 *        ng-repeat="d in colorOptions"
 *        ng-value="d.value" aria-label="{{ d.label }}">
 *
 *          {{ d.label }}
 *
 *   </md-radio-button>
 *
 * </md-radio-group>
 * </hljs>
 *
 */
  function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming) {
    RadioGroupController.prototype = createRadioGroupControllerProto();
    return {
      restrict: 'E',
      controller: [
        '$element',
        RadioGroupController
      ],
      require: [
        'mdRadioGroup',
        '?ngModel'
      ],
      link: { pre: linkRadioGroup }
    };
    function linkRadioGroup(scope, element, attr, ctrls) {
      $mdTheming(element);
      var rgCtrl = ctrls[0];
      var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
      function keydownListener(ev) {
        switch (ev.keyCode) {
        case $mdConstant.KEY_CODE.LEFT_ARROW:
        case $mdConstant.KEY_CODE.UP_ARROW:
          ev.preventDefault();
          rgCtrl.selectPrevious();
          break;
        case $mdConstant.KEY_CODE.RIGHT_ARROW:
        case $mdConstant.KEY_CODE.DOWN_ARROW:
          ev.preventDefault();
          rgCtrl.selectNext();
          break;
        case $mdConstant.KEY_CODE.ENTER:
          var form = angular.element($mdUtil.getClosest(element[0], 'form'));
          if (form.length > 0) {
            form.triggerHandler('submit');
          }
          break;
        }
      }
      rgCtrl.init(ngModelCtrl);
      element.attr({
        'role': 'radiogroup',
        'tabIndex': element.attr('tabindex') || '0'
      }).on('keydown', keydownListener);
    }
    function RadioGroupController($element) {
      this._radioButtonRenderFns = [];
      this.$element = $element;
    }
    function createRadioGroupControllerProto() {
      return {
        init: function (ngModelCtrl) {
          this._ngModelCtrl = ngModelCtrl;
          this._ngModelCtrl.$render = angular.bind(this, this.render);
        },
        add: function (rbRender) {
          this._radioButtonRenderFns.push(rbRender);
        },
        remove: function (rbRender) {
          var index = this._radioButtonRenderFns.indexOf(rbRender);
          if (index !== -1) {
            this._radioButtonRenderFns.splice(index, 1);
          }
        },
        render: function () {
          this._radioButtonRenderFns.forEach(function (rbRender) {
            rbRender();
          });
        },
        setViewValue: function (value, eventType) {
          this._ngModelCtrl.$setViewValue(value, eventType);
          // update the other radio buttons as well
          this.render();
        },
        getViewValue: function () {
          return this._ngModelCtrl.$viewValue;
        },
        selectNext: function () {
          return changeSelectedButton(this.$element, 1);
        },
        selectPrevious: function () {
          return changeSelectedButton(this.$element, -1);
        },
        setActiveDescendant: function (radioId) {
          this.$element.attr('aria-activedescendant', radioId);
        }
      };
    }
    /**
   * Change the radio group's selected button by a given increment.
   * If no button is selected, select the first button.
   */
    function changeSelectedButton(parent, increment) {
      // Coerce all child radio buttons into an array, then wrap then in an iterator
      var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);
      if (buttons.count()) {
        var validate = function (button) {
          // If disabled, then NOT valid
          return !angular.element(button).attr('disabled');
        };
        var selected = parent[0].querySelector('md-radio-button.md-checked');
        var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();
        // Activate radioButton's click listener (triggerHandler won't create a real click event)
        angular.element(target).triggerHandler('click');
      }
    }
  }
  mdRadioGroupDirective.$inject = [
    '$mdUtil',
    '$mdConstant',
    '$mdTheming'
  ];
  /**
 * @ngdoc directive
 * @module material.components.radioButton
 * @name mdRadioButton
 *
 * @restrict E
 *
 * @description
 * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.
 *
 * While similar to the `<input type="radio" ng-model="" value="">` directive,
 * the `<md-radio-button>` directive provides ink effects, ARIA support, and
 * supports use within named radio groups.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {string} ngValue Angular expression which sets the value to which the expression should
 *    be set when selected.*
 * @param {string} value The value to which the expression should be set when selected.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} ariaLabel Adds label to radio button for accessibility.
 * Defaults to radio button's text. If no text content is available, a warning will be logged.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-radio-button value="1" aria-label="Label 1">
 *   Label 1
 * </md-radio-button>
 *
 * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">
 *   Green
 * </md-radio-button>
 *
 * </hljs>
 *
 */
  function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {
    var CHECKED_CSS = 'md-checked';
    return {
      restrict: 'E',
      require: '^mdRadioGroup',
      transclude: true,
      template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' + '<div class="md-off"></div>' + '<div class="md-on"></div>' + '</div>' + '<div ng-transclude class="md-label"></div>',
      link: link
    };
    function link(scope, element, attr, rgCtrl) {
      var lastChecked;
      $mdTheming(element);
      configureAria(element, scope);
      rgCtrl.add(render);
      attr.$observe('value', render);
      element.on('click', listener).on('$destroy', function () {
        rgCtrl.remove(render);
      });
      function listener(ev) {
        if (element[0].hasAttribute('disabled'))
          return;
        scope.$apply(function () {
          rgCtrl.setViewValue(attr.value, ev && ev.type);
        });
      }
      function render() {
        var checked = rgCtrl.getViewValue() == attr.value;
        if (checked === lastChecked) {
          return;
        }
        lastChecked = checked;
        element.attr('aria-checked', checked);
        if (checked) {
          element.addClass(CHECKED_CSS);
          rgCtrl.setActiveDescendant(element.attr('id'));
        } else {
          element.removeClass(CHECKED_CSS);
        }
      }
      /**
     * Inject ARIA-specific attributes appropriate for each radio button
     */
      function configureAria(element, scope) {
        scope.ariaId = buildAriaID();
        element.attr({
          'id': scope.ariaId,
          'role': 'radio',
          'aria-checked': 'false'
        });
        $mdAria.expectWithText(element, 'aria-label');
        /**
       * Build a unique ID for each radio button that will be used with aria-activedescendant.
       * Preserve existing ID if already specified.
       * @returns {*|string}
       */
        function buildAriaID() {
          return attr.id || 'radio' + '_' + $mdUtil.nextUid();
        }
      }
    }
  }
  mdRadioButtonDirective.$inject = [
    '$mdAria',
    '$mdUtil',
    '$mdTheming'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.sidenav
 *
 * @description
 * A Sidenav QP component.
 */
  angular.module('material.components.sidenav', [
    'material.core',
    'material.components.backdrop'
  ]).factory('$mdSidenav', SidenavService).directive('mdSidenav', SidenavDirective).controller('$mdSidenavController', SidenavController);
  /**
 * @private
 * @ngdoc service
 * @name $mdSidenav
 * @module material.components.sidenav
 *
 * @description
 * `$mdSidenav` makes it easy to interact with multiple sidenavs
 * in an app.
 *
 * @usage
 * <hljs lang="js">
 * // Toggle the given sidenav
 * $mdSidenav(componentId).toggle();
 * </hljs>
 * <hljs lang="js">
 * // Open the given sidenav
 * $mdSidenav(componentId).open();
 * </hljs>
 * <hljs lang="js">
 * // Close the given sidenav
 * $mdSidenav(componentId).close();
 * </hljs>
 * <hljs lang="js">
 * // Exposes whether given sidenav is set to be open
 * $mdSidenav(componentId).isOpen();
 * </hljs>
 * <hljs lang="js">
 * // Exposes whether given sidenav is locked open
 * // If this is true, the sidenav will be open regardless of isOpen()
 * $mdSidenav(componentId).isLockedOpen();
 * </hljs>
 */
  function SidenavService($mdComponentRegistry, $q) {
    return function (handle) {
      var errorMsg = 'SideNav \'' + handle + '\' is not available!';
      // Lookup the controller instance for the specified sidNav instance
      var instance = $mdComponentRegistry.get(handle);
      if (!instance) {
        $mdComponentRegistry.notFoundError(handle);
      }
      return {
        isOpen: function () {
          return instance && instance.isOpen();
        },
        isLockedOpen: function () {
          return instance && instance.isLockedOpen();
        },
        toggle: function () {
          return instance ? instance.toggle() : $q.reject(errorMsg);
        },
        open: function () {
          return instance ? instance.open() : $q.reject(errorMsg);
        },
        close: function () {
          return instance ? instance.close() : $q.reject(errorMsg);
        }
      };
    };
  }
  SidenavService.$inject = [
    '$mdComponentRegistry',
    '$q'
  ];
  /**
 * @ngdoc directive
 * @name mdSidenav
 * @module material.components.sidenav
 * @restrict E
 *
 * @description
 *
 * A Sidenav component that can be opened and closed programatically.
 *
 * By default, upon opening it will slide out on top of the main content area.
 *
 * @usage
 * <hljs lang="html">
 * <div layout="row" ng-controller="MyController">
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">
 *     Left Nav!
 *   </md-sidenav>
 *
 *   <md-content>
 *     Center Content
 *     <md-button ng-click="openLeftMenu()">
 *       Open Left Menu
 *     </md-button>
 *   </md-content>
 *
 *   <md-sidenav md-component-id="right"
 *     md-is-locked-open="$media('min-width: 333px')"
 *     class="md-sidenav-right">
 *     Right Nav!
 *   </md-sidenav>
 * </div>
 * </hljs>
 *
 * <hljs lang="js">
 * var app = angular.module('myApp', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdSidenav) {
 *   $scope.openLeftMenu = function() {
 *     $mdSidenav('left').toggle();
 *   };
 * });
 * </hljs>
 *
 * @param {expression=} md-is-open A model bound to whether the sidenav is opened.
 * @param {string=} md-component-id componentId to use with $mdSidenav service.
 * @param {expression=} md-is-locked-open When this expression evalutes to true,
 * the sidenav 'locks open': it falls into the content's flow instead
 * of appearing over it. This overrides the `is-open` attribute.
 *
 * A $media() function is exposed to the is-locked-open attribute, which
 * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.
 * Examples:
 *
 *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`
 *   - `<md-sidenav md-is-locked-open="$media('min-width: 1000px')"></md-sidenav>`
 *   - `<md-sidenav md-is-locked-open="$media('sm')"></md-sidenav>` (locks open on small screens)
 */
  function SidenavDirective($timeout, $animate, $parse, $mdMedia, $mdConstant, $compile, $mdTheming, $q, $document) {
    return {
      restrict: 'E',
      scope: { isOpen: '=?mdIsOpen' },
      controller: '$mdSidenavController',
      compile: function (element) {
        element.addClass('md-closed');
        element.attr('tabIndex', '-1');
        return postLink;
      }
    };
    /**
   * Directive Post Link function...
   */
    function postLink(scope, element, attr, sidenavCtrl) {
      var triggeringElement = null;
      var promise = $q.when(true);
      var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);
      var isLocked = function () {
        return isLockedOpenParsed(scope.$parent, { $media: $mdMedia });
      };
      var backdrop = $compile('<md-backdrop class="md-sidenav-backdrop md-opaque ng-enter">')(scope);
      element.on('$destroy', sidenavCtrl.destroy);
      $mdTheming.inherit(backdrop, element);
      scope.$watch(isLocked, updateIsLocked);
      scope.$watch('isOpen', updateIsOpen);
      // Publish special accessor for the Controller instance
      sidenavCtrl.$toggleOpen = toggleOpen;
      /**
     * Toggle the DOM classes to indicate `locked`
     * @param isLocked
     */
      function updateIsLocked(isLocked, oldValue) {
        scope.isLockedOpen = isLocked;
        if (isLocked === oldValue) {
          element.toggleClass('md-locked-open', !!isLocked);
        } else {
          $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');
        }
        backdrop.toggleClass('md-locked-open', !!isLocked);
      }
      /**
     * Toggle the SideNav view and attach/detach listeners
     * @param isOpen
     */
      function updateIsOpen(isOpen) {
        var parent = element.parent();
        parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);
        backdrop[isOpen ? 'on' : 'off']('click', close);
        if (isOpen) {
          // Capture upon opening..
          triggeringElement = $document[0].activeElement;
        }
        return promise = $q.all([
          $animate[isOpen ? 'enter' : 'leave'](backdrop, parent),
          $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed').then(function () {
            // If we opened, and haven't closed again before the animation finished
            if (scope.isOpen) {
              element.focus();
            }
          })
        ]);
      }
      /**
     * Toggle the sideNav view and publish a promise to be resolved when
     * the view animation finishes.
     *
     * @param isOpen
     * @returns {*}
     */
      function toggleOpen(isOpen) {
        if (scope.isOpen == isOpen) {
          return $q.when(true);
        } else {
          var deferred = $q.defer();
          // Toggle value to force an async `updateIsOpen()` to run
          scope.isOpen = isOpen;
          $timeout(function () {
            // When the current `updateIsOpen()` animation finishes
            promise.then(function (result) {
              if (!scope.isOpen) {
                // reset focus to originating element (if available) upon close
                triggeringElement && triggeringElement.focus();
                triggeringElement = null;
              }
              deferred.resolve(result);
            });
          }, 0, false);
          return deferred.promise;
        }
      }
      /**
     * Auto-close sideNav when the `escape` key is pressed.
     * @param evt
     */
      function onKeyDown(ev) {
        var isEscape = ev.keyCode === $mdConstant.KEY_CODE.ESCAPE;
        return isEscape ? close(ev) : $q.when(true);
      }
      /**
     * With backdrop `clicks` or `escape` key-press, immediately
     * apply the CSS close transition... Then notify the controller
     * to close() and perform its own actions.
     */
      function close(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        return sidenavCtrl.close();
      }
    }
  }
  SidenavDirective.$inject = [
    '$timeout',
    '$animate',
    '$parse',
    '$mdMedia',
    '$mdConstant',
    '$compile',
    '$mdTheming',
    '$q',
    '$document'
  ];
  /*
 * @private
 * @ngdoc controller
 * @name SidenavController
 * @module material.components.sidenav
 *
 */
  function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {
    var self = this;
    // Use Default internal method until overridden by directive postLink
    self.$toggleOpen = function () {
      return $q.when($scope.isOpen);
    };
    self.isOpen = function () {
      return !!$scope.isOpen;
    };
    self.isLockedOpen = function () {
      return !!$scope.isLockedOpen;
    };
    self.open = function () {
      return self.$toggleOpen(true);
    };
    self.close = function () {
      return self.$toggleOpen(false);
    };
    self.toggle = function () {
      return self.$toggleOpen(!$scope.isOpen);
    };
    self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);
  }
  SidenavController.$inject = [
    '$scope',
    '$element',
    '$attrs',
    '$mdComponentRegistry',
    '$q'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name material.components.slider
   */
  angular.module('material.components.slider', ['material.core']).directive('mdSlider', SliderDirective);
  /**
 * @ngdoc directive
 * @name mdSlider
 * @module material.components.slider
 * @restrict E
 * @description
 * The `<md-slider>` component allows the user to choose from a range of
 * values.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the slider is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * It has two modes: 'normal' mode, where the user slides between a wide range
 * of values, and 'discrete' mode, where the user slides between only a few
 * select values.
 *
 * To enable discrete mode, add the `md-discrete` attribute to a slider,
 * and use the `step` attribute to change the distance between
 * values the user is allowed to pick.
 *
 * @usage
 * <h4>Normal Mode</h4>
 * <hljs lang="html">
 * <md-slider ng-model="myValue" min="5" max="500">
 * </md-slider>
 * </hljs>
 * <h4>Discrete Mode</h4>
 * <hljs lang="html">
 * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">
 * </md-slider>
 * </hljs>
 *
 * @param {boolean=} md-discrete Whether to enable discrete mode.
 * @param {number=} step The distance between values the user is allowed to pick. Default 1.
 * @param {number=} min The minimum value the user is allowed to pick. Default 0.
 * @param {number=} max The maximum value the user is allowed to pick. Default 100.
 */
  function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse) {
    return {
      scope: {},
      require: '?ngModel',
      template: '<div class="md-slider-wrapper">        <div class="md-track-container">          <div class="md-track"></div>          <div class="md-track md-track-fill"></div>          <div class="md-track-ticks"></div>        </div>        <div class="md-thumb-container">          <div class="md-thumb"></div>          <div class="md-focus-thumb"></div>          <div class="md-focus-ring"></div>          <div class="md-sign">            <span class="md-thumb-text"></span>          </div>          <div class="md-disabled-thumb"></div>        </div>      </div>',
      compile: compile
    };
    // **********************************************************
    // Private Methods
    // **********************************************************
    function compile(tElement, tAttrs) {
      tElement.attr({
        tabIndex: 0,
        role: 'slider'
      });
      $mdAria.expect(tElement, 'aria-label');
      return postLink;
    }
    function postLink(scope, element, attr, ngModelCtrl) {
      $mdTheming(element);
      ngModelCtrl = ngModelCtrl || {
        $setViewValue: function (val) {
          this.$viewValue = val;
          this.$viewChangeListeners.forEach(function (cb) {
            cb();
          });
        },
        $parsers: [],
        $formatters: [],
        $viewChangeListeners: []
      };
      var isDisabledParsed = attr.ngDisabled && $parse(attr.ngDisabled);
      var isDisabledGetter = isDisabledParsed ? function () {
          return isDisabledParsed(scope.$parent);
        } : angular.noop;
      var thumb = angular.element(element[0].querySelector('.md-thumb'));
      var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));
      var thumbContainer = thumb.parent();
      var trackContainer = angular.element(element[0].querySelector('.md-track-container'));
      var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));
      var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));
      var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);
      // Default values, overridable by attrs
      attr.min ? attr.$observe('min', updateMin) : updateMin(0);
      attr.max ? attr.$observe('max', updateMax) : updateMax(100);
      attr.step ? attr.$observe('step', updateStep) : updateStep(1);
      // We have to manually stop the $watch on ngDisabled because it exists
      // on the parent scope, and won't be automatically destroyed when
      // the component is destroyed.
      var stopDisabledWatch = angular.noop;
      if (attr.ngDisabled) {
        stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);
      }
      $mdGesture.register(element, 'drag');
      element.on('keydown', keydownListener).on('$md.pressdown', onPressDown).on('$md.pressup', onPressUp).on('$md.dragstart', onDragStart).on('$md.drag', onDrag).on('$md.dragend', onDragEnd);
      // On resize, recalculate the slider's dimensions and re-render
      function updateAll() {
        refreshSliderDimensions();
        ngModelRender();
        redrawTicks();
      }
      setTimeout(updateAll);
      var debouncedUpdateAll = $$rAF.throttle(updateAll);
      angular.element($window).on('resize', debouncedUpdateAll);
      scope.$on('$destroy', function () {
        angular.element($window).off('resize', debouncedUpdateAll);
        stopDisabledWatch();
      });
      ngModelCtrl.$render = ngModelRender;
      ngModelCtrl.$viewChangeListeners.push(ngModelRender);
      ngModelCtrl.$formatters.push(minMaxValidator);
      ngModelCtrl.$formatters.push(stepValidator);
      /**
     * Attributes
     */
      var min;
      var max;
      var step;
      function updateMin(value) {
        min = parseFloat(value);
        element.attr('aria-valuemin', value);
        updateAll();
      }
      function updateMax(value) {
        max = parseFloat(value);
        element.attr('aria-valuemax', value);
        updateAll();
      }
      function updateStep(value) {
        step = parseFloat(value);
        redrawTicks();
      }
      function updateAriaDisabled(isDisabled) {
        element.attr('aria-disabled', !!isDisabled);
      }
      // Draw the ticks with canvas.
      // The alternative to drawing ticks with canvas is to draw one element for each tick,
      // which could quickly become a performance bottleneck.
      var tickCanvas, tickCtx;
      function redrawTicks() {
        if (!angular.isDefined(attr.mdDiscrete))
          return;
        var numSteps = Math.floor((max - min) / step);
        if (!tickCanvas) {
          var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);
          tickCanvas = angular.element('<canvas style="position:absolute;">');
          tickCtx = tickCanvas[0].getContext('2d');
          tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';
          tickContainer.append(tickCanvas);
        }
        var dimensions = getSliderDimensions();
        tickCanvas[0].width = dimensions.width;
        tickCanvas[0].height = dimensions.height;
        var distance;
        for (var i = 0; i <= numSteps; i++) {
          distance = Math.floor(dimensions.width * (i / numSteps));
          tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);
        }
      }
      /**
     * Refreshing Dimensions
     */
      var sliderDimensions = {};
      refreshSliderDimensions();
      function refreshSliderDimensions() {
        sliderDimensions = trackContainer[0].getBoundingClientRect();
      }
      function getSliderDimensions() {
        throttledRefreshDimensions();
        return sliderDimensions;
      }
      /**
     * left/right arrow listener
     */
      function keydownListener(ev) {
        if (element[0].hasAttribute('disabled')) {
          return;
        }
        var changeAmount;
        if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {
          changeAmount = -step;
        } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {
          changeAmount = step;
        }
        if (changeAmount) {
          if (ev.metaKey || ev.ctrlKey || ev.altKey) {
            changeAmount *= 4;
          }
          ev.preventDefault();
          ev.stopPropagation();
          scope.$evalAsync(function () {
            setModelValue(ngModelCtrl.$viewValue + changeAmount);
          });
        }
      }
      /**
     * ngModel setters and validators
     */
      function setModelValue(value) {
        ngModelCtrl.$setViewValue(minMaxValidator(stepValidator(value)));
      }
      function ngModelRender() {
        if (isNaN(ngModelCtrl.$viewValue)) {
          ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;
        }
        var percent = (ngModelCtrl.$viewValue - min) / (max - min);
        scope.modelValue = ngModelCtrl.$viewValue;
        element.attr('aria-valuenow', ngModelCtrl.$viewValue);
        setSliderPercent(percent);
        thumbText.text(ngModelCtrl.$viewValue);
      }
      function minMaxValidator(value) {
        if (angular.isNumber(value)) {
          return Math.max(min, Math.min(max, value));
        }
      }
      function stepValidator(value) {
        if (angular.isNumber(value)) {
          return Math.round(value / step) * step;
        }
      }
      /**
     * @param percent 0-1
     */
      function setSliderPercent(percent) {
        activeTrack.css('width', percent * 100 + '%');
        thumbContainer.css('left', percent * 100 + '%');
        element.toggleClass('md-min', percent === 0);
      }
      /**
     * Slide listeners
     */
      var isDragging = false;
      var isDiscrete = angular.isDefined(attr.mdDiscrete);
      function onPressDown(ev) {
        if (isDisabledGetter())
          return;
        element.addClass('active');
        element[0].focus();
        refreshSliderDimensions();
        var exactVal = percentToValue(positionToPercent(ev.pointer.x));
        var closestVal = minMaxValidator(stepValidator(exactVal));
        scope.$apply(function () {
          setModelValue(closestVal);
          setSliderPercent(valueToPercent(closestVal));
        });
      }
      function onPressUp(ev) {
        if (isDisabledGetter())
          return;
        element.removeClass('dragging active');
        var exactVal = percentToValue(positionToPercent(ev.pointer.x));
        var closestVal = minMaxValidator(stepValidator(exactVal));
        scope.$apply(function () {
          setModelValue(closestVal);
          ngModelRender();
        });
      }
      function onDragStart(ev) {
        if (isDisabledGetter())
          return;
        isDragging = true;
        ev.stopPropagation();
        element.addClass('dragging');
        setSliderFromEvent(ev);
      }
      function onDrag(ev) {
        if (!isDragging)
          return;
        ev.stopPropagation();
        setSliderFromEvent(ev);
      }
      function onDragEnd(ev) {
        if (!isDragging)
          return;
        ev.stopPropagation();
        isDragging = false;
      }
      function setSliderFromEvent(ev) {
        // While panning discrete, update only the
        // visual positioning but not the model value.
        if (isDiscrete)
          adjustThumbPosition(ev.pointer.x);
        else
          doSlide(ev.pointer.x);
      }
      /**
     * Slide the UI by changing the model value
     * @param x
     */
      function doSlide(x) {
        scope.$evalAsync(function () {
          setModelValue(percentToValue(positionToPercent(x)));
        });
      }
      /**
     * Slide the UI without changing the model (while dragging/panning)
     * @param x
     */
      function adjustThumbPosition(x) {
        var exactVal = percentToValue(positionToPercent(x));
        var closestVal = minMaxValidator(stepValidator(exactVal));
        setSliderPercent(positionToPercent(x));
        thumbText.text(closestVal);
      }
      /**
     * Convert horizontal position on slider to percentage value of offset from beginning...
     * @param x
     * @returns {number}
     */
      function positionToPercent(x) {
        return Math.max(0, Math.min(1, (x - sliderDimensions.left) / sliderDimensions.width));
      }
      /**
     * Convert percentage offset on slide to equivalent model value
     * @param percent
     * @returns {*}
     */
      function percentToValue(percent) {
        return min + percent * (max - min);
      }
      function valueToPercent(val) {
        return (val - min) / (max - min);
      }
    }
  }
  SliderDirective.$inject = [
    '$$rAF',
    '$window',
    '$mdAria',
    '$mdUtil',
    '$mdConstant',
    '$mdTheming',
    '$mdGesture',
    '$parse'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /*
 * @ngdoc module
 * @name material.components.sticky
 * @description
 *
 * Sticky effects for md
 */
  angular.module('material.components.sticky', [
    'material.core',
    'material.components.content'
  ]).factory('$mdSticky', MdSticky);
  /*
 * @ngdoc service
 * @name $mdSticky
 * @module material.components.sticky
 *
 * @description
 * The `$mdSticky`service provides a mixin to make elements sticky.
 *
 * @returns A `$mdSticky` function that takes three arguments:
 *   - `scope`
 *   - `element`: The element that will be 'sticky'
 *   - `elementClone`: A clone of the element, that will be shown
 *     when the user starts scrolling past the original element.
 *     If not provided, it will use the result of `element.clone()`.
 */
  function MdSticky($document, $mdConstant, $compile, $$rAF, $mdUtil) {
    var browserStickySupport = checkStickySupport();
    /**
   * Registers an element as sticky, used internally by directives to register themselves
   */
    return function registerStickyElement(scope, element, stickyClone) {
      var contentCtrl = element.controller('mdContent');
      if (!contentCtrl)
        return;
      if (browserStickySupport) {
        element.css({
          position: browserStickySupport,
          top: 0,
          'z-index': 2
        });
      } else {
        var $$sticky = contentCtrl.$element.data('$$sticky');
        if (!$$sticky) {
          $$sticky = setupSticky(contentCtrl);
          contentCtrl.$element.data('$$sticky', $$sticky);
        }
        var deregister = $$sticky.add(element, stickyClone || element.clone());
        scope.$on('$destroy', deregister);
      }
    };
    function setupSticky(contentCtrl) {
      var contentEl = contentCtrl.$element;
      // Refresh elements is very expensive, so we use the debounced
      // version when possible.
      var debouncedRefreshElements = $$rAF.throttle(refreshElements);
      // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,
      // more reliable than `scroll` on android.
      setupAugmentedScrollEvents(contentEl);
      contentEl.on('$scrollstart', debouncedRefreshElements);
      contentEl.on('$scroll', onScroll);
      var self;
      var stickyBaseoffset = contentEl.prop('offsetTop');
      return self = {
        prev: null,
        current: null,
        next: null,
        items: [],
        add: add,
        refreshElements: refreshElements
      };
      /***************
     * Public
     ***************/
      // Add an element and its sticky clone to this content's sticky collection
      function add(element, stickyClone) {
        stickyClone.addClass('md-sticky-clone');
        stickyClone.css('top', stickyBaseoffset + 'px');
        var item = {
            element: element,
            clone: stickyClone
          };
        self.items.push(item);
        contentEl.parent().prepend(item.clone);
        debouncedRefreshElements();
        return function remove() {
          self.items.forEach(function (item, index) {
            if (item.element[0] === element[0]) {
              self.items.splice(index, 1);
              item.clone.remove();
            }
          });
          debouncedRefreshElements();
        };
      }
      function refreshElements() {
        // Sort our collection of elements by their current position in the DOM.
        // We need to do this because our elements' order of being added may not
        // be the same as their order of display.
        self.items.forEach(refreshPosition);
        self.items = self.items.sort(function (a, b) {
          return a.top < b.top ? -1 : 1;
        });
        // Find which item in the list should be active, 
        // based upon the content's current scroll position
        var item;
        var currentScrollTop = contentEl.prop('scrollTop');
        for (var i = self.items.length - 1; i >= 0; i--) {
          if (currentScrollTop > self.items[i].top) {
            item = self.items[i];
            break;
          }
        }
        setCurrentItem(item);
      }
      /***************
     * Private
     ***************/
      // Find the `top` of an item relative to the content element,
      // and also the height.
      function refreshPosition(item) {
        // Find the top of an item by adding to the offsetHeight until we reach the 
        // content element.
        var current = item.element[0];
        item.top = 0;
        item.left = 0;
        while (current && current !== contentEl[0]) {
          item.top += current.offsetTop;
          item.left += current.offsetLeft;
          current = current.offsetParent;
        }
        item.height = item.element.prop('offsetHeight');
        item.clone.css('margin-left', item.left + 'px');
      }
      // As we scroll, push in and select the correct sticky element.
      function onScroll() {
        var scrollTop = contentEl.prop('scrollTop');
        var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);
        onScroll.prevScrollTop = scrollTop;
        // At the top?
        if (scrollTop === 0) {
          setCurrentItem(null);  // Going to next item?
        } else if (isScrollingDown && self.next) {
          if (self.next.top - scrollTop <= 0) {
            // Sticky the next item if we've scrolled past its position.
            setCurrentItem(self.next);
          } else if (self.current) {
            // Push the current item up when we're almost at the next item.
            if (self.next.top - scrollTop <= self.next.height) {
              translate(self.current, self.next.top - self.next.height - scrollTop);
            } else {
              translate(self.current, null);
            }
          }  // Scrolling up with a current sticky item?
        } else if (!isScrollingDown && self.current) {
          if (scrollTop < self.current.top) {
            // Sticky the previous item if we've scrolled up past
            // the original position of the currently stickied item.
            setCurrentItem(self.prev);
          }
          // Scrolling up, and just bumping into the item above (just set to current)?
          // If we have a next item bumping into the current item, translate
          // the current item up from the top as it scrolls into view.
          if (self.current && self.next) {
            if (scrollTop >= self.next.top - self.current.height) {
              translate(self.current, self.next.top - scrollTop - self.current.height);
            } else {
              translate(self.current, null);
            }
          }
        }
      }
      function setCurrentItem(item) {
        if (self.current === item)
          return;
        // Deactivate currently active item
        if (self.current) {
          translate(self.current, null);
          setStickyState(self.current, null);
        }
        // Activate new item if given
        if (item) {
          setStickyState(item, 'active');
        }
        self.current = item;
        var index = self.items.indexOf(item);
        // If index === -1, index + 1 = 0. It works out.
        self.next = self.items[index + 1];
        self.prev = self.items[index - 1];
        setStickyState(self.next, 'next');
        setStickyState(self.prev, 'prev');
      }
      function setStickyState(item, state) {
        if (!item || item.state === state)
          return;
        if (item.state) {
          item.clone.attr('sticky-prev-state', item.state);
          item.element.attr('sticky-prev-state', item.state);
        }
        item.clone.attr('sticky-state', state);
        item.element.attr('sticky-state', state);
        item.state = state;
      }
      function translate(item, amount) {
        if (!item)
          return;
        if (amount === null || amount === undefined) {
          if (item.translateY) {
            item.translateY = null;
            item.clone.css($mdConstant.CSS.TRANSFORM, '');
          }
        } else {
          item.translateY = amount;
          item.clone.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + item.left + 'px,' + amount + 'px,0)');
        }
      }
    }
    // Function to check for browser sticky support
    function checkStickySupport($el) {
      var stickyProp;
      var testEl = angular.element('<div>');
      $document[0].body.appendChild(testEl[0]);
      var stickyProps = [
          'sticky',
          '-webkit-sticky'
        ];
      for (var i = 0; i < stickyProps.length; ++i) {
        testEl.css({
          position: stickyProps[i],
          top: 0,
          'z-index': 2
        });
        if (testEl.css('position') == stickyProps[i]) {
          stickyProp = stickyProps[i];
          break;
        }
      }
      testEl.remove();
      return stickyProp;
    }
    // Android 4.4 don't accurately give scroll events.
    // To fix this problem, we setup a fake scroll event. We say:
    // > If a scroll or touchmove event has happened in the last DELAY milliseconds, 
    //   then send a `$scroll` event every animationFrame.
    // Additionally, we add $scrollstart and $scrollend events.
    function setupAugmentedScrollEvents(element) {
      var SCROLL_END_DELAY = 200;
      var isScrolling;
      var lastScrollTime;
      element.on('scroll touchmove', function () {
        if (!isScrolling) {
          isScrolling = true;
          $$rAF(loopScrollEvent);
          element.triggerHandler('$scrollstart');
        }
        element.triggerHandler('$scroll');
        lastScrollTime = +$mdUtil.now();
      });
      function loopScrollEvent() {
        if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {
          isScrolling = false;
          element.triggerHandler('$scrollend');
        } else {
          element.triggerHandler('$scroll');
          $$rAF(loopScrollEvent);
        }
      }
    }
  }
  MdSticky.$inject = [
    '$document',
    '$mdConstant',
    '$compile',
    '$$rAF',
    '$mdUtil'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.subheader
 * @description
 * SubHeader module
 *
 *  Subheaders are special list tiles that delineate distinct sections of a
 *  list or grid list and are typically related to the current filtering or
 *  sorting criteria. Subheader tiles are either displayed inline with tiles or
 *  can be associated with content, for example, in an adjacent column.
 *
 *  Upon scrolling, subheaders remain pinned to the top of the screen and remain
 *  pinned until pushed on or off screen by the next subheader. @see [Material
 *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)
 *
 *  > To improve the visual grouping of content, use the system color for your subheaders.
 *
 */
  angular.module('material.components.subheader', [
    'material.core',
    'material.components.sticky'
  ]).directive('mdSubheader', MdSubheaderDirective);
  /**
 * @ngdoc directive
 * @name mdSubheader
 * @module material.components.subheader
 *
 * @restrict E
 *
 * @description
 * The `<md-subheader>` directive is a subheader for a section
 *
 * @usage
 * <hljs lang="html">
 * <md-subheader>Online Friends</md-subheader>
 * </hljs>
 */
  function MdSubheaderDirective($mdSticky, $compile, $mdTheming) {
    return {
      restrict: 'E',
      replace: true,
      transclude: true,
      template: '<h2 class="md-subheader">' + '<span class="md-subheader-content"></span>' + '</h2>',
      compile: function (element, attr, transclude) {
        var outerHTML = element[0].outerHTML;
        return function postLink(scope, element, attr) {
          $mdTheming(element);
          function getContent(el) {
            return angular.element(el[0].querySelector('.md-subheader-content'));
          }
          // Transclude the user-given contents of the subheader
          // the conventional way.
          transclude(scope, function (clone) {
            getContent(element).append(clone);
          });
          // Create another clone, that uses the outer and inner contents
          // of the element, that will be 'stickied' as the user scrolls.
          transclude(scope, function (clone) {
            var stickyClone = $compile(angular.element(outerHTML))(scope);
            $mdTheming(stickyClone);
            getContent(stickyClone).append(clone);
            $mdSticky(scope, element, stickyClone);
          });
        };
      }
    };
  }
  MdSubheaderDirective.$inject = [
    '$mdSticky',
    '$compile',
    '$mdTheming'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.swipe
 * @description Swipe module!
 */
  /**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeLeft
 *
 * @restrict A
 *
 * @description
 * The md-swipe-left directives allows you to specify custom behavior when an element is swiped
 * left.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>
 * </hljs>
 */
  /**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeRight
 *
 * @restrict A
 *
 * @description
 * The md-swipe-right directives allows you to specify custom behavior when an element is swiped
 * right.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>
 * </hljs>
 */
  var module = angular.module('material.components.swipe', []);
  [
    'SwipeLeft',
    'SwipeRight'
  ].forEach(function (name) {
    var directiveName = 'md' + name;
    var eventName = '$md.' + name.toLowerCase();
    module.directive(directiveName, [
      '$parse',
      function ($parse) {
        return {
          restrict: 'A',
          link: postLink
        };
        function postLink(scope, element, attr) {
          var fn = $parse(attr[directiveName]);
          element.on(eventName, function (ev) {
            scope.$apply(function () {
              fn(scope, { $event: ev });
            });
          });
        }
      }
    ]);
  });
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @private
 * @ngdoc module
 * @name material.components.switch
 */
  angular.module('material.components.switch', [
    'material.core',
    'material.components.checkbox'
  ]).directive('mdSwitch', MdSwitch);
  /**
 * @private
 * @ngdoc directive
 * @module material.components.switch
 * @name mdSwitch
 * @restrict E
 *
 * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the switch is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.
 * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
 *
 * @usage
 * <hljs lang="html">
 * <md-switch ng-model="isActive" aria-label="Finished?">
 *   Finished ?
 * </md-switch>
 *
 * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
 *   No Ink Effects
 * </md-switch>
 *
 * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
 *   Disabled
 * </md-switch>
 *
 * </hljs>
 */
  function MdSwitch(mdCheckboxDirective, $mdTheming, $mdUtil, $document, $mdConstant, $parse, $$rAF, $mdGesture) {
    var checkboxDirective = mdCheckboxDirective[0];
    return {
      restrict: 'E',
      transclude: true,
      template: '<div class="md-container">' + '<div class="md-bar"></div>' + '<div class="md-thumb-container">' + '<div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div>' + '</div>' + '</div>' + '<div ng-transclude class="md-label">' + '</div>',
      require: '?ngModel',
      compile: compile
    };
    function compile(element, attr) {
      var checkboxLink = checkboxDirective.compile(element, attr);
      // no transition on initial load
      element.addClass('md-dragging');
      return function (scope, element, attr, ngModel) {
        ngModel = ngModel || $mdUtil.fakeNgModel();
        var disabledGetter = $parse(attr.ngDisabled);
        var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));
        var switchContainer = angular.element(element[0].querySelector('.md-container'));
        // no transition on initial load
        $$rAF(function () {
          element.removeClass('md-dragging');
        });
        checkboxLink(scope, element, attr, ngModel);
        if (angular.isDefined(attr.ngDisabled)) {
          scope.$watch(disabledGetter, function (isDisabled) {
            element.attr('tabindex', isDisabled ? -1 : 0);
          });
        }
        // These events are triggered by setup drag
        $mdGesture.register(switchContainer, 'drag');
        switchContainer.on('$md.dragstart', onDragStart).on('$md.drag', onDrag).on('$md.dragend', onDragEnd);
        var drag;
        function onDragStart(ev) {
          // Don't go if ng-disabled===true
          if (disabledGetter(scope))
            return;
          ev.stopPropagation();
          element.addClass('md-dragging');
          drag = { width: thumbContainer.prop('offsetWidth') };
          element.removeClass('transition');
        }
        function onDrag(ev) {
          if (!drag)
            return;
          ev.stopPropagation();
          ev.srcEvent && ev.srcEvent.preventDefault();
          var percent = ev.pointer.distanceX / drag.width;
          //if checked, start from right. else, start from left
          var translate = ngModel.$viewValue ? 1 + percent : percent;
          // Make sure the switch stays inside its bounds, 0-1%
          translate = Math.max(0, Math.min(1, translate));
          thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + 100 * translate + '%,0,0)');
          drag.translate = translate;
        }
        function onDragEnd(ev) {
          if (!drag)
            return;
          ev.stopPropagation();
          element.removeClass('md-dragging');
          thumbContainer.css($mdConstant.CSS.TRANSFORM, '');
          // We changed if there is no distance (this is a click a click),
          // or if the drag distance is >50% of the total.
          var isChanged = ngModel.$viewValue ? drag.translate < 0.5 : drag.translate > 0.5;
          if (isChanged) {
            applyModelValue(!ngModel.$viewValue);
          }
          drag = null;
        }
        function applyModelValue(newValue) {
          scope.$apply(function () {
            ngModel.$setViewValue(newValue);
            ngModel.$render();
          });
        }
      };
    }
  }
  MdSwitch.$inject = [
    'mdCheckboxDirective',
    '$mdTheming',
    '$mdUtil',
    '$document',
    '$mdConstant',
    '$parse',
    '$$rAF',
    '$mdGesture'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.tabs
 * @description
 *
 *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.
 *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.
 *
 *  Features include support for:
 *
 *  - static or dynamic tabs,
 *  - responsive designs,
 *  - accessibility support (ARIA),
 *  - tab pagination,
 *  - external or internal tab content,
 *  - focus indicators and arrow-key navigations,
 *  - programmatic lookup and access to tab controllers, and
 *  - dynamic transitions through different tab contents.
 *
 */
  /*
 * @see js folder for tabs implementation
 */
  angular.module('material.components.tabs', ['material.core']);
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.textField
 * @description
 * Form
 */
  angular.module('material.components.textField', ['material.core']).directive('mdInputGroup', mdInputGroupDirective).directive('mdInput', mdInputDirective).directive('mdTextFloat', mdTextFloatDirective);
  function mdTextFloatDirective($mdTheming, $mdUtil, $parse, $log) {
    return {
      restrict: 'E',
      replace: true,
      scope: {
        fid: '@?mdFid',
        label: '@?',
        value: '=ngModel'
      },
      compile: function (element, attr) {
        $log.warn('<md-text-float> is deprecated. Please use `<md-input-container>` and `<input>`.' + 'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');
        if (angular.isUndefined(attr.mdFid)) {
          attr.mdFid = $mdUtil.nextUid();
        }
        return {
          pre: function (scope, element, attrs) {
            var disabledParsed = $parse(attrs.ngDisabled);
            scope.isDisabled = function () {
              return disabledParsed(scope.$parent);
            };
            scope.inputType = attrs.type || 'text';
          },
          post: $mdTheming
        };
      },
      template: '<md-input-group tabindex="-1">' + ' <label for="{{fid}}" >{{label}}</label>' + ' <md-input id="{{fid}}" ng-disabled="isDisabled()" ng-model="value" type="{{inputType}}"></md-input>' + '</md-input-group>'
    };
  }
  mdTextFloatDirective.$inject = [
    '$mdTheming',
    '$mdUtil',
    '$parse',
    '$log'
  ];
  function mdInputGroupDirective($log) {
    return {
      restrict: 'CE',
      controller: [
        '$element',
        function ($element) {
          $log.warn('<md-input-group> is deprecated. Please use `<md-input-container>` and `<input>`.' + 'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');
          this.setFocused = function (isFocused) {
            $element.toggleClass('md-input-focused', !!isFocused);
          };
          this.setHasValue = function (hasValue) {
            $element.toggleClass('md-input-has-value', hasValue);
          };
        }
      ]
    };
  }
  mdInputGroupDirective.$inject = ['$log'];
  function mdInputDirective($mdUtil, $log) {
    return {
      restrict: 'E',
      replace: true,
      template: '<input >',
      require: [
        '^?mdInputGroup',
        '?ngModel'
      ],
      link: function (scope, element, attr, ctrls) {
        if (!ctrls[0])
          return;
        $log.warn('<md-input> is deprecated. Please use `<md-input-container>` and `<input>`.' + 'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');
        var inputGroupCtrl = ctrls[0];
        var ngModelCtrl = ctrls[1];
        scope.$watch(scope.isDisabled, function (isDisabled) {
          element.attr('aria-disabled', !!isDisabled);
          element.attr('tabindex', !!isDisabled);
        });
        element.attr('type', attr.type || element.parent().attr('type') || 'text');
        // When the input value changes, check if it "has" a value, and
        // set the appropriate class on the input group
        if (ngModelCtrl) {
          //Add a $formatter so we don't use up the render function
          ngModelCtrl.$formatters.push(function (value) {
            inputGroupCtrl.setHasValue(isNotEmpty(value));
            return value;
          });
        }
        element.on('input', function () {
          inputGroupCtrl.setHasValue(isNotEmpty());
        }).on('focus', function (e) {
          // When the input focuses, add the focused class to the group
          inputGroupCtrl.setFocused(true);
        }).on('blur', function (e) {
          // When the input blurs, remove the focused class from the group
          inputGroupCtrl.setFocused(false);
          inputGroupCtrl.setHasValue(isNotEmpty());
        });
        scope.$on('$destroy', function () {
          inputGroupCtrl.setFocused(false);
          inputGroupCtrl.setHasValue(false);
        });
        function isNotEmpty(value) {
          value = angular.isUndefined(value) ? element.val() : value;
          return angular.isDefined(value) && value !== null && value.toString().trim() !== '';
        }
      }
    };
  }
  mdInputDirective.$inject = [
    '$mdUtil',
    '$log'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.toast
 * @description
 * Toast
 */
  angular.module('material.components.toast', [
    'material.core',
    'material.components.button'
  ]).directive('mdToast', MdToastDirective).provider('$mdToast', MdToastProvider);
  function MdToastDirective() {
    return { restrict: 'E' };
  }
  /**
 * @ngdoc service
 * @name $mdToast
 * @module material.components.toast
 *
 * @description
 * `$mdToast` is a service to build a toast nofication on any position
 * on the screen with an optional duration, and provides a simple promise API.
 *
 *
 * ## Restrictions on custom toasts
 * - The toast's template must have an outer `<md-toast>` element.
 * - For a toast action, use element with class `md-action`.
 * - Add the class `md-capsule` for curved corners.
 *
 * @usage
 * <hljs lang="html">
 * <div ng-controller="MyController">
 *   <md-button ng-click="openToast()">
 *     Open a Toast!
 *   </md-button>
 * </div>
 * </hljs>
 *
 * <hljs lang="js">
 * var app = angular.module('app', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdToast) {
 *   $scope.openToast = function($event) {
 *     $mdToast.show($mdToast.simple().content('Hello!'));
 *     // Could also do $mdToast.showSimple('Hello');
 *   };
 * });
 * </hljs>
 */
  /**
 * @ngdoc method
 * @name $mdToast#showSimple
 * 
 * @description
 * Convenience method which builds and shows a simple toast.
 *
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
 * rejected with `$mdToast.cancel()`.
 *
 */
  /**
 * @ngdoc method
 * @name $mdToast#simple
 *
 * @description
 * Builds a preconfigured toast.
 *
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:
 *
 * - $mdToastPreset#content(string) - sets toast content to string
 * - $mdToastPreset#action(string) - adds an action button, which resolves the promise returned from `show()` if clicked.
 * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted
 * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)
 * - $mdToastPreset#theme(boolean) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)
 */
  /**
 * @ngdoc method
 * @name $mdToast#updateContent
 * 
 * @description
 * Updates the content of an existing toast. Useful for updating things like counts, etc.
 *
 */
  /**
 * @ngdoc method
 * @name $mdToast#build
 *
 * @description
 * Creates a custom `$mdToastPreset` that you can configure.
 *
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).
 */
  /**
 * @ngdoc method
 * @name $mdToast#show
 *
 * @description Shows the toast.
 *
 * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`
 * and `build()`, or an options object with the following properties:
 *
 *   - `templateUrl` - `{string=}`: The url of an html template file that will
 *     be used as the content of the toast. Restrictions: the template must
 *     have an outer `md-toast` element.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
 *     template string.
 *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay
 *     active before automatically closing.  Set to 0 or false to have the toast stay open until
 *     closed manually. Default: 3000.
 *   - `position` - `{string=}`: Where to place the toast. Available: any combination
 *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.
 *   - `controller` - `{string=}`: The controller to associate with this toast.
 *     The controller will be injected the local `$hideToast`, which is a function
 *     used to hide the toast.
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
 *     be used as names of values to inject into the controller. For example,
 *     `locals: {three: 3}` would inject `three` into the controller with the value
 *     of 3.
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
 *     and the toast will not open until the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending
 *     to the root element of the application.
 *
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
 * rejected with `$mdToast.cancel()`.
 */
  /**
 * @ngdoc method
 * @name $mdToast#hide
 *
 * @description
 * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.
 *
 * @param {*=} response An argument for the resolved promise.
 *
 * @returns {promise} a promise that is called when the existing element is removed from the DOM
 *
 */
  /**
 * @ngdoc method
 * @name $mdToast#cancel
 *
 * @description
 * Hide the existing toast and reject the promise returned from
 * `$mdToast.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 * @returns {promise} a promise that is called when the existing element is removed from the DOM
 *
 */
  function MdToastProvider($$interimElementProvider) {
    var activeToastContent;
    var $mdToast = $$interimElementProvider('$mdToast').setDefaults({
        methods: [
          'position',
          'hideDelay',
          'capsule'
        ],
        options: toastDefaultOptions
      }).addPreset('simple', {
        argOption: 'content',
        methods: [
          'content',
          'action',
          'highlightAction',
          'theme'
        ],
        options: [
          '$mdToast',
          '$mdTheming',
          function ($mdToast, $mdTheming) {
            var opts = {
                template: [
                  '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">',
                  '<span flex>{{ toast.content }}</span>',
                  '<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',
                  '{{ toast.action }}',
                  '</md-button>',
                  '</md-toast>'
                ].join(''),
                controller: [
                  '$scope',
                  function mdToastCtrl($scope) {
                    var self = this;
                    $scope.$watch(function () {
                      return activeToastContent;
                    }, function () {
                      self.content = activeToastContent;
                    });
                    this.resolve = function () {
                      $mdToast.hide();
                    };
                  }
                ],
                theme: $mdTheming.defaultTheme(),
                controllerAs: 'toast',
                bindToController: true
              };
            return opts;
          }
        ]
      }).addMethod('updateContent', function (newContent) {
        activeToastContent = newContent;
      });
    toastDefaultOptions.$inject = [
      '$timeout',
      '$animate',
      '$mdToast'
    ];
    return $mdToast;
    /* @ngInject */
    function toastDefaultOptions($timeout, $animate, $mdToast) {
      return {
        onShow: onShow,
        onRemove: onRemove,
        position: 'bottom left',
        themable: true,
        hideDelay: 3000
      };
      function onShow(scope, element, options) {
        // 'top left' -> 'md-top md-left'
        activeToastContent = options.content;
        element.addClass(options.position.split(' ').map(function (pos) {
          return 'md-' + pos;
        }).join(' '));
        options.parent.addClass(toastOpenClass(options.position));
        options.onSwipe = function (ev, gesture) {
          //Add swipeleft/swiperight class to element so it can animate correctly
          element.addClass('md-' + ev.type.replace('$md.', ''));
          $timeout($mdToast.cancel);
        };
        element.on('$md.swipeleft $md.swiperight', options.onSwipe);
        return $animate.enter(element, options.parent);
      }
      function onRemove(scope, element, options) {
        element.off('$md.swipeleft $md.swiperight', options.onSwipe);
        options.parent.removeClass(toastOpenClass(options.position));
        return $animate.leave(element);
      }
      function toastOpenClass(position) {
        return 'md-toast-open-' + (position.indexOf('top') > -1 ? 'top' : 'bottom');
      }
    }
  }
  MdToastProvider.$inject = ['$$interimElementProvider'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.toolbar
 */
  angular.module('material.components.toolbar', [
    'material.core',
    'material.components.content'
  ]).directive('mdToolbar', mdToolbarDirective);
  /**
 * @ngdoc directive
 * @name mdToolbar
 * @module material.components.toolbar
 * @restrict E
 * @description
 * `md-toolbar` is used to place a toolbar in your app.
 *
 * Toolbars are usually used above a content area to display the title of the
 * current page, and show relevant action buttons for that page.
 *
 * You can change the height of the toolbar by adding either the
 * `md-medium-tall` or `md-tall` class to the toolbar.
 *
 * @usage
 * <hljs lang="html">
 * <div layout="column" layout-fill>
 *   <md-toolbar>
 *
 *     <div class="md-toolbar-tools">
 *       <span>My App's Title</span>
 *
 *       <!-- fill up the space between left and right area -->
 *       <span flex></span>
 *
 *       <md-button>
 *         Right Bar Button
 *       </md-button>
 *     </div>
 *
 *   </md-toolbar>
 *   <md-content>
 *     Hello!
 *   </md-content>
 * </div>
 * </hljs>
 *
 * @param {boolean=} md-scroll-shrink Whether the header should shrink away as
 * the user scrolls down, and reveal itself as the user scrolls up.
 * Note: for scrollShrink to work, the toolbar must be a sibling of a
 * `md-content` element, placed before it. See the scroll shrink demo.
 *
 *
 * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's
 * shrinking by. For example, if 0.25 is given then the toolbar will shrink
 * at one fourth the rate at which the user scrolls down. Default 0.5.
 */
  function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming) {
    return {
      restrict: 'E',
      controller: angular.noop,
      link: function (scope, element, attr) {
        $mdTheming(element);
        if (angular.isDefined(attr.mdScrollShrink)) {
          setupScrollShrink();
        }
        function setupScrollShrink() {
          // Current "y" position of scroll
          var y = 0;
          // Store the last scroll top position
          var prevScrollTop = 0;
          var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;
          var toolbarHeight;
          var contentElement;
          var debouncedContentScroll = $$rAF.throttle(onContentScroll);
          var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);
          // Wait for $mdContentLoaded event from mdContent directive.
          // If the mdContent element is a sibling of our toolbar, hook it up
          // to scroll events.
          scope.$on('$mdContentLoaded', onMdContentLoad);
          function onMdContentLoad($event, newContentEl) {
            // Toolbar and content must be siblings
            if (element.parent()[0] === newContentEl.parent()[0]) {
              // unhook old content event listener if exists
              if (contentElement) {
                contentElement.off('scroll', debouncedContentScroll);
              }
              newContentEl.on('scroll', debouncedContentScroll);
              newContentEl.attr('scroll-shrink', 'true');
              contentElement = newContentEl;
              $$rAF(updateToolbarHeight);
            }
          }
          function updateToolbarHeight() {
            toolbarHeight = element.prop('offsetHeight');
            // Add a negative margin-top the size of the toolbar to the content el.
            // The content will start transformed down the toolbarHeight amount,
            // so everything looks normal.
            //
            // As the user scrolls down, the content will be transformed up slowly
            // to put the content underneath where the toolbar was.
            contentElement.css('margin-top', -toolbarHeight * shrinkSpeedFactor + 'px');
            onContentScroll();
          }
          function onContentScroll(e) {
            var scrollTop = e ? e.target.scrollTop : prevScrollTop;
            debouncedUpdateHeight();
            y = Math.min(toolbarHeight / shrinkSpeedFactor, Math.max(0, y + scrollTop - prevScrollTop));
            element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + -y * shrinkSpeedFactor + 'px,0)');
            contentElement.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (toolbarHeight - y) * shrinkSpeedFactor + 'px,0)');
            prevScrollTop = scrollTop;
          }
        }
      }
    };
  }
  mdToolbarDirective.$inject = [
    '$$rAF',
    '$mdConstant',
    '$mdUtil',
    '$mdTheming'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.tooltip
 */
  angular.module('material.components.tooltip', ['material.core']).directive('mdTooltip', MdTooltipDirective);
  /**
 * @ngdoc directive
 * @name mdTooltip
 * @module material.components.tooltip
 * @description
 * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).
 *
 * Place a `<md-tooltip>` as a child of the element it describes.
 *
 * A tooltip will activate when the user focuses, hovers over, or touches the parent.
 *
 * @usage
 * <hljs lang="html">
 * <md-icon icon="/img/icons/ic_play_arrow_24px.svg">
 *   <md-tooltip>
 *     Play Music
 *   </md-tooltip>
 * </md-icon>
 * </hljs>
 *
 * @param {expression=} md-visible Boolean bound to whether the tooltip is
 * currently visible.
 * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 400ms.
 * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
 */
  function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement, $animate, $q) {
    var TOOLTIP_SHOW_DELAY = 0;
    var TOOLTIP_WINDOW_EDGE_SPACE = 8;
    return {
      restrict: 'E',
      transclude: true,
      template: '<div class="md-background"></div>' + '<div class="md-content" ng-transclude></div>',
      scope: {
        visible: '=?mdVisible',
        delay: '=?mdDelay'
      },
      link: postLink
    };
    function postLink(scope, element, attr, contentCtrl) {
      $mdTheming(element);
      var parent = element.parent();
      var background = angular.element(element[0].getElementsByClassName('md-background')[0]);
      var direction = attr.mdDirection;
      // Keep looking for a higher parent if our current one has no pointer events
      while ($window.getComputedStyle(parent[0])['pointer-events'] == 'none') {
        parent = parent.parent();
      }
      // Look for the nearest parent md-content, stopping at the rootElement.
      var current = element.parent()[0];
      while (current && current !== $rootElement[0] && current !== document.body) {
        if (current.tagName && current.tagName.toLowerCase() == 'md-content')
          break;
        current = current.parentNode;
      }
      var tooltipParent = angular.element(current || document.body);
      if (!angular.isDefined(attr.mdDelay)) {
        scope.delay = TOOLTIP_SHOW_DELAY;
      }
      // We will re-attach tooltip when visible
      element.detach();
      element.attr('role', 'tooltip');
      element.attr('id', attr.id || 'tooltip_' + $mdUtil.nextUid());
      parent.on('focus mouseenter touchstart', function () {
        setVisible(true);
      });
      parent.on('blur mouseleave touchend touchcancel', function () {
        if ($document[0].activeElement !== parent[0])
          setVisible(false);
      });
      scope.$watch('visible', function (isVisible) {
        if (isVisible)
          showTooltip();
        else
          hideTooltip();
      });
      var debouncedOnResize = $$rAF.throttle(function () {
          if (scope.visible)
            positionTooltip();
        });
      angular.element($window).on('resize', debouncedOnResize);
      // Be sure to completely cleanup the element on destroy
      scope.$on('$destroy', function () {
        scope.visible = false;
        element.remove();
        angular.element($window).off('resize', debouncedOnResize);
      });
      // *******
      // Methods
      // *******
      // If setting visible to true, debounce to scope.delay ms
      // If setting visible to false and no timeout is active, instantly hide the tooltip.
      function setVisible(value) {
        setVisible.value = !!value;
        if (!setVisible.queued) {
          if (value) {
            setVisible.queued = true;
            $timeout(function () {
              scope.visible = setVisible.value;
              setVisible.queued = false;
            }, scope.delay);
          } else {
            $timeout(function () {
              scope.visible = false;
            });
          }
        }
      }
      function showTooltip() {
        // Insert the element before positioning it, so we can get position
        parent.attr('aria-describedby', element.attr('id'));
        tooltipParent.append(element);
        // Wait until the element has been in the dom for two frames before fading it in.
        // Additionally, we position the tooltip twice to avoid positioning bugs
        positionTooltip();
        $animate.addClass(element, 'md-show');
        $animate.addClass(background, 'md-show');
      }
      function hideTooltip() {
        parent.removeAttr('aria-describedby');
        $q.all([
          $animate.removeClass(background, 'md-show'),
          $animate.removeClass(element, 'md-show')
        ]).then(function () {
          if (!scope.visible)
            element.detach();
        });
      }
      function positionTooltip() {
        var tipRect = $mdUtil.offsetRect(element, tooltipParent);
        var parentRect = $mdUtil.offsetRect(parent, tooltipParent);
        // Default to bottom position if possible
        var tipDirection = 'bottom';
        var newPosition = {
            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
            top: parentRect.top + parentRect.height
          };
        // If element bleeds over left/right of the window, place it on the edge of the window.
        newPosition.left = Math.min(newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE);
        newPosition.left = Math.max(newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE);
        // If element bleeds over the bottom of the window, place it above the parent.
        if (newPosition.top + tipRect.height > tooltipParent.prop('scrollHeight')) {
          newPosition.top = parentRect.top - tipRect.height;
          tipDirection = 'top';
        }
        element.css({
          top: newPosition.top + 'px',
          left: newPosition.left + 'px'
        });
        positionBackground();
        function positionBackground() {
          var size = direction === 'left' || direction === 'right' ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2 : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2, position = direction === 'left' ? {
              left: 100,
              top: 50
            } : direction === 'right' ? {
              left: 0,
              top: 50
            } : direction === 'top' ? {
              left: 50,
              top: 100
            } : {
              left: 50,
              top: 0
            };
          background.css({
            width: size + 'px',
            height: size + 'px',
            left: position.left + '%',
            top: position.top + '%'
          });
        }
        function fitOnScreen(pos) {
          var newPosition = {};
          newPosition.left = Math.min(pos.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE);
          newPosition.left = Math.max(pos.left, TOOLTIP_WINDOW_EDGE_SPACE);
          newPosition.top = Math.min(pos.top, tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE);
          newPosition.top = Math.max(pos.top, TOOLTIP_WINDOW_EDGE_SPACE);
          return newPosition;
        }
        function getPosition(dir) {
          return dir === 'left' ? {
            left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,
            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
          } : dir === 'right' ? {
            left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,
            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
          } : dir === 'top' ? {
            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
            top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE
          } : {
            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
            top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE
          };
        }
      }
    }
  }
  MdTooltipDirective.$inject = [
    '$timeout',
    '$window',
    '$$rAF',
    '$document',
    '$mdUtil',
    '$mdTheming',
    '$rootElement',
    '$animate',
    '$q'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * @ngdoc module
 * @name material.components.whiteframe
 */
  angular.module('material.components.whiteframe', []);
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.autocomplete').controller('MdAutocompleteCtrl', MdAutocompleteCtrl);
  function MdAutocompleteCtrl($scope, $element, $timeout, $q, $mdUtil, $mdConstant) {
    //-- private variables
    var self = this, itemParts = $scope.itemsExpr.split(/ in /i), itemExpr = itemParts[1], elements = {
        main: $element[0],
        ul: $element[0].getElementsByTagName('ul')[0],
        input: $element[0].getElementsByTagName('input')[0]
      }, promise = null, cache = {};
    //-- public variables
    self.scope = $scope;
    self.parent = $scope.$parent;
    self.itemName = itemParts[0];
    self.matches = [];
    self.loading = false;
    self.hidden = true;
    self.index = 0;
    self.keydown = keydown;
    self.blur = blur;
    self.clear = clearValue;
    self.select = select;
    self.getCurrentDisplayValue = getCurrentDisplayValue;
    self.fetch = $mdUtil.debounce(fetchResults);
    //-- return init
    return init();
    //-- start method definitions
    function init() {
      configureWatchers();
      configureAria();
    }
    function configureAria() {
      var ul = angular.element(elements.ul), input = angular.element(elements.input), id = ul.attr('id') || 'ul_' + $mdUtil.nextUid();
      ul.attr('id', id);
      input.attr('aria-owns', id);
    }
    function getItemScope(item) {
      if (!item)
        return;
      var locals = {};
      if (self.itemName)
        locals[self.itemName] = $scope.selectedItem;
      return locals;
    }
    function configureWatchers() {
      $scope.$watch('searchText', function (searchText) {
        if (!searchText) {
          self.loading = false;
          return self.matches = [];
        }
        var term = searchText.toLowerCase();
        if (promise && promise.cancel) {
          promise.cancel();
          promise = null;
        }
        if (!$scope.noCache && cache[term]) {
          self.matches = cache[term];
        } else if (!self.hidden) {
          self.fetch(searchText);
        }
        if ($scope.textChange)
          $scope.textChange(getItemScope($scope.selectedItem));
      });
      $scope.$watch('selectedItem', function (selectedItem) {
        if ($scope.itemChange)
          $scope.itemChange(getItemScope(selectedItem));
      });
    }
    function fetchResults(searchText) {
      var items = $scope.$parent.$eval(itemExpr), term = searchText.toLowerCase();
      if (angular.isArray(items)) {
        handleResults(items);
      } else {
        self.loading = true;
        promise = $q.when(items).then(handleResults);
      }
      function handleResults(matches) {
        cache[term] = matches;
        if (searchText !== $scope.searchText)
          return;
        //-- just cache the results if old request
        promise = null;
        self.loading = false;
        self.matches = matches;
      }
    }
    function blur() {
      self.hidden = true;
    }
    function keydown(event) {
      switch (event.keyCode) {
      case $mdConstant.KEY_CODE.DOWN_ARROW:
        if (self.loading)
          return;
        event.preventDefault();
        self.index = Math.min(self.index + 1, self.matches.length - 1);
        updateScroll();
        break;
      case $mdConstant.KEY_CODE.UP_ARROW:
        if (self.loading)
          return;
        event.preventDefault();
        self.index = Math.max(0, self.index - 1);
        updateScroll();
        break;
      case $mdConstant.KEY_CODE.ENTER:
        if (self.loading || self.index < 0)
          return;
        event.preventDefault();
        select(self.index);
        break;
      case $mdConstant.KEY_CODE.ESCAPE:
        self.matches = [];
        self.hidden = true;
        self.index = -1;
        break;
      case $mdConstant.KEY_CODE.TAB:
        break;
      default:
        self.index = -1;
        self.hidden = isHidden();
        //-- after value updates, check if list should be hidden
        $timeout(function () {
          self.hidden = isHidden();
        });
      }
    }
    function clearValue() {
      $scope.searchText = '';
      select(-1);
      elements.input.focus();
    }
    function isHidden() {
      return self.matches.length === 1 && $scope.searchText === getDisplayValue(self.matches[0]);
    }
    function getCurrentDisplayValue() {
      return getDisplayValue(self.matches[self.index]);
    }
    function getDisplayValue(item) {
      return item && $scope.itemText ? $scope.itemText(getItemScope(item)) : item;
    }
    function select(index) {
      $scope.selectedItem = self.matches[index];
      $scope.searchText = getDisplayValue($scope.selectedItem) || $scope.searchText;
      self.hidden = true;
      self.index = -1;
      self.matches = [];
    }
    function updateScroll() {
      var top = 41 * self.index, bot = top + 41, hgt = 41 * 5.5;
      if (top < elements.ul.scrollTop) {
        elements.ul.scrollTop = top;
      } else if (bot > elements.ul.scrollTop + hgt) {
        elements.ul.scrollTop = bot - hgt;
      }
    }
  }
  MdAutocompleteCtrl.$inject = [
    '$scope',
    '$element',
    '$timeout',
    '$q',
    '$mdUtil',
    '$mdConstant'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.autocomplete').directive('mdAutocomplete', MdAutocomplete);
  /**
   * @ngdoc directive
   * @name mdAutocomplete
   * @module material.components.autocomplete
   *
   * @description
   * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a custom query.
   * This component allows you to provide real-time suggestions as the user types in the input area.
   *
   * @param {string=} md-search-text A model to bind the search query text to
   * @param {object=} md-selected-item A model to bind the selected item to
   * @param {expression} md-items An expression in the format of `item in items` to iterate over matches for your search.
   * @param {string=} md-item-text An expression that will convert your object to a single string.
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.
   * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete
   * @param {expression} md-selected-item-change An expression to be run each time a new item is selected
   * @param {expression} md-search-text-change An expression to be run each time the search text updates
   *
   * @usage
   * <hljs lang="html">
   *   <md-autocomplete
   *       md-selected-item="selectedItem"
   *       md-search-text="searchText"
   *       md-items="item in getMatches(searchText)"
   *       md-item-text="item.display">
   *     <span md-highlight-text="searchText">{{item.display}}</span>
   *   </md-autocomplete>
   * </hljs>
   */
  function MdAutocomplete() {
    return {
      template: '        <md-autocomplete-wrap role="listbox">          <input type="text"              ng-model="searchText"              ng-keydown="$mdAutocompleteCtrl.keydown($event)"              ng-blur="$mdAutocompleteCtrl.blur()"              placeholder="{{placeholder}}"              aria-label="{{placeholder}}"              aria-autocomplete="list"              aria-haspopup="true"              aria-activedescendant=""              aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>          <button              type="button"              ng-if="searchText"              ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="cancel"></md-icon>              <span class="visually-hidden">Clear</span>              </button>          <md-progress-linear ng-if="$mdAutocompleteCtrl.loading" md-mode="indeterminate"></md-progress-linear>        </md-autocomplete-wrap>        <ul role="presentation">          <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"              ng-class="{ selected: index === $mdAutocompleteCtrl.index }"              ng-show="searchText && !$mdAutocompleteCtrl.hidden"              ng-click="$mdAutocompleteCtrl.select(index)"              ng-transclude              md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">          </li>        </ul>        <aria-status            class="visually-hidden"            role="status"            aria-live="assertive">          <p ng-if="$mdAutocompleteCtrl.index === -1 && $mdAutocompleteCtrl.matches.length === 1">There is 1 match available.</p>          <p ng-if="$mdAutocompleteCtrl.index === -1 && $mdAutocompleteCtrl.matches.length > 1">There are {{$mdAutocompleteCtrl.matches.length}} matches available.</p>          <p ng-if="$mdAutocompleteCtrl.index >= 0">{{ $mdAutocompleteCtrl.getCurrentDisplayValue() }}</p>        </aria-status>',
      transclude: true,
      controller: 'MdAutocompleteCtrl',
      controllerAs: '$mdAutocompleteCtrl',
      scope: {
        searchText: '=mdSearchText',
        selectedItem: '=mdSelectedItem',
        itemsExpr: '@mdItems',
        itemText: '&mdItemText',
        placeholder: '@placeholder',
        noCache: '=mdNoCache',
        itemChange: '&mdSelectedItemChange',
        textChange: '&mdSearchTextChange'
      }
    };
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.autocomplete').controller('MdHighlightCtrl', MdHighlightCtrl);
  function MdHighlightCtrl($scope, $element, $interpolate) {
    var term = $element.attr('md-highlight-text'), text = $interpolate($element.text())($scope);
    $scope.$watch(term, function (term) {
      var regex = new RegExp('^' + sanitize(term), 'i'), html = text.replace(regex, '<span class="highlight">$&</span>');
      $element.html(html);
    });
    function sanitize(term) {
      if (!term)
        return term;
      return term.replace(/[\*\[\]\(\)\{\}\\\^\$]/g, '\\$&');
    }
  }
  MdHighlightCtrl.$inject = [
    '$scope',
    '$element',
    '$interpolate'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.autocomplete').directive('mdHighlightText', MdHighlight);
  /**
   * @ngdoc directive
   * @name mdHighlightText
   * @module material.components.autocomplete
   *
   * @description
   * The `md-highlight-text` directive allows you to specify text that should be highlighted within
   * an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can
   * be styled through CSS.  Please note that child elements may not be used with this directive.
   *
   * @param {string=} md-highlight-text A model to be searched for
   *
   * @usage
   * <hljs lang="html">
   * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />
   * <ul>
   *   <li ng-repeat="result in results" md-highlight-text="searchTerm">
   *     {{result.text}}
   *   </li>
   * </ul>
   * </hljs>
   */
  function MdHighlight() {
    return {
      terminal: true,
      scope: false,
      controller: 'MdHighlightCtrl'
    };
  }
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.autocomplete').directive('mdAutocompleteListItem', MdAutocompleteListItem);
  function MdAutocompleteListItem($compile, $mdUtil) {
    return {
      require: '^?mdAutocomplete',
      terminal: true,
      link: link,
      scope: false
    };
    function link(scope, element, attr, ctrl) {
      var newScope = ctrl.parent.$new(false, ctrl.parent), itemName = ctrl.scope.$eval(attr.mdAutocompleteListItem);
      newScope[itemName] = scope.item;
      $compile(element.contents())(newScope);
      element.attr({
        'role': 'option',
        'id': 'item_' + $mdUtil.nextUid()
      });
    }
  }
  MdAutocompleteListItem.$inject = [
    '$compile',
    '$mdUtil'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  /**
 * Conditionally configure ink bar animations when the
 * tab selection changes. If `mdNoBar` then do not show the
 * bar nor animate.
 */
  angular.module('material.components.tabs').directive('mdTabsInkBar', MdTabInkDirective);
  function MdTabInkDirective($$rAF) {
    var lastIndex = 0;
    return {
      restrict: 'E',
      require: [
        '^?mdNoBar',
        '^mdTabs'
      ],
      link: postLink
    };
    function postLink(scope, element, attr, ctrls) {
      var mdNoBar = !!ctrls[0];
      var tabsCtrl = ctrls[1], debouncedUpdateBar = $$rAF.throttle(updateBar);
      tabsCtrl.inkBarElement = element;
      scope.$on('$mdTabsPaginationChanged', debouncedUpdateBar);
      function updateBar() {
        var selected = tabsCtrl.getSelectedItem();
        var hideInkBar = !selected || tabsCtrl.count() < 2 || mdNoBar;
        element.css('display', hideInkBar ? 'none' : 'block');
        if (hideInkBar)
          return;
        if (scope.pagination && scope.pagination.tabData) {
          var index = tabsCtrl.getSelectedIndex();
          var data = scope.pagination.tabData.tabs[index] || {
              left: 0,
              right: 0,
              width: 0
            };
          var right = element.parent().prop('offsetWidth') - data.right;
          var classNames = [
              'md-transition-left',
              'md-transition-right',
              'md-no-transition'
            ];
          var classIndex = lastIndex > index ? 0 : lastIndex < index ? 1 : 2;
          element.removeClass(classNames.join(' ')).addClass(classNames[classIndex]).css({
            left: data.left + 'px',
            right: right + 'px'
          });
          lastIndex = index;
        }
      }
    }
  }
  MdTabInkDirective.$inject = ['$$rAF'];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.tabs').directive('mdTabsPagination', TabPaginationDirective);
  function TabPaginationDirective($mdConstant, $window, $$rAF, $$q, $timeout, $mdMedia) {
    // Must match (2 * width of paginators) in scss
    var PAGINATORS_WIDTH = 8 * 4 * 2;
    return {
      restrict: 'A',
      require: '^mdTabs',
      link: postLink
    };
    function postLink(scope, element, attr, tabsCtrl) {
      var tabs = element[0].getElementsByTagName('md-tab');
      var debouncedUpdatePagination = $$rAF.throttle(updatePagination);
      var tabsParent = element.children();
      var locked = false;
      var state = scope.pagination = {
          page: -1,
          active: false,
          clickNext: function () {
            locked || userChangePage(+1);
          },
          clickPrevious: function () {
            locked || userChangePage(-1);
          }
        };
      scope.$on('$mdTabsChanged', debouncedUpdatePagination);
      angular.element($window).on('resize', debouncedUpdatePagination);
      scope.$on('$destroy', function () {
        angular.element($window).off('resize', debouncedUpdatePagination);
      });
      scope.$watch(function () {
        return tabsCtrl.tabToFocus;
      }, onTabFocus);
      // Make sure we don't focus an element on the next page
      // before it's in view
      function onTabFocus(tab, oldTab) {
        if (!tab)
          return;
        var pageIndex = getPageForTab(tab);
        if (!state.active || pageIndex === state.page) {
          tab.element.focus();
        } else {
          // Go to the new page, wait for the page transition to end, then focus.
          oldTab && oldTab.element.blur();
          setPage(pageIndex).then(function () {
            locked = false;
            tab.element.focus();
          });
        }
      }
      // Called when page is changed by a user action (click)
      function userChangePage(increment) {
        var sizeData = state.tabData;
        var newPage = Math.max(0, Math.min(sizeData.pages.length - 1, state.page + increment));
        var newTabIndex = sizeData.pages[newPage][increment > 0 ? 'firstTabIndex' : 'lastTabIndex'];
        var newTab = tabsCtrl.itemAt(newTabIndex);
        locked = true;
        onTabFocus(newTab);
      }
      function updatePagination() {
        if (!element.prop('offsetParent')) {
          var watcher = waitForVisible();
          return;
        }
        var tabs = element.find('md-tab');
        disablePagination();
        var sizeData = state.tabData = calculateTabData();
        var needPagination = state.active = sizeData.pages.length > 1;
        if (needPagination) {
          enablePagination();
        }
        scope.$evalAsync(function () {
          scope.$broadcast('$mdTabsPaginationChanged');
        });
        function enablePagination() {
          tabsParent.css('width', '9999px');
          //-- apply filler margins
          angular.forEach(sizeData.tabs, function (tab) {
            angular.element(tab.element).css('margin-left', tab.filler + 'px');
          });
          setPage(getPageForTab(tabsCtrl.getSelectedItem()));
        }
        function disablePagination() {
          slideTabButtons(0);
          tabsParent.css('width', '');
          tabs.css('width', '');
          tabs.css('margin-left', '');
          state.page = null;
          state.active = false;
        }
        function waitForVisible() {
          return watcher || scope.$watch(function () {
            $timeout(function () {
              if (element[0].offsetParent) {
                if (angular.isFunction(watcher)) {
                  watcher();
                }
                debouncedUpdatePagination();
                watcher = null;
              }
            }, 0, false);
          });
        }
      }
      function slideTabButtons(x) {
        if (tabsCtrl.pagingOffset === x) {
          // Resolve instantly if no change
          return $$q.when();
        }
        var deferred = $$q.defer();
        tabsCtrl.$$pagingOffset = x;
        tabsParent.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + x + 'px,0,0)');
        tabsParent.on($mdConstant.CSS.TRANSITIONEND, onTabsParentTransitionEnd);
        return deferred.promise;
        function onTabsParentTransitionEnd(ev) {
          // Make sure this event didn't bubble up from an animation in a child element.
          if (ev.target === tabsParent[0]) {
            tabsParent.off($mdConstant.CSS.TRANSITIONEND, onTabsParentTransitionEnd);
            deferred.resolve();
          }
        }
      }
      function shouldStretchTabs() {
        switch (scope.stretchTabs) {
        case 'never':
          return false;
        case 'always':
          return true;
        default:
          return $mdMedia('sm');
        }
      }
      function calculateTabData(noAdjust) {
        var clientWidth = element.parent().prop('offsetWidth');
        var tabsWidth = clientWidth - PAGINATORS_WIDTH - 1;
        var $tabs = angular.element(tabs);
        var totalWidth = 0;
        var max = 0;
        var tabData = [];
        var pages = [];
        var currentPage;
        $tabs.css('max-width', '');
        angular.forEach(tabs, function (tab, index) {
          var tabWidth = Math.min(tabsWidth, tab.offsetWidth);
          var data = {
              element: tab,
              left: totalWidth,
              width: tabWidth,
              right: totalWidth + tabWidth,
              filler: 0
            };
          //-- This calculates the page for each tab.  The first page will use the clientWidth, which
          //   does not factor in the pagination items.  After the first page, tabsWidth is used
          //   because at this point, we know that the pagination buttons will be shown.
          data.page = Math.ceil(data.right / (pages.length === 1 && index === tabs.length - 1 ? clientWidth : tabsWidth)) - 1;
          if (data.page >= pages.length) {
            data.filler = tabsWidth * data.page - data.left;
            data.right += data.filler;
            data.left += data.filler;
            currentPage = {
              left: data.left,
              firstTabIndex: index,
              lastTabIndex: index,
              tabs: [data]
            };
            pages.push(currentPage);
          } else {
            currentPage.lastTabIndex = index;
            currentPage.tabs.push(data);
          }
          totalWidth = data.right;
          max = Math.max(max, tabWidth);
          tabData.push(data);
        });
        $tabs.css('max-width', tabsWidth + 'px');
        if (!noAdjust && shouldStretchTabs()) {
          return adjustForStretchedTabs();
        } else {
          return {
            width: totalWidth,
            max: max,
            tabs: tabData,
            pages: pages,
            tabElements: tabs
          };
        }
        function adjustForStretchedTabs() {
          var canvasWidth = pages.length === 1 ? clientWidth : tabsWidth;
          var tabsPerPage = Math.min(Math.floor(canvasWidth / max), tabs.length);
          var tabWidth = Math.floor(canvasWidth / tabsPerPage);
          $tabs.css('width', tabWidth + 'px');
          return calculateTabData(true);
        }
      }
      function getPageForTab(tab) {
        var tabIndex = tabsCtrl.indexOf(tab);
        if (tabIndex === -1)
          return 0;
        var sizeData = state.tabData;
        return sizeData ? sizeData.tabs[tabIndex].page : 0;
      }
      function setPage(page) {
        if (page === state.page)
          return;
        var lastPage = state.tabData.pages.length - 1;
        if (page < 0)
          page = 0;
        if (page > lastPage)
          page = lastPage;
        state.hasPrev = page > 0;
        state.hasNext = page < lastPage;
        state.page = page;
        scope.$broadcast('$mdTabsPaginationChanged');
        return slideTabButtons(-state.tabData.pages[page].left);
      }
    }
  }
  TabPaginationDirective.$inject = [
    '$mdConstant',
    '$window',
    '$$rAF',
    '$$q',
    '$timeout',
    '$mdMedia'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.tabs').controller('$mdTab', TabItemController);
  function TabItemController($scope, $element, $attrs, $compile, $animate, $mdUtil, $parse, $timeout) {
    var self = this;
    var tabsCtrl = $element.controller('mdTabs');
    // Properties
    self.contentContainer = angular.element('<div class="md-tab-content ng-hide">');
    self.element = $element;
    // Methods
    self.isDisabled = isDisabled;
    self.onAdd = onAdd;
    self.onRemove = onRemove;
    self.onSelect = onSelect;
    self.onDeselect = onDeselect;
    var disabledParsed = $parse($attrs.ngDisabled);
    function isDisabled() {
      return disabledParsed($scope.$parent);
    }
    /**
   * Add the tab's content to the DOM container area in the tabs,
   * @param contentArea the contentArea to add the content of the tab to
   */
    function onAdd(contentArea, shouldDisconnectScope) {
      if (self.content.length) {
        self.contentContainer.append(self.content);
        self.contentScope = $scope.$parent.$new();
        contentArea.append(self.contentContainer);
        $compile(self.contentContainer)(self.contentScope);
        if (shouldDisconnectScope === true) {
          $timeout(function () {
            $mdUtil.disconnectScope(self.contentScope);
          }, 0, false);
        }
      }
    }
    function onRemove() {
      $animate.leave(self.contentContainer).then(function () {
        self.contentScope && self.contentScope.$destroy();
        self.contentScope = null;
      });
    }
    function toggleAnimationClass(rightToLeft) {
      self.contentContainer[rightToLeft ? 'addClass' : 'removeClass']('md-transition-rtl');
    }
    function onSelect(rightToLeft) {
      // Resume watchers and events firing when tab is selected
      $mdUtil.reconnectScope(self.contentScope);
      $element.addClass('active').attr({
        'aria-selected': true,
        'tabIndex': 0
      }).on('$md.swipeleft $md.swiperight', onSwipe);
      toggleAnimationClass(rightToLeft);
      $animate.removeClass(self.contentContainer, 'ng-hide');
      $scope.onSelect();
    }
    function onDeselect(rightToLeft) {
      // Stop watchers & events from firing while tab is deselected
      $mdUtil.disconnectScope(self.contentScope);
      $element.removeClass('active').attr({
        'aria-selected': false,
        'tabIndex': -1
      }).off('$md.swipeleft $md.swiperight', onSwipe);
      toggleAnimationClass(rightToLeft);
      $animate.addClass(self.contentContainer, 'ng-hide');
      $scope.onDeselect();
    }
    ///// Private functions
    function onSwipe(ev) {
      $scope.$apply(function () {
        if (/left/.test(ev.type)) {
          tabsCtrl.select(tabsCtrl.next());
        } else {
          tabsCtrl.select(tabsCtrl.previous());
        }
      });
    }
  }
  TabItemController.$inject = [
    '$scope',
    '$element',
    '$attrs',
    '$compile',
    '$animate',
    '$mdUtil',
    '$parse',
    '$timeout'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.tabs').directive('mdTab', MdTabDirective);
  /**
 * @ngdoc directive
 * @name mdTab
 * @module material.components.tabs
 *
 * @restrict E
 *
 * @description
 * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
 *
 * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more
 * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested
 * markup of the `<md-tab>` is used as the tab header markup.
 *
 * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup
 * will be considered tab content and will be transcluded to the internal `<div class="md-tabs-content">` container.
 *
 * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is
 * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can
 * be initiated via data binding changes, programmatic invocation, or user gestures.
 *
 * @param {string=} label Optional attribute to specify a simple string as the tab label
 * @param {boolean=} md-active When evaluteing to true, selects the tab.
 * @param {boolean=} disabled If present, disabled tab selection.
 * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.
 * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.
 *
 *
 * @usage
 *
 * <hljs lang="html">
 * <md-tab label="" disabled="" md-on-select="" md-on-deselect="" >
 *   <h3>My Tab content</h3>
 * </md-tab>
 *
 * <md-tab >
 *   <md-tab-label>
 *     <h3>My Tab content</h3>
 *   </md-tab-label>
 *   <p>
 *     Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
 *     totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae
 *     dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
 *     sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.
 *   </p>
 * </md-tab>
 * </hljs>
 *
 */
  function MdTabDirective($mdInkRipple, $compile, $mdUtil, $mdConstant, $timeout) {
    return {
      restrict: 'E',
      require: [
        'mdTab',
        '^mdTabs'
      ],
      controller: '$mdTab',
      scope: {
        onSelect: '&mdOnSelect',
        onDeselect: '&mdOnDeselect',
        label: '@'
      },
      compile: compile
    };
    function compile(element, attr) {
      var tabLabel = element.find('md-tab-label');
      if (tabLabel.length) {
        // If a tab label element is found, remove it for later re-use.
        tabLabel.remove();
      } else if (angular.isDefined(attr.label)) {
        // Otherwise, try to use attr.label as the label
        tabLabel = angular.element('<md-tab-label>').html(attr.label);
      } else {
        // If nothing is found, use the tab's content as the label
        tabLabel = angular.element('<md-tab-label>').append(element.contents().remove());
      }
      // Everything that's left as a child is the tab's content.
      var tabContent = element.contents().remove();
      return function postLink(scope, element, attr, ctrls) {
        var tabItemCtrl = ctrls[0];
        // Controller for THIS tabItemCtrl
        var tabsCtrl = ctrls[1];
        // Controller for ALL tabs
        $timeout(element.addClass.bind(element, 'md-tab-themed'), 0, false);
        scope.$watch(function () {
          return attr.label;
        }, function () {
          $timeout(function () {
            tabsCtrl.scope.$broadcast('$mdTabsChanged');
          }, 0, false);
        });
        transcludeTabContent();
        configureAria();
        $mdInkRipple.attachTabBehavior(scope, element, { colorElement: tabsCtrl.inkBarElement });
        tabsCtrl.add(tabItemCtrl);
        scope.$on('$destroy', function () {
          tabsCtrl.remove(tabItemCtrl);
        });
        element.on('$destroy', function () {
          //-- wait for item to be removed from the dom
          $timeout(function () {
            tabsCtrl.scope.$broadcast('$mdTabsChanged');
          }, 0, false);
        });
        if (!angular.isDefined(attr.ngClick)) {
          element.on('click', defaultClickListener);
        }
        element.on('keydown', keydownListener);
        if (angular.isNumber(scope.$parent.$index)) {
          watchNgRepeatIndex();
        }
        if (angular.isDefined(attr.mdActive)) {
          watchActiveAttribute();
        }
        watchDisabled();
        function transcludeTabContent() {
          // Clone the label we found earlier, and $compile and append it
          var label = tabLabel.clone();
          element.append(label);
          $compile(label)(scope.$parent);
          // Clone the content we found earlier, and mark it for later placement into
          // the proper content area.
          tabItemCtrl.content = tabContent.clone();
        }
        //defaultClickListener isn't applied if the user provides an ngClick expression.
        function defaultClickListener() {
          scope.$apply(function () {
            tabsCtrl.select(tabItemCtrl);
            tabsCtrl.focus(tabItemCtrl);
          });
        }
        function keydownListener(ev) {
          if (ev.keyCode == $mdConstant.KEY_CODE.SPACE || ev.keyCode == $mdConstant.KEY_CODE.ENTER) {
            // Fire the click handler to do normal selection if space is pressed
            element.triggerHandler('click');
            ev.preventDefault();
          } else if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {
            scope.$evalAsync(function () {
              tabsCtrl.focus(tabsCtrl.previous(tabItemCtrl));
            });
          } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {
            scope.$evalAsync(function () {
              tabsCtrl.focus(tabsCtrl.next(tabItemCtrl));
            });
          }
        }
        // If tabItemCtrl is part of an ngRepeat, move the tabItemCtrl in our internal array
        // when its $index changes
        function watchNgRepeatIndex() {
          // The tabItemCtrl has an isolate scope, so we watch the $index on the parent.
          scope.$watch('$parent.$index', function $indexWatchAction(newIndex) {
            tabsCtrl.move(tabItemCtrl, newIndex);
          });
        }
        function watchActiveAttribute() {
          var unwatch = scope.$parent.$watch('!!(' + attr.mdActive + ')', activeWatchAction);
          scope.$on('$destroy', unwatch);
          function activeWatchAction(isActive) {
            var isSelected = tabsCtrl.getSelectedItem() === tabItemCtrl;
            if (isActive && !isSelected) {
              tabsCtrl.select(tabItemCtrl);
            } else if (!isActive && isSelected) {
              tabsCtrl.deselect(tabItemCtrl);
            }
          }
        }
        function watchDisabled() {
          scope.$watch(tabItemCtrl.isDisabled, disabledWatchAction);
          function disabledWatchAction(isDisabled) {
            element.attr('aria-disabled', isDisabled);
            // Auto select `next` tab when disabled
            var isSelected = tabsCtrl.getSelectedItem() === tabItemCtrl;
            if (isSelected && isDisabled) {
              tabsCtrl.select(tabsCtrl.next() || tabsCtrl.previous());
            }
          }
        }
        function configureAria() {
          // Link together the content area and tabItemCtrl with an id
          var tabId = attr.id || 'tab_' + $mdUtil.nextUid();
          element.attr({
            id: tabId,
            role: 'tab',
            tabIndex: -1
          });
          // Only setup the contentContainer's aria attributes if tab content is provided
          if (tabContent.length) {
            var tabContentId = 'content_' + tabId;
            if (!element.attr('aria-controls')) {
              element.attr('aria-controls', tabContentId);
            }
            tabItemCtrl.contentContainer.attr({
              id: tabContentId,
              role: 'tabpanel',
              'aria-labelledby': tabId
            });
          }
        }
      };
    }
  }
  MdTabDirective.$inject = [
    '$mdInkRipple',
    '$compile',
    '$mdUtil',
    '$mdConstant',
    '$timeout'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.tabs').controller('$mdTabs', MdTabsController);
  function MdTabsController($scope, $element, $mdUtil, $timeout) {
    var tabsList = $mdUtil.iterator([], false);
    var self = this;
    // Properties
    self.$element = $element;
    self.scope = $scope;
    // The section containing the tab content $elements
    var contentArea = self.contentArea = angular.element($element[0].querySelector('.md-tabs-content'));
    // Methods from iterator
    var inRange = self.inRange = tabsList.inRange;
    var indexOf = self.indexOf = tabsList.indexOf;
    var itemAt = self.itemAt = tabsList.itemAt;
    self.count = tabsList.count;
    self.getSelectedItem = getSelectedItem;
    self.getSelectedIndex = getSelectedIndex;
    self.add = add;
    self.remove = remove;
    self.move = move;
    self.select = select;
    self.focus = focus;
    self.deselect = deselect;
    self.next = next;
    self.previous = previous;
    $scope.$on('$destroy', function () {
      deselect(getSelectedItem());
      for (var i = tabsList.count() - 1; i >= 0; i--) {
        remove(tabsList[i], true);
      }
    });
    // Get the selected tab
    function getSelectedItem() {
      return itemAt($scope.selectedIndex);
    }
    function getSelectedIndex() {
      return $scope.selectedIndex;
    }
    // Add a new tab.
    // Returns a method to remove the tab from the list.
    function add(tab, index) {
      tabsList.add(tab, index);
      // Select the new tab if we don't have a selectedIndex, or if the
      // selectedIndex we've been waiting for is this tab
      if (!angular.isDefined(tab.element.attr('md-active')) && ($scope.selectedIndex === -1 || !angular.isNumber($scope.selectedIndex) || $scope.selectedIndex === self.indexOf(tab))) {
        tab.onAdd(self.contentArea, false);
        self.select(tab);
      } else {
        tab.onAdd(self.contentArea, true);
      }
      $scope.$broadcast('$mdTabsChanged');
    }
    function remove(tab, noReselect) {
      if (!tabsList.contains(tab))
        return;
      if (noReselect)
        return;
      var isSelectedItem = getSelectedItem() === tab, newTab = previous() || next();
      deselect(tab);
      tabsList.remove(tab);
      tab.onRemove();
      $scope.$broadcast('$mdTabsChanged');
      if (isSelectedItem) {
        select(newTab);
      }
    }
    // Move a tab (used when ng-repeat order changes)
    function move(tab, toIndex) {
      var isSelected = getSelectedItem() === tab;
      tabsList.remove(tab);
      tabsList.add(tab, toIndex);
      if (isSelected)
        select(tab);
      $scope.$broadcast('$mdTabsChanged');
    }
    function select(tab, rightToLeft) {
      if (!tab || tab.isSelected || tab.isDisabled())
        return;
      if (!tabsList.contains(tab))
        return;
      if (!angular.isDefined(rightToLeft)) {
        rightToLeft = indexOf(tab) < $scope.selectedIndex;
      }
      deselect(getSelectedItem(), rightToLeft);
      $scope.selectedIndex = indexOf(tab);
      tab.isSelected = true;
      tab.onSelect(rightToLeft);
      $scope.$broadcast('$mdTabsChanged');
    }
    function focus(tab) {
      // this variable is watched by pagination
      self.tabToFocus = tab;
    }
    function deselect(tab, rightToLeft) {
      if (!tab || !tab.isSelected)
        return;
      if (!tabsList.contains(tab))
        return;
      $scope.selectedIndex = -1;
      tab.isSelected = false;
      tab.onDeselect(rightToLeft);
    }
    function next(tab, filterFn) {
      return tabsList.next(tab || getSelectedItem(), filterFn || isTabEnabled);
    }
    function previous(tab, filterFn) {
      return tabsList.previous(tab || getSelectedItem(), filterFn || isTabEnabled);
    }
    function isTabEnabled(tab) {
      return tab && !tab.isDisabled();
    }
  }
  MdTabsController.$inject = [
    '$scope',
    '$element',
    '$mdUtil',
    '$timeout'
  ];
}());
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.0-rc1-master-5414bc4
 */
(function () {
  'use strict';
  angular.module('material.components.tabs').directive('mdTabs', TabsDirective);
  /**
 * @ngdoc directive
 * @name mdTabs
 * @module material.components.tabs
 *
 * @restrict E
 *
 * @description
 * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
 * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
 * content that will be associated with each tab button.
 *
 * Below is the markup for its simplest usage:
 *
 *  <hljs lang="html">
 *  <md-tabs>
 *    <md-tab label="Tab #1"></md-tab>
 *    <md-tab label="Tab #2"></md-tab>
 *    <md-tab label="Tab #3"></md-tab>
 *  </md-tabs>
 *  </hljs>
 *
 * Tabs supports three (3) usage scenarios:
 *
 *  1. Tabs (buttons only)
 *  2. Tabs with internal view content
 *  3. Tabs with external view content
 *
 * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
 * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
 * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
 *
 * > As a performance bonus, if the tab content is managed internally then the non-active (non-visible) tab contents are temporarily disconnected from the `$scope.$digest()` processes; which restricts and optimizes DOM updates to only the currently active tab.
 *
 * Additional features also include:
 *
 * *  Content can include any markup.
 * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.
 * *  If the currently active tab is the last tab, then next() action will select the first tab.
 * *  Any markup (other than **`<md-tab>`** tags) will be transcluded into the tab header area BEFORE the tab buttons.
 *
 * ### Explanation of tab stretching
 *
 * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
 *
 * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
 *
 * On desktops, by default, stretching will never occur.
 *
 * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
 *
 * `md-stretch-tabs` | mobile    | desktop
 * ------------------|-----------|--------
 * `auto`            | stretched | ---
 * `always`          | stretched | stretched
 * `never`           | ---       | ---
 *
 * @param {integer=} md-selected Index of the active/selected tab
 * @param {boolean=} md-no-ink If present, disables ink ripple effects.
 * @param {boolean=} md-no-bar If present, disables the selection ink bar.
 * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`
 * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
 *
 * @usage
 * <hljs lang="html">
 * <md-tabs md-selected="selectedIndex" >
 *   <img ng-src="img/angular.png" class="centered">
 *
 *   <md-tab
 *      ng-repeat="tab in tabs | orderBy:predicate:reversed"
 *      md-on-select="onTabSelected(tab)"
 *      md-on-deselect="announceDeselected(tab)"
 *      disabled="tab.disabled" >
 *
 *       <md-tab-label>
 *           {{tab.title}}
 *           <img src="img/removeTab.png"
 *                ng-click="removeTab(tab)"
 *                class="delete" >
 *       </md-tab-label>
 *
 *       {{tab.content}}
 *
 *   </md-tab>
 *
 * </md-tabs>
 * </hljs>
 *
 */
  function TabsDirective($mdTheming) {
    return {
      restrict: 'E',
      controller: '$mdTabs',
      require: 'mdTabs',
      transclude: true,
      scope: { selectedIndex: '=?mdSelected' },
      template: '<section class="md-header" ' + 'ng-class="{\'md-paginating\': pagination.active}">' + '<button class="md-paginator md-prev" ' + 'ng-if="pagination.active && pagination.hasPrev" ' + 'ng-click="pagination.clickPrevious()" ' + 'aria-hidden="true">' + '<md-icon md-svg-icon="tabs-arrow"></md-icon>' + '</button>' + '<div class="md-header-items-container" md-tabs-pagination>' + '<div class="md-header-items">' + '<md-tabs-ink-bar></md-tabs-ink-bar>' + '</div>' + '</div>' + '<button class="md-paginator md-next" ' + 'ng-if="pagination.active && pagination.hasNext" ' + 'ng-click="pagination.clickNext()" ' + 'aria-hidden="true">' + '<md-icon md-svg-icon="tabs-arrow"></md-icon>' + '</button>' + '</section>' + '<section class="md-tabs-content"></section>',
      link: postLink
    };
    function postLink(scope, element, attr, tabsCtrl, transclude) {
      scope.stretchTabs = attr.hasOwnProperty('mdStretchTabs') ? attr.mdStretchTabs || 'always' : 'auto';
      $mdTheming(element);
      configureAria();
      watchSelected();
      transclude(scope.$parent, function (clone) {
        angular.element(element[0].querySelector('.md-header-items')).append(clone);
      });
      function configureAria() {
        element.attr('role', 'tablist');
      }
      function watchSelected() {
        scope.$watch('selectedIndex', function watchSelectedIndex(newIndex, oldIndex) {
          if (oldIndex == newIndex)
            return;
          var rightToLeft = oldIndex > newIndex;
          tabsCtrl.deselect(tabsCtrl.itemAt(oldIndex), rightToLeft);
          if (tabsCtrl.inRange(newIndex)) {
            var newTab = tabsCtrl.itemAt(newIndex);
            while (newTab && newTab.isDisabled()) {
              newTab = newIndex > oldIndex ? tabsCtrl.next(newTab) : tabsCtrl.previous(newTab);
            }
            tabsCtrl.select(newTab, rightToLeft);
          }
        });
      }
    }
  }
  TabsDirective.$inject = ['$mdTheming'];
}());
angular.module('material.core').constant('$MD_THEME_CSS', 'md-autocomplete {  background: \'{{background-50}}\'; }  md-autocomplete button md-icon path {    fill: \'{{background-600}}\'; }  md-autocomplete button:after {    background: \'{{background-600-0.3}}\'; }  md-autocomplete ul {    background: \'{{background-50}}\'; }    md-autocomplete ul li {      border-top: 1px solid \'{{background-400}}\';      color: \'{{background-900}}\'; }      md-autocomplete ul li .highlight {        color: \'{{background-600}}\'; }      md-autocomplete ul li:hover, md-autocomplete ul li.selected {        background: \'{{background-200}}\'; }md-backdrop.md-opaque.md-THEME_NAME-theme {  background-color: \'{{foreground-4-0.5}}\'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: \'{{background-50}}\';  border-top-color: \'{{background-300}}\'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-item {    color: \'{{foreground-1}}\'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: \'{{background-50}}\'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: \'{{foreground-1}}\'; }md-toolbar .md-button.md-THEME_NAME-theme.md-fab {  background-color: white; }.md-button.md-THEME_NAME-theme {  border-radius: 3px; }  .md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):focus {    background-color: \'{{background-500-0.2}}\'; }  .md-button.md-THEME_NAME-theme.md-primary {    color: \'{{primary-color}}\'; }    .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: \'{{primary-contrast}}\';      background-color: \'{{primary-color}}\'; }      .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):focus {        background-color: \'{{primary-600}}\'; }  .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: \'{{accent-color}}\';    color: \'{{accent-contrast}}\'; }    .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):focus {      background-color: \'{{accent-A700}}\'; }  .md-button.md-THEME_NAME-theme.md-raised {    color: \'{{background-contrast}}\';    background-color: \'{{background-50}}\'; }    .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):focus {      background-color: \'{{background-200}}\'; }  .md-button.md-THEME_NAME-theme.md-warn {    color: \'{{warn-color}}\'; }    .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: \'{{warn-contrast}}\';      background-color: \'{{warn-color}}\'; }      .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):focus {        background-color: \'{{warn-700}}\'; }  .md-button.md-THEME_NAME-theme.md-accent {    color: \'{{accent-color}}\'; }    .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: \'{{accent-contrast}}\';      background-color: \'{{accent-color}}\'; }      .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):focus {        background-color: \'{{accent-700}}\'; }  .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    color: \'{{foreground-3}}\';    background-color: transparent;    cursor: not-allowed; }md-card.md-THEME_NAME-theme {  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: \'{{accent-600}}\'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: \'{{background-600}}\'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: \'{{foreground-2}}\'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: \'{{accent-color-0.87}}\'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: \'{{background-200}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: \'{{primary-600}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: \'{{background-600}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: \'{{foreground-2}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: \'{{primary-color-0.87}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: \'{{background-200}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: \'{{warn-600}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: \'{{foreground-2}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: \'{{warn-color-0.87}}\'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: \'{{background-200}}\'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: \'{{foreground-3}}\'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: \'{{foreground-3}}\'; }md-content.md-THEME_NAME-theme {  background-color: \'{{background-hue-3}}\'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: \'{{background-hue-3}}\'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: \'{{foreground-4}}\'; }md-divider.md-THEME_NAME-theme {  border-top-color: \'{{foreground-4}}\'; }md-icon.md-THEME_NAME-theme.md-primary {  color: \'{{primary-color}}\'; }md-icon.md-THEME_NAME-theme.md-accent {  color: \'{{accent-color}}\'; }md-icon.md-THEME_NAME-theme.md-warn {  color: \'{{warn-color}}\'; }md-icon.md-THEME_NAME-theme.md-danger {  color: \'{{danger-color}}\'; }md-input-container.md-THEME_NAME-theme .md-input {  color: \'{{foreground-1}}\';  border-color: \'{{foreground-4}}\';  text-shadow: \'{{foreground-shadow}}\'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \'{{foreground-3}}\'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: \'{{foreground-shadow}}\';  color: \'{{foreground-3}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: \'{{foreground-2}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: \'{{primary-500}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: \'{{primary-500}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: \'{{accent-500}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: \'{{accent-500}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: \'{{warn-500}}\'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: \'{{warn-500}}\'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: \'{{warn-500}}\'; }md-input-container.md-THEME_NAME-theme.md-input-invalid label {  color: \'{{warn-500}}\'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: \'{{warn-500}}\'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: \'{{foreground-3}}\';  background-image: linear-gradient(to right, \'{{foreground-4}}\' 0%, \'{{foreground-4}}\' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \'{{foreground-4}}\' 100%); }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: \'{{primary-color}}\';    border-bottom-color: \'{{primary-color}}\'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: \'{{primary-color}}\'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: \'{{primary-color}}\'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: \'{{primary-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: \'{{warn-color}}\';    border-bottom-color: \'{{warn-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: \'{{warn-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: \'{{warn-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: \'{{warn-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: \'{{accent-color}}\';    border-bottom-color: \'{{accent-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: \'{{accent-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: \'{{accent-color}}\'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: \'{{accent-color}}\'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: \'{{primary-100}}\'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: \'{{primary-color}}\'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: \'{{warn-100}}\'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: \'{{warn-color}}\'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: \'{{accent-100}}\'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: \'{{accent-color}}\'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: \'{{warn-100}}\'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\'{{warn-100}}\' 0%, \'{{warn-100}}\' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: \'{{accent-100}}\'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\'{{accent-100}}\' 0%, \'{{accent-100}}\' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: \'{{foreground-2}}\'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: \'{{accent-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: \'{{accent-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: \'{{accent-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: \'{{accent-600}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: \'{{primary-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: \'{{primary-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: \'{{primary-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: \'{{primary-600}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: \'{{warn-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: \'{{warn-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: \'{{warn-color-0.87}}\'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: \'{{warn-600}}\'; }md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {  border-color: \'{{foreground-3}}\'; }md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {  border-color: \'{{foreground-3}}\'; }md-radio-group.md-THEME_NAME-theme:focus:not(:empty) {  border-color: \'{{foreground-1}}\'; }md-sidenav.md-THEME_NAME-theme {  background-color: \'{{background-hue-3}}\'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: \'{{foreground-3}}\'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: \'{{foreground-4}}\'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: \'{{foreground-2}}\'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: \'{{foreground-4}}\'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: \'{{background-hue-3}}\'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: \'{{background-hue-3}}\'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: \'{{accent-color}}\'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: \'{{accent-color}}\';  background-color: \'{{accent-color}}\'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: \'{{accent-color}}\'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: \'{{accent-color}}\'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: \'{{accent-contrast}}\'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: \'{{warn-color}}\'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: \'{{warn-color}}\';  background-color: \'{{warn-color}}\'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: \'{{warn-color}}\'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: \'{{warn-color}}\'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: \'{{warn-contrast}}\'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: \'{{primary-color}}\'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: \'{{primary-color}}\';  background-color: \'{{primary-color}}\'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: \'{{primary-color}}\'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: \'{{primary-color}}\'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: \'{{primary-contrast}}\'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: \'{{foreground-3}}\'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: \'{{foreground-3}}\'; }.md-subheader.md-THEME_NAME-theme {  color: \'{{ foreground-2-0.23 }}\';  background-color: \'{{background-hue-3}}\'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: \'{{primary-color}}\'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: \'{{accent-color}}\'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: \'{{warn-color}}\'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: \'{{background-50}}\'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: \'{{background-500}}\'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: \'{{accent-color}}\'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: \'{{accent-color-0.5}}\'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: \'{{primary-color}}\'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: \'{{primary-color-0.5}}\'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: \'{{warn-color}}\'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: \'{{warn-color-0.5}}\'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: \'{{background-400}}\'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: \'{{foreground-4}}\'; }md-switch.md-THEME_NAME-theme:focus .md-label:not(:empty) {  border-color: \'{{foreground-1}}\';  border-style: dotted; }md-tabs.md-THEME_NAME-theme .md-header {  background-color: transparent; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: \'{{primary-color}}\'; }md-tabs.md-THEME_NAME-theme.md-accent .md-header {  background-color: \'{{accent-color}}\'; }md-tabs.md-THEME_NAME-theme.md-accent md-tab:not([disabled]) {  color: \'{{accent-100}}\'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab:not([disabled]).active {    color: \'{{accent-contrast}}\'; }md-tabs.md-THEME_NAME-theme.md-primary .md-header {  background-color: \'{{primary-color}}\'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab:not([disabled]) {  color: \'{{primary-100}}\'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab:not([disabled]).active {    color: \'{{primary-contrast}}\'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab {  color: \'{{primary-100}}\'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab[disabled] {    color: \'{{foreground-3}}\'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab:focus {    color: \'{{primary-contrast}}\';    background-color: \'{{primary-contrast-0.1}}\'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab.active {    color: \'{{primary-contrast}}\'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab .md-ripple-container {    color: \'{{primary-contrast}}\'; }md-tabs.md-THEME_NAME-theme.md-warn .md-header {  background-color: \'{{warn-color}}\'; }md-tabs.md-THEME_NAME-theme.md-warn md-tab:not([disabled]) {  color: \'{{warn-100}}\'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab:not([disabled]).active {    color: \'{{warn-contrast}}\'; }md-tabs.md-THEME_NAME-theme md-tabs-ink-bar {  color: \'{{accent-color}}\';  background: \'{{accent-color}}\'; }md-tabs.md-THEME_NAME-theme md-tab {  color: \'{{foreground-2}}\'; }  md-tabs.md-THEME_NAME-theme md-tab[disabled] {    color: \'{{foreground-3}}\'; }  md-tabs.md-THEME_NAME-theme md-tab:focus {    color: \'{{foreground-1}}\'; }  md-tabs.md-THEME_NAME-theme md-tab.active {    color: \'{{primary-color}}\'; }  md-tabs.md-THEME_NAME-theme md-tab .md-ripple-container {    color: \'{{accent-100}}\'; }md-input-group.md-THEME_NAME-theme input, md-input-group.md-THEME_NAME-theme textarea {  text-shadow: \'{{foreground-shadow}}\'; }  md-input-group.md-THEME_NAME-theme input::-webkit-input-placeholder, md-input-group.md-THEME_NAME-theme input::-moz-placeholder, md-input-group.md-THEME_NAME-theme input:-moz-placeholder, md-input-group.md-THEME_NAME-theme input:-ms-input-placeholder, md-input-group.md-THEME_NAME-theme textarea::-webkit-input-placeholder, md-input-group.md-THEME_NAME-theme textarea::-moz-placeholder, md-input-group.md-THEME_NAME-theme textarea:-moz-placeholder, md-input-group.md-THEME_NAME-theme textarea:-ms-input-placeholder {    color: \'{{foreground-3}}\'; }md-input-group.md-THEME_NAME-theme label {  text-shadow: \'{{foreground-shadow}}\';  color: \'{{foreground-3}}\'; }md-input-group.md-THEME_NAME-theme input, md-input-group.md-THEME_NAME-theme textarea {  color: \'{{foreground-1}}\';  border-color: \'{{foreground-4}}\'; }md-input-group.md-THEME_NAME-theme.md-input-focused input, md-input-group.md-THEME_NAME-theme.md-input-focused textarea {  border-color: \'{{primary-500}}\'; }md-input-group.md-THEME_NAME-theme.md-input-focused label {  color: \'{{primary-500}}\'; }md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent input, md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent textarea {  border-color: \'{{accent-500}}\'; }md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent label {  color: \'{{accent-500}}\'; }md-input-group.md-THEME_NAME-theme.md-input-has-value:not(.md-input-focused) label {  color: \'{{foreground-2}}\'; }md-input-group.md-THEME_NAME-theme .md-input[disabled] {  border-bottom-color: \'{{foreground-4}}\';  color: \'{{foreground-3}}\'; }md-toast.md-THEME_NAME-theme {  background-color: \'{{foreground-1}}\';  color: \'{{background-50}}\'; }  md-toast.md-THEME_NAME-theme .md-button {    color: \'{{background-50}}\'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: \'{{primary-A200}}\'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: \'{{accent-A200}}\'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: \'{{warn-A200}}\'; }md-toolbar.md-THEME_NAME-theme {  background-color: \'{{primary-color}}\';  color: \'{{primary-contrast}}\'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: \'{{primary-contrast}}\'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: \'{{accent-color}}\';    color: \'{{accent-contrast}}\'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: \'{{warn-color}}\';    color: \'{{warn-contrast}}\'; }md-tooltip.md-THEME_NAME-theme {  color: \'{{background-A100}}\'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: \'{{foreground-2}}\'; }');
(function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == 'function' && require;
        if (!u && a)
          return a(o, !0);
        if (i)
          return i(o, !0);
        var f = new Error('Cannot find module \'' + o + '\'');
        throw f.code = 'MODULE_NOT_FOUND', f;
      }
      var l = n[o] = { exports: {} };
      t[o][0].call(l.exports, function (e) {
        var n = t[o][1][e];
        return s(n ? n : e);
      }, l, l.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = typeof require == 'function' && require;
  for (var o = 0; o < r.length; o++)
    s(r[o]);
  return s;
}({
  1: [
    function (require, module, exports) {
      'use strict';
      var Device = function (attributes, spark) {
        this._spark = spark;
        this.attributes = {};
        this._updateAttrs(attributes);
        this.requirePlugins();
      };
      Device.prototype.remove = function (callback) {
        return this._spark.removeCore(this.id, callback);
      };
      Device.prototype.rename = function (name, callback) {
        return this._spark.renameCore(this.id, name, callback);
      };
      Device.prototype.signal = function (callback) {
        return this._spark.signalCore(this.id, true, callback);
      };
      Device.prototype.stopSignal = function (callback) {
        return this._spark.signalCore(this.id, false, callback);
      };
      Device.prototype.flash = function (files, callback) {
        return this._spark.flashCore(this.id, files, callback);
      };
      Device.prototype.sendPublicKey = function (buffer, callback) {
        return this._spark.sendPublicKey(this.id, buffer, callback);
      };
      Device.prototype.callFunction = function (name, params, callback) {
        return this._spark.callFunction(this.id, name, params, callback);
      };
      Device.prototype.subscribe = function (eventName, callback) {
        return this._spark.getEventStream(eventName, this.id, callback);
      };
      Device.prototype.createWebhook = function (eventName, url, callback) {
        return this._spark.createWebhook(eventName, url, this.id, callback);
      };
      Device.prototype.getVariable = function (name, callback) {
        return this._spark.getVariable(this.id, name, callback);
      };
      Device.prototype.getAttributes = function (callback) {
        this._spark.getAttributes(this.id, function (err, data) {
          if (!err) {
            this._updateAttrs(data);
          }
          callback(err, data);
        }.bind(this));
      };
      Device.prototype.onEvent = function (eventName, callback) {
        return this._spark.getEventStream(eventName, this.id, callback);
      };
      Device.prototype._updateAttrs = function (attrs) {
        var replacer = function (match) {
          return match.toUpperCase().replace('_', '');
        };
        var tmpKey = '';
        for (var key in attrs) {
          tmpKey = key.replace(/(\_[a-z])/g, replacer);
          this[tmpKey] = attrs[key];
          this.attributes[tmpKey] = attrs[key];
        }
      };
      Device.prototype.requirePlugins = function () {
        var plugins = this._spark.plugins;
        var Plugin = null;
        var name = '';
        var moduleName = '';
        for (var i in plugins) {
          name = plugins[i];
          moduleName = 'spark-' + name;
          Plugin = require(moduleName);
          this[name] = new Plugin(this.id, this._spark);
        }
      };
      module.exports = Device;
    },
    {}
  ],
  2: [
    function (require, module, exports) {
      (function (process) {
        'use strict';
        var fs = require('fs'), path = require('path');
        var SparkApi = function (args) {
          this.request = require('request');
          this.clientId = args.clientId;
          this.clientSecret = args.clientSecret;
          this.baseUrl = args.baseUrl;
        };
        SparkApi.prototype.login = function (params, callback) {
          this.request({
            uri: this.baseUrl + '/oauth/token',
            method: 'POST',
            json: true,
            form: {
              username: params.username,
              password: params.password,
              grant_type: 'password',
              client_id: this.clientId,
              client_secret: this.clientSecret
            }
          }, callback);
        };
        SparkApi.prototype.listDevices = function (params, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices?access_token=' + params.accessToken,
            method: 'GET',
            json: true
          }, callback);
        };
        SparkApi.prototype.getDevice = function (params, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + params.deviceId + '?access_token=' + params.accessToken,
            method: 'GET',
            json: true
          }, callback);
        };
        SparkApi.prototype.createUser = function (username, password, callback) {
          this.request({
            uri: this.baseUrl + '/v1/users',
            method: 'POST',
            form: {
              username: username,
              password: password
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.removeAccessToken = function (username, password, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/access_tokens/' + accessToken,
            method: 'DELETE',
            auth: {
              username: username,
              password: password
            },
            form: { access_token: accessToken },
            json: true
          }, callback);
        };
        SparkApi.prototype.claimCore = function (coreId, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices',
            method: 'POST',
            form: {
              id: coreId,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.removeCore = function (coreId, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId,
            method: 'DELETE',
            form: {
              id: coreId,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.renameCore = function (coreId, name, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId,
            method: 'PUT',
            form: {
              name: name,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.getAttributes = function (coreId, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId + '?access_token=' + accessToken,
            method: 'GET',
            json: true
          }, callback);
        };
        SparkApi.prototype.getVariable = function (coreId, name, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId + '/' + name + '?access_token=' + accessToken,
            method: 'GET',
            json: true
          }, callback);
        };
        SparkApi.prototype.signalCore = function (coreId, beSignalling, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId,
            method: 'PUT',
            form: {
              signal: beSignalling ? 1 : 0,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.flashTinker = function (coreId, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId,
            method: 'PUT',
            form: {
              access_token: accessToken,
              app: 'tinker'
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.flashCore = function (coreId, files, accessToken, callback) {
          files = Array.isArray(files) ? files : [files];
          var r = this.request({
              uri: this.baseUrl + '/v1/devices/' + coreId + '?access_token=' + accessToken,
              method: 'PUT',
              json: true
            }, callback);
          var form = r.form(), paramName = 'file';
          for (var i in files) {
            form.append(paramName, fs.createReadStream(path.join(process.cwd(), files[i])), { filename: path.basename(files[i]) });
            paramName = 'file' + i;
          }
        };
        SparkApi.prototype.compileCode = function (files, accessToken, callback) {
          files = Array.isArray(files) ? files : [files];
          var r = this.request({
              uri: this.baseUrl + '/v1/binaries?access_token=' + accessToken,
              method: 'POST',
              json: true
            }, callback);
          var form = r.form(), paramName = 'file';
          for (var i in files) {
            form.append(i, fs.createReadStream(path.join(process.cwd(), files[i])), { filename: path.basename(files[i]) });
            paramName = 'file' + i;
          }
        };
        SparkApi.prototype.downloadBinary = function (url, filename, accessToken, callback) {
          var response = this.request({
              uri: this.baseUrl + url + '?access_token=' + accessToken,
              method: 'GET'
            }, callback);
          return response;
        };
        SparkApi.prototype.sendPublicKey = function (coreId, buffer, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/provisioning/' + coreId,
            method: 'POST',
            form: {
              deviceID: coreId,
              publicKey: buffer.toString(),
              order: 'manual_' + new Date().getTime(),
              filename: 'cli',
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.callFunction = function (coreId, functionName, funcParam, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/' + coreId + '/' + functionName,
            method: 'POST',
            form: {
              args: funcParam,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.getEventStream = function (eventName, coreId, accessToken, callback) {
          var url;
          if (!coreId) {
            url = '/v1/events';
          } else if (coreId == 'mine') {
            url = '/v1/devices/events';
          } else {
            url = '/v1/devices/' + coreId + '/events';
          }
          if (eventName) {
            url += '/' + eventName;
          }
          var requestObj = this.request({
              uri: this.baseUrl + url + '?access_token=' + accessToken,
              method: 'GET'
            }, callback);
          return requestObj;
        };
        SparkApi.prototype.publishEvent = function (eventName, data, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/devices/events',
            method: 'POST',
            form: {
              name: eventName,
              data: data,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.createWebhook = function (eventName, url, coreId, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/webhooks',
            method: 'POST',
            form: {
              event: eventName,
              url: url,
              deviceid: coreId,
              access_token: accessToken
            },
            json: true
          }, callback);
        };
        SparkApi.prototype.deleteWebhook = function (hookId, accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/webhooks/' + hookId + '?access_token=' + accessToken,
            method: 'DELETE',
            json: true
          }, callback);
        };
        SparkApi.prototype.listWebhooks = function (accessToken, callback) {
          this.request({
            uri: this.baseUrl + '/v1/webhooks/?access_token=' + accessToken,
            method: 'GET',
            json: true
          }, callback);
        };
        module.exports = SparkApi;
      }.call(this, require('_process')));
    },
    {
      _process: 11,
      fs: 7,
      path: 10,
      request: 6
    }
  ],
  3: [
    function (require, module, exports) {
      var css = '.modal {\n  display: none;\n  width: 400px;\n  background: #fff;\n  padding: 15px 30px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -o-border-radius: 8px;\n  -ms-border-radius: 8px;\n  border-radius: 8px;\n  -webkit-box-shadow: 0 0 10px #000;\n  -moz-box-shadow: 0 0 10px #000;\n  -o-box-shadow: 0 0 10px #000;\n  -ms-box-shadow: 0 0 10px #000;\n  box-shadow: 0 0 10px #000;\n}\n\n.modal a.close-modal {\n  position: absolute;\n  top: -12.5px;\n  right: -12.5px;\n  display: block;\n  width: 30px;\n  height: 30px;\n  text-indent: -9999px;\n}\n\n.modal-spinner {\n  display: none;\n  width: 64px;\n  height: 64px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  margin-right: -32px;\n  margin-top: -32px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -o-border-radius: 8px;\n  -ms-border-radius: 8px;\n  border-radius: 8px;\n}\n\n.spark-login-button {\n  width: 150px;\n  border-radius: 0;\n  color: #fff;\n  font-weight: 700;\n  text-transform: uppercase;\n  padding: 12px;\n  background: #00aced;\n  border: 0;\n  font-size: 11px;\n}\n\n.spark-login-input {\n  border-radius: 0;\n  border: 1px solid #f7f7f7;\n  height: 40px;\n  width: 248px;\n  margin-bottom: 20px;\n  padding-left: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  font-family: \'Gotham SSm A\', \'Gotham SSm B\', proxima-nova, \'Helvetica Neue\', helvetica, arial, sans-serif;\n  font-size: 16px;\n  outline: none;\n}\n\n.spark-login-modal {\n  box-sizing: border-box;\n  display: block;\n  font-family: \'Helvetica Neue\', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  padding-bottom: 30px;\n  padding-left: 75px;\n  padding-right: 10px;\n  padding-top: 60px;\n  width: 400px;\n  z-index: 0;\n  background: rgba(0,0,0,0.8);\n  border-radius: 0;\n  border: 0;\n}\n\n.spark-login-error {\n  background-color: #f2dede;\n  background-image: linear-gradient(to bottom, #f2dede 0, #e7c3c3 100%);\n  background-repeat: repeat-x;\n  border: 1px solid transparent;\n  border-color: #dca7a7;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 0 rgba(255,255,255,0.25),0 1px 2px rgba(0,0,0,0.05);\n  color: #b94a48;\n  padding: 15px;\n  margin-bottom: 20px;\n  text-shadow: 0 1px 0 rgba(255,255,255,0.2);\n  -webkit-box-shadow: inset 0 1px 0 rgba(255,255,255,0.25),0 1px 2px rgba(0,0,0,0.05);\n  width: 216px;\n  display: none;\n}\n\n#spark-login-form {\n  display: none;\n}\n\n#spark-login-form-button {\n  width: 248px;\n  margin: 20px auto;\n  background: #fad612;\n  font-size: 14px;\n}\n';
      require('/spark/sparkjs/node_modules/cssify')(css);
      module.exports = css;
    },
    { '/spark/sparkjs/node_modules/cssify': 14 }
  ],
  4: [
    function (require, module, exports) {
      var $ = require('jquery');
      var jModal = require('../vendor/jquery.modal.min.js');
      var cssify = require('cssify');
      require('./spark-browser-style.css');
      window.sparkLogin = function (callback) {
        addLoginButton();
        addLoginForm();
        addBehaviour(callback);
      };
      window.spark = require('./spark.js');
      function addLoginButton() {
        var btn = document.createElement('button');
        btn.id = 'spark-login-button';
        btn.className = 'spark-login-button';
        btn.appendChild(document.createTextNode('Login to Spark'));
        btn.onclick = function () {
          $('#spark-login-form').modal();
        };
        if ($('#spark-login').length) {
          $('#spark-login').append(btn);
        } else {
          document.body.appendChild(btn);
        }
      }
      function addLoginForm() {
        var form = document.createElement('form');
        form.id = 'spark-login-form';
        form.className = 'spark-login-modal';
        form.appendChild(generateError());
        form.appendChild(generateInput('email', 'text'));
        form.appendChild(generateInput('password', 'password'));
        form.appendChild(generateButton());
        document.body.appendChild(form);
      }
      function addBehaviour(callback) {
        $('#spark-login-form-button').click(function (e) {
          e.preventDefault();
          var user = $('#spark-login-form-email').val();
          var pass = $('#spark-login-form-password').val();
          var loginPromise = window.spark.login({
              username: user,
              password: pass
            });
          loginPromise.then(function (data) {
            callback(data);
            $('#spark-login-form-email').val('');
            $('#spark-login-form-password').val('');
            displayErrorMessage('');
            $('#spark-login-form-error').hide();
            $.modal.close();
          }, function (error) {
            if (error.message === 'invalid_client') {
              displayErrorMessage('Invalid username or password.');
            } else if (error.cors === 'rejected') {
              displayErrorMessage('Request rejected.');
            } else {
              displayErrorMessage('Unknown error.');
              console.log(error);
            }
          });
        });
      }
      function generateError() {
        var div = document.createElement('div');
        div.id = 'spark-login-form-error';
        div.className = 'spark-login-error';
        return div;
      }
      function generateInput(name, type) {
        var input = document.createElement('input');
        input.id = 'spark-login-form-' + name;
        input.type = type;
        input.className = 'spark-login-input';
        input.placeholder = name;
        return input;
      }
      function generateButton() {
        var btn = document.createElement('button');
        btn.id = 'spark-login-form-button';
        btn.className = 'spark-login-button';
        btn.appendChild(document.createTextNode('log in'));
        return btn;
      }
      function displayErrorMessage(message) {
        $('#spark-login-form-error').show();
        $('#spark-login-form-error').text(message);
      }
    },
    {
      '../vendor/jquery.modal.min.js': 34,
      './spark-browser-style.css': 3,
      './spark.js': 5,
      cssify: 14,
      jquery: 15
    }
  ],
  5: [
    function (require, module, exports) {
      'use strict';
      var when = require('when'), pipeline = require('when/pipeline');
      var fs = require('fs'), util = require('util'), EventEmitter = require('events').EventEmitter, Device = require('./device'), SparkApi = require('./spark-api');
      var Spark = function () {
        this.clientId = 'Spark';
        this.clientSecret = 'Spark';
        this.baseUrl = 'https://api.spark.io';
        this.accessToken = null;
        this.plugins = [];
        this.devices = [];
        this.api = new SparkApi({
          clientId: this.clientId,
          clientSecret: this.clientSecret,
          baseUrl: this.baseUrl
        });
      };
      util.inherits(Spark, EventEmitter);
      Spark.prototype.resolveDefer = function (defer, err, data, callback) {
        if (defer) {
          if (err) {
            defer.reject(err);
          } else {
            defer.resolve(data);
          }
        }
      };
      Spark.prototype.createDefer = function (eventName, callback) {
        var defer = null;
        if (!callback && this.listeners(eventName).length === 0) {
          defer = when.defer();
        }
        return defer;
      };
      Spark.prototype.normalizeErr = function (err, data, callback) {
        if (!err && data.error) {
          err = new Error(data.error);
        }
        return err;
      };
      Spark.prototype.emitAndCallback = function (eventName, err, data, callback) {
        if (!!err) {
          data = null;
        }
        this.emit(eventName, err, data);
        if ('function' === typeof callback) {
          callback(err, data);
        }
      };
      Spark.prototype.defaultHandler = function (eventName, defer, userCb, sparkCb) {
        var handler = function (err, response, data) {
            err = this.normalizeErr(err, data);
            if (!err && typeof sparkCb === 'function') {
              sparkCb(data);
            }
            this.resolveDefer(defer, err, data);
            this.emitAndCallback(eventName, err, data, userCb);
          }.bind(this);
        return handler;
      };
      Spark.prototype.include = function (plugins) {
        plugins = Array.isArray(plugins) ? plugins : [plugins];
        for (var i in plugins) {
          if (this.plugins.indexOf(plugins[i]) == -1) {
            this.plugins.push(plugins[i]);
          }
        }
      };
      Spark.prototype.login = function (params, callback) {
        var defer = this.createDefer('login', callback);
        var handler = this.defaultHandler('login', defer, callback, function (data) {
            this.accessToken = data.access_token || data.accessToken;
          }.bind(this));
        if (params.accessToken) {
          handler(null, params, params);
        } else {
          this.api.login(params, handler);
        }
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.getDevice = function (deviceId, callback) {
        var defer = this.createDefer('getDevice', callback);
        var device = null;
        var handler = function (err, response, data) {
            err = this.normalizeErr(err, data);
            if (data && data.id == deviceId) {
              device = new Device(data, this);
            }
            this.resolveDefer(defer, err, device);
            this.emitAndCallback('getDevice', err, device, callback);
          }.bind(this);
        this.api.getDevice({
          deviceId: deviceId,
          accessToken: this.accessToken
        }, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.listDevices = function (callback) {
        var defer = this.createDefer('listDevices', callback);
        var handler = function (err, response, data) {
            err = this.normalizeErr(err, data);
            this.devices = [];
            if (Array.isArray(data)) {
              for (var i in data) {
                this.devices.push(new Device(data[i], this));
              }
            }
            this.resolveDefer(defer, err, this.devices);
            this.emitAndCallback('listDevices', err, this.devices, callback);
          }.bind(this);
        this.api.listDevices({ accessToken: this.accessToken }, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.ready = function () {
        return !!this.accessToken;
      };
      Spark.prototype.createUser = function (username, password, callback) {
        var defer = this.createDefer('createUser', callback), emailRegex = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        if (!username || username === '' || !emailRegex.test(username)) {
          var err = new Error('Username must be an email address.');
          this.emitAndCallback('createUser', err, null, callback);
          if (!!defer) {
            defer.reject(err);
          }
        } else {
          var handler = this.defaultHandler('createUser', defer, callback, function (data) {
              this.username = username;
              this.password = password;
            }.bind(this));
          this.api.createUser(username, password, handler);
        }
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.removeAccessToken = function (username, password, accessToken, callback) {
        var defer = this.createDefer('removeAccessToken', callback), handler = this.defaultHandler('removeAccessToken', defer, callback).bind(this);
        accessToken = accessToken || this.accessToken;
        this.api.removeAccessToken(username, password, accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.claimCore = function (coreId, callback) {
        var defer = this.createDefer('claimCore', callback), handler = this.defaultHandler('claimCore', defer, callback).bind(this);
        this.api.claimCore(coreId, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.removeCore = function (coreId, callback) {
        var defer = this.createDefer('removeCore', callback), handler = this.defaultHandler('removeCore', defer, callback).bind(this);
        this.api.removeCore(coreId, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.renameCore = function (coreId, name, callback) {
        var defer = this.createDefer('renameCore', callback), handler = this.defaultHandler('renameCore', defer, callback).bind(this);
        this.api.renameCore(coreId, name, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.getAttributes = function (coreId, callback) {
        var defer = this.createDefer('getAttributes', callback), handler = this.defaultHandler('getAttributes', defer, callback);
        this.api.getAttributes(coreId, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.getVariable = function (coreId, name, callback) {
        var defer = this.createDefer('getVariable', callback), handler = this.defaultHandler('getVariable', defer, callback).bind(this);
        this.api.getVariable(coreId, name, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.signalCore = function (coreId, beSignalling, callback) {
        var defer = this.createDefer('signalCore', callback), handler = this.defaultHandler('signalCore', defer, callback).bind(this);
        this.api.signalCore(coreId, beSignalling, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.flashTinker = function (coreId, callback) {
        var defer = this.createDefer('flashTinker', callback), handler = this.defaultHandler('flashTinker', defer, callback).bind(this);
        this.api.flashTinker(coreId, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.flashCore = function (coreId, files, callback) {
        var defer = this.createDefer('flashCore', callback), handler = this.defaultHandler('flashCore', defer, callback).bind(this);
        this.api.flashCore(coreId, files, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.compileCode = function (files, callback) {
        var defer = this.createDefer('compileCode', callback), handler = this.defaultHandler('compileCode', defer, callback);
        this.api.compileCode(files, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.downloadBinary = function (url, filename, callback) {
        var defer = this.createDefer('downloadBinary', callback), outFs = fs.createWriteStream(filename), handler = this.defaultHandler('downloadBinary', defer, callback).bind(this);
        this.api.downloadBinary(url, filename, this.accessToken, handler).pipe(outFs);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.sendPublicKey = function (coreId, buffer, callback) {
        var defer = this.createDefer('sendPublicKey', callback), handler = this.defaultHandler('sendPublicKey', defer, callback).bind(this);
        this.api.sendPublicKey(coreId, buffer, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.callFunction = function (coreId, functionName, funcParam, callback) {
        var defer = this.createDefer('callFunction', callback), handler = this.defaultHandler('callFunction', defer, callback).bind(this);
        this.api.callFunction(coreId, functionName, funcParam, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.lookupAttributesForAll = function (cores) {
        var defer = this.createDefer('lookupAttributesForAll', null);
        if (!cores || cores.length === 0) {
          this._attributeCache = null;
        } else {
          var promises = [];
          for (var i = 0; i < cores.length; i++) {
            var coreId = cores[i].id;
            if (cores[i].connected) {
              promises.push(this.getAttributes(coreId));
            } else {
              promises.push(when.resolve(cores[i]));
            }
          }
          when.all(promises).then(function (cores) {
            cores = cores.sort(function (a, b) {
              return (a.name || '').localeCompare(b.name);
            });
            this._attributeCache = cores;
            defer.resolve(cores);
          }.bind(this));
        }
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.getAttributesForAll = function () {
        if (this._attributeCache) {
          return when.resolve(this._attributeCache);
        }
        return pipeline([
          this.listDevices.bind(this),
          this.lookupAttributesForAll.bind(this)
        ]);
      };
      Spark.prototype.getEventStream = function (eventName, coreId, callback) {
        var defer = this.createDefer('getEventStream', callback), handler = this.defaultHandler('getEventStream', defer, callback).bind(this), requestObj = this.api.getEventStream(eventName, coreId, this.accessToken, handler);
        if (callback) {
          var processor = this._createStreamProcessor();
          processor.watch(requestObj, callback);
        }
        return requestObj;
      };
      Spark.prototype._createStreamProcessor = function () {
        var Processor = function () {
        };
        Processor.prototype = {
          chunks: [],
          appendToQueue: function (arr) {
            for (var i = 0; i < arr.length; i++) {
              var line = (arr[i] || '').trim();
              if (line == '') {
                continue;
              }
              this.chunks.push(line);
              if (line.indexOf('data:') == 0) {
                this.processItem(this.chunks);
                this.chunks = [];
              }
            }
          },
          processItem: function (arr) {
            var obj = {};
            for (var i = 0; i < arr.length; i++) {
              var line = arr[i];
              if (line.indexOf('event:') == 0) {
                obj.name = line.replace('event:', '').trim();
              } else if (line.indexOf('data:') == 0) {
                line = line.replace('data:', '');
                var name = obj.name;
                obj = JSON.parse(line);
                obj.name = name;
              }
            }
            if (this.onDataReady) {
              this.onDataReady(obj);
            }
          },
          onData: function (event) {
            var chunk = event.toString();
            this.appendToQueue(chunk.split('\n'));
          },
          watch: function (eventer, callback) {
            this.onDataReady = callback;
            eventer.on('data', this.onData.bind(this));
          }
        };
        return new Processor();
      };
      Spark.prototype.onEvent = function (eventName, callback) {
        this.getEventStream(eventName, false, callback);
      };
      Spark.prototype.publishEvent = function (eventName, data, callback) {
        var defer = this.createDefer('publishEvent', callback), handler = this.defaultHandler('publishEvent', defer, callback).bind(this);
        this.api.publishEvent(eventName, data, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.createWebhook = function (eventName, url, coreId, callback) {
        var defer = this.createDefer('createWebhook', callback), handler = this.defaultHandler('createWebhook', defer, callback).bind(this);
        this.api.createWebhook(eventName, url, coreId, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.deleteWebhook = function (hookId, callback) {
        var defer = this.createDefer('deleteWebhook', callback), handler = this.defaultHandler('deleteWebhook', defer, callback).bind(this);
        this.api.deleteWebhook(hookId, this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      Spark.prototype.listWebhooks = function (callback) {
        var defer = this.createDefer('listWebhooks', callback), handler = this.defaultHandler('listWebhooks', defer, callback).bind(this);
        this.api.listWebhooks(this.accessToken, handler);
        var promise = !!defer ? defer.promise : null;
        return promise;
      };
      module.exports = new Spark();
    },
    {
      './device': 1,
      './spark-api': 2,
      events: 8,
      fs: 7,
      util: 13,
      when: 33,
      'when/pipeline': 32
    }
  ],
  6: [
    function (require, module, exports) {
      var XHR = XMLHttpRequest;
      if (!XHR)
        throw new Error('missing XMLHttpRequest');
      request.log = {
        trace: noop,
        debug: noop,
        info: noop,
        warn: noop,
        error: noop
      };
      var DEFAULT_TIMEOUT = 3 * 60 * 1000;
      function request(options, callback) {
        if (typeof callback !== 'function')
          throw new Error('Bad callback given: ' + callback);
        if (!options)
          throw new Error('No options given');
        var options_onResponse = options.onResponse;
        if (typeof options === 'string')
          options = { uri: options };
        else
          options = JSON.parse(JSON.stringify(options));
        options.onResponse = options_onResponse;
        if (options.verbose)
          request.log = getLogger();
        if (options.url) {
          options.uri = options.url;
          delete options.url;
        }
        if (!options.uri && options.uri !== '')
          throw new Error('options.uri is a required argument');
        if (typeof options.uri != 'string')
          throw new Error('options.uri must be a string');
        var unsupported_options = [
            'proxy',
            '_redirectsFollowed',
            'maxRedirects',
            'followRedirect'
          ];
        for (var i = 0; i < unsupported_options.length; i++)
          if (options[unsupported_options[i]])
            throw new Error('options.' + unsupported_options[i] + ' is not supported');
        options.callback = callback;
        options.method = options.method || 'GET';
        options.headers = options.headers || {};
        options.body = options.body || null;
        options.timeout = options.timeout || request.DEFAULT_TIMEOUT;
        if (options.headers.host)
          throw new Error('Options.headers.host is not supported');
        if (options.json) {
          options.headers.accept = options.headers.accept || 'application/json';
          if (options.method !== 'GET')
            options.headers['content-type'] = 'application/json';
          if (typeof options.json !== 'boolean')
            options.body = JSON.stringify(options.json);
          else if (typeof options.body !== 'string')
            options.body = JSON.stringify(options.body);
        }
        var serialize = function (obj) {
          var str = [];
          for (var p in obj)
            if (obj.hasOwnProperty(p)) {
              str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
            }
          return str.join('&');
        };
        if (options.qs) {
          var qs = typeof options.qs == 'string' ? options.qs : serialize(options.qs);
          if (options.uri.indexOf('?') !== -1) {
            options.uri = options.uri + '&' + qs;
          } else {
            options.uri = options.uri + '?' + qs;
          }
        }
        var multipart = function (obj) {
          var result = {};
          result.boundry = '-------------------------------' + Math.floor(Math.random() * 1000000000);
          var lines = [];
          for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
              lines.push('--' + result.boundry + '\n' + 'Content-Disposition: form-data; name="' + p + '"' + '\n' + '\n' + obj[p] + '\n');
            }
          }
          lines.push('--' + result.boundry + '--');
          result.body = lines.join('');
          result.length = result.body.length;
          result.type = 'multipart/form-data; boundary=' + result.boundry;
          return result;
        };
        if (options.form) {
          if (typeof options.form == 'string')
            throw 'form name unsupported';
          if (options.method === 'POST') {
            var encoding = (options.encoding || 'application/x-www-form-urlencoded').toLowerCase();
            options.headers['content-type'] = encoding;
            switch (encoding) {
            case 'application/x-www-form-urlencoded':
              options.body = serialize(options.form).replace(/%20/g, '+');
              break;
            case 'multipart/form-data':
              var multi = multipart(options.form);
              options.body = multi.body;
              options.headers['content-type'] = multi.type;
              break;
            default:
              throw new Error('unsupported encoding:' + encoding);
            }
          }
        }
        options.onResponse = options.onResponse || noop;
        if (options.onResponse === true) {
          options.onResponse = callback;
          options.callback = noop;
        }
        if (!options.headers.authorization && options.auth)
          options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);
        return run_xhr(options);
      }
      var req_seq = 0;
      function run_xhr(options) {
        var xhr = new XHR(), timed_out = false, is_cors = is_crossDomain(options.uri), supports_cors = 'withCredentials' in xhr;
        req_seq += 1;
        xhr.seq_id = req_seq;
        xhr.id = req_seq + ': ' + options.method + ' ' + options.uri;
        xhr._id = xhr.id;
        if (is_cors && !supports_cors) {
          var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri);
          cors_err.cors = 'unsupported';
          return options.callback(cors_err, xhr);
        }
        xhr.timeoutTimer = setTimeout(too_late, options.timeout);
        function too_late() {
          timed_out = true;
          var er = new Error('ETIMEDOUT');
          er.code = 'ETIMEDOUT';
          er.duration = options.timeout;
          request.log.error('Timeout', {
            id: xhr._id,
            milliseconds: options.timeout
          });
          return options.callback(er, xhr);
        }
        var did = {
            response: false,
            loading: false,
            end: false
          };
        xhr.onreadystatechange = on_state_change;
        xhr.open(options.method, options.uri, true);
        if (is_cors)
          xhr.withCredentials = !!options.withCredentials;
        xhr.send(options.body);
        return xhr;
        function on_state_change(event) {
          if (timed_out)
            return request.log.debug('Ignoring timed out state change', {
              state: xhr.readyState,
              id: xhr.id
            });
          request.log.debug('State change', {
            state: xhr.readyState,
            id: xhr.id,
            timed_out: timed_out
          });
          if (xhr.readyState === XHR.OPENED) {
            request.log.debug('Request started', { id: xhr.id });
            for (var key in options.headers)
              xhr.setRequestHeader(key, options.headers[key]);
          } else if (xhr.readyState === XHR.HEADERS_RECEIVED)
            on_response();
          else if (xhr.readyState === XHR.LOADING) {
            on_response();
            on_loading();
          } else if (xhr.readyState === XHR.DONE) {
            on_response();
            on_loading();
            on_end();
          }
        }
        function on_response() {
          if (did.response)
            return;
          did.response = true;
          request.log.debug('Got response', {
            id: xhr.id,
            status: xhr.status
          });
          clearTimeout(xhr.timeoutTimer);
          xhr.statusCode = xhr.status;
          if (is_cors && xhr.statusCode == 0) {
            var cors_err = new Error('CORS request rejected: ' + options.uri);
            cors_err.cors = 'rejected';
            did.loading = true;
            did.end = true;
            return options.callback(cors_err, xhr);
          }
          options.onResponse(null, xhr);
        }
        function on_loading() {
          if (did.loading)
            return;
          did.loading = true;
          request.log.debug('Response body loading', { id: xhr.id });
        }
        function on_end() {
          if (did.end)
            return;
          did.end = true;
          request.log.debug('Request done', { id: xhr.id });
          xhr.body = xhr.responseText;
          if (options.json) {
            try {
              xhr.body = JSON.parse(xhr.responseText);
            } catch (er) {
              return options.callback(er, xhr);
            }
          }
          options.callback(null, xhr, xhr.body);
        }
      }
      request.withCredentials = false;
      request.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;
      request.defaults = function (options, requester) {
        var def = function (method) {
          var d = function (params, callback) {
            if (typeof params === 'string')
              params = { uri: params };
            else {
              params = JSON.parse(JSON.stringify(params));
            }
            for (var i in options) {
              if (params[i] === undefined)
                params[i] = options[i];
            }
            return method(params, callback);
          };
          return d;
        };
        var de = def(request);
        de.get = def(request.get);
        de.post = def(request.post);
        de.put = def(request.put);
        de.head = def(request.head);
        return de;
      };
      var shortcuts = [
          'get',
          'put',
          'post',
          'head'
        ];
      shortcuts.forEach(function (shortcut) {
        var method = shortcut.toUpperCase();
        var func = shortcut.toLowerCase();
        request[func] = function (opts) {
          if (typeof opts === 'string')
            opts = {
              method: method,
              uri: opts
            };
          else {
            opts = JSON.parse(JSON.stringify(opts));
            opts.method = method;
          }
          var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));
          return request.apply(this, args);
        };
      });
      request.couch = function (options, callback) {
        if (typeof options === 'string')
          options = { uri: options };
        options.json = true;
        if (options.body)
          options.json = options.body;
        delete options.body;
        callback = callback || noop;
        var xhr = request(options, couch_handler);
        return xhr;
        function couch_handler(er, resp, body) {
          if (er)
            return callback(er, resp, body);
          if ((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {
            er = new Error('CouchDB error: ' + (body.error.reason || body.error.error));
            for (var key in body)
              er[key] = body[key];
            return callback(er, resp, body);
          }
          return callback(er, resp, body);
        }
      };
      function noop() {
      }
      function getLogger() {
        var logger = {}, levels = [
            'trace',
            'debug',
            'info',
            'warn',
            'error'
          ], level, i;
        for (i = 0; i < levels.length; i++) {
          level = levels[i];
          logger[level] = noop;
          if (typeof console !== 'undefined' && console && console[level])
            logger[level] = formatted(console, level);
        }
        return logger;
      }
      function formatted(obj, method) {
        return formatted_logger;
        function formatted_logger(str, context) {
          if (typeof context === 'object')
            str += ' ' + JSON.stringify(context);
          return obj[method].call(obj, str);
        }
      }
      function is_crossDomain(url) {
        var rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/;
        var ajaxLocation;
        try {
          ajaxLocation = location.href;
        } catch (e) {
          ajaxLocation = document.createElement('a');
          ajaxLocation.href = '';
          ajaxLocation = ajaxLocation.href;
        }
        var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [], parts = rurl.exec(url.toLowerCase());
        var result = !!(parts && (parts[1] != ajaxLocParts[1] || parts[2] != ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? 80 : 443))));
        return result;
      }
      function b64_enc(data) {
        var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = '', tmp_arr = [];
        if (!data) {
          return data;
        }
        do {
          o1 = data.charCodeAt(i++);
          o2 = data.charCodeAt(i++);
          o3 = data.charCodeAt(i++);
          bits = o1 << 16 | o2 << 8 | o3;
          h1 = bits >> 18 & 63;
          h2 = bits >> 12 & 63;
          h3 = bits >> 6 & 63;
          h4 = bits & 63;
          tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
        } while (i < data.length);
        enc = tmp_arr.join('');
        switch (data.length % 3) {
        case 1:
          enc = enc.slice(0, -2) + '==';
          break;
        case 2:
          enc = enc.slice(0, -1) + '=';
          break;
        }
        return enc;
      }
      module.exports = request;
    },
    {}
  ],
  7: [
    function (require, module, exports) {
    },
    {}
  ],
  8: [
    function (require, module, exports) {
      function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
      }
      module.exports = EventEmitter;
      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._maxListeners = undefined;
      EventEmitter.defaultMaxListeners = 10;
      EventEmitter.prototype.setMaxListeners = function (n) {
        if (!isNumber(n) || n < 0 || isNaN(n))
          throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
      };
      EventEmitter.prototype.emit = function (type) {
        var er, handler, len, args, i, listeners;
        if (!this._events)
          this._events = {};
        if (type === 'error') {
          if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
            er = arguments[1];
            if (er instanceof Error) {
              throw er;
            }
            throw TypeError('Uncaught, unspecified "error" event.');
          }
        }
        handler = this._events[type];
        if (isUndefined(handler))
          return false;
        if (isFunction(handler)) {
          switch (arguments.length) {
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          default:
            len = arguments.length;
            args = new Array(len - 1);
            for (i = 1; i < len; i++)
              args[i - 1] = arguments[i];
            handler.apply(this, args);
          }
        } else if (isObject(handler)) {
          len = arguments.length;
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          listeners = handler.slice();
          len = listeners.length;
          for (i = 0; i < len; i++)
            listeners[i].apply(this, args);
        }
        return true;
      };
      EventEmitter.prototype.addListener = function (type, listener) {
        var m;
        if (!isFunction(listener))
          throw TypeError('listener must be a function');
        if (!this._events)
          this._events = {};
        if (this._events.newListener)
          this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
        if (!this._events[type])
          this._events[type] = listener;
        else if (isObject(this._events[type]))
          this._events[type].push(listener);
        else
          this._events[type] = [
            this._events[type],
            listener
          ];
        if (isObject(this._events[type]) && !this._events[type].warned) {
          var m;
          if (!isUndefined(this._maxListeners)) {
            m = this._maxListeners;
          } else {
            m = EventEmitter.defaultMaxListeners;
          }
          if (m && m > 0 && this._events[type].length > m) {
            this._events[type].warned = true;
            console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
            if (typeof console.trace === 'function') {
              console.trace();
            }
          }
        }
        return this;
      };
      EventEmitter.prototype.on = EventEmitter.prototype.addListener;
      EventEmitter.prototype.once = function (type, listener) {
        if (!isFunction(listener))
          throw TypeError('listener must be a function');
        var fired = false;
        function g() {
          this.removeListener(type, g);
          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }
        g.listener = listener;
        this.on(type, g);
        return this;
      };
      EventEmitter.prototype.removeListener = function (type, listener) {
        var list, position, length, i;
        if (!isFunction(listener))
          throw TypeError('listener must be a function');
        if (!this._events || !this._events[type])
          return this;
        list = this._events[type];
        length = list.length;
        position = -1;
        if (list === listener || isFunction(list.listener) && list.listener === listener) {
          delete this._events[type];
          if (this._events.removeListener)
            this.emit('removeListener', type, listener);
        } else if (isObject(list)) {
          for (i = length; i-- > 0;) {
            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
              position = i;
              break;
            }
          }
          if (position < 0)
            return this;
          if (list.length === 1) {
            list.length = 0;
            delete this._events[type];
          } else {
            list.splice(position, 1);
          }
          if (this._events.removeListener)
            this.emit('removeListener', type, listener);
        }
        return this;
      };
      EventEmitter.prototype.removeAllListeners = function (type) {
        var key, listeners;
        if (!this._events)
          return this;
        if (!this._events.removeListener) {
          if (arguments.length === 0)
            this._events = {};
          else if (this._events[type])
            delete this._events[type];
          return this;
        }
        if (arguments.length === 0) {
          for (key in this._events) {
            if (key === 'removeListener')
              continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = {};
          return this;
        }
        listeners = this._events[type];
        if (isFunction(listeners)) {
          this.removeListener(type, listeners);
        } else {
          while (listeners.length)
            this.removeListener(type, listeners[listeners.length - 1]);
        }
        delete this._events[type];
        return this;
      };
      EventEmitter.prototype.listeners = function (type) {
        var ret;
        if (!this._events || !this._events[type])
          ret = [];
        else if (isFunction(this._events[type]))
          ret = [this._events[type]];
        else
          ret = this._events[type].slice();
        return ret;
      };
      EventEmitter.listenerCount = function (emitter, type) {
        var ret;
        if (!emitter._events || !emitter._events[type])
          ret = 0;
        else if (isFunction(emitter._events[type]))
          ret = 1;
        else
          ret = emitter._events[type].length;
        return ret;
      };
      function isFunction(arg) {
        return typeof arg === 'function';
      }
      function isNumber(arg) {
        return typeof arg === 'number';
      }
      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }
      function isUndefined(arg) {
        return arg === void 0;
      }
    },
    {}
  ],
  9: [
    function (require, module, exports) {
      if (typeof Object.create === 'function') {
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
    },
    {}
  ],
  10: [
    function (require, module, exports) {
      (function (process) {
        function normalizeArray(parts, allowAboveRoot) {
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }
          return parts;
        }
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        var splitPath = function (filename) {
          return splitPathRe.exec(filename).slice(1);
        };
        exports.resolve = function () {
          var resolvedPath = '', resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : process.cwd();
            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          }
          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
            return !!p;
          }), !resolvedAbsolute).join('/');
          return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
        };
        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === '/';
          path = normalizeArray(filter(path.split('/'), function (p) {
            return !!p;
          }), !isAbsolute).join('/');
          if (!path && !isAbsolute) {
            path = '.';
          }
          if (path && trailingSlash) {
            path += '/';
          }
          return (isAbsolute ? '/' : '') + path;
        };
        exports.isAbsolute = function (path) {
          return path.charAt(0) === '/';
        };
        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings');
            }
            return p;
          }).join('/'));
        };
        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== '')
                break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== '')
                break;
            }
            if (start > end)
              return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        };
        exports.sep = '/';
        exports.delimiter = ':';
        exports.dirname = function (path) {
          var result = splitPath(path), root = result[0], dir = result[1];
          if (!root && !dir) {
            return '.';
          }
          if (dir) {
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        };
        exports.basename = function (path, ext) {
          var f = splitPath(path)[2];
          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }
          return f;
        };
        exports.extname = function (path) {
          return splitPath(path)[3];
        };
        function filter(xs, f) {
          if (xs.filter)
            return xs.filter(f);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs))
              res.push(xs[i]);
          }
          return res;
        }
        var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
            return str.substr(start, len);
          } : function (str, start, len) {
            if (start < 0)
              start = str.length + start;
            return str.substr(start, len);
          };
      }.call(this, require('_process')));
    },
    { _process: 11 }
  ],
  11: [
    function (require, module, exports) {
      var process = module.exports = {};
      process.nextTick = function () {
        var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
        var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;
        if (canSetImmediate) {
          return function (f) {
            return window.setImmediate(f);
          };
        }
        if (canPost) {
          var queue = [];
          window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
              ev.stopPropagation();
              if (queue.length > 0) {
                var fn = queue.shift();
                fn();
              }
            }
          }, true);
          return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
          };
        }
        return function nextTick(fn) {
          setTimeout(fn, 0);
        };
      }();
      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };
      process.cwd = function () {
        return '/';
      };
      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };
    },
    {}
  ],
  12: [
    function (require, module, exports) {
      module.exports = function isBuffer(arg) {
        return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
      };
    },
    {}
  ],
  13: [
    function (require, module, exports) {
      (function (process, global) {
        var formatRegExp = /%[sdj%]/g;
        exports.format = function (f) {
          if (!isString(f)) {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
              objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
          }
          var i = 1;
          var args = arguments;
          var len = args.length;
          var str = String(f).replace(formatRegExp, function (x) {
              if (x === '%%')
                return '%';
              if (i >= len)
                return x;
              switch (x) {
              case '%s':
                return String(args[i++]);
              case '%d':
                return Number(args[i++]);
              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }
              default:
                return x;
              }
            });
          for (var x = args[i]; i < len; x = args[++i]) {
            if (isNull(x) || !isObject(x)) {
              str += ' ' + x;
            } else {
              str += ' ' + inspect(x);
            }
          }
          return str;
        };
        exports.deprecate = function (fn, msg) {
          if (isUndefined(global.process)) {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }
          if (process.noDeprecation === true) {
            return fn;
          }
          var warned = false;
          function deprecated() {
            if (!warned) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              } else if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }
              warned = true;
            }
            return fn.apply(this, arguments);
          }
          return deprecated;
        };
        var debugs = {};
        var debugEnviron;
        exports.debuglog = function (set) {
          if (isUndefined(debugEnviron))
            debugEnviron = process.env.NODE_DEBUG || '';
          set = set.toUpperCase();
          if (!debugs[set]) {
            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
              var pid = process.pid;
              debugs[set] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
              };
            } else {
              debugs[set] = function () {
              };
            }
          }
          return debugs[set];
        };
        function inspect(obj, opts) {
          var ctx = {
              seen: [],
              stylize: stylizeNoColor
            };
          if (arguments.length >= 3)
            ctx.depth = arguments[2];
          if (arguments.length >= 4)
            ctx.colors = arguments[3];
          if (isBoolean(opts)) {
            ctx.showHidden = opts;
          } else if (opts) {
            exports._extend(ctx, opts);
          }
          if (isUndefined(ctx.showHidden))
            ctx.showHidden = false;
          if (isUndefined(ctx.depth))
            ctx.depth = 2;
          if (isUndefined(ctx.colors))
            ctx.colors = false;
          if (isUndefined(ctx.customInspect))
            ctx.customInspect = true;
          if (ctx.colors)
            ctx.stylize = stylizeWithColor;
          return formatValue(ctx, obj, ctx.depth);
        }
        exports.inspect = inspect;
        inspect.colors = {
          bold: [
            1,
            22
          ],
          italic: [
            3,
            23
          ],
          underline: [
            4,
            24
          ],
          inverse: [
            7,
            27
          ],
          white: [
            37,
            39
          ],
          grey: [
            90,
            39
          ],
          black: [
            30,
            39
          ],
          blue: [
            34,
            39
          ],
          cyan: [
            36,
            39
          ],
          green: [
            32,
            39
          ],
          magenta: [
            35,
            39
          ],
          red: [
            31,
            39
          ],
          yellow: [
            33,
            39
          ]
        };
        inspect.styles = {
          special: 'cyan',
          number: 'yellow',
          'boolean': 'yellow',
          undefined: 'grey',
          'null': 'bold',
          string: 'green',
          date: 'magenta',
          regexp: 'red'
        };
        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];
          if (style) {
            return '\x1b[' + inspect.colors[style][0] + 'm' + str + '\x1b[' + inspect.colors[style][1] + 'm';
          } else {
            return str;
          }
        }
        function stylizeNoColor(str, styleType) {
          return str;
        }
        function arrayToHash(array) {
          var hash = {};
          array.forEach(function (val, idx) {
            hash[val] = true;
          });
          return hash;
        }
        function formatValue(ctx, value, recurseTimes) {
          if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);
            if (!isString(ret)) {
              ret = formatValue(ctx, ret, recurseTimes);
            }
            return ret;
          }
          var primitive = formatPrimitive(ctx, value);
          if (primitive) {
            return primitive;
          }
          var keys = Object.keys(value);
          var visibleKeys = arrayToHash(keys);
          if (ctx.showHidden) {
            keys = Object.getOwnPropertyNames(value);
          }
          if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
          }
          if (keys.length === 0) {
            if (isFunction(value)) {
              var name = value.name ? ': ' + value.name : '';
              return ctx.stylize('[Function' + name + ']', 'special');
            }
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }
            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }
            if (isError(value)) {
              return formatError(value);
            }
          }
          var base = '', array = false, braces = [
              '{',
              '}'
            ];
          if (isArray(value)) {
            array = true;
            braces = [
              '[',
              ']'
            ];
          }
          if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
          }
          if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
          }
          if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
          }
          if (isError(value)) {
            base = ' ' + formatError(value);
          }
          if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
          }
          if (recurseTimes < 0) {
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
              return ctx.stylize('[Object]', 'special');
            }
          }
          ctx.seen.push(value);
          var output;
          if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
          } else {
            output = keys.map(function (key) {
              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
          }
          ctx.seen.pop();
          return reduceToSingleString(output, base, braces);
        }
        function formatPrimitive(ctx, value) {
          if (isUndefined(value))
            return ctx.stylize('undefined', 'undefined');
          if (isString(value)) {
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, '\\\'').replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
          }
          if (isNumber(value))
            return ctx.stylize('' + value, 'number');
          if (isBoolean(value))
            return ctx.stylize('' + value, 'boolean');
          if (isNull(value))
            return ctx.stylize('null', 'null');
        }
        function formatError(value) {
          return '[' + Error.prototype.toString.call(value) + ']';
        }
        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
          var output = [];
          for (var i = 0, l = value.length; i < l; ++i) {
            if (hasOwnProperty(value, String(i))) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
              output.push('');
            }
          }
          keys.forEach(function (key) {
            if (!key.match(/^\d+$/)) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
          });
          return output;
        }
        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
          var name, str, desc;
          desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
          if (desc.get) {
            if (desc.set) {
              str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
              str = ctx.stylize('[Getter]', 'special');
            }
          } else {
            if (desc.set) {
              str = ctx.stylize('[Setter]', 'special');
            }
          }
          if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
          }
          if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
              if (isNull(recurseTimes)) {
                str = formatValue(ctx, desc.value, null);
              } else {
                str = formatValue(ctx, desc.value, recurseTimes - 1);
              }
              if (str.indexOf('\n') > -1) {
                if (array) {
                  str = str.split('\n').map(function (line) {
                    return '  ' + line;
                  }).join('\n').substr(2);
                } else {
                  str = '\n' + str.split('\n').map(function (line) {
                    return '   ' + line;
                  }).join('\n');
                }
              }
            } else {
              str = ctx.stylize('[Circular]', 'special');
            }
          }
          if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
              return str;
            }
            name = JSON.stringify('' + key);
            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, 'name');
            } else {
              name = name.replace(/'/g, '\\\'').replace(/\\"/g, '"').replace(/(^"|"$)/g, '\'');
              name = ctx.stylize(name, 'string');
            }
          }
          return name + ': ' + str;
        }
        function reduceToSingleString(output, base, braces) {
          var numLinesEst = 0;
          var length = output.reduce(function (prev, cur) {
              numLinesEst++;
              if (cur.indexOf('\n') >= 0)
                numLinesEst++;
              return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
            }, 0);
          if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
          }
          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
        }
        function isArray(ar) {
          return Array.isArray(ar);
        }
        exports.isArray = isArray;
        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }
        exports.isBoolean = isBoolean;
        function isNull(arg) {
          return arg === null;
        }
        exports.isNull = isNull;
        function isNullOrUndefined(arg) {
          return arg == null;
        }
        exports.isNullOrUndefined = isNullOrUndefined;
        function isNumber(arg) {
          return typeof arg === 'number';
        }
        exports.isNumber = isNumber;
        function isString(arg) {
          return typeof arg === 'string';
        }
        exports.isString = isString;
        function isSymbol(arg) {
          return typeof arg === 'symbol';
        }
        exports.isSymbol = isSymbol;
        function isUndefined(arg) {
          return arg === void 0;
        }
        exports.isUndefined = isUndefined;
        function isRegExp(re) {
          return isObject(re) && objectToString(re) === '[object RegExp]';
        }
        exports.isRegExp = isRegExp;
        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }
        exports.isObject = isObject;
        function isDate(d) {
          return isObject(d) && objectToString(d) === '[object Date]';
        }
        exports.isDate = isDate;
        function isError(e) {
          return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
        }
        exports.isError = isError;
        function isFunction(arg) {
          return typeof arg === 'function';
        }
        exports.isFunction = isFunction;
        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
        }
        exports.isPrimitive = isPrimitive;
        exports.isBuffer = require('./support/isBuffer');
        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }
        function pad(n) {
          return n < 10 ? '0' + n.toString(10) : n.toString(10);
        }
        var months = [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
          ];
        function timestamp() {
          var d = new Date();
          var time = [
              pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())
            ].join(':');
          return [
            d.getDate(),
            months[d.getMonth()],
            time
          ].join(' ');
        }
        exports.log = function () {
          console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
        };
        exports.inherits = require('inherits');
        exports._extend = function (origin, add) {
          if (!add || !isObject(add))
            return origin;
          var keys = Object.keys(add);
          var i = keys.length;
          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }
          return origin;
        };
        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
      }.call(this, require('_process'), typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
    },
    {
      './support/isBuffer': 12,
      _process: 11,
      inherits: 9
    }
  ],
  14: [
    function (require, module, exports) {
      module.exports = function (css, customDocument) {
        var doc = customDocument || document;
        if (doc.createStyleSheet) {
          var sheet = doc.createStyleSheet();
          sheet.cssText = css;
          return sheet.ownerNode;
        } else {
          var head = doc.getElementsByTagName('head')[0], style = doc.createElement('style');
          style.type = 'text/css';
          if (style.styleSheet) {
            style.styleSheet.cssText = css;
          } else {
            style.appendChild(doc.createTextNode(css));
          }
          head.appendChild(style);
          return style;
        }
      };
      module.exports.byUrl = function (url) {
        if (document.createStyleSheet) {
          return document.createStyleSheet(url).ownerNode;
        } else {
          var head = document.getElementsByTagName('head')[0], link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = url;
          head.appendChild(link);
          return link;
        }
      };
    },
    {}
  ],
  15: [
    function (require, module, exports) {
      (function (global, factory) {
        if (typeof module === 'object' && typeof module.exports === 'object') {
          module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
              throw new Error('jQuery requires a window with a document');
            }
            return factory(w);
          };
        } else {
          factory(global);
        }
      }(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
        var arr = [];
        var slice = arr.slice;
        var concat = arr.concat;
        var push = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var support = {};
        var document = window.document, version = '2.1.1', jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context);
          }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
            return letter.toUpperCase();
          };
        jQuery.fn = jQuery.prototype = {
          jquery: version,
          constructor: jQuery,
          selector: '',
          length: 0,
          toArray: function () {
            return slice.call(this);
          },
          get: function (num) {
            return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
          },
          pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
          },
          each: function (callback, args) {
            return jQuery.each(this, callback, args);
          },
          map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function () {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function () {
            return this.eq(0);
          },
          last: function () {
            return this.eq(-1);
          },
          eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function () {
            return this.prevObject || this.constructor(null);
          },
          push: push,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery.extend = jQuery.fn.extend = function () {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== 'object' && !jQuery.isFunction(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
              for (name in options) {
                src = target[name];
                copy = options[name];
                if (target === copy) {
                  continue;
                }
                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && jQuery.isArray(src) ? src : [];
                  } else {
                    clone = src && jQuery.isPlainObject(src) ? src : {};
                  }
                  target[name] = jQuery.extend(deep, clone, copy);
                } else if (copy !== undefined) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        jQuery.extend({
          expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
          isReady: true,
          error: function (msg) {
            throw new Error(msg);
          },
          noop: function () {
          },
          isFunction: function (obj) {
            return jQuery.type(obj) === 'function';
          },
          isArray: Array.isArray,
          isWindow: function (obj) {
            return obj != null && obj === obj.window;
          },
          isNumeric: function (obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;
          },
          isPlainObject: function (obj) {
            if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
              return false;
            }
            if (obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
              return false;
            }
            return true;
          },
          isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          type: function (obj) {
            if (obj == null) {
              return obj + '';
            }
            return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
          },
          globalEval: function (code) {
            var script, indirect = eval;
            code = jQuery.trim(code);
            if (code) {
              if (code.indexOf('use strict') === 1) {
                script = document.createElement('script');
                script.text = code;
                document.head.appendChild(script).parentNode.removeChild(script);
              } else {
                indirect(code);
              }
            }
          },
          camelCase: function (string) {
            return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
          },
          nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
          },
          each: function (obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
              if (isArray) {
                for (; i < length; i++) {
                  value = callback.apply(obj[i], args);
                  if (value === false) {
                    break;
                  }
                }
              } else {
                for (i in obj) {
                  value = callback.apply(obj[i], args);
                  if (value === false) {
                    break;
                  }
                }
              }
            } else {
              if (isArray) {
                for (; i < length; i++) {
                  value = callback.call(obj[i], i, obj[i]);
                  if (value === false) {
                    break;
                  }
                }
              } else {
                for (i in obj) {
                  value = callback.call(obj[i], i, obj[i]);
                  if (value === false) {
                    break;
                  }
                }
              }
            }
            return obj;
          },
          trim: function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
          },
          makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
              if (isArraylike(Object(arr))) {
                jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
              } else {
                push.call(ret, arr);
              }
            }
            return ret;
          },
          inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
          },
          merge: function (first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function (elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          map: function (elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return concat.apply([], ret);
          },
          guid: 1,
          proxy: function (fn, context) {
            var tmp, args, proxy;
            if (typeof context === 'string') {
              tmp = fn[context];
              context = fn;
              fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
              return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function () {
              return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
          },
          now: Date.now,
          support: support
        });
        jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
          class2type['[object ' + name + ']'] = name.toLowerCase();
        });
        function isArraylike(obj) {
          var length = obj.length, type = jQuery.type(obj);
          if (type === 'function' || jQuery.isWindow(obj)) {
            return false;
          }
          if (obj.nodeType === 1 && length) {
            return true;
          }
          return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
        }
        var Sizzle = function (window) {
            var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
                if (a === b) {
                  hasDuplicate = true;
                }
                return 0;
              }, strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function (elem) {
                var i = 0, len = this.length;
                for (; i < len; i++) {
                  if (this[i] === elem) {
                    return i;
                  }
                }
                return -1;
              }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', identifier = characterEncoding.replace('w', 'w#'), attributes = '\\[' + whitespace + '*(' + characterEncoding + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                ID: new RegExp('^#(' + characterEncoding + ')'),
                CLASS: new RegExp('^\\.(' + characterEncoding + ')'),
                TAG: new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
                ATTR: new RegExp('^' + attributes),
                PSEUDO: new RegExp('^' + pseudos),
                CHILD: new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                bool: new RegExp('^(?:' + booleans + ')$', 'i'),
                needsContext: new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
              }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
                var high = '0x' + escaped - 65536;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
              };
            try {
              push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
              arr[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
              push = {
                apply: arr.length ? function (target, els) {
                  push_native.apply(target, slice.call(els));
                } : function (target, els) {
                  var j = target.length, i = 0;
                  while (target[j++] = els[i++]) {
                  }
                  target.length = j - 1;
                }
              };
            }
            function Sizzle(selector, context, results, seed) {
              var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
              if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
              }
              context = context || document;
              results = results || [];
              if (!selector || typeof selector !== 'string') {
                return results;
              }
              if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
              }
              if (documentIsHTML && !seed) {
                if (match = rquickExpr.exec(selector)) {
                  if (m = match[1]) {
                    if (nodeType === 9) {
                      elem = context.getElementById(m);
                      if (elem && elem.parentNode) {
                        if (elem.id === m) {
                          results.push(elem);
                          return results;
                        }
                      } else {
                        return results;
                      }
                    } else {
                      if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    }
                  } else if (match[2]) {
                    push.apply(results, context.getElementsByTagName(selector));
                    return results;
                  } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                    push.apply(results, context.getElementsByClassName(m));
                    return results;
                  }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                  nid = old = expando;
                  newContext = context;
                  newSelector = nodeType === 9 && selector;
                  if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
                    groups = tokenize(selector);
                    if (old = context.getAttribute('id')) {
                      nid = old.replace(rescape, '\\$&');
                    } else {
                      context.setAttribute('id', nid);
                    }
                    nid = '[id=\'' + nid + '\'] ';
                    i = groups.length;
                    while (i--) {
                      groups[i] = nid + toSelector(groups[i]);
                    }
                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                    newSelector = groups.join(',');
                  }
                  if (newSelector) {
                    try {
                      push.apply(results, newContext.querySelectorAll(newSelector));
                      return results;
                    } catch (qsaError) {
                    } finally {
                      if (!old) {
                        context.removeAttribute('id');
                      }
                    }
                  }
                }
              }
              return select(selector.replace(rtrim, '$1'), context, results, seed);
            }
            function createCache() {
              var keys = [];
              function cache(key, value) {
                if (keys.push(key + ' ') > Expr.cacheLength) {
                  delete cache[keys.shift()];
                }
                return cache[key + ' '] = value;
              }
              return cache;
            }
            function markFunction(fn) {
              fn[expando] = true;
              return fn;
            }
            function assert(fn) {
              var div = document.createElement('div');
              try {
                return !!fn(div);
              } catch (e) {
                return false;
              } finally {
                if (div.parentNode) {
                  div.parentNode.removeChild(div);
                }
                div = null;
              }
            }
            function addHandle(attrs, handler) {
              var arr = attrs.split('|'), i = attrs.length;
              while (i--) {
                Expr.attrHandle[arr[i]] = handler;
              }
            }
            function siblingCheck(a, b) {
              var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
              if (diff) {
                return diff;
              }
              if (cur) {
                while (cur = cur.nextSibling) {
                  if (cur === b) {
                    return -1;
                  }
                }
              }
              return a ? 1 : -1;
            }
            function createInputPseudo(type) {
              return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === type;
              };
            }
            function createButtonPseudo(type) {
              return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === 'input' || name === 'button') && elem.type === type;
              };
            }
            function createPositionalPseudo(fn) {
              return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                  var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                  while (i--) {
                    if (seed[j = matchIndexes[i]]) {
                      seed[j] = !(matches[j] = seed[j]);
                    }
                  }
                });
              });
            }
            function testContext(context) {
              return context && typeof context.getElementsByTagName !== strundefined && context;
            }
            support = Sizzle.support = {};
            isXML = Sizzle.isXML = function (elem) {
              var documentElement = elem && (elem.ownerDocument || elem).documentElement;
              return documentElement ? documentElement.nodeName !== 'HTML' : false;
            };
            setDocument = Sizzle.setDocument = function (node) {
              var hasCompare, doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
              if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
              }
              document = doc;
              docElem = doc.documentElement;
              documentIsHTML = !isXML(doc);
              if (parent && parent !== parent.top) {
                if (parent.addEventListener) {
                  parent.addEventListener('unload', function () {
                    setDocument();
                  }, false);
                } else if (parent.attachEvent) {
                  parent.attachEvent('onunload', function () {
                    setDocument();
                  });
                }
              }
              support.attributes = assert(function (div) {
                div.className = 'i';
                return !div.getAttribute('className');
              });
              support.getElementsByTagName = assert(function (div) {
                div.appendChild(doc.createComment(''));
                return !div.getElementsByTagName('*').length;
              });
              support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function (div) {
                div.innerHTML = '<div class=\'a\'></div><div class=\'a i\'></div>';
                div.firstChild.className = 'i';
                return div.getElementsByClassName('i').length === 2;
              });
              support.getById = assert(function (div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
              });
              if (support.getById) {
                Expr.find['ID'] = function (id, context) {
                  if (typeof context.getElementById !== strundefined && documentIsHTML) {
                    var m = context.getElementById(id);
                    return m && m.parentNode ? [m] : [];
                  }
                };
                Expr.filter['ID'] = function (id) {
                  var attrId = id.replace(runescape, funescape);
                  return function (elem) {
                    return elem.getAttribute('id') === attrId;
                  };
                };
              } else {
                delete Expr.find['ID'];
                Expr.filter['ID'] = function (id) {
                  var attrId = id.replace(runescape, funescape);
                  return function (elem) {
                    var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode('id');
                    return node && node.value === attrId;
                  };
                };
              }
              Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) {
                  return context.getElementsByTagName(tag);
                }
              } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === '*') {
                  while (elem = results[i++]) {
                    if (elem.nodeType === 1) {
                      tmp.push(elem);
                    }
                  }
                  return tmp;
                }
                return results;
              };
              Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                  return context.getElementsByClassName(className);
                }
              };
              rbuggyMatches = [];
              rbuggyQSA = [];
              if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function (div) {
                  div.innerHTML = '<select msallowclip=\'\'><option selected=\'\'></option></select>';
                  if (div.querySelectorAll('[msallowclip^=\'\']').length) {
                    rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                  }
                  if (!div.querySelectorAll('[selected]').length) {
                    rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                  }
                  if (!div.querySelectorAll(':checked').length) {
                    rbuggyQSA.push(':checked');
                  }
                });
                assert(function (div) {
                  var input = doc.createElement('input');
                  input.setAttribute('type', 'hidden');
                  div.appendChild(input).setAttribute('name', 'D');
                  if (div.querySelectorAll('[name=d]').length) {
                    rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                  }
                  if (!div.querySelectorAll(':enabled').length) {
                    rbuggyQSA.push(':enabled', ':disabled');
                  }
                  div.querySelectorAll('*,:x');
                  rbuggyQSA.push(',.*:');
                });
              }
              if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function (div) {
                  support.disconnectedMatch = matches.call(div, 'div');
                  matches.call(div, '[s!=\'\']:x');
                  rbuggyMatches.push('!=', pseudos);
                });
              }
              rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
              rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
              hasCompare = rnative.test(docElem.compareDocumentPosition);
              contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
              } : function (a, b) {
                if (b) {
                  while (b = b.parentNode) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };
              sortOrder = hasCompare ? function (a, b) {
                if (a === b) {
                  hasDuplicate = true;
                  return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                  return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                  if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                    return -1;
                  }
                  if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                    return 1;
                  }
                  return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
              } : function (a, b) {
                if (a === b) {
                  hasDuplicate = true;
                  return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (!aup || !bup) {
                  return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                } else if (aup === bup) {
                  return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                  ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                  bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                  i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
              };
              return doc;
            };
            Sizzle.matches = function (expr, elements) {
              return Sizzle(expr, null, null, elements);
            };
            Sizzle.matchesSelector = function (elem, expr) {
              if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
              }
              expr = expr.replace(rattributeQuotes, '=\'$1\']');
              if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                  var ret = matches.call(elem, expr);
                  if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                    return ret;
                  }
                } catch (e) {
                }
              }
              return Sizzle(expr, document, null, [elem]).length > 0;
            };
            Sizzle.contains = function (context, elem) {
              if ((context.ownerDocument || context) !== document) {
                setDocument(context);
              }
              return contains(context, elem);
            };
            Sizzle.attr = function (elem, name) {
              if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
              }
              var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
              return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            };
            Sizzle.error = function (msg) {
              throw new Error('Syntax error, unrecognized expression: ' + msg);
            };
            Sizzle.uniqueSort = function (results) {
              var elem, duplicates = [], j = 0, i = 0;
              hasDuplicate = !support.detectDuplicates;
              sortInput = !support.sortStable && results.slice(0);
              results.sort(sortOrder);
              if (hasDuplicate) {
                while (elem = results[i++]) {
                  if (elem === results[i]) {
                    j = duplicates.push(i);
                  }
                }
                while (j--) {
                  results.splice(duplicates[j], 1);
                }
              }
              sortInput = null;
              return results;
            };
            getText = Sizzle.getText = function (elem) {
              var node, ret = '', i = 0, nodeType = elem.nodeType;
              if (!nodeType) {
                while (node = elem[i++]) {
                  ret += getText(node);
                }
              } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === 'string') {
                  return elem.textContent;
                } else {
                  for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                    ret += getText(elem);
                  }
                }
              } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
              }
              return ret;
            };
            Expr = Sizzle.selectors = {
              cacheLength: 50,
              createPseudo: markFunction,
              match: matchExpr,
              attrHandle: {},
              find: {},
              relative: {
                '>': {
                  dir: 'parentNode',
                  first: true
                },
                ' ': { dir: 'parentNode' },
                '+': {
                  dir: 'previousSibling',
                  first: true
                },
                '~': { dir: 'previousSibling' }
              },
              preFilter: {
                ATTR: function (match) {
                  match[1] = match[1].replace(runescape, funescape);
                  match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                  if (match[2] === '~=') {
                    match[3] = ' ' + match[3] + ' ';
                  }
                  return match.slice(0, 4);
                },
                CHILD: function (match) {
                  match[1] = match[1].toLowerCase();
                  if (match[1].slice(0, 3) === 'nth') {
                    if (!match[3]) {
                      Sizzle.error(match[0]);
                    }
                    match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                    match[5] = +(match[7] + match[8] || match[3] === 'odd');
                  } else if (match[3]) {
                    Sizzle.error(match[0]);
                  }
                  return match;
                },
                PSEUDO: function (match) {
                  var excess, unquoted = !match[6] && match[2];
                  if (matchExpr['CHILD'].test(match[0])) {
                    return null;
                  }
                  if (match[3]) {
                    match[2] = match[4] || match[5] || '';
                  } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                    match[0] = match[0].slice(0, excess);
                    match[2] = unquoted.slice(0, excess);
                  }
                  return match.slice(0, 3);
                }
              },
              filter: {
                TAG: function (nodeNameSelector) {
                  var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                  return nodeNameSelector === '*' ? function () {
                    return true;
                  } : function (elem) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                  };
                },
                CLASS: function (className) {
                  var pattern = classCache[className + ' '];
                  return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                    return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');
                  });
                },
                ATTR: function (name, operator, check) {
                  return function (elem) {
                    var result = Sizzle.attr(elem, name);
                    if (result == null) {
                      return operator === '!=';
                    }
                    if (!operator) {
                      return true;
                    }
                    result += '';
                    return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                  };
                },
                CHILD: function (type, what, argument, first, last) {
                  var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                  return first === 1 && last === 0 ? function (elem) {
                    return !!elem.parentNode;
                  } : function (elem, context, xml) {
                    var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                    if (parent) {
                      if (simple) {
                        while (dir) {
                          node = elem;
                          while (node = node[dir]) {
                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                              return false;
                            }
                          }
                          start = dir = type === 'only' && !start && 'nextSibling';
                        }
                        return true;
                      }
                      start = [forward ? parent.firstChild : parent.lastChild];
                      if (forward && useCache) {
                        outerCache = parent[expando] || (parent[expando] = {});
                        cache = outerCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = cache[0] === dirruns && cache[2];
                        node = nodeIndex && parent.childNodes[nodeIndex];
                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                          if (node.nodeType === 1 && ++diff && node === elem) {
                            outerCache[type] = [
                              dirruns,
                              nodeIndex,
                              diff
                            ];
                            break;
                          }
                        }
                      } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                        diff = cache[1];
                      } else {
                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                          if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                            if (useCache) {
                              (node[expando] || (node[expando] = {}))[type] = [
                                dirruns,
                                diff
                              ];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                      diff -= last;
                      return diff === first || diff % first === 0 && diff / first >= 0;
                    }
                  };
                },
                PSEUDO: function (pseudo, argument) {
                  var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                  if (fn[expando]) {
                    return fn(argument);
                  }
                  if (fn.length > 1) {
                    args = [
                      pseudo,
                      pseudo,
                      '',
                      argument
                    ];
                    return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                      var idx, matched = fn(seed, argument), i = matched.length;
                      while (i--) {
                        idx = indexOf.call(seed, matched[i]);
                        seed[idx] = !(matches[idx] = matched[i]);
                      }
                    }) : function (elem) {
                      return fn(elem, 0, args);
                    };
                  }
                  return fn;
                }
              },
              pseudos: {
                not: markFunction(function (selector) {
                  var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                  return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                    var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                    while (i--) {
                      if (elem = unmatched[i]) {
                        seed[i] = !(matches[i] = elem);
                      }
                    }
                  }) : function (elem, context, xml) {
                    input[0] = elem;
                    matcher(input, null, xml, results);
                    return !results.pop();
                  };
                }),
                has: markFunction(function (selector) {
                  return function (elem) {
                    return Sizzle(selector, elem).length > 0;
                  };
                }),
                contains: markFunction(function (text) {
                  return function (elem) {
                    return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                  };
                }),
                lang: markFunction(function (lang) {
                  if (!ridentifier.test(lang || '')) {
                    Sizzle.error('unsupported lang: ' + lang);
                  }
                  lang = lang.replace(runescape, funescape).toLowerCase();
                  return function (elem) {
                    var elemLang;
                    do {
                      if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                        elemLang = elemLang.toLowerCase();
                        return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                      }
                    } while ((elem = elem.parentNode) && elem.nodeType === 1);
                    return false;
                  };
                }),
                target: function (elem) {
                  var hash = window.location && window.location.hash;
                  return hash && hash.slice(1) === elem.id;
                },
                root: function (elem) {
                  return elem === docElem;
                },
                focus: function (elem) {
                  return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function (elem) {
                  return elem.disabled === false;
                },
                disabled: function (elem) {
                  return elem.disabled === true;
                },
                checked: function (elem) {
                  var nodeName = elem.nodeName.toLowerCase();
                  return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                },
                selected: function (elem) {
                  if (elem.parentNode) {
                    elem.parentNode.selectedIndex;
                  }
                  return elem.selected === true;
                },
                empty: function (elem) {
                  for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                    if (elem.nodeType < 6) {
                      return false;
                    }
                  }
                  return true;
                },
                parent: function (elem) {
                  return !Expr.pseudos['empty'](elem);
                },
                header: function (elem) {
                  return rheader.test(elem.nodeName);
                },
                input: function (elem) {
                  return rinputs.test(elem.nodeName);
                },
                button: function (elem) {
                  var name = elem.nodeName.toLowerCase();
                  return name === 'input' && elem.type === 'button' || name === 'button';
                },
                text: function (elem) {
                  var attr;
                  return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
                },
                first: createPositionalPseudo(function () {
                  return [0];
                }),
                last: createPositionalPseudo(function (matchIndexes, length) {
                  return [length - 1];
                }),
                eq: createPositionalPseudo(function (matchIndexes, length, argument) {
                  return [argument < 0 ? argument + length : argument];
                }),
                even: createPositionalPseudo(function (matchIndexes, length) {
                  var i = 0;
                  for (; i < length; i += 2) {
                    matchIndexes.push(i);
                  }
                  return matchIndexes;
                }),
                odd: createPositionalPseudo(function (matchIndexes, length) {
                  var i = 1;
                  for (; i < length; i += 2) {
                    matchIndexes.push(i);
                  }
                  return matchIndexes;
                }),
                lt: createPositionalPseudo(function (matchIndexes, length, argument) {
                  var i = argument < 0 ? argument + length : argument;
                  for (; --i >= 0;) {
                    matchIndexes.push(i);
                  }
                  return matchIndexes;
                }),
                gt: createPositionalPseudo(function (matchIndexes, length, argument) {
                  var i = argument < 0 ? argument + length : argument;
                  for (; ++i < length;) {
                    matchIndexes.push(i);
                  }
                  return matchIndexes;
                })
              }
            };
            Expr.pseudos['nth'] = Expr.pseudos['eq'];
            for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
              }) {
              Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in {
                submit: true,
                reset: true
              }) {
              Expr.pseudos[i] = createButtonPseudo(i);
            }
            function setFilters() {
            }
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();
            tokenize = Sizzle.tokenize = function (selector, parseOnly) {
              var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
              if (cached) {
                return parseOnly ? 0 : cached.slice(0);
              }
              soFar = selector;
              groups = [];
              preFilters = Expr.preFilter;
              while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                  if (match) {
                    soFar = soFar.slice(match[0].length) || soFar;
                  }
                  groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type: match[0].replace(rtrim, ' ')
                  });
                  soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                  if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,
                      type: type,
                      matches: match
                    });
                    soFar = soFar.slice(matched.length);
                  }
                }
                if (!matched) {
                  break;
                }
              }
              return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
            };
            function toSelector(tokens) {
              var i = 0, len = tokens.length, selector = '';
              for (; i < len; i++) {
                selector += tokens[i].value;
              }
              return selector;
            }
            function addCombinator(matcher, combinator, base) {
              var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
              return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    return matcher(elem, context, xml);
                  }
                }
              } : function (elem, context, xml) {
                var oldCache, outerCache, newCache = [
                    dirruns,
                    doneName
                  ];
                if (xml) {
                  while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      if (matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                } else {
                  while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      outerCache = elem[expando] || (elem[expando] = {});
                      if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                        return newCache[2] = oldCache[2];
                      } else {
                        outerCache[dir] = newCache;
                        if (newCache[2] = matcher(elem, context, xml)) {
                          return true;
                        }
                      }
                    }
                  }
                }
              };
            }
            function elementMatcher(matchers) {
              return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                  if (!matchers[i](elem, context, xml)) {
                    return false;
                  }
                }
                return true;
              } : matchers[0];
            }
            function multipleContexts(selector, contexts, results) {
              var i = 0, len = contexts.length;
              for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
              }
              return results;
            }
            function condense(unmatched, map, filter, context, xml) {
              var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
              for (; i < len; i++) {
                if (elem = unmatched[i]) {
                  if (!filter || filter(elem, context, xml)) {
                    newUnmatched.push(elem);
                    if (mapped) {
                      map.push(i);
                    }
                  }
                }
              }
              return newUnmatched;
            }
            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
              if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
              }
              if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
              }
              return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                  matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                  temp = condense(matcherOut, postMap);
                  postFilter(temp, [], context, xml);
                  i = temp.length;
                  while (i--) {
                    if (elem = temp[i]) {
                      matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                    }
                  }
                }
                if (seed) {
                  if (postFinder || preFilter) {
                    if (postFinder) {
                      temp = [];
                      i = matcherOut.length;
                      while (i--) {
                        if (elem = matcherOut[i]) {
                          temp.push(matcherIn[i] = elem);
                        }
                      }
                      postFinder(null, matcherOut = [], temp, xml);
                    }
                    i = matcherOut.length;
                    while (i--) {
                      if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                        seed[temp] = !(results[temp] = elem);
                      }
                    }
                  }
                } else {
                  matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                  if (postFinder) {
                    postFinder(null, results, matcherOut, xml);
                  } else {
                    push.apply(results, matcherOut);
                  }
                }
              });
            }
            function matcherFromTokens(tokens) {
              var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                  return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                  return indexOf.call(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [function (elem, context, xml) {
                    return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                  }];
              for (; i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                  matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                  matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                  if (matcher[expando]) {
                    j = ++i;
                    for (; j < len; j++) {
                      if (Expr.relative[tokens[j].type]) {
                        break;
                      }
                    }
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                  }
                  matchers.push(matcher);
                }
              }
              return elementMatcher(matchers);
            }
            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
              var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                  var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                  if (outermost) {
                    outermostContext = context !== document && context;
                  }
                  for (; i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                      j = 0;
                      while (matcher = elementMatchers[j++]) {
                        if (matcher(elem, context, xml)) {
                          results.push(elem);
                          break;
                        }
                      }
                      if (outermost) {
                        dirruns = dirrunsUnique;
                      }
                    }
                    if (bySet) {
                      if (elem = !matcher && elem) {
                        matchedCount--;
                      }
                      if (seed) {
                        unmatched.push(elem);
                      }
                    }
                  }
                  matchedCount += i;
                  if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                      matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                      if (matchedCount > 0) {
                        while (i--) {
                          if (!(unmatched[i] || setMatched[i])) {
                            setMatched[i] = pop.call(results);
                          }
                        }
                      }
                      setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                      Sizzle.uniqueSort(results);
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                  }
                  return unmatched;
                };
              return bySet ? markFunction(superMatcher) : superMatcher;
            }
            compile = Sizzle.compile = function (selector, match) {
              var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
              if (!cached) {
                if (!match) {
                  match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                  cached = matcherFromTokens(match[i]);
                  if (cached[expando]) {
                    setMatchers.push(cached);
                  } else {
                    elementMatchers.push(cached);
                  }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
              }
              return cached;
            };
            select = Sizzle.select = function (selector, context, results, seed) {
              var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
              results = results || [];
              if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                  context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                  if (!context) {
                    return results;
                  } else if (compiled) {
                    context = context.parentNode;
                  }
                  selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                while (i--) {
                  token = tokens[i];
                  if (Expr.relative[type = token.type]) {
                    break;
                  }
                  if (find = Expr.find[type]) {
                    if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                      tokens.splice(i, 1);
                      selector = seed.length && toSelector(tokens);
                      if (!selector) {
                        push.apply(results, seed);
                        return results;
                      }
                      break;
                    }
                  }
                }
              }
              (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
              return results;
            };
            support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
            support.detectDuplicates = !!hasDuplicate;
            setDocument();
            support.sortDetached = assert(function (div1) {
              return div1.compareDocumentPosition(document.createElement('div')) & 1;
            });
            if (!assert(function (div) {
                div.innerHTML = '<a href=\'#\'></a>';
                return div.firstChild.getAttribute('href') === '#';
              })) {
              addHandle('type|href|height|width', function (elem, name, isXML) {
                if (!isXML) {
                  return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
                }
              });
            }
            if (!support.attributes || !assert(function (div) {
                div.innerHTML = '<input/>';
                div.firstChild.setAttribute('value', '');
                return div.firstChild.getAttribute('value') === '';
              })) {
              addHandle('value', function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                  return elem.defaultValue;
                }
              });
            }
            if (!assert(function (div) {
                return div.getAttribute('disabled') == null;
              })) {
              addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                  return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
              });
            }
            return Sizzle;
          }(window);
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[':'] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
        var rneedsContext = jQuery.expr.match.needsContext;
        var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
        var risSimple = /^.[^:#\[\.,]*$/;
        function winnow(elements, qualifier, not) {
          if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier === 'string') {
            if (risSimple.test(qualifier)) {
              return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
          }
          return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) >= 0 !== not;
          });
        }
        jQuery.filter = function (expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ':not(' + expr + ')';
          }
          return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
          }));
        };
        jQuery.fn.extend({
          find: function (selector) {
            var i, len = this.length, ret = [], self = this;
            if (typeof selector !== 'string') {
              return this.pushStack(jQuery(selector).filter(function () {
                for (i = 0; i < len; i++) {
                  if (jQuery.contains(self[i], this)) {
                    return true;
                  }
                }
              }));
            }
            for (i = 0; i < len; i++) {
              jQuery.find(selector, self[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + ' ' + selector : selector;
            return ret;
          },
          filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function (selector) {
            return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
            var match, elem;
            if (!selector) {
              return this;
            }
            if (typeof selector === 'string') {
              if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
                match = [
                  null,
                  selector,
                  null
                ];
              } else {
                match = rquickExpr.exec(selector);
              }
              if (match && (match[1] || !context)) {
                if (match[1]) {
                  context = context instanceof jQuery ? context[0] : context;
                  jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                  if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                    for (match in context) {
                      if (jQuery.isFunction(this[match])) {
                        this[match](context[match]);
                      } else {
                        this.attr(match, context[match]);
                      }
                    }
                  }
                  return this;
                } else {
                  elem = document.getElementById(match[2]);
                  if (elem && elem.parentNode) {
                    this.length = 1;
                    this[0] = elem;
                  }
                  this.context = document;
                  this.selector = selector;
                  return this;
                }
              } else if (!context || context.jquery) {
                return (context || rootjQuery).find(selector);
              } else {
                return this.constructor(context).find(selector);
              }
            } else if (selector.nodeType) {
              this.context = this[0] = selector;
              this.length = 1;
              return this;
            } else if (jQuery.isFunction(selector)) {
              return typeof rootjQuery.ready !== 'undefined' ? rootjQuery.ready(selector) : selector(jQuery);
            }
            if (selector.selector !== undefined) {
              this.selector = selector.selector;
              this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
          };
        init.prototype = jQuery.fn;
        rootjQuery = jQuery(document);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
          };
        jQuery.extend({
          dir: function (elem, dir, until) {
            var matched = [], truncate = until !== undefined;
            while ((elem = elem[dir]) && elem.nodeType !== 9) {
              if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                  break;
                }
                matched.push(elem);
              }
            }
            return matched;
          },
          sibling: function (n, elem) {
            var matched = [];
            for (; n; n = n.nextSibling) {
              if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
              }
            }
            return matched;
          }
        });
        jQuery.fn.extend({
          has: function (target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function () {
              var i = 0;
              for (; i < l; i++) {
                if (jQuery.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
          },
          index: function (elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
              return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
          },
          add: function (selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
          },
          addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
          }
        });
        function sibling(cur, dir) {
          while ((cur = cur[dir]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery.each({
          parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function (elem) {
            return jQuery.dir(elem, 'parentNode');
          },
          parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'parentNode', until);
          },
          next: function (elem) {
            return sibling(elem, 'nextSibling');
          },
          prev: function (elem) {
            return sibling(elem, 'previousSibling');
          },
          nextAll: function (elem) {
            return jQuery.dir(elem, 'nextSibling');
          },
          prevAll: function (elem) {
            return jQuery.dir(elem, 'previousSibling');
          },
          nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'nextSibling', until);
          },
          prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'previousSibling', until);
          },
          siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
          },
          children: function (elem) {
            return jQuery.sibling(elem.firstChild);
          },
          contents: function (elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
          }
        }, function (name, fn) {
          jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== 'Until') {
              selector = until;
            }
            if (selector && typeof selector === 'string') {
              matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery.unique(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnotwhite = /\S+/g;
        var optionsCache = {};
        function createOptions(options) {
          var object = optionsCache[options] = {};
          jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery.Callbacks = function (options) {
          options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
          var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function (data) {
              memory = options.memory && data;
              fired = true;
              firingIndex = firingStart || 0;
              firingStart = 0;
              firingLength = list.length;
              firing = true;
              for (; list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                  memory = false;
                  break;
                }
              }
              firing = false;
              if (list) {
                if (stack) {
                  if (stack.length) {
                    fire(stack.shift());
                  }
                } else if (memory) {
                  list = [];
                } else {
                  self.disable();
                }
              }
            }, self = {
              add: function () {
                if (list) {
                  var start = list.length;
                  (function add(args) {
                    jQuery.each(args, function (_, arg) {
                      var type = jQuery.type(arg);
                      if (type === 'function') {
                        if (!options.unique || !self.has(arg)) {
                          list.push(arg);
                        }
                      } else if (arg && arg.length && type !== 'string') {
                        add(arg);
                      }
                    });
                  }(arguments));
                  if (firing) {
                    firingLength = list.length;
                  } else if (memory) {
                    firingStart = start;
                    fire(memory);
                  }
                }
                return this;
              },
              remove: function () {
                if (list) {
                  jQuery.each(arguments, function (_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                      list.splice(index, 1);
                      if (firing) {
                        if (index <= firingLength) {
                          firingLength--;
                        }
                        if (index <= firingIndex) {
                          firingIndex--;
                        }
                      }
                    }
                  });
                }
                return this;
              },
              has: function (fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
              },
              empty: function () {
                list = [];
                firingLength = 0;
                return this;
              },
              disable: function () {
                list = stack = memory = undefined;
                return this;
              },
              disabled: function () {
                return !list;
              },
              lock: function () {
                stack = undefined;
                if (!memory) {
                  self.disable();
                }
                return this;
              },
              locked: function () {
                return !stack;
              },
              fireWith: function (context, args) {
                if (list && (!fired || stack)) {
                  args = args || [];
                  args = [
                    context,
                    args.slice ? args.slice() : args
                  ];
                  if (firing) {
                    stack.push(args);
                  } else {
                    fire(args);
                  }
                }
                return this;
              },
              fire: function () {
                self.fireWith(this, arguments);
                return this;
              },
              fired: function () {
                return !!fired;
              }
            };
          return self;
        };
        jQuery.extend({
          Deferred: function (func) {
            var tuples = [
                [
                  'resolve',
                  'done',
                  jQuery.Callbacks('once memory'),
                  'resolved'
                ],
                [
                  'reject',
                  'fail',
                  jQuery.Callbacks('once memory'),
                  'rejected'
                ],
                [
                  'notify',
                  'progress',
                  jQuery.Callbacks('memory')
                ]
              ], state = 'pending', promise = {
                state: function () {
                  return state;
                },
                always: function () {
                  deferred.done(arguments).fail(arguments);
                  return this;
                },
                then: function () {
                  var fns = arguments;
                  return jQuery.Deferred(function (newDefer) {
                    jQuery.each(tuples, function (i, tuple) {
                      var fn = jQuery.isFunction(fns[i]) && fns[i];
                      deferred[tuple[1]](function () {
                        var returned = fn && fn.apply(this, arguments);
                        if (returned && jQuery.isFunction(returned.promise)) {
                          returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                        } else {
                          newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                        }
                      });
                    });
                    fns = null;
                  }).promise();
                },
                promise: function (obj) {
                  return obj != null ? jQuery.extend(obj, promise) : promise;
                }
              }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function (i, tuple) {
              var list = tuple[2], stateString = tuple[3];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(function () {
                  state = stateString;
                }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
              }
              deferred[tuple[0]] = function () {
                deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
                return this;
              };
              deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          when: function (subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
                return function (value) {
                  contexts[i] = this;
                  values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                  if (values === progressValues) {
                    deferred.notifyWith(contexts, values);
                  } else if (!--remaining) {
                    deferred.resolveWith(contexts, values);
                  }
                };
              }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
              progressValues = new Array(length);
              progressContexts = new Array(length);
              resolveContexts = new Array(length);
              for (; i < length; i++) {
                if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                  resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                } else {
                  --remaining;
                }
              }
            }
            if (!remaining) {
              deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
          }
        });
        var readyList;
        jQuery.fn.ready = function (fn) {
          jQuery.ready.promise().done(fn);
          return this;
        };
        jQuery.extend({
          isReady: false,
          readyWait: 1,
          holdReady: function (hold) {
            if (hold) {
              jQuery.readyWait++;
            } else {
              jQuery.ready(true);
            }
          },
          ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
              return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document, [jQuery]);
            if (jQuery.fn.triggerHandler) {
              jQuery(document).triggerHandler('ready');
              jQuery(document).off('ready');
            }
          }
        });
        function completed() {
          document.removeEventListener('DOMContentLoaded', completed, false);
          window.removeEventListener('load', completed, false);
          jQuery.ready();
        }
        jQuery.ready.promise = function (obj) {
          if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === 'complete') {
              setTimeout(jQuery.ready);
            } else {
              document.addEventListener('DOMContentLoaded', completed, false);
              window.addEventListener('load', completed, false);
            }
          }
          return readyList.promise(obj);
        };
        jQuery.ready.promise();
        var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, len = elems.length, bulk = key == null;
            if (jQuery.type(key) === 'object') {
              chainable = true;
              for (i in key) {
                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
              }
            } else if (value !== undefined) {
              chainable = true;
              if (!jQuery.isFunction(value)) {
                raw = true;
              }
              if (bulk) {
                if (raw) {
                  fn.call(elems, value);
                  fn = null;
                } else {
                  bulk = fn;
                  fn = function (elem, key, value) {
                    return bulk.call(jQuery(elem), value);
                  };
                }
              }
              if (fn) {
                for (; i < len; i++) {
                  fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
              }
            }
            return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
          };
        jQuery.acceptData = function (owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data() {
          Object.defineProperty(this.cache = {}, 0, {
            get: function () {
              return {};
            }
          });
          this.expando = jQuery.expando + Math.random();
        }
        Data.uid = 1;
        Data.accepts = jQuery.acceptData;
        Data.prototype = {
          key: function (owner) {
            if (!Data.accepts(owner)) {
              return 0;
            }
            var descriptor = {}, unlock = owner[this.expando];
            if (!unlock) {
              unlock = Data.uid++;
              try {
                descriptor[this.expando] = { value: unlock };
                Object.defineProperties(owner, descriptor);
              } catch (e) {
                descriptor[this.expando] = unlock;
                jQuery.extend(owner, descriptor);
              }
            }
            if (!this.cache[unlock]) {
              this.cache[unlock] = {};
            }
            return unlock;
          },
          set: function (owner, data, value) {
            var prop, unlock = this.key(owner), cache = this.cache[unlock];
            if (typeof data === 'string') {
              cache[data] = value;
            } else {
              if (jQuery.isEmptyObject(cache)) {
                jQuery.extend(this.cache[unlock], data);
              } else {
                for (prop in data) {
                  cache[prop] = data[prop];
                }
              }
            }
            return cache;
          },
          get: function (owner, key) {
            var cache = this.cache[this.key(owner)];
            return key === undefined ? cache : cache[key];
          },
          access: function (owner, key, value) {
            var stored;
            if (key === undefined || key && typeof key === 'string' && value === undefined) {
              stored = this.get(owner, key);
              return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
          },
          remove: function (owner, key) {
            var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
            if (key === undefined) {
              this.cache[unlock] = {};
            } else {
              if (jQuery.isArray(key)) {
                name = key.concat(key.map(jQuery.camelCase));
              } else {
                camel = jQuery.camelCase(key);
                if (key in cache) {
                  name = [
                    key,
                    camel
                  ];
                } else {
                  name = camel;
                  name = name in cache ? [name] : name.match(rnotwhite) || [];
                }
              }
              i = name.length;
              while (i--) {
                delete cache[name[i]];
              }
            }
          },
          hasData: function (owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
          },
          discard: function (owner) {
            if (owner[this.expando]) {
              delete this.cache[owner[this.expando]];
            }
          }
        };
        var data_priv = new Data();
        var data_user = new Data();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
        function dataAttr(elem, key, data) {
          var name;
          if (data === undefined && elem.nodeType === 1) {
            name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
              try {
                data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
              } catch (e) {
              }
              data_user.set(elem, key, data);
            } else {
              data = undefined;
            }
          }
          return data;
        }
        jQuery.extend({
          hasData: function (elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
          },
          data: function (elem, name, data) {
            return data_user.access(elem, name, data);
          },
          removeData: function (elem, name) {
            data_user.remove(elem, name);
          },
          _data: function (elem, name, data) {
            return data_priv.access(elem, name, data);
          },
          _removeData: function (elem, name) {
            data_priv.remove(elem, name);
          }
        });
        jQuery.fn.extend({
          data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
              if (this.length) {
                data = data_user.get(elem);
                if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf('data-') === 0) {
                        name = jQuery.camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  data_priv.set(elem, 'hasDataAttrs', true);
                }
              }
              return data;
            }
            if (typeof key === 'object') {
              return this.each(function () {
                data_user.set(this, key);
              });
            }
            return access(this, function (value) {
              var data, camelKey = jQuery.camelCase(key);
              if (elem && value === undefined) {
                data = data_user.get(elem, key);
                if (data !== undefined) {
                  return data;
                }
                data = data_user.get(elem, camelKey);
                if (data !== undefined) {
                  return data;
                }
                data = dataAttr(elem, camelKey, undefined);
                if (data !== undefined) {
                  return data;
                }
                return;
              }
              this.each(function () {
                var data = data_user.get(this, camelKey);
                data_user.set(this, camelKey, value);
                if (key.indexOf('-') !== -1 && data !== undefined) {
                  data_user.set(this, key, value);
                }
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function (key) {
            return this.each(function () {
              data_user.remove(this, key);
            });
          }
        });
        jQuery.extend({
          queue: function (elem, type, data) {
            var queue;
            if (elem) {
              type = (type || 'fx') + 'queue';
              queue = data_priv.get(elem, type);
              if (data) {
                if (!queue || jQuery.isArray(data)) {
                  queue = data_priv.access(elem, type, jQuery.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                jQuery.dequeue(elem, type);
              };
            if (fn === 'inprogress') {
              fn = queue.shift();
              startLength--;
            }
            if (fn) {
              if (type === 'fx') {
                queue.unshift('inprogress');
              }
              delete hooks.stop;
              fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
              empty: jQuery.Callbacks('once memory').add(function () {
                data_priv.remove(elem, [
                  type + 'queue',
                  key
                ]);
              })
            });
          }
        });
        jQuery.fn.extend({
          queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
              data = type;
              type = 'fx';
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
              var queue = jQuery.queue(this, type, data);
              jQuery._queueHooks(this, type);
              if (type === 'fx' && queue[0] !== 'inprogress') {
                jQuery.dequeue(this, type);
              }
            });
          },
          dequeue: function (type) {
            return this.each(function () {
              jQuery.dequeue(this, type);
            });
          },
          clearQueue: function (type) {
            return this.queue(type || 'fx', []);
          },
          promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                if (!--count) {
                  defer.resolveWith(elements, [elements]);
                }
              };
            if (typeof type !== 'string') {
              obj = type;
              type = undefined;
            }
            type = type || 'fx';
            while (i--) {
              tmp = data_priv.get(elements[i], type + 'queueHooks');
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var cssExpand = [
            'Top',
            'Right',
            'Bottom',
            'Left'
          ];
        var isHidden = function (elem, el) {
          elem = el || elem;
          return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
        };
        var rcheckableType = /^(?:checkbox|radio)$/i;
        (function () {
          var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
          input.setAttribute('type', 'radio');
          input.setAttribute('checked', 'checked');
          input.setAttribute('name', 't');
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = '<textarea>x</textarea>';
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        }());
        var strundefined = typeof undefined;
        support.focusinBubbles = 'onfocusin' in window;
        var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function safeActiveElement() {
          try {
            return document.activeElement;
          } catch (err) {
          }
        }
        jQuery.event = {
          global: {},
          add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
            if (!elemData) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (!handler.guid) {
              handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function (e) {
                return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
              };
            }
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || '').split('.').sort();
              if (!type) {
                continue;
              }
              special = jQuery.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery.event.special[type] || {};
              handleObj = jQuery.extend({
                type: type,
                origType: origType,
                data: data,
                handler: handler,
                guid: handler.guid,
                selector: selector,
                needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                namespace: namespaces.join('.')
              }, handleObjIn);
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle, false);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery.event.global[type] = true;
            }
          },
          remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || '').split('.').sort();
              if (!type) {
                for (type in events) {
                  jQuery.event.remove(elem, type + types[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
            if (jQuery.isEmptyObject(events)) {
              delete elemData.handle;
              data_priv.remove(elem, 'events');
            }
          },
          trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
              return;
            }
            if (type.indexOf('.') >= 0) {
              namespaces = type.split('.');
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              event.type = i > 1 ? bubbleType : special.bindType || type;
              handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && jQuery.acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery.event.triggered = type;
                  elem[type]();
                  jQuery.event.triggered = undefined;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== undefined) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function (event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.disabled !== true || event.type !== 'click') {
                  matches = [];
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + ' ';
                    if (matches[sel] === undefined) {
                      matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                    }
                    if (matches[sel]) {
                      matches.push(handleObj);
                    }
                  }
                  if (matches.length) {
                    handlerQueue.push({
                      elem: cur,
                      handlers: matches
                    });
                  }
                }
              }
            }
            if (delegateCount < handlers.length) {
              handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
              });
            }
            return handlerQueue;
          },
          props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
          fixHooks: {},
          keyHooks: {
            props: 'char charCode key keyCode'.split(' '),
            filter: function (event, original) {
              if (event.which == null) {
                event.which = original.charCode != null ? original.charCode : original.keyCode;
              }
              return event;
            }
          },
          mouseHooks: {
            props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
            filter: function (event, original) {
              var eventDoc, doc, body, button = original.button;
              if (event.pageX == null && original.clientX != null) {
                eventDoc = event.target.ownerDocument || document;
                doc = eventDoc.documentElement;
                body = eventDoc.body;
                event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
              }
              if (!event.which && button !== undefined) {
                event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
              }
              return event;
            }
          },
          fix: function (event) {
            if (event[jQuery.expando]) {
              return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
              this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
              prop = copy[i];
              event[prop] = originalEvent[prop];
            }
            if (!event.target) {
              event.target = document;
            }
            if (event.target.nodeType === 3) {
              event.target = event.target.parentNode;
            }
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
          },
          special: {
            load: { noBubble: true },
            focus: {
              trigger: function () {
                if (this !== safeActiveElement() && this.focus) {
                  this.focus();
                  return false;
                }
              },
              delegateType: 'focusin'
            },
            blur: {
              trigger: function () {
                if (this === safeActiveElement() && this.blur) {
                  this.blur();
                  return false;
                }
              },
              delegateType: 'focusout'
            },
            click: {
              trigger: function () {
                if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                  this.click();
                  return false;
                }
              },
              _default: function (event) {
                return jQuery.nodeName(event.target, 'a');
              }
            },
            beforeunload: {
              postDispatch: function (event) {
                if (event.result !== undefined && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          },
          simulate: function (type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
              });
            if (bubble) {
              jQuery.event.trigger(e, null, elem);
            } else {
              jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
              event.preventDefault();
            }
          }
        };
        jQuery.removeEvent = function (elem, type, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
          }
        };
        jQuery.Event = function (src, props) {
          if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || jQuery.now();
          this[jQuery.expando] = true;
        };
        jQuery.Event.prototype = {
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && e.preventDefault) {
              e.preventDefault();
            }
          },
          stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && e.stopPropagation) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && e.stopImmediatePropagation) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery.each({
          mouseenter: 'mouseover',
          mouseleave: 'mouseout',
          pointerenter: 'pointerover',
          pointerleave: 'pointerout'
        }, function (orig, fix) {
          jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        if (!support.focusinBubbles) {
          jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
          }, function (orig, fix) {
            var handler = function (event) {
              jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
              setup: function () {
                var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
                if (!attaches) {
                  doc.addEventListener(orig, handler, true);
                }
                data_priv.access(doc, fix, (attaches || 0) + 1);
              },
              teardown: function () {
                var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
                if (!attaches) {
                  doc.removeEventListener(orig, handler, true);
                  data_priv.remove(doc, fix);
                } else {
                  data_priv.access(doc, fix, attaches);
                }
              }
            };
          });
        }
        jQuery.fn.extend({
          on: function (types, selector, data, fn, one) {
            var origFn, type;
            if (typeof types === 'object') {
              if (typeof selector !== 'string') {
                data = data || selector;
                selector = undefined;
              }
              for (type in types) {
                this.on(type, selector, data, types[type], one);
              }
              return this;
            }
            if (data == null && fn == null) {
              fn = selector;
              data = selector = undefined;
            } else if (fn == null) {
              if (typeof selector === 'string') {
                fn = data;
                data = undefined;
              } else {
                fn = data;
                data = selector;
                selector = undefined;
              }
            }
            if (fn === false) {
              fn = returnFalse;
            } else if (!fn) {
              return this;
            }
            if (one === 1) {
              origFn = fn;
              fn = function (event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
              };
              fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function () {
              jQuery.event.add(this, types, fn, data, selector);
            });
          },
          one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
          },
          off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
              return this;
            }
            if (typeof types === 'object') {
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === 'function') {
              fn = selector;
              selector = undefined;
            }
            if (fn === false) {
              fn = returnFalse;
            }
            return this.each(function () {
              jQuery.event.remove(this, types, fn, selector);
            });
          },
          trigger: function (type, data) {
            return this.each(function () {
              jQuery.event.trigger(type, data, this);
            });
          },
          triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery.event.trigger(type, data, elem, true);
            }
          }
        });
        var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
            option: [
              1,
              '<select multiple=\'multiple\'>',
              '</select>'
            ],
            thead: [
              1,
              '<table>',
              '</table>'
            ],
            col: [
              2,
              '<table><colgroup>',
              '</colgroup></table>'
            ],
            tr: [
              2,
              '<table><tbody>',
              '</tbody></table>'
            ],
            td: [
              3,
              '<table><tbody><tr>',
              '</tr></tbody></table>'
            ],
            _default: [
              0,
              '',
              ''
            ]
          };
        wrapMap.optgroup = wrapMap.option;
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        function manipulationTarget(elem, content) {
          return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          var match = rscriptTypeMasked.exec(elem.type);
          if (match) {
            elem.type = match[1];
          } else {
            elem.removeAttribute('type');
          }
          return elem;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l = elems.length;
          for (; i < l; i++) {
            data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
          }
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (data_priv.hasData(src)) {
            pdataOld = data_priv.access(src);
            pdataCur = data_priv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
              delete pdataCur.handle;
              pdataCur.events = {};
              for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                  jQuery.event.add(dest, type, events[type][i]);
                }
              }
            }
          }
          if (data_user.hasData(src)) {
            udataOld = data_user.access(src);
            udataCur = jQuery.extend({}, udataOld);
            data_user.set(dest, udataCur);
          }
        }
        function getAll(context, tag) {
          var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
          return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
        }
        function fixInput(src, dest) {
          var nodeName = dest.nodeName.toLowerCase();
          if (nodeName === 'input' && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
          }
        }
        jQuery.extend({
          clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            return clone;
          },
          buildFragment: function (elems, context, scripts, selection) {
            var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
            for (; i < l; i++) {
              elem = elems[i];
              if (elem || elem === 0) {
                if (jQuery.type(elem) === 'object') {
                  jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                } else if (!rhtml.test(elem)) {
                  nodes.push(context.createTextNode(elem));
                } else {
                  tmp = tmp || fragment.appendChild(context.createElement('div'));
                  tag = (rtagName.exec(elem) || [
                    '',
                    ''
                  ])[1].toLowerCase();
                  wrap = wrapMap[tag] || wrapMap._default;
                  tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
                  j = wrap[0];
                  while (j--) {
                    tmp = tmp.lastChild;
                  }
                  jQuery.merge(nodes, tmp.childNodes);
                  tmp = fragment.firstChild;
                  tmp.textContent = '';
                }
              }
            }
            fragment.textContent = '';
            i = 0;
            while (elem = nodes[i++]) {
              if (selection && jQuery.inArray(elem, selection) !== -1) {
                continue;
              }
              contains = jQuery.contains(elem.ownerDocument, elem);
              tmp = getAll(fragment.appendChild(elem), 'script');
              if (contains) {
                setGlobalEval(tmp);
              }
              if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                  if (rscriptType.test(elem.type || '')) {
                    scripts.push(elem);
                  }
                }
              }
            }
            return fragment;
          },
          cleanData: function (elems) {
            var data, elem, type, key, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
              if (jQuery.acceptData(elem)) {
                key = elem[data_priv.expando];
                if (key && (data = data_priv.cache[key])) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery.event.remove(elem, type);
                      } else {
                        jQuery.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  if (data_priv.cache[key]) {
                    delete data_priv.cache[key];
                  }
                }
              }
              delete data_user.cache[elem[data_user.expando]];
            }
          }
        });
        jQuery.fn.extend({
          text: function (value) {
            return access(this, function (value) {
              return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value;
                }
              });
            }, null, value, arguments.length);
          },
          append: function () {
            return this.domManip(arguments, function (elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function () {
            return this.domManip(arguments, function (elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function () {
            return this.domManip(arguments, function (elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function () {
            return this.domManip(arguments, function (elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          remove: function (selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (; (elem = elems[i]) != null; i++) {
              if (!keepData && elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem));
              }
              if (elem.parentNode) {
                if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                  setGlobalEval(getAll(elem, 'script'));
                }
                elem.parentNode.removeChild(elem);
              }
            }
            return this;
          },
          empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.textContent = '';
              }
            }
            return this;
          },
          clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
              return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function (value) {
            return access(this, function (value) {
              var elem = this[0] || {}, i = 0, l = this.length;
              if (value === undefined && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                  '',
                  ''
                ])[1].toLowerCase()]) {
                value = value.replace(rxhtmlTag, '<$1></$2>');
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery.cleanData(getAll(elem, false));
                      elem.innerHTML = value;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function () {
            var arg = arguments[0];
            this.domManip(arguments, function (elem) {
              arg = this.parentNode;
              jQuery.cleanData(getAll(this));
              if (arg) {
                arg.replaceChild(elem, this);
              }
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
          },
          detach: function (selector) {
            return this.remove(selector, true);
          },
          domManip: function (args, callback) {
            args = concat.apply([], args);
            var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
              return this.each(function (index) {
                var self = set.eq(index);
                if (isFunction) {
                  args[0] = value.call(this, index, self.html());
                }
                self.domManip(args, callback);
              });
            }
            if (l) {
              fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
              first = fragment.firstChild;
              if (fragment.childNodes.length === 1) {
                fragment = first;
              }
              if (first) {
                scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                hasScripts = scripts.length;
                for (; i < l; i++) {
                  node = fragment;
                  if (i !== iNoClone) {
                    node = jQuery.clone(node, true, true);
                    if (hasScripts) {
                      jQuery.merge(scripts, getAll(node, 'script'));
                    }
                  }
                  callback.call(this[i], node, i);
                }
                if (hasScripts) {
                  doc = scripts[scripts.length - 1].ownerDocument;
                  jQuery.map(scripts, restoreScript);
                  for (i = 0; i < hasScripts; i++) {
                    node = scripts[i];
                    if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                      if (node.src) {
                        if (jQuery._evalUrl) {
                          jQuery._evalUrl(node.src);
                        }
                      } else {
                        jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                      }
                    }
                  }
                }
              }
            }
            return this;
          }
        });
        jQuery.each({
          appendTo: 'append',
          prependTo: 'prepend',
          insertBefore: 'before',
          insertAfter: 'after',
          replaceAll: 'replaceWith'
        }, function (name, original) {
          jQuery.fn[name] = function (selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              jQuery(insert[i])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var iframe, elemdisplay = {};
        function actualDisplay(name, doc) {
          var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], 'display');
          elem.detach();
          return display;
        }
        function defaultDisplay(nodeName) {
          var doc = document, display = elemdisplay[nodeName];
          if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === 'none' || !display) {
              iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
              doc = iframe[0].contentDocument;
              doc.write();
              doc.close();
              display = actualDisplay(nodeName, doc);
              iframe.detach();
            }
            elemdisplay[nodeName] = display;
          }
          return display;
        }
        var rmargin = /^margin/;
        var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
        var getStyles = function (elem) {
          return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        };
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
          }
          if (computed) {
            if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
              ret = jQuery.style(elem, name);
            }
            if (rnumnonpx.test(ret) && rmargin.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== undefined ? ret + '' : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function () {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        (function () {
          var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement('div'), div = document.createElement('div');
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = 'content-box';
          div.cloneNode(true).style.backgroundClip = '';
          support.clearCloneStyle = div.style.backgroundClip === 'content-box';
          container.style.cssText = 'border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;' + 'position:absolute';
          container.appendChild(div);
          function computePixelPositionAndBoxSizingReliable() {
            div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;' + 'box-sizing:border-box;display:block;margin-top:1%;top:1%;' + 'border:1px;padding:1px;width:4px;position:absolute';
            div.innerHTML = '';
            docElem.appendChild(container);
            var divStyle = window.getComputedStyle(div, null);
            pixelPositionVal = divStyle.top !== '1%';
            boxSizingReliableVal = divStyle.width === '4px';
            docElem.removeChild(container);
          }
          if (window.getComputedStyle) {
            jQuery.extend(support, {
              pixelPosition: function () {
                computePixelPositionAndBoxSizingReliable();
                return pixelPositionVal;
              },
              boxSizingReliable: function () {
                if (boxSizingReliableVal == null) {
                  computePixelPositionAndBoxSizingReliable();
                }
                return boxSizingReliableVal;
              },
              reliableMarginRight: function () {
                var ret, marginDiv = div.appendChild(document.createElement('div'));
                marginDiv.style.cssText = div.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;' + 'box-sizing:content-box;display:block;margin:0;border:0;padding:0';
                marginDiv.style.marginRight = marginDiv.style.width = '0';
                div.style.width = '1px';
                docElem.appendChild(container);
                ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
                docElem.removeChild(container);
                return ret;
              }
            });
          }
        }());
        jQuery.swap = function (elem, options, callback, args) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.apply(elem, args || []);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp('^(' + pnum + ')(.*)$', 'i'), rrelNum = new RegExp('^([+-])=(' + pnum + ')', 'i'), cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
          }, cssNormalTransform = {
            letterSpacing: '0',
            fontWeight: '400'
          }, cssPrefixes = [
            'Webkit',
            'O',
            'Moz',
            'ms'
          ];
        function vendorPropName(style, name) {
          if (name in style) {
            return name;
          }
          var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
              return name;
            }
          }
          return origName;
        }
        function setPositiveNumber(elem, value, subtract) {
          var matches = rnumsplit.exec(value);
          return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
        }
        function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
          var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
          for (; i < 4; i += 2) {
            if (extra === 'margin') {
              val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
              if (extra === 'content') {
                val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
              }
              if (extra !== 'margin') {
                val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
              }
            } else {
              val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
              if (extra !== 'padding') {
                val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
              }
            }
          }
          return val;
        }
        function getWidthOrHeight(elem, name, extra) {
          var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
          if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
              val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
              return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
          }
          return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
        }
        function showHide(elements, show) {
          var display, elem, hidden, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            values[index] = data_priv.get(elem, 'olddisplay');
            display = elem.style.display;
            if (show) {
              if (!values[index] && display === 'none') {
                elem.style.display = '';
              }
              if (elem.style.display === '' && isHidden(elem)) {
                values[index] = data_priv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
              }
            } else {
              hidden = isHidden(elem);
              if (display !== 'none' || !hidden) {
                data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
              }
            }
          }
          for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            if (!show || elem.style.display === 'none' || elem.style.display === '') {
              elem.style.display = show ? values[index] || '' : 'none';
            }
          }
          return elements;
        }
        jQuery.extend({
          cssHooks: {
            opacity: {
              get: function (elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, 'opacity');
                  return ret === '' ? '1' : ret;
                }
              }
            }
          },
          cssNumber: {
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
          },
          cssProps: { 'float': 'cssFloat' },
          style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
              type = typeof value;
              if (type === 'string' && (ret = rrelNum.exec(value))) {
                value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                type = 'number';
              }
              if (value == null || value !== value) {
                return;
              }
              if (type === 'number' && !jQuery.cssNumber[origName]) {
                value += 'px';
              }
              if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                style[name] = 'inherit';
              }
              if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                style[name] = value;
              }
            } else {
              if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                return ret;
              }
              return style[name];
            }
          },
          css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
              val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
              num = parseFloat(val);
              return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery.each([
          'height',
          'width'
        ], function (i, name) {
          jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
                  return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra);
              }
            },
            set: function (elem, value, extra) {
              var styles = extra && getStyles(elem);
              return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
            }
          };
        });
        jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
          if (computed) {
            return jQuery.swap(elem, { display: 'inline-block' }, curCSS, [
              elem,
              'marginRight'
            ]);
          }
        });
        jQuery.each({
          margin: '',
          padding: '',
          border: 'Width'
        }, function (prefix, suffix) {
          jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
              var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        jQuery.fn.extend({
          css: function (name, value) {
            return access(this, function (elem, name, value) {
              var styles, len, map = {}, i = 0;
              if (jQuery.isArray(name)) {
                styles = getStyles(elem);
                len = name.length;
                for (; i < len; i++) {
                  map[name[i]] = jQuery.css(elem, name[i], false, styles);
                }
                return map;
              }
              return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
          },
          show: function () {
            return showHide(this, true);
          },
          hide: function () {
            return showHide(this);
          },
          toggle: function (state) {
            if (typeof state === 'boolean') {
              return state ? this.show() : this.hide();
            }
            return this.each(function () {
              if (isHidden(this)) {
                jQuery(this).show();
              } else {
                jQuery(this).hide();
              }
            });
          }
        });
        function Tween(elem, options, prop, end, easing) {
          return new Tween.prototype.init(elem, options, prop, end, easing);
        }
        jQuery.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || 'swing';
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
          },
          cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function (tween) {
              var result;
              if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                return tween.elem[tween.prop];
              }
              result = jQuery.css(tween.elem, tween.prop, '');
              return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
              if (jQuery.fx.step[tween.prop]) {
                jQuery.fx.step[tween.prop](tween);
              } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery.easing = {
          linear: function (p) {
            return p;
          },
          swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          }
        };
        jQuery.fx = Tween.prototype.init;
        jQuery.fx.step = {};
        var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
            '*': [function (prop, value) {
                var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
                if (start && start[3] !== unit) {
                  unit = unit || start[3];
                  parts = parts || [];
                  start = +target || 1;
                  do {
                    scale = scale || '.5';
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit);
                  } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                }
                if (parts) {
                  start = tween.start = +start || +target || 0;
                  tween.unit = unit;
                  tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
                }
                return tween;
              }]
          };
        function createFxNow() {
          setTimeout(function () {
            fxNow = undefined;
          });
          return fxNow = jQuery.now();
        }
        function genFx(type, includeWidth) {
          var which, i = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
          if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function () {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function () {
              anim.always(function () {
                hooks.unqueued--;
                if (!jQuery.queue(elem, 'fx').length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
            opts.overflow = [
              style.overflow,
              style.overflowX,
              style.overflowY
            ];
            display = jQuery.css(elem, 'display');
            checkDisplay = display === 'none' ? data_priv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
            if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
              style.display = 'inline-block';
            }
          }
          if (opts.overflow) {
            style.overflow = 'hidden';
            anim.always(function () {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
              delete props[prop];
              toggle = toggle || value === 'toggle';
              if (value === (hidden ? 'hide' : 'show')) {
                if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
              display = undefined;
            }
          }
          if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
              if ('hidden' in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = data_priv.access(elem, 'fxshow', {});
            }
            if (toggle) {
              dataShow.hidden = !hidden;
            }
            if (hidden) {
              jQuery(elem).show();
            } else {
              anim.done(function () {
                jQuery(elem).hide();
              });
            }
            anim.done(function () {
              var prop;
              data_priv.remove(elem, 'fxshow');
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop]);
              }
            });
            for (prop in orig) {
              tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
              if (!(prop in dataShow)) {
                dataShow[prop] = tween.start;
                if (hidden) {
                  tween.end = tween.start;
                  tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
                }
              }
            }
          } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
            style.display = display;
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;
          for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
              delete tick.elem;
            }), tick = function () {
              if (stopped) {
                return false;
              }
              var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
              for (; index < length; index++) {
                animation.tweens[index].run(percent);
              }
              deferred.notifyWith(elem, [
                animation,
                percent,
                remaining
              ]);
              if (percent < 1 && length) {
                return remaining;
              } else {
                deferred.resolveWith(elem, [animation]);
                return false;
              }
            }, animation = deferred.promise({
              elem: elem,
              props: jQuery.extend({}, properties),
              opts: jQuery.extend(true, { specialEasing: {} }, options),
              originalProperties: properties,
              originalOptions: options,
              startTime: fxNow || createFxNow(),
              duration: options.duration,
              tweens: [],
              createTween: function (prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
              },
              stop: function (gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                  return this;
                }
                stopped = true;
                for (; index < length; index++) {
                  animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                  deferred.resolveWith(elem, [
                    animation,
                    gotoEnd
                  ]);
                } else {
                  deferred.rejectWith(elem, [
                    animation,
                    gotoEnd
                  ]);
                }
                return this;
              }
            }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              return result;
            }
          }
          jQuery.map(props, createTween, animation);
          if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
          }));
          return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        }
        jQuery.Animation = jQuery.extend(Animation, {
          tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
              callback = props;
              props = ['*'];
            } else {
              props = props.split(' ');
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              tweeners[prop] = tweeners[prop] || [];
              tweeners[prop].unshift(callback);
            }
          },
          prefilter: function (callback, prepend) {
            if (prepend) {
              animationPrefilters.unshift(callback);
            } else {
              animationPrefilters.push(callback);
            }
          }
        });
        jQuery.speed = function (speed, easing, fn) {
          var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
              complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
              duration: speed,
              easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
          opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
          if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
          }
          opt.old = opt.complete;
          opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery.fn.extend({
          fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || data_priv.get(this, 'finish')) {
                  anim.stop(true);
                }
              };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== 'string') {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = undefined;
            }
            if (clearQueue && type !== false) {
              this.queue(type || 'fx', []);
            }
            return this.each(function () {
              var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--;) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery.dequeue(this, type);
              }
            });
          },
          finish: function (type) {
            if (type !== false) {
              type = type || 'fx';
            }
            return this.each(function () {
              var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--;) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery.each([
          'toggle',
          'show',
          'hide'
        ], function (i, name) {
          var cssFn = jQuery.fn[name];
          jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery.each({
          slideDown: genFx('show'),
          slideUp: genFx('hide'),
          slideToggle: genFx('toggle'),
          fadeIn: { opacity: 'show' },
          fadeOut: { opacity: 'hide' },
          fadeToggle: { opacity: 'toggle' }
        }, function (name, props) {
          jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery.timers = [];
        jQuery.fx.tick = function () {
          var timer, i = 0, timers = jQuery.timers;
          fxNow = jQuery.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery.fx.stop();
          }
          fxNow = undefined;
        };
        jQuery.fx.timer = function (timer) {
          jQuery.timers.push(timer);
          if (timer()) {
            jQuery.fx.start();
          } else {
            jQuery.timers.pop();
          }
        };
        jQuery.fx.interval = 13;
        jQuery.fx.start = function () {
          if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
          }
        };
        jQuery.fx.stop = function () {
          clearInterval(timerId);
          timerId = null;
        };
        jQuery.fx.speeds = {
          slow: 600,
          fast: 200,
          _default: 400
        };
        jQuery.fn.delay = function (time, type) {
          time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
          type = type || 'fx';
          return this.queue(type, function (next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function () {
              clearTimeout(timeout);
            };
          });
        };
        (function () {
          var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
          input.type = 'checkbox';
          support.checkOn = input.value !== '';
          support.optSelected = opt.selected;
          select.disabled = true;
          support.optDisabled = !opt.disabled;
          input = document.createElement('input');
          input.value = 't';
          input.type = 'radio';
          support.radioValue = input.value === 't';
        }());
        var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
        jQuery.fn.extend({
          attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
          },
          removeAttr: function (name) {
            return this.each(function () {
              jQuery.removeAttr(this, name);
            });
          }
        });
        jQuery.extend({
          attr: function (elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === strundefined) {
              return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              name = name.toLowerCase();
              hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
              if (value === null) {
                jQuery.removeAttr(elem, name);
              } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                return ret;
              } else {
                elem.setAttribute(name, value + '');
                return value;
              }
            } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            } else {
              ret = jQuery.find.attr(elem, name);
              return ret == null ? undefined : ret;
            }
          },
          removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                propName = jQuery.propFix[name] || name;
                if (jQuery.expr.match.bool.test(name)) {
                  elem[propName] = false;
                }
                elem.removeAttribute(name);
              }
            }
          },
          attrHooks: {
            type: {
              set: function (elem, value) {
                if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                  var val = elem.value;
                  elem.setAttribute('type', value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          }
        });
        boolHook = {
          set: function (elem, value, name) {
            if (value === false) {
              jQuery.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
          var getter = attrHandle[name] || jQuery.find.attr;
          attrHandle[name] = function (elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
              handle = attrHandle[name];
              attrHandle[name] = ret;
              ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
              attrHandle[name] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i;
        jQuery.fn.extend({
          prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
          },
          removeProp: function (name) {
            return this.each(function () {
              delete this[jQuery.propFix[name] || name];
            });
          }
        });
        jQuery.extend({
          propFix: {
            'for': 'htmlFor',
            'class': 'className'
          },
          prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
              name = jQuery.propFix[name] || name;
              hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
              return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            } else {
              return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
          },
          propHooks: {
            tabIndex: {
              get: function (elem) {
                return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
              }
            }
          }
        });
        if (!support.optSelected) {
          jQuery.propHooks.selected = {
            get: function (elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            }
          };
        }
        jQuery.each([
          'tabIndex',
          'readOnly',
          'maxLength',
          'cellSpacing',
          'cellPadding',
          'rowSpan',
          'colSpan',
          'useMap',
          'frameBorder',
          'contentEditable'
        ], function () {
          jQuery.propFix[this.toLowerCase()] = this;
        });
        var rclass = /[\t\r\n\f]/g;
        jQuery.fn.extend({
          addClass: function (value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === 'string' && value, i = 0, len = this.length;
            if (jQuery.isFunction(value)) {
              return this.each(function (j) {
                jQuery(this).addClass(value.call(this, j, this.className));
              });
            }
            if (proceed) {
              classes = (value || '').match(rnotwhite) || [];
              for (; i < len; i++) {
                elem = this[i];
                cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
                if (cur) {
                  j = 0;
                  while (clazz = classes[j++]) {
                    if (cur.indexOf(' ' + clazz + ' ') < 0) {
                      cur += clazz + ' ';
                    }
                  }
                  finalValue = jQuery.trim(cur);
                  if (elem.className !== finalValue) {
                    elem.className = finalValue;
                  }
                }
              }
            }
            return this;
          },
          removeClass: function (value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === 'string' && value, i = 0, len = this.length;
            if (jQuery.isFunction(value)) {
              return this.each(function (j) {
                jQuery(this).removeClass(value.call(this, j, this.className));
              });
            }
            if (proceed) {
              classes = (value || '').match(rnotwhite) || [];
              for (; i < len; i++) {
                elem = this[i];
                cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
                if (cur) {
                  j = 0;
                  while (clazz = classes[j++]) {
                    while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                      cur = cur.replace(' ' + clazz + ' ', ' ');
                    }
                  }
                  finalValue = value ? jQuery.trim(cur) : '';
                  if (elem.className !== finalValue) {
                    elem.className = finalValue;
                  }
                }
              }
            }
            return this;
          },
          toggleClass: function (value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === 'boolean' && type === 'string') {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
              return this.each(function (i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
              });
            }
            return this.each(function () {
              if (type === 'string') {
                var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
                while (className = classNames[i++]) {
                  if (self.hasClass(className)) {
                    self.removeClass(className);
                  } else {
                    self.addClass(className);
                  }
                }
              } else if (type === strundefined || type === 'boolean') {
                if (this.className) {
                  data_priv.set(this, '__className__', this.className);
                }
                this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
              }
            });
          },
          hasClass: function (selector) {
            var className = ' ' + selector + ' ', i = 0, l = this.length;
            for (; i < l; i++) {
              if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery.fn.extend({
          val: function (value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                  return ret;
                }
                ret = elem.value;
                return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
              }
              return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (isFunction) {
                val = value.call(this, i, jQuery(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = '';
              } else if (typeof val === 'number') {
                val += '';
              } else if (jQuery.isArray(val)) {
                val = jQuery.map(val, function (value) {
                  return value == null ? '' : value + '';
                });
              }
              hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                this.value = val;
              }
            });
          }
        });
        jQuery.extend({
          valHooks: {
            option: {
              get: function (elem) {
                var val = jQuery.find.attr(elem, 'value');
                return val != null ? val : jQuery.trim(jQuery.text(elem));
              }
            },
            select: {
              get: function (elem) {
                var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                for (; i < max; i++) {
                  option = options[i];
                  if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                    value = jQuery(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function (elem, value) {
                var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                while (i--) {
                  option = options[i];
                  if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery.each([
          'radio',
          'checkbox'
        ], function () {
          jQuery.valHooks[this] = {
            set: function (elem, value) {
              if (jQuery.isArray(value)) {
                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
              }
            }
          };
          if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
              return elem.getAttribute('value') === null ? 'on' : elem.value;
            };
          }
        });
        jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
          jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
          };
        });
        jQuery.fn.extend({
          hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
          },
          bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
          },
          unbind: function (types, fn) {
            return this.off(types, null, fn);
          },
          delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
          },
          undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
          }
        });
        var nonce = jQuery.now();
        var rquery = /\?/;
        jQuery.parseJSON = function (data) {
          return JSON.parse(data + '');
        };
        jQuery.parseXML = function (data) {
          var xml, tmp;
          if (!data || typeof data !== 'string') {
            return null;
          }
          try {
            tmp = new DOMParser();
            xml = tmp.parseFromString(data, 'text/xml');
          } catch (e) {
            xml = undefined;
          }
          if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
          }
          return xml;
        };
        var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = '*/'.concat('*');
        try {
          ajaxLocation = location.href;
        } catch (e) {
          ajaxLocation = document.createElement('a');
          ajaxLocation.href = '';
          ajaxLocation = ajaxLocation.href;
        }
        ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
        function addToPrefiltersOrTransports(structure) {
          return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
              func = dataTypeExpression;
              dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === '+') {
                  dataType = dataType.slice(1) || '*';
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== undefined) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
              ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === '*') {
                current = prev;
              } else if (prev !== '*' && prev !== current) {
                conv = converters[prev + ' ' + current] || converters['* ' + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(' ');
                    if (tmp[1] === current) {
                      conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s['throws']) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: 'parsererror',
                        error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                      };
                    }
                  }
                }
              }
            }
          }
          return {
            state: 'success',
            data: response
          };
        }
        jQuery.extend({
          active: 0,
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: ajaxLocation,
            type: 'GET',
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
              '*': allTypes,
              text: 'text/plain',
              html: 'text/html',
              xml: 'application/xml, text/xml',
              json: 'application/json, text/javascript'
            },
            contents: {
              xml: /xml/,
              html: /html/,
              json: /json/
            },
            responseFields: {
              xml: 'responseXML',
              text: 'responseText',
              json: 'responseJSON'
            },
            converters: {
              '* text': String,
              'text html': true,
              'text json': jQuery.parseJSON,
              'text xml': jQuery.parseXML
            },
            flatOptions: {
              url: true,
              context: true
            }
          },
          ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          ajax: function (url, options) {
            if (typeof url === 'object') {
              options = url;
              url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = 'canceled', jqXHR = {
                readyState: 0,
                getResponseHeader: function (key) {
                  var match;
                  if (state === 2) {
                    if (!responseHeaders) {
                      responseHeaders = {};
                      while (match = rheaders.exec(responseHeadersString)) {
                        responseHeaders[match[1].toLowerCase()] = match[2];
                      }
                    }
                    match = responseHeaders[key.toLowerCase()];
                  }
                  return match == null ? null : match;
                },
                getAllResponseHeaders: function () {
                  return state === 2 ? responseHeadersString : null;
                },
                setRequestHeader: function (name, value) {
                  var lname = name.toLowerCase();
                  if (!state) {
                    name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                    requestHeaders[name] = value;
                  }
                  return this;
                },
                overrideMimeType: function (type) {
                  if (!state) {
                    s.mimeType = type;
                  }
                  return this;
                },
                statusCode: function (map) {
                  var code;
                  if (map) {
                    if (state < 2) {
                      for (code in map) {
                        statusCode[code] = [
                          statusCode[code],
                          map[code]
                        ];
                      }
                    } else {
                      jqXHR.always(map[jqXHR.status]);
                    }
                  }
                  return this;
                },
                abort: function (statusText) {
                  var finalText = statusText || strAbort;
                  if (transport) {
                    transport.abort(finalText);
                  }
                  done(0, finalText);
                  return this;
                }
              };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
            if (s.crossDomain == null) {
              parts = rurl.exec(s.url.toLowerCase());
              s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
              s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
              return jqXHR;
            }
            fireGlobals = s.global;
            if (fireGlobals && jQuery.active++ === 0) {
              jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
              if (s.data) {
                cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + nonce++) : cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
              }
            }
            if (s.ifModified) {
              if (jQuery.lastModified[cacheURL]) {
                jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
              }
              if (jQuery.etag[cacheURL]) {
                jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
              return jqXHR.abort();
            }
            strAbort = 'abort';
            for (i in {
                success: 1,
                error: 1,
                complete: 1
              }) {
              jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
              done(-1, 'No Transport');
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger('ajaxSend', [
                  jqXHR,
                  s
                ]);
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = setTimeout(function () {
                  jqXHR.abort('timeout');
                }, s.timeout);
              }
              try {
                state = 1;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (state < 2) {
                  done(-1, e);
                } else {
                  throw e;
                }
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error, response, modified, statusText = nativeStatusText;
              if (state === 2) {
                return;
              }
              state = 2;
              if (timeoutTimer) {
                clearTimeout(timeoutTimer);
              }
              transport = undefined;
              responseHeadersString = headers || '';
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader('Last-Modified');
                  if (modified) {
                    jQuery.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader('etag');
                  if (modified) {
                    jQuery.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === 'HEAD') {
                  statusText = 'nocontent';
                } else if (status === 304) {
                  statusText = 'notmodified';
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                error = statusText;
                if (status || !statusText) {
                  statusText = 'error';
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + '';
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [
                  success,
                  statusText,
                  jqXHR
                ]);
              } else {
                deferred.rejectWith(callbackContext, [
                  jqXHR,
                  statusText,
                  error
                ]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = undefined;
              if (fireGlobals) {
                globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                  jqXHR,
                  s,
                  isSuccess ? success : error
                ]);
              }
              completeDeferred.fireWith(callbackContext, [
                jqXHR,
                statusText
              ]);
              if (fireGlobals) {
                globalEventContext.trigger('ajaxComplete', [
                  jqXHR,
                  s
                ]);
                if (!--jQuery.active) {
                  jQuery.event.trigger('ajaxStop');
                }
              }
            }
            return jqXHR;
          },
          getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
          },
          getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
          }
        });
        jQuery.each([
          'get',
          'post'
        ], function (i, method) {
          jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
              type = type || callback;
              callback = data;
              data = undefined;
            }
            return jQuery.ajax({
              url: url,
              type: method,
              dataType: type,
              data: data,
              success: callback
            });
          };
        });
        jQuery.each([
          'ajaxStart',
          'ajaxStop',
          'ajaxComplete',
          'ajaxError',
          'ajaxSuccess',
          'ajaxSend'
        ], function (i, type) {
          jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
          };
        });
        jQuery._evalUrl = function (url) {
          return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            async: false,
            global: false,
            'throws': true
          });
        };
        jQuery.fn.extend({
          wrapAll: function (html) {
            var wrap;
            if (jQuery.isFunction(html)) {
              return this.each(function (i) {
                jQuery(this).wrapAll(html.call(this, i));
              });
            }
            if (this[0]) {
              wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function () {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
              return this.each(function (i) {
                jQuery(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function () {
              var self = jQuery(this), contents = self.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self.append(html);
              }
            });
          },
          wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
              jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function () {
            return this.parent().each(function () {
              if (!jQuery.nodeName(this, 'body')) {
                jQuery(this).replaceWith(this.childNodes);
              }
            }).end();
          }
        });
        jQuery.expr.filters.hidden = function (elem) {
          return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
        };
        jQuery.expr.filters.visible = function (elem) {
          return !jQuery.expr.filters.hidden(elem);
        };
        var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add) {
          var name;
          if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
              if (traditional || rbracket.test(prefix)) {
                add(prefix, v);
              } else {
                buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
              }
            });
          } else if (!traditional && jQuery.type(obj) === 'object') {
            for (name in obj) {
              buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
          } else {
            add(prefix, obj);
          }
        }
        jQuery.param = function (a, traditional) {
          var prefix, s = [], add = function (key, value) {
              value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
              s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
            };
          if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
          }
          if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
              add(this.name, this.value);
            });
          } else {
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add);
            }
          }
          return s.join('&').replace(r20, '+');
        };
        jQuery.fn.extend({
          serialize: function () {
            return jQuery.param(this.serializeArray());
          },
          serializeArray: function () {
            return this.map(function () {
              var elements = jQuery.prop(this, 'elements');
              return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
              var type = this.type;
              return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
              var val = jQuery(this).val();
              return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                return {
                  name: elem.name,
                  value: val.replace(rCRLF, '\r\n')
                };
              }) : {
                name: elem.name,
                value: val.replace(rCRLF, '\r\n')
              };
            }).get();
          }
        });
        jQuery.ajaxSettings.xhr = function () {
          try {
            return new XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
            0: 200,
            1223: 204
          }, xhrSupported = jQuery.ajaxSettings.xhr();
        if (window.ActiveXObject) {
          jQuery(window).on('unload', function () {
            for (var key in xhrCallbacks) {
              xhrCallbacks[key]();
            }
          });
        }
        support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery.ajaxTransport(function (options) {
          var callback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function (headers, complete) {
                var i, xhr = options.xhr(), id = ++xhrId;
                xhr.open(options.type, options.url, options.async, options.username, options.password);
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers['X-Requested-With']) {
                  headers['X-Requested-With'] = 'XMLHttpRequest';
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function (type) {
                  return function () {
                    if (callback) {
                      delete xhrCallbacks[id];
                      callback = xhr.onload = xhr.onerror = null;
                      if (type === 'abort') {
                        xhr.abort();
                      } else if (type === 'error') {
                        complete(xhr.status, xhr.statusText);
                      } else {
                        complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                      }
                    }
                  };
                };
                xhr.onload = callback();
                xhr.onerror = callback('error');
                callback = xhrCallbacks[id] = callback('abort');
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function () {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery.ajaxSetup({
          accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
          contents: { script: /(?:java|ecma)script/ },
          converters: {
            'text script': function (text) {
              jQuery.globalEval(text);
              return text;
            }
          }
        });
        jQuery.ajaxPrefilter('script', function (s) {
          if (s.cache === undefined) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = 'GET';
          }
        });
        jQuery.ajaxTransport('script', function (s) {
          if (s.crossDomain) {
            var script, callback;
            return {
              send: function (_, complete) {
                script = jQuery('<script>').prop({
                  async: true,
                  charset: s.scriptCharset,
                  src: s.url
                }).on('load error', callback = function (evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === 'error' ? 404 : 200, evt.type);
                  }
                });
                document.head.appendChild(script[0]);
              },
              abort: function () {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery.ajaxSetup({
          jsonp: 'callback',
          jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
          if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
              if (!responseContainer) {
                jQuery.error(callbackName + ' was not called');
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
              responseContainer = arguments;
            };
            jqXHR.always(function () {
              window[callbackName] = overwritten;
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && jQuery.isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = undefined;
            });
            return 'script';
          }
        });
        jQuery.parseHTML = function (data, context, keepScripts) {
          if (!data || typeof data !== 'string') {
            return null;
          }
          if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
          }
          context = context || document;
          var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = jQuery.buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery(scripts).remove();
          }
          return jQuery.merge([], parsed.childNodes);
        };
        var _load = jQuery.fn.load;
        jQuery.fn.load = function (url, params, callback) {
          if (typeof url !== 'string' && _load) {
            return _load.apply(this, arguments);
          }
          var selector, type, response, self = this, off = url.indexOf(' ');
          if (off >= 0) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
          }
          if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
          } else if (params && typeof params === 'object') {
            type = 'POST';
          }
          if (self.length > 0) {
            jQuery.ajax({
              url: url,
              type: type,
              dataType: 'html',
              data: params
            }).done(function (responseText) {
              response = arguments;
              self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).complete(callback && function (jqXHR, status) {
              self.each(callback, response || [
                jqXHR.responseText,
                status,
                jqXHR
              ]);
            });
          }
          return this;
        };
        jQuery.expr.filters.animated = function (elem) {
          return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
          }).length;
        };
        var docElem = window.document.documentElement;
        function getWindow(elem) {
          return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
        }
        jQuery.offset = {
          setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
            if (position === 'static') {
              elem.style.position = 'relative';
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, 'top');
            curCSSLeft = jQuery.css(elem, 'left');
            calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
              options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery.fn.extend({
          offset: function (options) {
            if (arguments.length) {
              return options === undefined ? this : this.each(function (i) {
                jQuery.offset.setOffset(this, options, i);
              });
            }
            var docElem, win, elem = this[0], box = {
                top: 0,
                left: 0
              }, doc = elem && elem.ownerDocument;
            if (!doc) {
              return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
              return box;
            }
            if (typeof elem.getBoundingClientRect !== strundefined) {
              box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
              top: box.top + win.pageYOffset - docElem.clientTop,
              left: box.left + win.pageXOffset - docElem.clientLeft
            };
          },
          position: function () {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset, elem = this[0], parentOffset = {
                top: 0,
                left: 0
              };
            if (jQuery.css(elem, 'position') === 'fixed') {
              offset = elem.getBoundingClientRect();
            } else {
              offsetParent = this.offsetParent();
              offset = this.offset();
              if (!jQuery.nodeName(offsetParent[0], 'html')) {
                parentOffset = offsetParent.offset();
              }
              parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
              parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
            }
            return {
              top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
              left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
          },
          offsetParent: function () {
            return this.map(function () {
              var offsetParent = this.offsetParent || docElem;
              while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || docElem;
            });
          }
        });
        jQuery.each({
          scrollLeft: 'pageXOffset',
          scrollTop: 'pageYOffset'
        }, function (method, prop) {
          var top = 'pageYOffset' === prop;
          jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
              var win = getWindow(elem);
              if (val === undefined) {
                return win ? win[prop] : elem[method];
              }
              if (win) {
                win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
              } else {
                elem[method] = val;
              }
            }, method, val, arguments.length, null);
          };
        });
        jQuery.each([
          'top',
          'left'
        ], function (i, prop) {
          jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);
              return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
          });
        });
        jQuery.each({
          Height: 'height',
          Width: 'width'
        }, function (name, type) {
          jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
          }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
              return access(this, function (elem, type, value) {
                var doc;
                if (jQuery.isWindow(elem)) {
                  return elem.document.documentElement['client' + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                }
                return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
              }, type, chainable ? margin : undefined, chainable, null);
            };
          });
        });
        jQuery.fn.size = function () {
          return this.length;
        };
        jQuery.fn.andSelf = jQuery.fn.addBack;
        if (typeof define === 'function' && define.amd) {
          define('jquery', [], function () {
            return jQuery;
          });
        }
        var _jQuery = window.jQuery, _$ = window.$;
        jQuery.noConflict = function (deep) {
          if (window.$ === jQuery) {
            window.$ = _$;
          }
          if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
          }
          return jQuery;
        };
        if (typeof noGlobal === strundefined) {
          window.jQuery = window.$ = jQuery;
        }
        return jQuery;
      }));
    },
    {}
  ],
  16: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function (require) {
          var makePromise = require('./makePromise');
          var Scheduler = require('./Scheduler');
          var async = require('./async');
          return makePromise({ scheduler: new Scheduler(async) });
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    {
      './Scheduler': 18,
      './async': 20,
      './makePromise': 30
    }
  ],
  17: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          function Queue(capacityPow2) {
            this.head = this.tail = this.length = 0;
            this.buffer = new Array(1 << capacityPow2);
          }
          Queue.prototype.push = function (x) {
            if (this.length === this.buffer.length) {
              this._ensureCapacity(this.length * 2);
            }
            this.buffer[this.tail] = x;
            this.tail = this.tail + 1 & this.buffer.length - 1;
            ++this.length;
            return this.length;
          };
          Queue.prototype.shift = function () {
            var x = this.buffer[this.head];
            this.buffer[this.head] = void 0;
            this.head = this.head + 1 & this.buffer.length - 1;
            --this.length;
            return x;
          };
          Queue.prototype._ensureCapacity = function (capacity) {
            var head = this.head;
            var buffer = this.buffer;
            var newBuffer = new Array(capacity);
            var i = 0;
            var len;
            if (head === 0) {
              len = this.length;
              for (; i < len; ++i) {
                newBuffer[i] = buffer[i];
              }
            } else {
              capacity = buffer.length;
              len = this.tail;
              for (; head < capacity; ++i, ++head) {
                newBuffer[i] = buffer[head];
              }
              for (head = 0; head < len; ++i, ++head) {
                newBuffer[i] = buffer[head];
              }
            }
            this.buffer = newBuffer;
            this.head = 0;
            this.tail = this.length;
          };
          return Queue;
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  18: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function (require) {
          var Queue = require('./Queue');
          function Scheduler(async) {
            this._async = async;
            this._queue = new Queue(15);
            this._afterQueue = new Queue(5);
            this._running = false;
            var self = this;
            this.drain = function () {
              self._drain();
            };
          }
          Scheduler.prototype.enqueue = function (task) {
            this._add(this._queue, task);
          };
          Scheduler.prototype.afterQueue = function (task) {
            this._add(this._afterQueue, task);
          };
          Scheduler.prototype._drain = function () {
            runQueue(this._queue);
            this._running = false;
            runQueue(this._afterQueue);
          };
          Scheduler.prototype._add = function (queue, task) {
            queue.push(task);
            if (!this._running) {
              this._running = true;
              this._async(this.drain);
            }
          };
          function runQueue(queue) {
            while (queue.length > 0) {
              queue.shift().run();
            }
          }
          return Scheduler;
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    { './Queue': 17 }
  ],
  19: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          function TimeoutError(message) {
            Error.call(this);
            this.message = message;
            this.name = TimeoutError.name;
            if (typeof Error.captureStackTrace === 'function') {
              Error.captureStackTrace(this, TimeoutError);
            }
          }
          TimeoutError.prototype = Object.create(Error.prototype);
          TimeoutError.prototype.constructor = TimeoutError;
          return TimeoutError;
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  20: [
    function (require, module, exports) {
      (function (process) {
        (function (define) {
          'use strict';
          define(function (require) {
            var nextTick, MutationObs;
            if (typeof process !== 'undefined' && process !== null && typeof process.nextTick === 'function') {
              nextTick = function (f) {
                process.nextTick(f);
              };
            } else if (MutationObs = typeof MutationObserver === 'function' && MutationObserver || typeof WebKitMutationObserver === 'function' && WebKitMutationObserver) {
              nextTick = function (document, MutationObserver) {
                var scheduled;
                var el = document.createElement('div');
                var o = new MutationObserver(run);
                o.observe(el, { attributes: true });
                function run() {
                  var f = scheduled;
                  scheduled = void 0;
                  f();
                }
                return function (f) {
                  scheduled = f;
                  el.setAttribute('class', 'x');
                };
              }(document, MutationObs);
            } else {
              nextTick = function (cjsRequire) {
                var vertx;
                try {
                  vertx = cjsRequire('vertx');
                } catch (ignore) {
                }
                if (vertx) {
                  if (typeof vertx.runOnLoop === 'function') {
                    return vertx.runOnLoop;
                  }
                  if (typeof vertx.runOnContext === 'function') {
                    return vertx.runOnContext;
                  }
                }
                var capturedSetTimeout = setTimeout;
                return function (t) {
                  capturedSetTimeout(t, 0);
                };
              }(require);
            }
            return nextTick;
          });
        }(typeof define === 'function' && define.amd ? define : function (factory) {
          module.exports = factory(require);
        }));
      }.call(this, require('_process')));
    },
    { _process: 11 }
  ],
  21: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function array(Promise) {
            var arrayReduce = Array.prototype.reduce;
            var arrayReduceRight = Array.prototype.reduceRight;
            var toPromise = Promise.resolve;
            var all = Promise.all;
            Promise.any = any;
            Promise.some = some;
            Promise.settle = settle;
            Promise.map = map;
            Promise.filter = filter;
            Promise.reduce = reduce;
            Promise.reduceRight = reduceRight;
            Promise.prototype.spread = function (onFulfilled) {
              return this.then(all).then(function (array) {
                return onFulfilled.apply(void 0, array);
              });
            };
            return Promise;
            function any(promises) {
              return new Promise(function (resolve, reject) {
                var errors = [];
                var pending = initRace(promises, resolve, handleReject);
                if (pending === 0) {
                  reject(new RangeError('any() input must not be empty'));
                }
                function handleReject(e) {
                  errors.push(e);
                  if (--pending === 0) {
                    reject(errors);
                  }
                }
              });
            }
            function some(promises, n) {
              return new Promise(function (resolve, reject, notify) {
                var results = [];
                var errors = [];
                var nReject;
                var nFulfill = initRace(promises, handleResolve, handleReject, notify);
                n = Math.max(n, 0);
                nReject = nFulfill - n + 1;
                nFulfill = Math.min(n, nFulfill);
                if (n > nFulfill) {
                  reject(new RangeError('some() input must contain at least ' + n + ' element(s), but had ' + nFulfill));
                } else if (nFulfill === 0) {
                  resolve(results);
                }
                function handleResolve(x) {
                  if (nFulfill > 0) {
                    --nFulfill;
                    results.push(x);
                    if (nFulfill === 0) {
                      resolve(results);
                    }
                  }
                }
                function handleReject(e) {
                  if (nReject > 0) {
                    --nReject;
                    errors.push(e);
                    if (nReject === 0) {
                      reject(errors);
                    }
                  }
                }
              });
            }
            function initRace(promises, resolve, reject, notify) {
              return arrayReduce.call(promises, function (pending, p) {
                toPromise(p).then(resolve, reject, notify);
                return pending + 1;
              }, 0);
            }
            function map(promises, f) {
              if (typeof promises !== 'object') {
                return toPromise([]);
              }
              return all(mapArray(function (x, i) {
                return toPromise(x).fold(mapWithIndex, i);
              }, promises));
              function mapWithIndex(k, x) {
                return f(x, k);
              }
            }
            function filter(promises, predicate) {
              return all(promises).then(function (values) {
                return all(mapArray(predicate, values)).then(function (results) {
                  var len = results.length;
                  var filtered = new Array(len);
                  for (var i = 0, j = 0, x; i < len; ++i) {
                    x = results[i];
                    if (x === void 0 && !(i in results)) {
                      continue;
                    }
                    if (results[i]) {
                      filtered[j++] = values[i];
                    }
                  }
                  filtered.length = j;
                  return filtered;
                });
              });
            }
            function settle(promises) {
              return all(mapArray(function (p) {
                p = toPromise(p);
                return p.then(inspect, inspect);
                function inspect() {
                  return p.inspect();
                }
              }, promises));
            }
            function reduce(promises, f) {
              var reducer = makeReducer(f);
              return arguments.length > 2 ? arrayReduce.call(promises, reducer, arguments[2]) : arrayReduce.call(promises, reducer);
            }
            function reduceRight(promises, f) {
              var reducer = makeReducer(f);
              return arguments.length > 2 ? arrayReduceRight.call(promises, reducer, arguments[2]) : arrayReduceRight.call(promises, reducer);
            }
            function makeReducer(f) {
              return function reducer(result, x, i) {
                return toPromise(result).then(function (r) {
                  return toPromise(x).then(function (x) {
                    return f(r, x, i);
                  });
                });
              };
            }
            function mapArray(f, a) {
              var l = a.length;
              var b = new Array(l);
              for (var i = 0, x; i < l; ++i) {
                x = a[i];
                if (x === void 0 && !(i in a)) {
                  continue;
                }
                b[i] = f(a[i], i);
              }
              return b;
            }
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  22: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function flow(Promise) {
            var resolve = Promise.resolve;
            var reject = Promise.reject;
            var origCatch = Promise.prototype['catch'];
            Promise.prototype.done = function (onResult, onError) {
              this._handler.visit(this._handler.receiver, onResult, onError);
            };
            Promise.prototype['catch'] = Promise.prototype.otherwise = function (onRejected) {
              if (arguments.length < 2) {
                return origCatch.call(this, onRejected);
              } else {
                if (typeof onRejected !== 'function') {
                  return this.ensure(rejectInvalidPredicate);
                }
                return origCatch.call(this, createCatchFilter(arguments[1], onRejected));
              }
            };
            function createCatchFilter(handler, predicate) {
              return function (e) {
                return evaluatePredicate(e, predicate) ? handler.call(this, e) : reject(e);
              };
            }
            Promise.prototype['finally'] = Promise.prototype.ensure = function (handler) {
              if (typeof handler !== 'function') {
                return this;
              }
              return this.then(function (x) {
                return runSideEffect(handler, this, identity, x);
              }, function (e) {
                return runSideEffect(handler, this, reject, e);
              });
            };
            function runSideEffect(handler, thisArg, propagate, value) {
              var result = handler.call(thisArg);
              return maybeThenable(result) ? propagateValue(result, propagate, value) : propagate(value);
            }
            function propagateValue(result, propagate, x) {
              return resolve(result).then(function () {
                return propagate(x);
              });
            }
            Promise.prototype['else'] = Promise.prototype.orElse = function (defaultValue) {
              return this.then(void 0, function () {
                return defaultValue;
              });
            };
            Promise.prototype['yield'] = function (value) {
              return this.then(function () {
                return value;
              });
            };
            Promise.prototype.tap = function (onFulfilledSideEffect) {
              return this.then(onFulfilledSideEffect)['yield'](this);
            };
            return Promise;
          };
          function rejectInvalidPredicate() {
            throw new TypeError('catch predicate must be a function');
          }
          function evaluatePredicate(e, predicate) {
            return isError(predicate) ? e instanceof predicate : predicate(e);
          }
          function isError(predicate) {
            return predicate === Error || predicate != null && predicate.prototype instanceof Error;
          }
          function maybeThenable(x) {
            return (typeof x === 'object' || typeof x === 'function') && x !== null;
          }
          function identity(x) {
            return x;
          }
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  23: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function fold(Promise) {
            Promise.prototype.fold = function (f, z) {
              var promise = this._beget();
              this._handler.fold(function (z, x, to) {
                Promise._handler(z).fold(function (x, z, to) {
                  to.resolve(f.call(this, z, x));
                }, x, this, to);
              }, z, promise._handler.receiver, promise._handler);
              return promise;
            };
            return Promise;
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  24: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function inspection(Promise) {
            Promise.prototype.inspect = function () {
              return inspect(Promise._handler(this));
            };
            function inspect(handler) {
              var state = handler.state();
              if (state === 0) {
                return { state: 'pending' };
              }
              if (state > 0) {
                return {
                  state: 'fulfilled',
                  value: handler.value
                };
              }
              return {
                state: 'rejected',
                reason: handler.value
              };
            }
            return Promise;
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  25: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function generate(Promise) {
            var resolve = Promise.resolve;
            Promise.iterate = iterate;
            Promise.unfold = unfold;
            return Promise;
            function iterate(f, condition, handler, x) {
              return unfold(function (x) {
                return [
                  x,
                  f(x)
                ];
              }, condition, handler, x);
            }
            function unfold(unspool, condition, handler, x) {
              return resolve(x).then(function (seed) {
                return resolve(condition(seed)).then(function (done) {
                  return done ? seed : resolve(unspool(seed)).spread(next);
                });
              });
              function next(item, newSeed) {
                return resolve(handler(item)).then(function () {
                  return unfold(unspool, condition, handler, newSeed);
                });
              }
            }
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  26: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function progress(Promise) {
            Promise.prototype.progress = function (onProgress) {
              return this.then(void 0, void 0, onProgress);
            };
            return Promise;
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  27: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function (require) {
          var timer = require('../timer');
          var TimeoutError = require('../TimeoutError');
          function setTimeout(f, ms, x, y) {
            return timer.set(function () {
              f(x, y, ms);
            }, ms);
          }
          return function timed(Promise) {
            Promise.prototype.delay = function (ms) {
              var p = this._beget();
              this._handler.fold(handleDelay, ms, void 0, p._handler);
              return p;
            };
            function handleDelay(ms, x, h) {
              setTimeout(resolveDelay, ms, x, h);
            }
            function resolveDelay(x, h) {
              h.resolve(x);
            }
            Promise.prototype.timeout = function (ms, reason) {
              var p = this._beget();
              var h = p._handler;
              var t = setTimeout(onTimeout, ms, reason, p._handler);
              this._handler.visit(h, function onFulfill(x) {
                timer.clear(t);
                this.resolve(x);
              }, function onReject(x) {
                timer.clear(t);
                this.reject(x);
              }, h.notify);
              return p;
            };
            function onTimeout(reason, h, ms) {
              var e = typeof reason === 'undefined' ? new TimeoutError('timed out after ' + ms + 'ms') : reason;
              h.reject(e);
            }
            return Promise;
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    {
      '../TimeoutError': 19,
      '../timer': 31
    }
  ],
  28: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function (require) {
          var timer = require('../timer');
          return function unhandledRejection(Promise) {
            var logError = noop;
            var logInfo = noop;
            if (typeof console !== 'undefined') {
              logError = typeof console.error !== 'undefined' ? function (e) {
                console.error(e);
              } : function (e) {
                console.log(e);
              };
              logInfo = typeof console.info !== 'undefined' ? function (e) {
                console.info(e);
              } : function (e) {
                console.log(e);
              };
            }
            Promise.onPotentiallyUnhandledRejection = function (rejection) {
              enqueue(report, rejection);
            };
            Promise.onPotentiallyUnhandledRejectionHandled = function (rejection) {
              enqueue(unreport, rejection);
            };
            Promise.onFatalRejection = function (rejection) {
              enqueue(throwit, rejection.value);
            };
            var tasks = [];
            var reported = [];
            var running = false;
            function report(r) {
              if (!r.handled) {
                reported.push(r);
                logError('Potentially unhandled rejection [' + r.id + '] ' + formatError(r.value));
              }
            }
            function unreport(r) {
              var i = reported.indexOf(r);
              if (i >= 0) {
                reported.splice(i, 1);
                logInfo('Handled previous rejection [' + r.id + '] ' + formatObject(r.value));
              }
            }
            function enqueue(f, x) {
              tasks.push(f, x);
              if (!running) {
                running = true;
                running = timer.set(flush, 0);
              }
            }
            function flush() {
              running = false;
              while (tasks.length > 0) {
                tasks.shift()(tasks.shift());
              }
            }
            return Promise;
          };
          function formatError(e) {
            var s = typeof e === 'object' && e.stack ? e.stack : formatObject(e);
            return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
          }
          function formatObject(o) {
            var s = String(o);
            if (s === '[object Object]' && typeof JSON !== 'undefined') {
              s = tryStringify(o, s);
            }
            return s;
          }
          function tryStringify(e, defaultValue) {
            try {
              return JSON.stringify(e);
            } catch (e) {
              return defaultValue;
            }
          }
          function throwit(e) {
            throw e;
          }
          function noop() {
          }
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    { '../timer': 31 }
  ],
  29: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function addWith(Promise) {
            Promise.prototype['with'] = Promise.prototype.withThis = function (receiver) {
              var p = this._beget();
              var child = p._handler;
              child.receiver = receiver;
              this._handler.chain(child, receiver);
              return p;
            };
            return Promise;
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  30: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function () {
          return function makePromise(environment) {
            var tasks = environment.scheduler;
            var objectCreate = Object.create || function (proto) {
                function Child() {
                }
                Child.prototype = proto;
                return new Child();
              };
            function Promise(resolver, handler) {
              this._handler = resolver === Handler ? handler : init(resolver);
            }
            function init(resolver) {
              var handler = new Pending();
              try {
                resolver(promiseResolve, promiseReject, promiseNotify);
              } catch (e) {
                promiseReject(e);
              }
              return handler;
              function promiseResolve(x) {
                handler.resolve(x);
              }
              function promiseReject(reason) {
                handler.reject(reason);
              }
              function promiseNotify(x) {
                handler.notify(x);
              }
            }
            Promise.resolve = resolve;
            Promise.reject = reject;
            Promise.never = never;
            Promise._defer = defer;
            Promise._handler = getHandler;
            function resolve(x) {
              return isPromise(x) ? x : new Promise(Handler, new Async(getHandler(x)));
            }
            function reject(x) {
              return new Promise(Handler, new Async(new Rejected(x)));
            }
            function never() {
              return foreverPendingPromise;
            }
            function defer() {
              return new Promise(Handler, new Pending());
            }
            Promise.prototype.then = function (onFulfilled, onRejected) {
              var parent = this._handler;
              var state = parent.join().state();
              if (typeof onFulfilled !== 'function' && state > 0 || typeof onRejected !== 'function' && state < 0) {
                return new this.constructor(Handler, parent);
              }
              var p = this._beget();
              var child = p._handler;
              parent.chain(child, parent.receiver, onFulfilled, onRejected, arguments.length > 2 ? arguments[2] : void 0);
              return p;
            };
            Promise.prototype['catch'] = function (onRejected) {
              return this.then(void 0, onRejected);
            };
            Promise.prototype._beget = function () {
              var parent = this._handler;
              var child = new Pending(parent.receiver, parent.join().context);
              return new this.constructor(Handler, child);
            };
            Promise.all = all;
            Promise.race = race;
            function all(promises) {
              var resolver = new Pending();
              var pending = promises.length >>> 0;
              var results = new Array(pending);
              var i, h, x, s;
              for (i = 0; i < promises.length; ++i) {
                x = promises[i];
                if (x === void 0 && !(i in promises)) {
                  --pending;
                  continue;
                }
                if (maybeThenable(x)) {
                  h = getHandlerMaybeThenable(x);
                  s = h.state();
                  if (s === 0) {
                    h.fold(settleAt, i, results, resolver);
                  } else if (s > 0) {
                    results[i] = h.value;
                    --pending;
                  } else {
                    unreportRemaining(promises, i + 1, h);
                    resolver.become(h);
                    break;
                  }
                } else {
                  results[i] = x;
                  --pending;
                }
              }
              if (pending === 0) {
                resolver.become(new Fulfilled(results));
              }
              return new Promise(Handler, resolver);
              function settleAt(i, x, resolver) {
                this[i] = x;
                if (--pending === 0) {
                  resolver.become(new Fulfilled(this));
                }
              }
            }
            function unreportRemaining(promises, start, rejectedHandler) {
              var i, h, x;
              for (i = start; i < promises.length; ++i) {
                x = promises[i];
                if (maybeThenable(x)) {
                  h = getHandlerMaybeThenable(x);
                  if (h !== rejectedHandler) {
                    h.visit(h, void 0, h._unreport);
                  }
                }
              }
            }
            function race(promises) {
              if (Object(promises) === promises && promises.length === 0) {
                return never();
              }
              var h = new Pending();
              var i, x;
              for (i = 0; i < promises.length; ++i) {
                x = promises[i];
                if (x !== void 0 && i in promises) {
                  getHandler(x).visit(h, h.resolve, h.reject);
                }
              }
              return new Promise(Handler, h);
            }
            function getHandler(x) {
              if (isPromise(x)) {
                return x._handler.join();
              }
              return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
            }
            function getHandlerMaybeThenable(x) {
              return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
            }
            function getHandlerUntrusted(x) {
              try {
                var untrustedThen = x.then;
                return typeof untrustedThen === 'function' ? new Thenable(untrustedThen, x) : new Fulfilled(x);
              } catch (e) {
                return new Rejected(e);
              }
            }
            function Handler() {
            }
            Handler.prototype.when = Handler.prototype.become = Handler.prototype.notify = Handler.prototype.fail = Handler.prototype._unreport = Handler.prototype._report = noop;
            Handler.prototype._state = 0;
            Handler.prototype.state = function () {
              return this._state;
            };
            Handler.prototype.join = function () {
              var h = this;
              while (h.handler !== void 0) {
                h = h.handler;
              }
              return h;
            };
            Handler.prototype.chain = function (to, receiver, fulfilled, rejected, progress) {
              this.when({
                resolver: to,
                receiver: receiver,
                fulfilled: fulfilled,
                rejected: rejected,
                progress: progress
              });
            };
            Handler.prototype.visit = function (receiver, fulfilled, rejected, progress) {
              this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
            };
            Handler.prototype.fold = function (f, z, c, to) {
              this.visit(to, function (x) {
                f.call(c, z, x, this);
              }, to.reject, to.notify);
            };
            function FailIfRejected() {
            }
            inherit(Handler, FailIfRejected);
            FailIfRejected.prototype.become = function (h) {
              h.fail();
            };
            var failIfRejected = new FailIfRejected();
            function Pending(receiver, inheritedContext) {
              Promise.createContext(this, inheritedContext);
              this.consumers = void 0;
              this.receiver = receiver;
              this.handler = void 0;
              this.resolved = false;
            }
            inherit(Handler, Pending);
            Pending.prototype._state = 0;
            Pending.prototype.resolve = function (x) {
              this.become(getHandler(x));
            };
            Pending.prototype.reject = function (x) {
              if (this.resolved) {
                return;
              }
              this.become(new Rejected(x));
            };
            Pending.prototype.join = function () {
              if (!this.resolved) {
                return this;
              }
              var h = this;
              while (h.handler !== void 0) {
                h = h.handler;
                if (h === this) {
                  return this.handler = cycle();
                }
              }
              return h;
            };
            Pending.prototype.run = function () {
              var q = this.consumers;
              var handler = this.join();
              this.consumers = void 0;
              for (var i = 0; i < q.length; ++i) {
                handler.when(q[i]);
              }
            };
            Pending.prototype.become = function (handler) {
              if (this.resolved) {
                return;
              }
              this.resolved = true;
              this.handler = handler;
              if (this.consumers !== void 0) {
                tasks.enqueue(this);
              }
              if (this.context !== void 0) {
                handler._report(this.context);
              }
            };
            Pending.prototype.when = function (continuation) {
              if (this.resolved) {
                tasks.enqueue(new ContinuationTask(continuation, this.handler));
              } else {
                if (this.consumers === void 0) {
                  this.consumers = [continuation];
                } else {
                  this.consumers.push(continuation);
                }
              }
            };
            Pending.prototype.notify = function (x) {
              if (!this.resolved) {
                tasks.enqueue(new ProgressTask(x, this));
              }
            };
            Pending.prototype.fail = function (context) {
              var c = typeof context === 'undefined' ? this.context : context;
              this.resolved && this.handler.join().fail(c);
            };
            Pending.prototype._report = function (context) {
              this.resolved && this.handler.join()._report(context);
            };
            Pending.prototype._unreport = function () {
              this.resolved && this.handler.join()._unreport();
            };
            function Async(handler) {
              this.handler = handler;
            }
            inherit(Handler, Async);
            Async.prototype.when = function (continuation) {
              tasks.enqueue(new ContinuationTask(continuation, this));
            };
            Async.prototype._report = function (context) {
              this.join()._report(context);
            };
            Async.prototype._unreport = function () {
              this.join()._unreport();
            };
            function Thenable(then, thenable) {
              Pending.call(this);
              tasks.enqueue(new AssimilateTask(then, thenable, this));
            }
            inherit(Pending, Thenable);
            function Fulfilled(x) {
              Promise.createContext(this);
              this.value = x;
            }
            inherit(Handler, Fulfilled);
            Fulfilled.prototype._state = 1;
            Fulfilled.prototype.fold = function (f, z, c, to) {
              runContinuation3(f, z, this, c, to);
            };
            Fulfilled.prototype.when = function (cont) {
              runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
            };
            var errorId = 0;
            function Rejected(x) {
              Promise.createContext(this);
              this.id = ++errorId;
              this.value = x;
              this.handled = false;
              this.reported = false;
              this._report();
            }
            inherit(Handler, Rejected);
            Rejected.prototype._state = -1;
            Rejected.prototype.fold = function (f, z, c, to) {
              to.become(this);
            };
            Rejected.prototype.when = function (cont) {
              if (typeof cont.rejected === 'function') {
                this._unreport();
              }
              runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
            };
            Rejected.prototype._report = function (context) {
              tasks.afterQueue(new ReportTask(this, context));
            };
            Rejected.prototype._unreport = function () {
              this.handled = true;
              tasks.afterQueue(new UnreportTask(this));
            };
            Rejected.prototype.fail = function (context) {
              Promise.onFatalRejection(this, context === void 0 ? this.context : context);
            };
            function ReportTask(rejection, context) {
              this.rejection = rejection;
              this.context = context;
            }
            ReportTask.prototype.run = function () {
              if (!this.rejection.handled) {
                this.rejection.reported = true;
                Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
              }
            };
            function UnreportTask(rejection) {
              this.rejection = rejection;
            }
            UnreportTask.prototype.run = function () {
              if (this.rejection.reported) {
                Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
              }
            };
            Promise.createContext = Promise.enterContext = Promise.exitContext = Promise.onPotentiallyUnhandledRejection = Promise.onPotentiallyUnhandledRejectionHandled = Promise.onFatalRejection = noop;
            var foreverPendingHandler = new Handler();
            var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);
            function cycle() {
              return new Rejected(new TypeError('Promise cycle'));
            }
            function ContinuationTask(continuation, handler) {
              this.continuation = continuation;
              this.handler = handler;
            }
            ContinuationTask.prototype.run = function () {
              this.handler.join().when(this.continuation);
            };
            function ProgressTask(value, handler) {
              this.handler = handler;
              this.value = value;
            }
            ProgressTask.prototype.run = function () {
              var q = this.handler.consumers;
              if (q === void 0) {
                return;
              }
              for (var c, i = 0; i < q.length; ++i) {
                c = q[i];
                runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
              }
            };
            function AssimilateTask(then, thenable, resolver) {
              this._then = then;
              this.thenable = thenable;
              this.resolver = resolver;
            }
            AssimilateTask.prototype.run = function () {
              var h = this.resolver;
              tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);
              function _resolve(x) {
                h.resolve(x);
              }
              function _reject(x) {
                h.reject(x);
              }
              function _notify(x) {
                h.notify(x);
              }
            };
            function tryAssimilate(then, thenable, resolve, reject, notify) {
              try {
                then.call(thenable, resolve, reject, notify);
              } catch (e) {
                reject(e);
              }
            }
            function isPromise(x) {
              return x instanceof Promise;
            }
            function maybeThenable(x) {
              return (typeof x === 'object' || typeof x === 'function') && x !== null;
            }
            function runContinuation1(f, h, receiver, next) {
              if (typeof f !== 'function') {
                return next.become(h);
              }
              Promise.enterContext(h);
              tryCatchReject(f, h.value, receiver, next);
              Promise.exitContext();
            }
            function runContinuation3(f, x, h, receiver, next) {
              if (typeof f !== 'function') {
                return next.become(h);
              }
              Promise.enterContext(h);
              tryCatchReject3(f, x, h.value, receiver, next);
              Promise.exitContext();
            }
            function runNotify(f, x, h, receiver, next) {
              if (typeof f !== 'function') {
                return next.notify(x);
              }
              Promise.enterContext(h);
              tryCatchReturn(f, x, receiver, next);
              Promise.exitContext();
            }
            function tryCatchReject(f, x, thisArg, next) {
              try {
                next.become(getHandler(f.call(thisArg, x)));
              } catch (e) {
                next.become(new Rejected(e));
              }
            }
            function tryCatchReject3(f, x, y, thisArg, next) {
              try {
                f.call(thisArg, x, y, next);
              } catch (e) {
                next.become(new Rejected(e));
              }
            }
            function tryCatchReturn(f, x, thisArg, next) {
              try {
                next.notify(f.call(thisArg, x));
              } catch (e) {
                next.notify(e);
              }
            }
            function inherit(Parent, Child) {
              Child.prototype = objectCreate(Parent.prototype);
              Child.prototype.constructor = Child;
            }
            function noop() {
            }
            return Promise;
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory();
      }));
    },
    {}
  ],
  31: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function (require) {
          var cjsRequire, vertx, setTimer, clearTimer;
          cjsRequire = require;
          try {
            vertx = cjsRequire('vertx');
          } catch (e) {
          }
          if (vertx && typeof vertx.setTimer === 'function') {
            setTimer = function (f, ms) {
              return vertx.setTimer(ms, f);
            };
            clearTimer = vertx.cancelTimer;
          } else {
            setTimer = function (f, ms) {
              return setTimeout(f, ms | 0);
            };
            clearTimer = function (t) {
              return clearTimeout(t);
            };
          }
          return {
            set: setTimer,
            clear: clearTimer
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    {}
  ],
  32: [
    function (require, module, exports) {
      (function (define) {
        define(function (require) {
          var when = require('./when');
          var all = when.Promise.all;
          var slice = Array.prototype.slice;
          return function pipeline(tasks) {
            var runTask = function (args, task) {
              runTask = function (arg, task) {
                return task(arg);
              };
              return task.apply(null, args);
            };
            return all(slice.call(arguments, 1)).then(function (args) {
              return when.reduce(tasks, function (arg, task) {
                return runTask(arg, task);
              }, args);
            });
          };
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    { './when': 33 }
  ],
  33: [
    function (require, module, exports) {
      (function (define) {
        'use strict';
        define(function (require) {
          var timed = require('./lib/decorators/timed');
          var array = require('./lib/decorators/array');
          var flow = require('./lib/decorators/flow');
          var fold = require('./lib/decorators/fold');
          var inspect = require('./lib/decorators/inspect');
          var generate = require('./lib/decorators/iterate');
          var progress = require('./lib/decorators/progress');
          var withThis = require('./lib/decorators/with');
          var unhandledRejection = require('./lib/decorators/unhandledRejection');
          var TimeoutError = require('./lib/TimeoutError');
          var Promise = [
              array,
              flow,
              fold,
              generate,
              progress,
              inspect,
              withThis,
              timed,
              unhandledRejection
            ].reduce(function (Promise, feature) {
              return feature(Promise);
            }, require('./lib/Promise'));
          var slice = Array.prototype.slice;
          when.promise = promise;
          when.resolve = Promise.resolve;
          when.reject = Promise.reject;
          when.lift = lift;
          when['try'] = attempt;
          when.attempt = attempt;
          when.iterate = Promise.iterate;
          when.unfold = Promise.unfold;
          when.join = join;
          when.all = all;
          when.settle = settle;
          when.any = lift(Promise.any);
          when.some = lift(Promise.some);
          when.race = lift(Promise.race);
          when.map = map;
          when.filter = filter;
          when.reduce = reduce;
          when.reduceRight = reduceRight;
          when.isPromiseLike = isPromiseLike;
          when.Promise = Promise;
          when.defer = defer;
          when.TimeoutError = TimeoutError;
          function when(x, onFulfilled, onRejected) {
            var p = Promise.resolve(x);
            if (arguments.length < 2) {
              return p;
            }
            return arguments.length > 3 ? p.then(onFulfilled, onRejected, arguments[3]) : p.then(onFulfilled, onRejected);
          }
          function promise(resolver) {
            return new Promise(resolver);
          }
          function lift(f) {
            return function () {
              return _apply(f, this, slice.call(arguments));
            };
          }
          function attempt(f) {
            return _apply(f, this, slice.call(arguments, 1));
          }
          function _apply(f, thisArg, args) {
            return Promise.all(args).then(function (args) {
              return f.apply(thisArg, args);
            });
          }
          function defer() {
            return new Deferred();
          }
          function Deferred() {
            var p = Promise._defer();
            function resolve(x) {
              p._handler.resolve(x);
            }
            function reject(x) {
              p._handler.reject(x);
            }
            function notify(x) {
              p._handler.notify(x);
            }
            this.promise = p;
            this.resolve = resolve;
            this.reject = reject;
            this.notify = notify;
            this.resolver = {
              resolve: resolve,
              reject: reject,
              notify: notify
            };
          }
          function isPromiseLike(x) {
            return x && typeof x.then === 'function';
          }
          function join() {
            return Promise.all(arguments);
          }
          function all(promises) {
            return when(promises, Promise.all);
          }
          function settle(promises) {
            return when(promises, Promise.settle);
          }
          function map(promises, mapFunc) {
            return when(promises, function (promises) {
              return Promise.map(promises, mapFunc);
            });
          }
          function filter(promises, predicate) {
            return when(promises, function (promises) {
              return Promise.filter(promises, predicate);
            });
          }
          function reduce(promises, f) {
            var args = slice.call(arguments, 1);
            return when(promises, function (array) {
              args.unshift(array);
              return Promise.reduce.apply(Promise, args);
            });
          }
          function reduceRight(promises, f) {
            var args = slice.call(arguments, 1);
            return when(promises, function (array) {
              args.unshift(array);
              return Promise.reduceRight.apply(Promise, args);
            });
          }
          return when;
        });
      }(typeof define === 'function' && define.amd ? define : function (factory) {
        module.exports = factory(require);
      }));
    },
    {
      './lib/Promise': 16,
      './lib/TimeoutError': 19,
      './lib/decorators/array': 21,
      './lib/decorators/flow': 22,
      './lib/decorators/fold': 23,
      './lib/decorators/inspect': 24,
      './lib/decorators/iterate': 25,
      './lib/decorators/progress': 26,
      './lib/decorators/timed': 27,
      './lib/decorators/unhandledRejection': 28,
      './lib/decorators/with': 29
    }
  ],
  34: [
    function (require, module, exports) {
      var jQuery = require('jquery');
      !function (a) {
        var b = null;
        a.modal = function (c, d) {
          a.modal.close();
          var e, f;
          if (this.$body = a('body'), this.options = a.extend({}, a.modal.defaults, d), this.options.doFade = !isNaN(parseInt(this.options.fadeDuration, 10)), c.is('a'))
            if (f = c.attr('href'), /^#/.test(f)) {
              if (this.$elm = a(f), 1 !== this.$elm.length)
                return null;
              this.open();
            } else
              this.$elm = a('<div>'), this.$body.append(this.$elm), e = function (a, b) {
                b.elm.remove();
              }, this.showSpinner(), c.trigger(a.modal.AJAX_SEND), a.get(f).done(function (d) {
                b && (c.trigger(a.modal.AJAX_SUCCESS), b.$elm.empty().append(d).on(a.modal.CLOSE, e), b.hideSpinner(), b.open(), c.trigger(a.modal.AJAX_COMPLETE));
              }).fail(function () {
                c.trigger(a.modal.AJAX_FAIL), b.hideSpinner(), c.trigger(a.modal.AJAX_COMPLETE);
              });
          else
            this.$elm = c, this.open();
        }, a.modal.prototype = {
          constructor: a.modal,
          open: function () {
            var b = this;
            this.options.doFade ? (this.block(), setTimeout(function () {
              b.show();
            }, this.options.fadeDuration * this.options.fadeDelay)) : (this.block(), this.show()), this.options.escapeClose && a(document).on('keydown.modal', function (b) {
              27 == b.which && a.modal.close();
            }), this.options.clickClose && this.blocker.click(a.modal.close);
          },
          close: function () {
            this.unblock(), this.hide(), a(document).off('keydown.modal');
          },
          block: function () {
            var b = this.options.doFade ? 0 : this.options.opacity;
            this.$elm.trigger(a.modal.BEFORE_BLOCK, [this._ctx()]), this.blocker = a('<div class="jquery-modal blocker"></div>').css({
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              width: '100%',
              height: '100%',
              position: 'fixed',
              zIndex: this.options.zIndex,
              background: this.options.overlay,
              opacity: b
            }), this.$body.append(this.blocker), this.options.doFade && this.blocker.animate({ opacity: this.options.opacity }, this.options.fadeDuration), this.$elm.trigger(a.modal.BLOCK, [this._ctx()]);
          },
          unblock: function () {
            this.options.doFade ? this.blocker.fadeOut(this.options.fadeDuration, function () {
              a(this).remove();
            }) : this.blocker.remove();
          },
          show: function () {
            this.$elm.trigger(a.modal.BEFORE_OPEN, [this._ctx()]), this.options.showClose && (this.closeButton = a('<a href="#close-modal" rel="modal:close" class="close-modal ' + this.options.closeClass + '">' + this.options.closeText + '</a>'), this.$elm.append(this.closeButton)), this.$elm.addClass(this.options.modalClass + ' current'), this.center(), this.options.doFade ? this.$elm.fadeIn(this.options.fadeDuration) : this.$elm.show(), this.$elm.trigger(a.modal.OPEN, [this._ctx()]);
          },
          hide: function () {
            this.$elm.trigger(a.modal.BEFORE_CLOSE, [this._ctx()]), this.closeButton && this.closeButton.remove(), this.$elm.removeClass('current'), this.options.doFade ? this.$elm.fadeOut(this.options.fadeDuration) : this.$elm.hide(), this.$elm.trigger(a.modal.CLOSE, [this._ctx()]);
          },
          showSpinner: function () {
            this.options.showSpinner && (this.spinner = this.spinner || a('<div class="' + this.options.modalClass + '-spinner"></div>').append(this.options.spinnerHtml), this.$body.append(this.spinner), this.spinner.show());
          },
          hideSpinner: function () {
            this.spinner && this.spinner.remove();
          },
          center: function () {
            this.$elm.css({
              position: 'fixed',
              top: '50%',
              left: '50%',
              marginTop: -(this.$elm.outerHeight() / 2),
              marginLeft: -(this.$elm.outerWidth() / 2),
              zIndex: this.options.zIndex + 1
            });
          },
          _ctx: function () {
            return {
              elm: this.$elm,
              blocker: this.blocker,
              options: this.options
            };
          }
        }, a.modal.prototype.resize = a.modal.prototype.center, a.modal.close = function (a) {
          if (b) {
            a && a.preventDefault(), b.close();
            var c = b.$elm;
            return b = null, c;
          }
        }, a.modal.resize = function () {
          b && b.resize();
        }, a.modal.isActive = function () {
          return b ? !0 : !1;
        }, a.modal.defaults = {
          overlay: '#000',
          opacity: 0.75,
          zIndex: 1,
          escapeClose: !0,
          clickClose: !0,
          closeText: 'Close',
          closeClass: '',
          modalClass: 'modal',
          spinnerHtml: null,
          showSpinner: !0,
          showClose: !0,
          fadeDuration: null,
          fadeDelay: 1
        }, a.modal.BEFORE_BLOCK = 'modal:before-block', a.modal.BLOCK = 'modal:block', a.modal.BEFORE_OPEN = 'modal:before-open', a.modal.OPEN = 'modal:open', a.modal.BEFORE_CLOSE = 'modal:before-close', a.modal.CLOSE = 'modal:close', a.modal.AJAX_SEND = 'modal:ajax:send', a.modal.AJAX_SUCCESS = 'modal:ajax:success', a.modal.AJAX_FAIL = 'modal:ajax:fail', a.modal.AJAX_COMPLETE = 'modal:ajax:complete', a.fn.modal = function (c) {
          return 1 === this.length && (b = new a.modal(this, c)), this;
        }, a(document).on('click.modal', 'a[rel="modal:close"]', a.modal.close), a(document).on('click.modal', 'a[rel="modal:open"]', function (b) {
          b.preventDefault(), a(this).modal();
        });
      }(jQuery);
    },
    { jquery: 15 }
  ]
}, {}, [4]));
'use strict';
(function () {
  /**
     * @ngdoc overview
     * @name ngStorage
     */
  angular.module('ngStorage', []).factory('$localStorage', _storageFactory('localStorage')).factory('$sessionStorage', _storageFactory('sessionStorage'));
  function _storageFactory(storageType) {
    return [
      '$rootScope',
      '$window',
      function ($rootScope, $window) {
        // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
        var webStorage = $window[storageType] || (console.warn('This browser does not support Web Storage!'), {}), $storage = {
            $default: function (items) {
              for (var k in items) {
                angular.isDefined($storage[k]) || ($storage[k] = items[k]);
              }
              return $storage;
            },
            $reset: function (items) {
              for (var k in $storage) {
                '$' === k[0] || delete $storage[k];
              }
              return $storage.$default(items);
            }
          }, _last$storage, _debounce;
        for (var i = 0, k; i < webStorage.length; i++) {
          // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
          (k = webStorage.key(i)) && 'ngStorage-' === k.slice(0, 10) && ($storage[k.slice(10)] = angular.fromJson(webStorage.getItem(k)));
        }
        _last$storage = angular.copy($storage);
        $rootScope.$watch(function () {
          _debounce || (_debounce = setTimeout(function () {
            _debounce = null;
            if (!angular.equals($storage, _last$storage)) {
              angular.forEach($storage, function (v, k) {
                angular.isDefined(v) && '$' !== k[0] && webStorage.setItem('ngStorage-' + k, angular.toJson(v));
                delete _last$storage[k];
              });
              for (var k in _last$storage) {
                webStorage.removeItem('ngStorage-' + k);
              }
              _last$storage = angular.copy($storage);
            }
          }, 100));
        });
        // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
        'localStorage' === storageType && $window.addEventListener && $window.addEventListener('storage', function (event) {
          if ('ngStorage-' === event.key.slice(0, 10)) {
            event.newValue ? $storage[event.key.slice(10)] = angular.fromJson(event.newValue) : delete $storage[event.key.slice(10)];
            _last$storage = angular.copy($storage);
            $rootScope.$apply();
          }
        });
        return $storage;
      }
    ];
  }
}());
/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngMessages
 * @description
 *
 * The `ngMessages` module provides enhanced support for displaying messages within templates
 * (typically within forms or when rendering message objects that return key/value data).
 * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to
 * show and hide error messages specific to the state of an input field, the `ngMessages` and
 * `ngMessage` directives are designed to handle the complexity, inheritance and priority
 * sequencing based on the order of how the messages are defined in the template.
 *
 * Currently, the ngMessages module only contains the code for the `ngMessages`
 * and `ngMessage` directives.
 *
 * # Usage
 * The `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.
 * Since the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be
 * used with `ngMessages` to display control error messages in an easier way than with just regular angular
 * template directives.
 *
 * ```html
 * <form name="myForm">
 *   <input type="text" ng-model="field" name="myField" required minlength="5" />
 *   <div ng-messages="myForm.myField.$error">
 *     <div ng-message="required">You did not enter a field</div>
 *     <div ng-message="minlength">The value entered is too short</div>
 *   </div>
 * </form>
 * ```
 *
 * Now whatever key/value entries are present within the provided object (in this case `$error`) then
 * the ngMessages directive will render the inner first ngMessage directive (depending if the key values
 * match the attribute value present on each ngMessage directive). In other words, if your errors
 * object contains the following data:
 *
 * ```javascript
 * <!-- keep in mind that ngModel automatically sets these error flags -->
 * myField.$error = { minlength : true, required : false };
 * ```
 *
 * Then the `required` message will be displayed first. When required is false then the `minlength` message
 * will be displayed right after (since these messages are ordered this way in the template HTML code).
 * The prioritization of each message is determined by what order they're present in the DOM.
 * Therefore, instead of having custom JavaScript code determine the priority of what errors are
 * present before others, the presentation of the errors are handled within the template.
 *
 * By default, ngMessages will only display one error at a time. However, if you wish to display all
 * messages then the `ng-messages-multiple` attribute flag can be used on the element containing the
 * ngMessages directive to make this happen.
 *
 * ```html
 * <div ng-messages="myForm.myField.$error" ng-messages-multiple>...</div>
 * ```
 *
 * ## Reusing and Overriding Messages
 * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline
 * template. This allows for generic collection of messages to be reused across multiple parts of an
 * application.
 *
 * ```html
 * <script type="text/ng-template" id="error-messages">
 *   <div ng-message="required">This field is required</div>
 *   <div ng-message="minlength">This field is too short</div>
 * </script>
 * <div ng-messages="myForm.myField.$error" ng-messages-include="error-messages"></div>
 * ```
 *
 * However, including generic messages may not be useful enough to match all input fields, therefore,
 * `ngMessages` provides the ability to override messages defined in the remote template by redefining
 * then within the directive container.
 *
 * ```html
 * <!-- a generic template of error messages known as "my-custom-messages" -->
 * <script type="text/ng-template" id="my-custom-messages">
 *   <div ng-message="required">This field is required</div>
 *   <div ng-message="minlength">This field is too short</div>
 * </script>
 *
 * <form name="myForm">
 *   <input type="email"
 *          id="email"
 *          name="myEmail"
 *          ng-model="email"
 *          minlength="5"
 *          required />
 *
 *   <div ng-messages="myForm.myEmail.$error" ng-messages-include="my-custom-messages">
 *     <!-- this required message has overridden the template message -->
 *     <div ng-message="required">You did not enter your email address</div>
 *
 *     <!-- this is a brand new message and will appear last in the prioritization -->
 *     <div ng-message="email">Your email address is invalid</div>
 *   </div>
 * </form>
 * ```
 *
 * In the example HTML code above the message that is set on required will override the corresponding
 * required message defined within the remote template. Therefore, with particular input fields (such
 * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied
 * while more generic messages can be used to handle other, more general input errors.
 *
 * ## Animations
 * If the `ngAnimate` module is active within the application then both the `ngMessages` and
 * `ngMessage` directives will trigger animations whenever any messages are added and removed
 * from the DOM by the `ngMessages` directive.
 *
 * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS
 * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no
 * animations present. Therefore, CSS transitions and keyframes as well as JavaScript animations can
 * hook into the animations whenever these classes are added/removed.
 *
 * Let's say that our HTML code for our messages container looks like so:
 *
 * ```html
 * <div ng-messages="myMessages" class="my-messages">
 *   <div ng-message="alert" class="some-message">...</div>
 *   <div ng-message="fail" class="some-message">...</div>
 * </div>
 * ```
 *
 * Then the CSS animation code for the message container looks like so:
 *
 * ```css
 * .my-messages {
 *   transition:1s linear all;
 * }
 * .my-messages.ng-active {
 *   // messages are visible
 * }
 * .my-messages.ng-inactive {
 *   // messages are hidden
 * }
 * ```
 *
 * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter
 * and leave animation is triggered for each particular element bound to the `ngMessage` directive.
 *
 * Therefore, the CSS code for the inner messages looks like so:
 *
 * ```css
 * .some-message {
 *   transition:1s linear all;
 * }
 *
 * .some-message.ng-enter {}
 * .some-message.ng-enter.ng-enter-active {}
 *
 * .some-message.ng-leave {}
 * .some-message.ng-leave.ng-leave-active {}
 * ```
 *
 * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.
 */
  angular.module('ngMessages', []).directive('ngMessages', [
    '$compile',
    '$animate',
    '$templateRequest',
    function ($compile, $animate, $templateRequest) {
      var ACTIVE_CLASS = 'ng-active';
      var INACTIVE_CLASS = 'ng-inactive';
      return {
        restrict: 'AE',
        controller: function () {
          this.$renderNgMessageClasses = angular.noop;
          var messages = [];
          this.registerMessage = function (index, message) {
            for (var i = 0; i < messages.length; i++) {
              if (messages[i].type == message.type) {
                if (index != i) {
                  var temp = messages[index];
                  messages[index] = messages[i];
                  if (index < messages.length) {
                    messages[i] = temp;
                  } else {
                    messages.splice(0, i);  //remove the old one (and shift left)
                  }
                }
                return;
              }
            }
            messages.splice(index, 0, message);  //add the new one (and shift right)
          };
          this.renderMessages = function (values, multiple) {
            values = values || {};
            var found;
            angular.forEach(messages, function (message) {
              if ((!found || multiple) && truthyVal(values[message.type])) {
                message.attach();
                found = true;
              } else {
                message.detach();
              }
            });
            this.renderElementClasses(found);
            function truthyVal(value) {
              return value !== null && value !== false && value;
            }
          };
        },
        require: 'ngMessages',
        link: function ($scope, element, $attrs, ctrl) {
          ctrl.renderElementClasses = function (bool) {
            bool ? $animate.setClass(element, ACTIVE_CLASS, INACTIVE_CLASS) : $animate.setClass(element, INACTIVE_CLASS, ACTIVE_CLASS);
          };
          //JavaScript treats empty strings as false, but ng-message-multiple by itself is an empty string
          var multiple = angular.isString($attrs.ngMessagesMultiple) || angular.isString($attrs.multiple);
          var cachedValues, watchAttr = $attrs.ngMessages || $attrs['for'];
          //for is a reserved keyword
          $scope.$watchCollection(watchAttr, function (values) {
            cachedValues = values;
            ctrl.renderMessages(values, multiple);
          });
          var tpl = $attrs.ngMessagesInclude || $attrs.include;
          if (tpl) {
            $templateRequest(tpl).then(function processTemplate(html) {
              var after, container = angular.element('<div/>').html(html);
              angular.forEach(container.children(), function (elm) {
                elm = angular.element(elm);
                after ? after.after(elm) : element.prepend(elm);
                //start of the container
                after = elm;
                $compile(elm)($scope);
              });
              ctrl.renderMessages(cachedValues, multiple);
            });
          }
        }
      };
    }
  ]).directive('ngMessage', [
    '$animate',
    function ($animate) {
      var COMMENT_NODE = 8;
      return {
        require: '^ngMessages',
        transclude: 'element',
        terminal: true,
        restrict: 'AE',
        link: function ($scope, $element, $attrs, ngMessages, $transclude) {
          var index, element;
          var commentNode = $element[0];
          var parentNode = commentNode.parentNode;
          for (var i = 0, j = 0; i < parentNode.childNodes.length; i++) {
            var node = parentNode.childNodes[i];
            if (node.nodeType == COMMENT_NODE && node.nodeValue.indexOf('ngMessage') >= 0) {
              if (node === commentNode) {
                index = j;
                break;
              }
              j++;
            }
          }
          ngMessages.registerMessage(index, {
            type: $attrs.ngMessage || $attrs.when,
            attach: function () {
              if (!element) {
                $transclude($scope, function (clone) {
                  $animate.enter(clone, null, $element);
                  element = clone;
                });
              }
            },
            detach: function (now) {
              if (element) {
                $animate.leave(element);
                element = null;
              }
            }
          });
        }
      };
    }
  ]);
}(window, window.angular));
d3 = function () {
  var d3 = { version: '3.3.13' };
  if (!Date.now)
    Date.now = function () {
      return +new Date();
    };
  var d3_arraySlice = [].slice, d3_array = function (list) {
      return d3_arraySlice.call(list);
    };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function (list) {
      var i = list.length, array = new Array(i);
      while (i--)
        array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement('div').style.setProperty('opacity', 0, '');
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function (name, value) {
      d3_element_setAttribute.call(this, name, value + '');
    };
    d3_element_prototype.setAttributeNS = function (space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + '');
    };
    d3_style_prototype.setProperty = function (name, value, priority) {
      d3_style_setProperty.call(this, name, value + '', priority);
    };
  }
  d3.ascending = function (a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  };
  d3.descending = function (a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function (array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = array[i]) != null && a > b)
          a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && a > b)
          a = b;
    }
    return a;
  };
  d3.max = function (array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = array[i]) != null && b > a)
          a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && b > a)
          a = b;
    }
    return a;
  };
  d3.extent = function (array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a))
        a = c = undefined;
      while (++i < n)
        if ((b = array[i]) != null) {
          if (a > b)
            a = b;
          if (c < b)
            c = b;
        }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null) {
          if (a > b)
            a = b;
          if (c < b)
            c = b;
        }
    }
    return [
      a,
      c
    ];
  };
  d3.sum = function (array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n)
        if (!isNaN(a = +array[i]))
          s += a;
    } else {
      while (++i < n)
        if (!isNaN(a = +f.call(array, array[i], i)))
          s += a;
    }
    return s;
  };
  function d3_number(x) {
    return x != null && !isNaN(x);
  }
  d3.mean = function (array, f) {
    var n = array.length, a, m = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n)
        if (d3_number(a = array[i]))
          m += (a - m) / ++j;
    } else {
      while (++i < n)
        if (d3_number(a = f.call(array, array[i], i)))
          m += (a - m) / ++j;
    }
    return j ? m : undefined;
  };
  d3.quantile = function (values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function (array, f) {
    if (arguments.length > 1)
      array = array.map(f);
    array = array.filter(d3_number);
    return array.length ? d3.quantile(array.sort(d3.ascending), 0.5) : undefined;
  };
  d3.bisector = function (f) {
    return {
      left: function (a, x, lo, hi) {
        if (arguments.length < 3)
          lo = 0;
        if (arguments.length < 4)
          hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (f.call(a, a[mid], mid) < x)
            lo = mid + 1;
          else
            hi = mid;
        }
        return lo;
      },
      right: function (a, x, lo, hi) {
        if (arguments.length < 3)
          lo = 0;
        if (arguments.length < 4)
          hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (x < f.call(a, a[mid], mid))
            hi = mid;
          else
            lo = mid + 1;
        }
        return lo;
      }
    };
  };
  var d3_bisector = d3.bisector(function (d) {
      return d;
    });
  d3.bisectLeft = d3_bisector.left;
  d3.bisect = d3.bisectRight = d3_bisector.right;
  d3.shuffle = function (array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function (array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--)
      permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function (array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n)
      pairs[i] = [
        p0 = p1,
        p1 = array[++i]
      ];
    return pairs;
  };
  d3.zip = function () {
    if (!(n = arguments.length))
      return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m;) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n;) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function (matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function (map) {
    var keys = [];
    for (var key in map)
      keys.push(key);
    return keys;
  };
  d3.values = function (map) {
    var values = [];
    for (var key in map)
      values.push(map[key]);
    return values;
  };
  d3.entries = function (map) {
    var entries = [];
    for (var key in map)
      entries.push({
        key: key,
        value: map[key]
      });
    return entries;
  };
  d3.merge = function (arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n)
      j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function (start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity)
      throw new Error('infinite range');
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0)
      while ((j = start + step * ++i) > stop)
        range.push(j / k);
    else
      while ((j = start + step * ++i) < stop)
        range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1)
      k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    try {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    } catch (e) {
      ctor.prototype = properties;
    }
  }
  d3.map = function (object) {
    var map = new d3_Map();
    if (object instanceof d3_Map)
      object.forEach(function (key, value) {
        map.set(key, value);
      });
    else
      for (var key in object)
        map.set(key, object[key]);
    return map;
  };
  function d3_Map() {
  }
  d3_class(d3_Map, {
    has: function (key) {
      return d3_map_prefix + key in this;
    },
    get: function (key) {
      return this[d3_map_prefix + key];
    },
    set: function (key, value) {
      return this[d3_map_prefix + key] = value;
    },
    remove: function (key) {
      key = d3_map_prefix + key;
      return key in this && delete this[key];
    },
    keys: function () {
      var keys = [];
      this.forEach(function (key) {
        keys.push(key);
      });
      return keys;
    },
    values: function () {
      var values = [];
      this.forEach(function (key, value) {
        values.push(value);
      });
      return values;
    },
    entries: function () {
      var entries = [];
      this.forEach(function (key, value) {
        entries.push({
          key: key,
          value: value
        });
      });
      return entries;
    },
    forEach: function (f) {
      for (var key in this) {
        if (key.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, key.substring(1), this[key]);
        }
      }
    }
  });
  var d3_map_prefix = '\0', d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
  d3.nest = function () {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length)
        return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [object]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function (keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function (keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length)
        return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function (key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function (a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function (array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function (array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function (d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function (order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function (f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function (array) {
    var set = new d3_Set();
    if (array)
      for (var i = 0, n = array.length; i < n; ++i)
        set.add(array[i]);
    return set;
  };
  function d3_Set() {
  }
  d3_class(d3_Set, {
    has: function (value) {
      return d3_map_prefix + value in this;
    },
    add: function (value) {
      this[d3_map_prefix + value] = true;
      return value;
    },
    remove: function (value) {
      value = d3_map_prefix + value;
      return value in this && delete this[value];
    },
    values: function () {
      var values = [];
      this.forEach(function (value) {
        values.push(value);
      });
      return values;
    },
    forEach: function (f) {
      for (var value in this) {
        if (value.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, value.substring(1));
        }
      }
    }
  });
  d3.behavior = {};
  d3.rebind = function (target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n)
      target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function () {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object)
      return name;
    name = name.charAt(0).toUpperCase() + name.substring(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object)
        return prefixName;
    }
  }
  var d3_vendorPrefixes = [
      'webkit',
      'ms',
      'moz',
      'Moz',
      'o',
      'O'
    ];
  function d3_noop() {
  }
  d3.dispatch = function () {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n)
      dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {
  }
  d3_dispatch.prototype.on = function (type, listener) {
    var i = type.indexOf('.'), name = '';
    if (i >= 0) {
      name = type.substring(i + 1);
      type = type.substring(0, i);
    }
    if (type)
      return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null)
        for (type in this) {
          if (this.hasOwnProperty(type))
            this[type].on(name, null);
        }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n)
        if (l = z[i].on)
          l.apply(this, arguments);
      return dispatch;
    }
    event.on = function (name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2)
        return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener)
        listeners.push(listenerByName.set(name, { on: listener }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent)
      e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n)
      dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function (thiz, argumentz) {
      return function (e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function (s) {
    return s.replace(d3_requote_re, '\\$&');
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function (object, prototype) {
      object.__proto__ = prototype;
    } : function (object, prototype) {
      for (var property in prototype)
        object[property] = prototype[property];
    };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function (s, n) {
      return n.querySelector(s);
    }, d3_selectAll = function (s, n) {
      return n.querySelectorAll(s);
    }, d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, 'matchesSelector')], d3_selectMatches = function (n, s) {
      return d3_selectMatcher.call(n, s);
    };
  if (typeof Sizzle === 'function') {
    d3_select = function (s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = function (s, n) {
      return Sizzle.uniqueSort(Sizzle(s, n));
    };
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function () {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function (selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && '__data__' in node)
            subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === 'function' ? selector : function () {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function (selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === 'function' ? selector : function () {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
      svg: 'http://www.w3.org/2000/svg',
      xhtml: 'http://www.w3.org/1999/xhtml',
      xlink: 'http://www.w3.org/1999/xlink',
      xml: 'http://www.w3.org/XML/1998/namespace',
      xmlns: 'http://www.w3.org/2000/xmlns/'
    };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function (name) {
      var i = name.indexOf(':'), prefix = name;
      if (i >= 0) {
        prefix = name.substring(0, i);
        name = name.substring(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function (name, value) {
    if (arguments.length < 2) {
      if (typeof name === 'string') {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name)
        this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null)
        this.removeAttributeNS(name.space, name.local);
      else
        this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === 'function' ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, ' ');
  }
  d3_selectionPrototype.classed = function (name, value) {
    if (arguments.length < 2) {
      if (typeof name === 'string') {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n)
            if (!value.contains(name[i]))
              return false;
        } else {
          value = node.getAttribute('class');
          while (++i < n)
            if (!d3_selection_classedRe(name[i]).test(value))
              return false;
        }
        return true;
      }
      for (value in name)
        this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp('(?:^|\\s+)' + d3.requote(name) + '(?:\\s+|$)', 'g');
  }
  function d3_selection_classes(name) {
    return name.trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n)
        name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n)
        name[i](this, x);
    }
    return typeof value === 'function' ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function (node, value) {
      if (c = node.classList)
        return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute('class') || '';
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c))
          node.setAttribute('class', d3_collapse(c + ' ' + name));
      } else {
        node.setAttribute('class', d3_collapse(c.replace(re, ' ')));
      }
    };
  }
  d3_selectionPrototype.style = function (name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== 'string') {
        if (n < 2)
          value = '';
        for (priority in name)
          this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2)
        return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = '';
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === 'function' ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function (name, value) {
    if (arguments.length < 2) {
      if (typeof name === 'string')
        return this.node()[name];
      for (value in name)
        this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null)
        delete this[name];
      else
        this[name] = x;
    }
    return value == null ? propertyNull : typeof value === 'function' ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function (value) {
    return arguments.length ? this.each(typeof value === 'function' ? function () {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? '' : v;
    } : value == null ? function () {
      this.textContent = '';
    } : function () {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function (value) {
    return arguments.length ? this.each(typeof value === 'function' ? function () {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? '' : v;
    } : value == null ? function () {
      this.innerHTML = '';
    } : function () {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function (name) {
    name = d3_selection_creator(name);
    return this.select(function () {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === 'function' ? name : (name = d3.ns.qualify(name)).local ? function () {
      return this.ownerDocument.createElementNS(name.space, name.local);
    } : function () {
      return this.ownerDocument.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function (name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function () {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function () {
    return this.each(function () {
      var parent = this.parentNode;
      if (parent)
        parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function (value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
        for (i = -1; ++i < n;) {
          keyValue = key.call(node = group[i], node.__data__, i);
          if (nodeByKeyValue.has(keyValue)) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues.push(keyValue);
        }
        for (i = -1; ++i < m;) {
          keyValue = key.call(groupData, nodeData = groupData[i], i);
          if (node = nodeByKeyValue.get(keyValue)) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          } else if (!dataByKeyValue.has(keyValue)) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
          dataByKeyValue.set(keyValue, nodeData);
          nodeByKeyValue.remove(keyValue);
        }
        for (i = -1; ++i < n;) {
          if (nodeByKeyValue.has(keyValues[i])) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0;) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (; i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (; i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === 'function') {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function () {
      return enter;
    };
    update.exit = function () {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return { __data__: data };
  }
  d3_selectionPrototype.datum = function (value) {
    return arguments.length ? this.property('__data__', value) : this.property('__data__');
  };
  d3_selectionPrototype.filter = function (filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== 'function')
      filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function () {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function () {
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function (comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m;)
      this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length)
      comparator = d3.ascending;
    return function (a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function (callback) {
    return d3_selection_each(this, function (node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i])
          callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function (callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function () {
    return !this.node();
  };
  d3_selectionPrototype.node = function () {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node)
          return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function () {
    var n = 0;
    this.each(function () {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function (selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m;) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function (name, before) {
    if (arguments.length < 2)
      before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function (d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0)
        j0 = j, i0 = 0;
      if (i >= i0)
        i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n);
      return node;
    };
  }
  d3_selectionPrototype.transition = function () {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
        time: Date.now(),
        ease: d3_ease_cubicInOut,
        delay: 0,
        duration: 250
      };
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i])
          d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_selectionPrototype.interrupt = function () {
    return this.each(d3_selection_interrupt);
  };
  function d3_selection_interrupt() {
    var lock = this.__transition__;
    if (lock)
      ++lock.active;
  }
  d3.select = function (node) {
    var group = [typeof node === 'string' ? d3_select(node, d3_document) : node];
    group.parentNode = d3_documentElement;
    return d3_selection([group]);
  };
  d3.selectAll = function (nodes) {
    var group = d3_array(typeof nodes === 'string' ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([group]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function (type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== 'string') {
        if (n < 2)
          listener = false;
        for (capture in type)
          this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2)
        return (n = this.node()['__on' + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = '__on' + type, i = type.indexOf('.'), wrap = d3_selection_onListener;
    if (i > 0)
      type = type.substring(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter)
      type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp('^__on([^.]+)' + d3.requote(type) + '$'), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
      mouseenter: 'mouseover',
      mouseleave: 'mouseout'
    });
  d3_selection_onFilters.forEach(function (k) {
    if ('on' + k in d3_document)
      d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function (e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function (e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = 'onselectstart' in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, 'userSelect'), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = '.dragsuppress-' + ++d3_event_dragId, click = 'click' + name, w = d3.select(d3_window).on('touchmove' + name, d3_eventPreventDefault).on('dragstart' + name, d3_eventPreventDefault).on('selectstart' + name, d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = 'none';
    }
    return function (suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect)
        style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function () {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function (container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches)
      e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select('body').append('svg').style({
          position: 'absolute',
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: 'none'
        }, 'important');
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083)
        point.x = e.pageX, point.y = e.pageY;
      else
        point.x = e.clientX, point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [
        point.x,
        point.y
      ];
    }
    var rect = container.getBoundingClientRect();
    return [
      e.clientX - rect.left - container.clientLeft,
      e.clientY - rect.top - container.clientTop
    ];
  }
  d3.touches = function (container, touches) {
    if (arguments.length < 2)
      touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function (touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  d3.behavior.drag = function () {
    var event = d3_eventDispatch(drag, 'drag', 'dragstart', 'dragend'), origin = null, mousedown = dragstart(d3_noop, d3.mouse, 'mousemove', 'mouseup'), touchstart = dragstart(touchid, touchposition, 'touchmove', 'touchend');
    function drag() {
      this.on('mousedown.drag', mousedown).on('touchstart.drag', touchstart);
    }
    function touchid() {
      return d3.event.changedTouches[0].identifier;
    }
    function touchposition(parent, id) {
      return d3.touches(parent).filter(function (p) {
        return p.identifier === id;
      })[0];
    }
    function dragstart(id, position, move, end) {
      return function () {
        var target = this, parent = target.parentNode, event_ = event.of(target, arguments), eventTarget = d3.event.target, eventId = id(), drag = eventId == null ? 'drag' : 'drag-' + eventId, origin_ = position(parent, eventId), dragged = 0, offset, w = d3.select(d3_window).on(move + '.' + drag, moved).on(end + '.' + drag, ended), dragRestore = d3_event_dragSuppress();
        if (origin) {
          offset = origin.apply(target, arguments);
          offset = [
            offset.x - origin_[0],
            offset.y - origin_[1]
          ];
        } else {
          offset = [
            0,
            0
          ];
        }
        event_({ type: 'dragstart' });
        function moved() {
          var p = position(parent, eventId), dx = p[0] - origin_[0], dy = p[1] - origin_[1];
          dragged |= dx | dy;
          origin_ = p;
          event_({
            type: 'drag',
            x: p[0] + offset[0],
            y: p[1] + offset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          w.on(move + '.' + drag, null).on(end + '.' + drag, null);
          dragRestore(dragged && d3.event.target === eventTarget);
          event_({ type: 'dragend' });
        }
      };
    }
    drag.origin = function (x) {
      if (!arguments.length)
        return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, 'on');
  };
  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 0.000001, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function (p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / d3_cosh(ρ * s + r0)
        ];
      }
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(ρ * s)
      ];
    }
    interpolate.duration = S * 1000;
    return interpolate;
  };
  d3.behavior.zoom = function () {
    var view = {
        x: 0,
        y: 0,
        k: 1
      }, translate0, center, size = [
        960,
        500
      ], scaleExtent = d3_behavior_zoomInfinity, mousedown = 'mousedown.zoom', mousemove = 'mousemove.zoom', mouseup = 'mouseup.zoom', mousewheelTimer, touchstart = 'touchstart.zoom', touchtime, event = d3_eventDispatch(zoom, 'zoomstart', 'zoom', 'zoomend'), x0, x1, y0, y1;
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + '.zoom', mousewheeled).on(mousemove, mousewheelreset).on('dblclick.zoom', dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function (g) {
      g.each(function () {
        var event_ = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each('start.zoom', function () {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(event_);
          }).tween('zoom:zoom', function () {
            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([
                (cx - view.x) / view.k,
                (cy - view.y) / view.k,
                dx / view.k
              ], [
                (cx - view1.x) / view1.k,
                (cy - view1.y) / view1.k,
                dx / view1.k
              ]);
            return function (t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(event_);
            };
          }).each('end.zoom', function () {
            zoomended(event_);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(event_);
          zoomed(event_);
          zoomended(event_);
        }
      });
    };
    zoom.translate = function (_) {
      if (!arguments.length)
        return [
          view.x,
          view.y
        ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function (_) {
      if (!arguments.length)
        return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function (_) {
      if (!arguments.length)
        return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [
        +_[0],
        +_[1]
      ];
      return zoom;
    };
    zoom.center = function (_) {
      if (!arguments.length)
        return center;
      center = _ && [
        +_[0],
        +_[1]
      ];
      return zoom;
    };
    zoom.size = function (_) {
      if (!arguments.length)
        return size;
      size = _ && [
        +_[0],
        +_[1]
      ];
      return zoom;
    };
    zoom.x = function (z) {
      if (!arguments.length)
        return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function (z) {
      if (!arguments.length)
        return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [
        (p[0] - view.x) / view.k,
        (p[1] - view.y) / view.k
      ];
    }
    function point(l) {
      return [
        l[0] * view.k + view.x,
        l[1] * view.k + view.y
      ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function rescale() {
      if (x1)
        x1.domain(x0.range().map(function (x) {
          return (x - view.x) / view.k;
        }).map(x0.invert));
      if (y1)
        y1.domain(y0.range().map(function (y) {
          return (y - view.y) / view.k;
        }).map(y0.invert));
    }
    function zoomstarted(event) {
      event({ type: 'zoomstart' });
    }
    function zoomed(event) {
      rescale();
      event({
        type: 'zoom',
        scale: view.k,
        translate: [
          view.x,
          view.y
        ]
      });
    }
    function zoomended(event) {
      event({ type: 'zoomend' });
    }
    function mousedowned() {
      var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, dragged = 0, w = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), l = location(d3.mouse(target)), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(target);
      zoomstarted(event_);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(target), l);
        zoomed(event_);
      }
      function ended() {
        w.on(mousemove, d3_window === target ? mousewheelreset : null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === eventTarget);
        zoomended(event_);
      }
    }
    function touchstarted() {
      var target = this, event_ = event.of(target, arguments), locations0 = {}, distance0 = 0, scale0, eventId = d3.event.changedTouches[0].identifier, touchmove = 'touchmove.zoom-' + eventId, touchend = 'touchend.zoom-' + eventId, w = d3.select(d3_window).on(touchmove, moved).on(touchend, ended), t = d3.select(target).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(target);
      started();
      zoomstarted(event_);
      function relocate() {
        var touches = d3.touches(target);
        scale0 = view.k;
        touches.forEach(function (t) {
          if (t.identifier in locations0)
            locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0], l = locations0[p.identifier];
            scaleTo(view.k * 2);
            translateTo(p, l);
            d3_eventPreventDefault();
            zoomed(event_);
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(target), p0, l0, p1, l1;
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0)
              break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [
            (p0[0] + p1[0]) / 2,
            (p0[1] + p1[1]) / 2
          ];
          l0 = [
            (l0[0] + l1[0]) / 2,
            (l0[1] + l1[1]) / 2
          ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(event_);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        w.on(touchmove, null).on(touchend, null);
        t.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(event_);
      }
    }
    function mousewheeled() {
      var event_ = event.of(this, arguments);
      if (mousewheelTimer)
        clearTimeout(mousewheelTimer);
      else
        d3_selection_interrupt.call(this), zoomstarted(event_);
      mousewheelTimer = setTimeout(function () {
        mousewheelTimer = null;
        zoomended(event_);
      }, 50);
      d3_eventPreventDefault();
      var point = center || d3.mouse(this);
      if (!translate0)
        translate0 = location(point);
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * 0.002) * view.k);
      translateTo(point, translate0);
      zoomed(event_);
    }
    function mousewheelreset() {
      translate0 = null;
    }
    function dblclicked() {
      var event_ = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
      zoomstarted(event_);
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      zoomed(event_);
      zoomended(event_);
    }
    return d3.rebind(zoom, event, 'on');
  };
  var d3_behavior_zoomInfinity = [
      0,
      Infinity
    ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = 'onwheel' in d3_document ? (d3_behavior_zoomDelta = function () {
      return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
    }, 'wheel') : 'onmousewheel' in d3_document ? (d3_behavior_zoomDelta = function () {
      return d3.event.wheelDelta;
    }, 'mousewheel') : (d3_behavior_zoomDelta = function () {
      return -d3.event.detail;
    }, 'MozMousePixelScroll');
  function d3_Color() {
  }
  d3_Color.prototype.toString = function () {
    return this.rgb() + '';
  };
  d3.hsl = function (h, s, l) {
    return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse('' + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l);
  };
  function d3_hsl(h, s, l) {
    return new d3_Hsl(h, s, l);
  }
  function d3_Hsl(h, s, l) {
    this.h = h;
    this.s = s;
    this.l = l;
  }
  var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();
  d3_hslPrototype.brighter = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function () {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360)
        h -= 360;
      else if (h < 0)
        h += 360;
      if (h < 60)
        return m1 + (m2 - m1) * h / 60;
      if (h < 180)
        return m2;
      if (h < 240)
        return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = function (h, c, l) {
    return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l);
  };
  function d3_hcl(h, c, l) {
    return new d3_Hcl(h, c, l);
  }
  function d3_Hcl(h, c, l) {
    this.h = h;
    this.c = c;
    this.l = l;
  }
  var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();
  d3_hclPrototype.brighter = function (k) {
    return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function (k) {
    return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function () {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h))
      h = 0;
    if (isNaN(c))
      c = 0;
    return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = function (l, a, b) {
    return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b);
  };
  function d3_lab(l, a, b) {
    return new d3_Lab(l, a, b);
  }
  function d3_Lab(l, a, b) {
    this.l = l;
    this.a = a;
    this.b = b;
  }
  var d3_lab_K = 18;
  var d3_lab_X = 0.95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_Lab.prototype = new d3_Color();
  d3_labPrototype.brighter = function (k) {
    return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function (k) {
    return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function () {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), d3_xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), d3_xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > 0.206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= 0.00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055));
  }
  d3.rgb = function (r, g, b) {
    return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse('' + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b);
  };
  function d3_rgbNumber(value) {
    return d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + '';
  }
  function d3_rgb(r, g, b) {
    return new d3_Rgb(r, g, b);
  }
  function d3_Rgb(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();
  d3_rgbPrototype.brighter = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b)
      return d3_rgb(i, i, i);
    if (r && r < i)
      r = i;
    if (g && g < i)
      g = i;
    if (b && b < i)
      b = i;
    return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)));
  };
  d3_rgbPrototype.darker = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b));
  };
  d3_rgbPrototype.hsl = function () {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function () {
    return '#' + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? '0' + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, name;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(',');
      switch (m1[1]) {
      case 'hsl': {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }
      case 'rgb': {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (name = d3_rgb_names.get(format))
      return rgb(name.r, name.g, name.b);
    if (format != null && format.charAt(0) === '#') {
      if (format.length === 4) {
        r = format.charAt(1);
        r += r;
        g = format.charAt(2);
        g += g;
        b = format.charAt(3);
        b += b;
      } else if (format.length === 7) {
        r = format.substring(1, 3);
        g = format.substring(3, 5);
        b = format.substring(5, 7);
      }
      r = parseInt(r, 16);
      g = parseInt(g, 16);
      b = parseInt(b, 16);
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < 0.5 ? d / (max + min) : d / (2 - max - min);
      if (r == max)
        h = (g - b) / d + (g < b ? 6 : 0);
      else if (g == max)
        h = (b - r) / d + 2;
      else
        h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / d3_lab_X), y = d3_xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / d3_lab_Y), z = d3_xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === '%' ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    });
  d3_rgb_names.forEach(function (key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === 'function' ? v : function () {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function (url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === 'function')
        callback = mimeType, mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch('beforesend', 'progress', 'load', 'error'), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !('withCredentials' in request) && /^(http(s)?:)?\/\//.test(url))
      request = new XDomainRequest();
    'onload' in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function (event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function (name, value) {
      name = (name + '').toLowerCase();
      if (arguments.length < 2)
        return headers[name];
      if (value == null)
        delete headers[name];
      else
        headers[name] = value + '';
      return xhr;
    };
    xhr.mimeType = function (value) {
      if (!arguments.length)
        return mimeType;
      mimeType = value == null ? null : value + '';
      return xhr;
    };
    xhr.responseType = function (value) {
      if (!arguments.length)
        return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function (value) {
      response = value;
      return xhr;
    };
    [
      'get',
      'post'
    ].forEach(function (method) {
      xhr[method] = function () {
        return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
      };
    });
    xhr.send = function (method, data, callback) {
      if (arguments.length === 2 && typeof data === 'function')
        callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !('accept' in headers))
        headers['accept'] = mimeType + ',*/*';
      if (request.setRequestHeader)
        for (var name in headers)
          request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType)
        request.overrideMimeType(mimeType);
      if (responseType != null)
        request.responseType = responseType;
      if (callback != null)
        xhr.on('error', callback).on('load', function (request) {
          callback(null, request);
        });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function () {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, 'on');
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function (error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  d3.dsv = function (delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + '\n]'), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3)
        callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function (_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function (request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function (text, f) {
      var o;
      return dsv.parseRows(text, function (row, i) {
        if (o)
          return o(row, i - 1);
        var a = new Function('d', 'return {' + row.map(function (name, i) {
            return JSON.stringify(name) + ': d[' + i + ']';
          }).join(',') + '}');
        o = f ? function (row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function (text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N)
          return EOF;
        if (eol)
          return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34)
                break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10)
              ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.substring(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10)
            eol = true;
          else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10)
              ++I, ++k;
          } else if (c !== delimiterCode)
            continue;
          return text.substring(j, I - k);
        }
        return text.substring(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && !(a = f(a, n++)))
          continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function (rows) {
      if (Array.isArray(rows[0]))
        return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function (row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
        return fields.map(function (field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join('\n');
    };
    dsv.formatRows = function (rows) {
      return rows.map(formatRow).join('\n');
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(',', 'text/csv');
  d3.tsv = d3.dsv('\t', 'text/tab-separated-values');
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, 'requestAnimationFrame')] || function (callback) {
      setTimeout(callback, 17);
    };
  d3.timer = function (callback, delay, then) {
    var n = arguments.length;
    if (n < 2)
      delay = 0;
    if (n < 3)
      then = Date.now();
    var time = then + delay, timer = {
        c: callback,
        t: time,
        f: false,
        n: null
      };
    if (d3_timer_queueTail)
      d3_timer_queueTail.n = timer;
    else
      d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function () {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t)
        d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time)
          time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  var d3_format_decimalPoint = '.', d3_format_thousandsSeparator = ',', d3_format_grouping = [
      3,
      3
    ], d3_format_currencySymbol = '$';
  var d3_formatPrefixes = [
      'y',
      'z',
      'a',
      'f',
      'p',
      'n',
      '\xb5',
      'm',
      '',
      'k',
      'M',
      'G',
      'T',
      'P',
      'E',
      'Z',
      'Y'
    ].map(d3_formatPrefix);
  d3.formatPrefix = function (value, precision) {
    var i = 0;
    if (value) {
      if (value < 0)
        value *= -1;
      if (precision)
        value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function (d) {
        return d / k;
      } : function (d) {
        return d * k;
      },
      symbol: d
    };
  }
  d3.round = function (x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  d3.format = function (specifier) {
    var match = d3_format_re.exec(specifier), fill = match[1] || ' ', align = match[2] || '>', sign = match[3] || '', symbol = match[4] || '', zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, suffix = '', integer = false;
    if (precision)
      precision = +precision.substring(1);
    if (zfill || fill === '0' && align === '=') {
      zfill = fill = '0';
      align = '=';
      if (comma)
        width -= Math.floor((width - 1) / 4);
    }
    switch (type) {
    case 'n':
      comma = true;
      type = 'g';
      break;
    case '%':
      scale = 100;
      suffix = '%';
      type = 'f';
      break;
    case 'p':
      scale = 100;
      suffix = '%';
      type = 'r';
      break;
    case 'b':
    case 'o':
    case 'x':
    case 'X':
      if (symbol === '#')
        symbol = '0' + type.toLowerCase();
    case 'c':
    case 'd':
      integer = true;
      precision = 0;
      break;
    case 's':
      scale = -1;
      type = 'r';
      break;
    }
    if (symbol === '#')
      symbol = '';
    else if (symbol === '$')
      symbol = d3_format_currencySymbol;
    if (type == 'r' && !precision)
      type = 'g';
    if (precision != null) {
      if (type == 'g')
        precision = Math.max(1, Math.min(21, precision));
      else if (type == 'e' || type == 'f')
        precision = Math.max(0, Math.min(20, precision));
    }
    type = d3_format_types.get(type) || d3_format_typeDefault;
    var zcomma = zfill && comma;
    return function (value) {
      if (integer && value % 1)
        return '';
      var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, '-') : sign;
      if (scale < 0) {
        var prefix = d3.formatPrefix(value, precision);
        value = prefix.scale(value);
        suffix = prefix.symbol;
      } else {
        value *= scale;
      }
      value = type(value, precision);
      var i = value.lastIndexOf('.'), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? '' : d3_format_decimalPoint + value.substring(i + 1);
      if (!zfill && comma)
        before = d3_format_group(before);
      var length = symbol.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : '';
      if (zcomma)
        before = d3_format_group(padding + before);
      negative += symbol;
      value = before + after;
      return (align === '<' ? negative + value + padding : align === '>' ? padding + negative + value : align === '^' ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + suffix;
    };
  };
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
      b: function (x) {
        return x.toString(2);
      },
      c: function (x) {
        return String.fromCharCode(x);
      },
      o: function (x) {
        return x.toString(8);
      },
      x: function (x) {
        return x.toString(16);
      },
      X: function (x) {
        return x.toString(16).toUpperCase();
      },
      g: function (x, p) {
        return x.toPrecision(p);
      },
      e: function (x, p) {
        return x.toExponential(p);
      },
      f: function (x, p) {
        return x.toFixed(p);
      },
      r: function (x, p) {
        return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
      }
    });
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  function d3_format_typeDefault(x) {
    return x + '';
  }
  var d3_format_group = d3_identity;
  if (d3_format_grouping) {
    var d3_format_groupingLength = d3_format_grouping.length;
    d3_format_group = function (value) {
      var i = value.length, t = [], j = 0, g = d3_format_grouping[0];
      while (i > 0 && g > 0) {
        t.push(value.substring(i -= g, i + g));
        g = d3_format_grouping[j = (j + 1) % d3_format_groupingLength];
      }
      return t.reverse().join(d3_format_thousandsSeparator);
    };
  }
  d3.geo = {};
  function d3_adder() {
  }
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function (y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s)
        this.t += d3_adderTemp.t;
      else
        this.s = d3_adderTemp.t;
    },
    reset: function () {
      this.s = this.t = 0;
    },
    valueOf: function () {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function (object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
      Feature: function (feature, listener) {
        d3_geo_streamGeometry(feature.geometry, listener);
      },
      FeatureCollection: function (object, listener) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n)
          d3_geo_streamGeometry(features[i].geometry, listener);
      }
    };
  var d3_geo_streamGeometryType = {
      Sphere: function (object, listener) {
        listener.sphere();
      },
      Point: function (object, listener) {
        object = object.coordinates;
        listener.point(object[0], object[1], object[2]);
      },
      MultiPoint: function (object, listener) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n)
          object = coordinates[i], listener.point(object[0], object[1], object[2]);
      },
      LineString: function (object, listener) {
        d3_geo_streamLine(object.coordinates, listener, 0);
      },
      MultiLineString: function (object, listener) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n)
          d3_geo_streamLine(coordinates[i], listener, 0);
      },
      Polygon: function (object, listener) {
        d3_geo_streamPolygon(object.coordinates, listener);
      },
      MultiPolygon: function (object, listener) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n)
          d3_geo_streamPolygon(coordinates[i], listener);
      },
      GeometryCollection: function (object, listener) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n)
          d3_geo_streamGeometry(geometries[i], listener);
      }
    };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n)
      coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n)
      d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function (object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
      sphere: function () {
        d3_geo_areaSum += 4 * π;
      },
      point: d3_noop,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: function () {
        d3_geo_areaRingSum.reset();
        d3_geo_area.lineStart = d3_geo_areaRingStart;
      },
      polygonEnd: function () {
        var area = 2 * d3_geo_areaRingSum;
        d3_geo_areaSum += area < 0 ? 4 * π + area : area;
        d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
      }
    };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function (λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function () {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [
      cosφ * Math.cos(λ),
      cosφ * Math.sin(λ),
      Math.sin(φ)
    ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [
      a[1] * b[2] - a[2] * b[1],
      a[2] * b[0] - a[0] * b[2],
      a[0] * b[1] - a[1] * b[0]
    ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [
      vector[0] * k,
      vector[1] * k,
      vector[2] * k
    ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [
      Math.atan2(cartesian[1], cartesian[0]),
      d3_asin(cartesian[2])
    ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function () {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          bound.point = ringPoint;
          bound.lineStart = ringStart;
          bound.lineEnd = ringEnd;
          dλSum = 0;
          d3_geo_area.polygonStart();
        },
        polygonEnd: function () {
          d3_geo_area.polygonEnd();
          bound.point = point;
          bound.lineStart = lineStart;
          bound.lineEnd = lineEnd;
          if (d3_geo_areaRingSum < 0)
            λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);
          else if (dλSum > ε)
            φ1 = 90;
          else if (dλSum < -ε)
            φ0 = -90;
          range[0] = λ0, range[1] = λ1;
        }
      };
    function point(λ, φ) {
      ranges.push(range = [
        λ0 = λ,
        λ1 = λ
      ]);
      if (φ < φ0)
        φ0 = φ;
      if (φ > φ1)
        φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([
          λ * d3_radians,
          φ * d3_radians
        ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [
            normal[1],
            -normal[0],
            0
          ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1)
            φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0)
            φ0 = φi;
        } else {
          if (φ < φ0)
            φ0 = φ;
          if (φ > φ1)
            φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1))
              λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1))
              λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0)
              λ0 = λ;
            if (λ > λ1)
              λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1))
                λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1))
                λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else
        λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε)
        λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function (feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1]))
              a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1]))
              a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best)
            best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [
        [
          NaN,
          NaN
        ],
        [
          NaN,
          NaN
        ]
      ] : [
        [
          λ0,
          φ0
        ],
        [
          λ1,
          φ1
        ]
      ];
    };
  }();
  d3.geo.centroid = function (object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε)
        x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2)
        return [
          NaN,
          NaN
        ];
    }
    return [
      Math.atan2(y, x) * d3_degrees,
      d3_asin(z / Math.sqrt(m)) * d3_degrees
    ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
      sphere: d3_noop,
      point: d3_geo_centroidPoint,
      lineStart: d3_geo_centroidLineStart,
      lineEnd: d3_geo_centroidLineEnd,
      polygonStart: function () {
        d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
      },
      polygonEnd: function () {
        d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
      }
    };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function (λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function (λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function () {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0)
        return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i)
          listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length)
      return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v)
        if ((current = current.n) === start)
          return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i)
              listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i)
              listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length))
      return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function (rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function () {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
            listener.polygonStart();
          },
          polygonEnd: function () {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = d3.merge(segments);
            var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
            if (segments.length) {
              d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
            } else if (clipStartInside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            listener.polygonEnd();
            segments = polygon = null;
          },
          sphere: function () {
            listener.polygonStart();
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
            listener.polygonEnd();
          }
        };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1]))
          listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygon, ring;
      function pointRing(λ, φ) {
        ring.push([
          λ,
          φ
        ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n)
          return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          listener.lineStart();
          while (++i < n)
            listener.point((point = segment[i])[0], point[1]);
          listener.lineEnd();
          return;
        }
        if (n > 1 && clean & 2)
          ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function () {
        lines.push(line = []);
      },
      point: function (λ, φ) {
        line.push([
          λ,
          φ
        ]);
      },
      lineEnd: d3_noop,
      buffer: function () {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function () {
        if (lines.length > 1)
          lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [
        Math.sin(meridian),
        -Math.cos(meridian),
        0
      ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m)
        continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m)
          j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, antimeridian = abs(dλ) > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * Math.sin(dλ), cosφ0 * cosφ + k * Math.cos(dλ)));
        polarAngle += antimeridian ? dλ + (dλ >= 0 ? τ : -τ) : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++)
          break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [
      -π,
      -π / 2
    ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function () {
        listener.lineStart();
        clean = 1;
      },
      point: function (λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε)
            λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε)
            λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function () {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function () {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [
      0,
      -radius
    ] : [
      -π,
      radius - π
    ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function () {
          v00 = v0 = false;
          clean = 1;
        },
        point: function (λ, φ) {
          var point1 = [
              λ,
              φ
            ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v))
            listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function () {
          if (v0)
            listener.lineEnd();
          point0 = null;
        },
        clean: function () {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [
          1,
          0,
          0
        ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant)
        return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0)
        return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two)
        return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0)
        z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0)
        z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [
          q,
          d3_geo_spherical(q1)
        ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r)
        code |= 1;
      else if (λ > r)
        code |= 2;
      if (φ < -r)
        code |= 4;
      else if (φ > r)
        code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function (line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0)
        return;
      r /= dx;
      if (dx < 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      } else if (dx > 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0)
        return;
      r /= dx;
      if (dx < 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      } else if (dx > 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0)
        return;
      r /= dy;
      if (dy < 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      } else if (dy > 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0)
        return;
      r /= dy;
      if (dy < 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      } else if (dy > 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      }
      if (t0 > 0)
        line.a = {
          x: ax + t0 * dx,
          y: ay + t0 * dy
        };
      if (t1 < 1)
        line.b = {
          x: ax + t1 * dx,
          y: ay + t1 * dy
        };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1000000000;
  d3.geo.clipExtent = function () {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
        stream: function (output) {
          if (stream)
            stream.valid = false;
          stream = clip(output);
          stream.valid = true;
          return stream;
        },
        extent: function (_) {
          if (!arguments.length)
            return [
              [
                x0,
                y0
              ],
              [
                x1,
                y1
              ]
            ];
          clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
          if (stream)
            stream.valid = false, stream = null;
          return clipExtent;
        }
      };
    return clipExtent.extent([
      [
        0,
        0
      ],
      [
        960,
        500
      ]
    ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function (listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function () {
            listener = bufferListener;
            segments = [];
            polygon = [];
            clean = true;
          },
          polygonEnd: function () {
            listener = listener_;
            segments = d3.merge(segments);
            var clipStartInside = insidePolygon([
                x0,
                y1
              ]), inside = clean && clipStartInside, visible = segments.length;
            if (inside || visible) {
              listener.polygonStart();
              if (inside) {
                listener.lineStart();
                interpolate(null, null, 1, listener);
                listener.lineEnd();
              }
              if (visible) {
                d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
              }
              listener.polygonEnd();
            }
            segments = polygon = ring = null;
          }
        };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && isLeft(a, b, p) > 0)
                ++wn;
            } else {
              if (b[1] <= y && isLeft(a, b, p) < 0)
                --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function isLeft(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y))
          listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon)
          polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_)
            bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_)
          listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon)
          ring.push([
            x,
            y
          ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_)
            listener.point(x, y);
          else {
            var l = {
                a: {
                  x: x_,
                  y: y_
                },
                b: {
                  x: x,
                  y: y
                }
              };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v)
                listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert)
      compose.invert = function (x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function (_) {
      if (!arguments.length)
        return [
          φ0 / π * 180,
          φ1 / π * 180
        ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [
        ρ * Math.sin(λ *= n),
        ρ0 - ρ * Math.cos(λ)
      ];
    }
    forward.invert = function (x, y) {
      var ρ0_y = ρ0 - y;
      return [
        Math.atan2(x, ρ0_y) / n,
        d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))
      ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function () {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function () {
    return d3.geo.conicEqualArea().rotate([
      96,
      0
    ]).center([
      -0.6,
      38.7
    ]).parallels([
      29.5,
      45.5
    ]).scale(1070);
  };
  d3.geo.albersUsa = function () {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([
        154,
        0
      ]).center([
        -2,
        58.5
      ]).parallels([
        55,
        65
      ]);
    var hawaii = d3.geo.conicEqualArea().rotate([
        157,
        0
      ]).center([
        -3,
        19.9
      ]).parallels([
        8,
        18
      ]);
    var point, pointStream = {
        point: function (x, y) {
          point = [
            x,
            y
          ];
        }
      }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function (coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function (stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function (x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function () {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function () {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function () {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function () {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function () {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function (_) {
      if (!arguments.length)
        return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function (_) {
      if (!arguments.length)
        return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * 0.35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function (_) {
      if (!arguments.length)
        return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([
        [
          x - 0.455 * k,
          y - 0.238 * k
        ],
        [
          x + 0.455 * k,
          y + 0.238 * k
        ]
      ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([
        x - 0.307 * k,
        y + 0.201 * k
      ]).clipExtent([
        [
          x - 0.425 * k + ε,
          y + 0.12 * k + ε
        ],
        [
          x - 0.214 * k - ε,
          y + 0.234 * k - ε
        ]
      ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([
        x - 0.205 * k,
        y + 0.212 * k
      ]).clipExtent([
        [
          x - 0.214 * k + ε,
          y + 0.166 * k + ε
        ],
        [
          x - 0.115 * k - ε,
          y + 0.234 * k - ε
        ]
      ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
      point: d3_noop,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: function () {
        d3_geo_pathAreaPolygon = 0;
        d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
      },
      polygonEnd: function () {
        d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
        d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
      }
    };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function (x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function () {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
      point: d3_geo_pathBoundsPoint,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: d3_noop,
      polygonEnd: d3_noop
    };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0)
      d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1)
      d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0)
      d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1)
      d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
        point: point,
        lineStart: function () {
          stream.point = pointLineStart;
        },
        lineEnd: lineEnd,
        polygonStart: function () {
          stream.lineEnd = lineEndPolygon;
        },
        polygonEnd: function () {
          stream.lineEnd = lineEnd;
          stream.point = point;
        },
        pointRadius: function (_) {
          pointCircle = d3_geo_pathBufferCircle(_);
          return stream;
        },
        result: function () {
          if (buffer.length) {
            var result = buffer.join('');
            buffer = [];
            return result;
          }
        }
      };
    function point(x, y) {
      buffer.push('M', x, ',', y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push('M', x, ',', y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push('L', x, ',', y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push('Z');
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return 'm0,' + radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + -2 * radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + 2 * radius + 'z';
  }
  var d3_geo_pathCentroid = {
      point: d3_geo_pathCentroidPoint,
      lineStart: d3_geo_pathCentroidLineStart,
      lineEnd: d3_geo_pathCentroidLineEnd,
      polygonStart: function () {
        d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
      },
      polygonEnd: function () {
        d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
        d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
        d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
      }
    };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function (x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function (x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function () {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
        point: point,
        lineStart: function () {
          stream.point = pointLineStart;
        },
        lineEnd: lineEnd,
        polygonStart: function () {
          stream.lineEnd = lineEndPolygon;
        },
        polygonEnd: function () {
          stream.lineEnd = lineEnd;
          stream.point = point;
        },
        pointRadius: function (_) {
          pointRadius = _;
          return stream;
        },
        result: d3_noop
      };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = 0.5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function (x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function () {
            stream.polygonStart();
            resample.lineStart = ringStart;
          },
          polygonEnd: function () {
            stream.polygonEnd();
            resample.lineStart = lineStart;
          }
        };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([
            λ,
            φ
          ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function (_) {
      if (!arguments.length)
        return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function () {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === 'function')
          contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid)
          cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function (object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function (object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [
        d3_geo_centroidX2 / d3_geo_centroidZ2,
        d3_geo_centroidY2 / d3_geo_centroidZ2
      ] : d3_geo_centroidZ1 ? [
        d3_geo_centroidX1 / d3_geo_centroidZ1,
        d3_geo_centroidY1 / d3_geo_centroidZ1
      ] : d3_geo_centroidZ0 ? [
        d3_geo_centroidX0 / d3_geo_centroidZ0,
        d3_geo_centroidY0 / d3_geo_centroidZ0
      ] : [
        NaN,
        NaN
      ];
    };
    path.bounds = function (object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [
        [
          d3_geo_pathBoundsX0,
          d3_geo_pathBoundsY0
        ],
        [
          d3_geo_pathBoundsX1,
          d3_geo_pathBoundsY1
        ]
      ];
    };
    path.projection = function (_) {
      if (!arguments.length)
        return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function (_) {
      if (!arguments.length)
        return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== 'function')
        contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function (_) {
      if (!arguments.length)
        return pointRadius;
      pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function (x, y) {
        return project([
          x * d3_degrees,
          y * d3_degrees
        ]);
      });
    return function (stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function (methods) {
    return {
      stream: function (stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods)
          transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function (x, y) {
      this.stream.point(x, y);
    },
    sphere: function () {
      this.stream.sphere();
    },
    lineStart: function () {
      this.stream.lineStart();
    },
    lineEnd: function () {
      this.stream.lineEnd();
    },
    polygonStart: function () {
      this.stream.polygonStart();
    },
    polygonEnd: function () {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function () {
        stream.sphere();
      },
      lineStart: function () {
        stream.lineStart();
      },
      lineEnd: function () {
        stream.lineEnd();
      },
      polygonStart: function () {
        stream.polygonStart();
      },
      polygonEnd: function () {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function () {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function (x, y) {
        x = project(x, y);
        return [
          x[0] * k + δx,
          δy - x[1] * k
        ];
      }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [
        point[0] * k + δx,
        δy - point[1] * k
      ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [
        point[0] * d3_degrees,
        point[1] * d3_degrees
      ];
    }
    projection.stream = function (output) {
      if (stream)
        stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function (_) {
      if (!arguments.length)
        return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function (_) {
      if (!arguments.length)
        return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function (_) {
      if (!arguments.length)
        return k;
      k = +_;
      return reset();
    };
    projection.translate = function (_) {
      if (!arguments.length)
        return [
          x,
          y
        ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function (_) {
      if (!arguments.length)
        return [
          λ * d3_degrees,
          φ * d3_degrees
        ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function (_) {
      if (!arguments.length)
        return [
          δλ * d3_degrees,
          δφ * d3_degrees,
          δγ * d3_degrees
        ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, 'precision');
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream)
        stream.valid = false, stream = null;
      return projection;
    }
    return function () {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function (x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [
      λ,
      φ
    ];
  }
  (d3.geo.equirectangular = function () {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function (rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function (coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [
      λ > π ? λ - τ : λ < -π ? λ + τ : λ,
      φ
    ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function (λ, φ) {
      return λ += δλ, [
        λ > π ? λ - τ : λ < -π ? λ + τ : λ,
        φ
      ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [
        Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ),
        d3_asin(k * cosδγ + y * sinδγ)
      ];
    }
    rotation.invert = function (λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [
        Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ),
        d3_asin(k * cosδφ - x * sinδφ)
      ];
    };
    return rotation;
  }
  d3.geo.circle = function () {
    var origin = [
        0,
        0
      ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === 'function' ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function (x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: 'Polygon',
        coordinates: [ring]
      };
    }
    circle.origin = function (x) {
      if (!arguments.length)
        return origin;
      origin = x;
      return circle;
    };
    circle.angle = function (x) {
      if (!arguments.length)
        return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function (_) {
      if (!arguments.length)
        return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function (from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to)
          from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - 0.5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([
          cr,
          -sr * Math.cos(t),
          -sr * Math.sin(t)
        ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function (a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function () {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: 'MultiLineString',
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function () {
      return lines().map(function (coordinates) {
        return {
          type: 'LineString',
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function () {
      return {
        type: 'Polygon',
        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
      };
    };
    graticule.extent = function (_) {
      if (!arguments.length)
        return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function (_) {
      if (!arguments.length)
        return [
          [
            X0,
            Y0
          ],
          [
            X1,
            Y1
          ]
        ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1)
        _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1)
        _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function (_) {
      if (!arguments.length)
        return [
          [
            x0,
            y0
          ],
          [
            x1,
            y1
          ]
        ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1)
        _ = x0, x0 = x1, x1 = _;
      if (y0 > y1)
        _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function (_) {
      if (!arguments.length)
        return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function (_) {
      if (!arguments.length)
        return [
          DX,
          DY
        ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function (_) {
      if (!arguments.length)
        return [
          dx,
          dy
        ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function (_) {
      if (!arguments.length)
        return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([
      [
        -180,
        -90 + ε
      ],
      [
        180,
        90 - ε
      ]
    ]).minorExtent([
      [
        -180,
        -80 - ε
      ],
      [
        180,
        80 + ε
      ]
    ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function (x) {
      return y.map(function (y) {
        return [
          x,
          y
        ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function (y) {
      return x.map(function (x) {
        return [
          x,
          y
        ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function () {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: 'LineString',
        coordinates: [
          source_ || source.apply(this, arguments),
          target_ || target.apply(this, arguments)
        ]
      };
    }
    greatArc.distance = function () {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function (_) {
      if (!arguments.length)
        return source;
      source = _, source_ = typeof _ === 'function' ? null : _;
      return greatArc;
    };
    greatArc.target = function (_) {
      if (!arguments.length)
        return target;
      target = _, target_ = typeof _ === 'function' ? null : _;
      return greatArc;
    };
    greatArc.precision = function () {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function (source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function (t) {
        var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
        return [
          Math.atan2(y, x) * d3_degrees,
          Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees
        ];
      } : function () {
        return [
          x0 * d3_degrees,
          y0 * d3_degrees
        ];
      };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function (object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
      sphere: d3_noop,
      point: d3_noop,
      lineStart: d3_geo_lengthLineStart,
      lineEnd: d3_noop,
      polygonStart: d3_noop,
      polygonEnd: d3_noop
    };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function (λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function () {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [
        k * cosφ * Math.sin(λ),
        k * Math.sin(φ)
      ];
    }
    azimuthal.invert = function (x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [
        Math.atan2(x * sinc, ρ * cosc),
        Math.asin(ρ && y * sinc / ρ)
      ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {
      return Math.sqrt(2 / (1 + cosλcosφ));
    }, function (ρ) {
      return 2 * Math.asin(ρ / 2);
    });
  (d3.geo.azimuthalEqualArea = function () {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {
      var c = Math.acos(cosλcosφ);
      return c && c / Math.sin(c);
    }, d3_identity);
  (d3.geo.azimuthalEquidistant = function () {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function (φ) {
        return Math.tan(π / 4 + φ / 2);
      }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n)
      return d3_geo_mercator;
    function forward(λ, φ) {
      var ρ = abs(abs(φ) - halfπ) < ε ? 0 : F / Math.pow(t(φ), n);
      return [
        ρ * Math.sin(n * λ),
        F - ρ * Math.cos(n * λ)
      ];
    }
    forward.invert = function (x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [
        Math.atan2(x, ρ0_y) / n,
        2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ
      ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function () {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε)
      return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [
        ρ * Math.sin(n * λ),
        G - ρ * Math.cos(n * λ)
      ];
    }
    forward.invert = function (x, y) {
      var ρ0_y = G - y;
      return [
        Math.atan2(x, ρ0_y) / n,
        G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)
      ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function () {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {
      return 1 / cosλcosφ;
    }, Math.atan);
  (d3.geo.gnomonic = function () {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [
      λ,
      Math.log(Math.tan(π / 4 + φ / 2))
    ];
  }
  d3_geo_mercator.invert = function (x, y) {
    return [
      x,
      2 * Math.atan(Math.exp(y)) - halfπ
    ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function () {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function () {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function (_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([
            [
              t[0] - k,
              t[1] - k
            ],
            [
              t[0] + k,
              t[1] + k
            ]
          ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function () {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function () {
      return 1;
    }, Math.asin);
  (d3.geo.orthographic = function () {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {
      return 1 / (1 + cosλcosφ);
    }, function (ρ) {
      return 2 * Math.atan(ρ);
    });
  (d3.geo.stereographic = function () {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [
      Math.log(Math.tan(π / 4 + φ / 2)),
      -λ
    ];
  }
  d3_geo_transverseMercator.invert = function (x, y) {
    return [
      -y,
      2 * Math.atan(Math.exp(x)) - halfπ
    ];
  };
  (d3.geo.transverseMercator = function () {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function (_) {
      return _ ? center([
        -_[1],
        _[0]
      ]) : (_ = center(), [
        -_[1],
        _[0]
      ]);
    };
    projection.rotate = function (_) {
      return _ ? rotate([
        _[0],
        _[1],
        _.length > 2 ? _[2] + 90 : 90
      ]) : (_ = rotate(), [
        _[0],
        _[1],
        _[2] - 90
      ]);
    };
    return projection.rotate([
      0,
      0
    ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function (vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length)
      return hull(vertices);
    function hull(data) {
      if (data.length < 3)
        return [];
      var fx = d3_functor(x), fy = d3_functor(y), n = data.length, vertices, plen = n - 1, points = [], stack = [], d, i, j, h = 0, x1, y1, x2, y2, u, v, a, sp;
      if (fx === d3_geom_pointX && y === d3_geom_pointY)
        vertices = data;
      else
        for (i = 0, vertices = []; i < n; ++i) {
          vertices.push([
            +fx.call(this, d = data[i], i),
            +fy.call(this, d, i)
          ]);
        }
      for (i = 1; i < n; ++i) {
        if (vertices[i][1] < vertices[h][1] || vertices[i][1] == vertices[h][1] && vertices[i][0] < vertices[h][0])
          h = i;
      }
      for (i = 0; i < n; ++i) {
        if (i === h)
          continue;
        y1 = vertices[i][1] - vertices[h][1];
        x1 = vertices[i][0] - vertices[h][0];
        points.push({
          angle: Math.atan2(y1, x1),
          index: i
        });
      }
      points.sort(function (a, b) {
        return a.angle - b.angle;
      });
      a = points[0].angle;
      v = points[0].index;
      u = 0;
      for (i = 1; i < plen; ++i) {
        j = points[i].index;
        if (a == points[i].angle) {
          x1 = vertices[v][0] - vertices[h][0];
          y1 = vertices[v][1] - vertices[h][1];
          x2 = vertices[j][0] - vertices[h][0];
          y2 = vertices[j][1] - vertices[h][1];
          if (x1 * x1 + y1 * y1 >= x2 * x2 + y2 * y2) {
            points[i].index = -1;
            continue;
          } else {
            points[u].index = -1;
          }
        }
        a = points[i].angle;
        u = i;
        v = j;
      }
      stack.push(h);
      for (i = 0, j = 0; i < 2; ++j) {
        if (points[j].index > -1) {
          stack.push(points[j].index);
          i++;
        }
      }
      sp = stack.length;
      for (; j < plen; ++j) {
        if (points[j].index < 0)
          continue;
        while (!d3_geom_hullCCW(stack[sp - 2], stack[sp - 1], points[j].index, vertices)) {
          --sp;
        }
        stack[sp++] = points[j].index;
      }
      var poly = [];
      for (i = sp - 1; i >= 0; --i)
        poly.push(data[stack[i]]);
      return poly;
    }
    hull.x = function (_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function (_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullCCW(i1, i2, i3, v) {
    var t, a, b, c, d, e, f;
    t = v[i1];
    a = t[0];
    b = t[1];
    t = v[i2];
    c = t[0];
    d = t[1];
    t = v[i3];
    e = t[0];
    f = t[1];
    return (f - b) * (c - a) - (d - b) * (e - a) > 0;
  }
  d3.geom.polygon = function (coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function () {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * 0.5;
  };
  d3_geom_polygonPrototype.centroid = function (k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length)
      k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [
      x * k,
      y * k
    ];
  };
  d3_geom_polygonPrototype.clip = function (subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed)
        subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [
      x1 + ua * x21,
      y1 + ua * y21
    ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
        x: x,
        y: y
      }, previous = beach.P, next = beach.N, disappearing = [beach];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε)
        node = node.L;
      else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc)
      return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
        x: (cy * hb - by * hc) / d + ax,
        y: (bx * hc - cx * hb) / d + ay
      };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2)
      return rfocx;
    var lArc = arc.P;
    if (!lArc)
      return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2)
      return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2)
      return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc)
      return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function () {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a)
        halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare())
        continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc)
      return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite)
      return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2)
      return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L)
          node = node.L;
        else {
          before = node.P;
          break;
        }
      } else {
        if (node.R)
          node = node.R;
        else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before)
      d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P)
        d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb)
      return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1)
        return;
      if (lx > rx) {
        if (!va)
          va = {
            x: fx,
            y: y0
          };
        else if (va.y >= y1)
          return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va)
          va = {
            x: fx,
            y: y1
          };
        else if (va.y < y0)
          return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va)
            va = {
              x: (y0 - fb) / fm,
              y: y0
            };
          else if (va.y >= y1)
            return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va)
            va = {
              x: (y1 - fb) / fm,
              y: y1
            };
          else if (va.y < y0)
            return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va)
            va = {
              x: x0,
              y: fm * x0 + fb
            };
          else if (va.x >= x1)
            return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va)
            va = {
              x: x1,
              y: fm * x1 + fb
            };
          else if (va.x < x0)
            return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va)
      d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb)
      d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function () {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function () {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function (after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N)
          after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L)
            after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function (node) {
      if (node.N)
        node.N.P = node.P;
      if (node.P)
        node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left)
        next = right;
      else if (!right)
        next = left;
      else
        next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node)
          parent.L = next;
        else
          parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node)
        node.U = parent;
      if (red)
        return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._)
          break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node)
        node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p)
        parent.L = q;
      else
        parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R)
      p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p)
        parent.L = q;
      else
        parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L)
      p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L)
      node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox)
      d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
        cells: d3_geom_voronoiCells,
        edges: d3_geom_voronoiEdges
      };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function (points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points)
      return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function (e) {
            var s = e.start();
            return [
              s.x,
              s.y
            ];
          }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [
            [
              x0,
              y1
            ],
            [
              x1,
              y1
            ],
            [
              x1,
              y0
            ],
            [
              x0,
              y0
            ]
          ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function (d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function (data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
        return edge.l && edge.r;
      }).map(function (edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function (data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([
              data[i],
              data[s0.i],
              data[s1.i]
            ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function (_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function (_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function (_) {
      if (!arguments.length)
        return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function (_) {
      if (!arguments.length)
        return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [
        [
          0,
          0
        ],
        _
      ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [
      [
        -1000000,
        -1000000
      ],
      [
        1000000,
        1000000
      ]
    ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function (vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function (points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat)
          for (i = 0; i < n; ++i) {
            d = data[i];
            if (d.x < x1_)
              x1_ = d.x;
            if (d.y < y1_)
              y1_ = d.y;
            if (d.x > x2_)
              x2_ = d.x;
            if (d.y > y2_)
              y2_ = d.y;
            xs.push(d.x);
            ys.push(d.y);
          }
        else
          for (i = 0; i < n; ++i) {
            var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
            if (x_ < x1_)
              x1_ = x_;
            if (y_ < y1_)
              y1_ = y_;
            if (x_ > x2_)
              x2_ = x_;
            if (y_ > y2_)
              y2_ = y_;
            xs.push(x_);
            ys.push(y_);
          }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy)
        y2_ = y1_ + dx;
      else
        x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y))
          return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < 0.01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right)
          x1 = sx;
        else
          x2 = sx;
        if (bottom)
          y1 = sy;
        else
          y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function (d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function (f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else
        data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function (_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function (_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function (_) {
      if (!arguments.length)
        return x1 == null ? null : [
          [
            x1,
            y1
          ],
          [
            x2,
            y2
          ]
        ];
      if (_ == null)
        x1 = y1 = x2 = y2 = null;
      else
        x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function (_) {
      if (!arguments.length)
        return x1 == null ? null : [
          x2 - x1,
          y2 - y1
        ];
      if (_ == null)
        x1 = y1 = x2 = y2 = null;
      else
        x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, children = node.nodes;
      if (children[0])
        d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1])
        d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2])
        d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3])
        d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function (t) {
      return '#' + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function (t) {
      for (k in i)
        c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    b -= a = +a;
    return function (t) {
      return a + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var m, i, j, s0 = 0, s1 = 0, s = [], q = [], n, o;
    a = a + '', b = b + '';
    d3_interpolate_number.lastIndex = 0;
    for (i = 0; m = d3_interpolate_number.exec(b); ++i) {
      if (m.index)
        s.push(b.substring(s0, s1 = m.index));
      q.push({
        i: s.length,
        x: m[0]
      });
      s.push(null);
      s0 = d3_interpolate_number.lastIndex;
    }
    if (s0 < b.length)
      s.push(b.substring(s0));
    for (i = 0, n = q.length; (m = d3_interpolate_number.exec(a)) && i < n; ++i) {
      o = q[i];
      if (o.x == m[0]) {
        if (o.i) {
          if (s[o.i + 1] == null) {
            s[o.i - 1] += o.x;
            s.splice(o.i, 1);
            for (j = i + 1; j < n; ++j)
              q[j].i--;
          } else {
            s[o.i - 1] += o.x + s[o.i + 1];
            s.splice(o.i, 2);
            for (j = i + 1; j < n; ++j)
              q[j].i -= 2;
          }
        } else {
          if (s[o.i + 1] == null) {
            s[o.i] = o.x;
          } else {
            s[o.i] = o.x + s[o.i + 1];
            s.splice(o.i + 1, 1);
            for (j = i + 1; j < n; ++j)
              q[j].i--;
          }
        }
        q.splice(i, 1);
        n--;
        i--;
      } else {
        o.x = d3_interpolateNumber(parseFloat(m[0]), parseFloat(o.x));
      }
    }
    while (i < n) {
      o = q.pop();
      if (s[o.i + 1] == null) {
        s[o.i] = o.x;
      } else {
        s[o.i] = o.x + s[o.i + 1];
        s.splice(o.i + 1, 1);
      }
      n--;
    }
    if (s.length === 1) {
      return s[0] == null ? (o = q[0].x, function (t) {
        return o(t) + '';
      }) : function () {
        return b;
      };
    }
    return function (t) {
      for (i = 0; i < n; ++i)
        s[(o = q[i]).i] = o.x(t);
      return s.join('');
    };
  }
  var d3_interpolate_number = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b)));
    return f;
  }
  d3.interpolators = [function (a, b) {
      var t = typeof b;
      return (t === 'string' ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_Color ? d3_interpolateRgb : t === 'object' ? Array.isArray(b) ? d3_interpolateArray : d3_interpolateObject : d3_interpolateNumber)(a, b);
    }];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i)
      x.push(d3_interpolate(a[i], b[i]));
    for (; i < na; ++i)
      c[i] = a[i];
    for (; i < nb; ++i)
      c[i] = b[i];
    return function (t) {
      for (i = 0; i < n0; ++i)
        c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function () {
    return d3_identity;
  };
  var d3_ease = d3.map({
      linear: d3_ease_default,
      poly: d3_ease_poly,
      quad: function () {
        return d3_ease_quad;
      },
      cubic: function () {
        return d3_ease_cubic;
      },
      sin: function () {
        return d3_ease_sin;
      },
      exp: function () {
        return d3_ease_exp;
      },
      circle: function () {
        return d3_ease_circle;
      },
      elastic: d3_ease_elastic,
      back: d3_ease_back,
      bounce: function () {
        return d3_ease_bounce;
      }
    });
  var d3_ease_mode = d3.map({
      'in': d3_identity,
      out: d3_ease_reverse,
      'in-out': d3_ease_reflect,
      'out-in': function (f) {
        return d3_ease_reflect(d3_ease_reverse(f));
      }
    });
  d3.ease = function (name) {
    var i = name.indexOf('-'), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : 'in';
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function (t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function (t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function (t) {
      return 0.5 * (t < 0.5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0)
      return 0;
    if (t >= 1)
      return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < 0.5 ? t3 : 3 * (t - t2) + t3 - 0.75);
  }
  function d3_ease_poly(e) {
    return function (t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2)
      p = 0.45;
    if (arguments.length)
      s = p / τ * Math.asin(1 / a);
    else
      a = 1, s = p / 4;
    return function (t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s)
      s = 1.70158;
    return function (t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc))
      bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh))
      bh = 0, ah = isNaN(ah) ? b.h : ah;
    else if (bh > 180)
      bh -= 360;
    else if (bh < -180)
      bh += 360;
    return function (t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + '';
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs))
      bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh))
      bh = 0, ah = isNaN(ah) ? b.h : ah;
    else if (bh > 180)
      bh -= 360;
    else if (bh < -180)
      bh += 360;
    return function (t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + '';
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function (t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + '';
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function (t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function (string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, 'g');
    return (d3.transform = function (string) {
      if (string != null) {
        g.setAttribute('transform', string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [
        m.a,
        m.b
      ], r1 = [
        m.c,
        m.d
      ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [
      m.e,
      m.f
    ];
    this.scale = [
      kx,
      ky
    ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function () {
    return 'translate(' + this.translate + ')rotate(' + this.rotate + ')skewX(' + this.skew + ')scale(' + this.scale + ')';
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
      a: 1,
      b: 0,
      c: 0,
      d: 1,
      e: 0,
      f: 0
    };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push('translate(', null, ',', null, ')');
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push('translate(' + tb + ')');
    } else {
      s.push('');
    }
    if (ra != rb) {
      if (ra - rb > 180)
        rb += 360;
      else if (rb - ra > 180)
        ra += 360;
      q.push({
        i: s.push(s.pop() + 'rotate(', null, ')') - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + 'rotate(' + rb + ')');
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + 'skewX(', null, ')') - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + 'skewX(' + wb + ')');
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + 'scale(', null, ',', null, ')');
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + 'scale(' + kb + ')');
    }
    n = q.length;
    return function (t) {
      var i = -1, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join('');
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function (x) {
      return (x - a) * b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function (x) {
      return Math.max(0, Math.min(1, (x - a) * b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function () {
    return function (links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n)
        paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [start];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b)
      return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function () {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function (a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function (d, i) {
          d.sort(function (a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + '-' + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + '-' + j], target = subgroups[j + '-' + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords)
        resort();
    }
    function resort() {
      chords.sort(function (a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function (x) {
      if (!arguments.length)
        return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function (x) {
      if (!arguments.length)
        return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function (x) {
      if (!arguments.length)
        return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function (x) {
      if (!arguments.length)
        return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function (x) {
      if (!arguments.length)
        return sortChords;
      sortChords = x;
      if (chords)
        resort();
      return chord;
    };
    chord.chords = function () {
      if (!chords)
        relayout();
      return chords;
    };
    chord.groups = function () {
      if (!groups)
        relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function () {
    var force = {}, event = d3.dispatch('start', 'tick', 'end'), size = [
        1,
        1
      ], drag, alpha, friction = 0.9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, gravity = 0.1, theta = 0.8, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function (quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dn = 1 / Math.sqrt(dx * dx + dy * dy);
          if ((x2 - x1) * dn < theta) {
            var k = quad.charge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
            return true;
          }
          if (quad.point && isFinite(dn)) {
            var k = quad.pointCharge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function () {
      if ((alpha *= 0.99) < 0.005) {
        event.end({
          type: 'end',
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k)
          while (++i < n) {
            o = nodes[i];
            o.x += (x - o.x) * k;
            o.y += (y - o.y) * k;
          }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: 'tick',
        alpha: alpha
      });
    };
    force.nodes = function (x) {
      if (!arguments.length)
        return nodes;
      nodes = x;
      return force;
    };
    force.links = function (x) {
      if (!arguments.length)
        return links;
      links = x;
      return force;
    };
    force.size = function (x) {
      if (!arguments.length)
        return size;
      size = x;
      return force;
    };
    force.linkDistance = function (x) {
      if (!arguments.length)
        return linkDistance;
      linkDistance = typeof x === 'function' ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function (x) {
      if (!arguments.length)
        return linkStrength;
      linkStrength = typeof x === 'function' ? x : +x;
      return force;
    };
    force.friction = function (x) {
      if (!arguments.length)
        return friction;
      friction = +x;
      return force;
    };
    force.charge = function (x) {
      if (!arguments.length)
        return charge;
      charge = typeof x === 'function' ? x : +x;
      return force;
    };
    force.gravity = function (x) {
      if (!arguments.length)
        return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function (x) {
      if (!arguments.length)
        return theta;
      theta = +x;
      return force;
    };
    force.alpha = function (x) {
      if (!arguments.length)
        return alpha;
      x = +x;
      if (alpha) {
        if (x > 0)
          alpha = x;
        else
          alpha = 0;
      } else if (x > 0) {
        event.start({
          type: 'start',
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function () {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == 'number')
          o.source = nodes[o.source];
        if (typeof o.target == 'number')
          o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x))
          o.x = position('x', w);
        if (isNaN(o.y))
          o.y = position('y', h);
        if (isNaN(o.px))
          o.px = o.x;
        if (isNaN(o.py))
          o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === 'function')
        for (i = 0; i < m; ++i)
          distances[i] = +linkDistance.call(this, links[i], i);
      else
        for (i = 0; i < m; ++i)
          distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === 'function')
        for (i = 0; i < m; ++i)
          strengths[i] = +linkStrength.call(this, links[i], i);
      else
        for (i = 0; i < m; ++i)
          strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === 'function')
        for (i = 0; i < n; ++i)
          charges[i] = +charge.call(this, nodes[i], i);
      else
        for (i = 0; i < n; ++i)
          charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, m = candidates.length, x;
        while (++j < m)
          if (!isNaN(x = candidates[j][dimension]))
            return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function () {
      return force.alpha(0.1);
    };
    force.stop = function () {
      return force.alpha(0);
    };
    force.drag = function () {
      if (!drag)
        drag = d3.behavior.drag().origin(d3_identity).on('dragstart.force', d3_layout_forceDragstart).on('drag.force', dragmove).on('dragend.force', d3_layout_forceDragend);
      if (!arguments.length)
        return drag;
      this.on('mouseover.force', d3_layout_forceMouseover).on('mouseout.force', d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, 'on');
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null)
          continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - 0.5;
        quad.point.y += Math.random() - 0.5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1;
  d3.layout.hierarchy = function () {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function recurse(node, depth, nodes) {
      var childs = children.call(hierarchy, node, depth);
      node.depth = depth;
      nodes.push(node);
      if (childs && (n = childs.length)) {
        var i = -1, n, c = node.children = new Array(n), v = 0, j = depth + 1, d;
        while (++i < n) {
          d = c[i] = recurse(childs[i], j, nodes);
          d.parent = node;
          v += d.value;
        }
        if (sort)
          c.sort(sort);
        if (value)
          node.value = v;
      } else {
        delete node.children;
        if (value) {
          node.value = +value.call(hierarchy, node, depth) || 0;
        }
      }
      return node;
    }
    function revalue(node, depth) {
      var children = node.children, v = 0;
      if (children && (n = children.length)) {
        var i = -1, n, j = depth + 1;
        while (++i < n)
          v += revalue(children[i], j);
      } else if (value) {
        v = +value.call(hierarchy, node, depth) || 0;
      }
      if (value)
        node.value = v;
      return v;
    }
    function hierarchy(d) {
      var nodes = [];
      recurse(d, 0, nodes);
      return nodes;
    }
    hierarchy.sort = function (x) {
      if (!arguments.length)
        return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function (x) {
      if (!arguments.length)
        return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function (x) {
      if (!arguments.length)
        return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function (root) {
      revalue(root, 0);
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, 'sort', 'children', 'value');
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function (parent) {
      return (parent.children || []).map(function (child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function () {
    var hierarchy = d3.layout.hierarchy(), size = [
        1,
        1
      ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n)
          d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function (x) {
      if (!arguments.length)
        return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function () {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
    function pie(data) {
      var values = data.map(function (d, i) {
          return +value.call(pie, d, i);
        });
      var a = +(typeof startAngle === 'function' ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === 'function' ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null)
        index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
          return values[j] - values[i];
        } : function (i, j) {
          return sort(data[i], data[j]);
        });
      var arcs = [];
      index.forEach(function (i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function (x) {
      if (!arguments.length)
        return value;
      value = x;
      return pie;
    };
    pie.sort = function (x) {
      if (!arguments.length)
        return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function (x) {
      if (!arguments.length)
        return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function (x) {
      if (!arguments.length)
        return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function () {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      var series = data.map(function (d, i) {
          return values.call(stack, d, i);
        });
      var points = series.map(function (d) {
          return d.map(function (v, i) {
            return [
              x.call(stack, v, i),
              y.call(stack, v, i)
            ];
          });
        });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var n = series.length, m = series[0].length, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function (x) {
      if (!arguments.length)
        return values;
      values = x;
      return stack;
    };
    stack.order = function (x) {
      if (!arguments.length)
        return order;
      order = typeof x === 'function' ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function (x) {
      if (!arguments.length)
        return offset;
      offset = typeof x === 'function' ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function (z) {
      if (!arguments.length)
        return x;
      x = z;
      return stack;
    };
    stack.y = function (z) {
      if (!arguments.length)
        return y;
      y = z;
      return stack;
    };
    stack.out = function (z) {
      if (!arguments.length)
        return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
      'inside-out': function (data) {
        var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function (a, b) {
            return max[a] - max[b];
          }), top = 0, bottom = 0, tops = [], bottoms = [];
        for (i = 0; i < n; ++i) {
          j = index[i];
          if (top < bottom) {
            top += sums[j];
            tops.push(j);
          } else {
            bottom += sums[j];
            bottoms.push(j);
          }
        }
        return bottoms.reverse().concat(tops);
      },
      reverse: function (data) {
        return d3.range(data.length).reverse();
      },
      'default': d3_layout_stackOrderDefault
    });
  var d3_layout_stackOffsets = d3.map({
      silhouette: function (data) {
        var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
        for (j = 0; j < m; ++j) {
          for (i = 0, o = 0; i < n; i++)
            o += data[i][j][1];
          if (o > max)
            max = o;
          sums.push(o);
        }
        for (j = 0; j < m; ++j) {
          y0[j] = (max - sums[j]) / 2;
        }
        return y0;
      },
      wiggle: function (data) {
        var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
        y0[0] = o = o0 = 0;
        for (j = 1; j < m; ++j) {
          for (i = 0, s1 = 0; i < n; ++i)
            s1 += data[i][j][1];
          for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
            for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
              s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
            }
            s2 += s3 * data[i][j][1];
          }
          y0[j] = o -= s1 ? s2 / s1 * dx : 0;
          if (o < o0)
            o0 = o;
        }
        for (j = 0; j < m; ++j)
          y0[j] -= o0;
        return y0;
      },
      expand: function (data) {
        var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
        for (j = 0; j < m; ++j) {
          for (i = 0, o = 0; i < n; i++)
            o += data[i][j][1];
          if (o)
            for (i = 0; i < n; i++)
              data[i][j][1] /= o;
          else
            for (i = 0; i < n; i++)
              data[i][j][1] = k;
        }
        for (j = 0; j < m; ++j)
          y0[j] = 0;
        return y0;
      },
      zero: d3_layout_stackOffsetZero
    });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m)
      y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (; i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function () {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function (x) {
      if (!arguments.length)
        return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function (x) {
      if (!arguments.length)
        return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function (x) {
      if (!arguments.length)
        return binner;
      binner = typeof x === 'number' ? function (range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function (x) {
      if (!arguments.length)
        return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n)
      f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [
      d3.min(values),
      d3.max(values)
    ];
  }
  d3.layout.tree = function () {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [
        1,
        1
      ], nodeSize = false;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0];
      function firstWalk(node, previousSibling) {
        var children = node.children, layout = node._tree;
        if (children && (n = children.length)) {
          var n, firstChild = children[0], previousChild, ancestor = firstChild, child, i = -1;
          while (++i < n) {
            child = children[i];
            firstWalk(child, previousChild);
            ancestor = apportion(child, previousChild, ancestor);
            previousChild = child;
          }
          d3_layout_treeShift(node);
          var midpoint = 0.5 * (firstChild._tree.prelim + child._tree.prelim);
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
            layout.mod = layout.prelim - midpoint;
          } else {
            layout.prelim = midpoint;
          }
        } else {
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
          }
        }
      }
      function secondWalk(node, x) {
        node.x = node._tree.prelim + x;
        var children = node.children;
        if (children && (n = children.length)) {
          var i = -1, n;
          x += node._tree.mod;
          while (++i < n) {
            secondWalk(children[i], x);
          }
        }
      }
      function apportion(node, previousSibling, ancestor) {
        if (previousSibling) {
          var vip = node, vop = node, vim = previousSibling, vom = node.parent.children[0], sip = vip._tree.mod, sop = vop._tree.mod, sim = vim._tree.mod, som = vom._tree.mod, shift;
          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
            vom = d3_layout_treeLeft(vom);
            vop = d3_layout_treeRight(vop);
            vop._tree.ancestor = node;
            shift = vim._tree.prelim + sim - vip._tree.prelim - sip + separation(vim, vip);
            if (shift > 0) {
              d3_layout_treeMove(d3_layout_treeAncestor(vim, node, ancestor), node, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim._tree.mod;
            sip += vip._tree.mod;
            som += vom._tree.mod;
            sop += vop._tree.mod;
          }
          if (vim && !d3_layout_treeRight(vop)) {
            vop._tree.thread = vim;
            vop._tree.mod += sim - sop;
          }
          if (vip && !d3_layout_treeLeft(vom)) {
            vom._tree.thread = vip;
            vom._tree.mod += sip - som;
            ancestor = node;
          }
        }
        return ancestor;
      }
      d3_layout_treeVisitAfter(root, function (node, previousSibling) {
        node._tree = {
          ancestor: node,
          prelim: 0,
          mod: 0,
          change: 0,
          shift: 0,
          number: previousSibling ? previousSibling._tree.number + 1 : 0
        };
      });
      firstWalk(root);
      secondWalk(root, -root._tree.prelim);
      var left = d3_layout_treeSearch(root, d3_layout_treeLeftmost), right = d3_layout_treeSearch(root, d3_layout_treeRightmost), deep = d3_layout_treeSearch(root, d3_layout_treeDeepest), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2, y1 = deep.depth || 1;
      d3_layout_treeVisitAfter(root, nodeSize ? function (node) {
        node.x *= size[0];
        node.y = node.depth * size[1];
        delete node._tree;
      } : function (node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = node.depth / y1 * size[1];
        delete node._tree;
      });
      return nodes;
    }
    tree.separation = function (x) {
      if (!arguments.length)
        return separation;
      separation = x;
      return tree;
    };
    tree.size = function (x) {
      if (!arguments.length)
        return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return tree;
    };
    tree.nodeSize = function (x) {
      if (!arguments.length)
        return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(node) {
    var children = node.children;
    return children && children.length ? children[0] : node._tree.thread;
  }
  function d3_layout_treeRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? children[n - 1] : node._tree.thread;
  }
  function d3_layout_treeSearch(node, compare) {
    var children = node.children;
    if (children && (n = children.length)) {
      var child, n, i = -1;
      while (++i < n) {
        if (compare(child = d3_layout_treeSearch(children[i], compare), node) > 0) {
          node = child;
        }
      }
    }
    return node;
  }
  function d3_layout_treeRightmost(a, b) {
    return a.x - b.x;
  }
  function d3_layout_treeLeftmost(a, b) {
    return b.x - a.x;
  }
  function d3_layout_treeDeepest(a, b) {
    return a.depth - b.depth;
  }
  function d3_layout_treeVisitAfter(node, callback) {
    function visit(node, previousSibling) {
      var children = node.children;
      if (children && (n = children.length)) {
        var child, previousChild = null, i = -1, n;
        while (++i < n) {
          child = children[i];
          visit(child, previousChild);
          previousChild = child;
        }
      }
      callback(node, previousSibling);
    }
    visit(node, null);
  }
  function d3_layout_treeShift(node) {
    var shift = 0, change = 0, children = node.children, i = children.length, child;
    while (--i >= 0) {
      child = children[i]._tree;
      child.prelim += shift;
      child.mod += shift;
      shift += child.shift + (change += child.change);
    }
  }
  function d3_layout_treeMove(ancestor, node, shift) {
    ancestor = ancestor._tree;
    node = node._tree;
    var change = shift / (node.number - ancestor.number);
    ancestor.change += change;
    node.change -= change;
    node.shift += shift;
    node.prelim += shift;
    node.mod += shift;
  }
  function d3_layout_treeAncestor(vim, node, ancestor) {
    return vim._tree.ancestor.parent == node.parent ? vim._tree.ancestor : ancestor;
  }
  d3.layout.pack = function () {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [
        1,
        1
      ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === 'function' ? radius : function () {
          return radius;
        };
      root.x = root.y = 0;
      d3_layout_treeVisitAfter(root, function (d) {
        d.r = +r(d.value);
      });
      d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_treeVisitAfter(root, function (d) {
          d.r += dr;
        });
        d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
        d3_layout_treeVisitAfter(root, function (d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function (_) {
      if (!arguments.length)
        return size;
      size = _;
      return pack;
    };
    pack.radius = function (_) {
      if (!arguments.length)
        return radius;
      radius = _ == null || typeof _ === 'function' ? _ : +_;
      return pack;
    };
    pack.padding = function (_) {
      if (!arguments.length)
        return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return 0.999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length))
      return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r)
              d3_layout_packSplice(a, b = j);
            else
              d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n)
        d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = 0.5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.cluster = function () {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [
        1,
        1
      ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_treeVisitAfter(root, function (node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_treeVisitAfter(root, nodeSize ? function (node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function (node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function (x) {
      if (!arguments.length)
        return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function (x) {
      if (!arguments.length)
        return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function (x) {
      if (!arguments.length)
        return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function (child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function (x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function () {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [
        1,
        1
      ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = 'squarify', ratio = 0.5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === 'slice' ? rect.dx : mode === 'dice' ? rect.dy : mode === 'slice-dice' ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== 'squarify' || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area))
          continue;
        if (r < rmin)
          rmin = r;
        if (r > rmax)
          rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy)
          v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx)
          v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies)
        hierarchy.revalue(root);
      scale([root], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky)
        stickies = nodes;
      return nodes;
    }
    treemap.size = function (x) {
      if (!arguments.length)
        return size;
      size = x;
      return treemap;
    };
    treemap.padding = function (x) {
      if (!arguments.length)
        return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === 'number' ? [
          p,
          p,
          p,
          p
        ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === 'function' ? padFunction : type === 'number' ? (x = [
        x,
        x,
        x,
        x
      ], padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function (x) {
      if (!arguments.length)
        return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function (x) {
      if (!arguments.length)
        return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function (x) {
      if (!arguments.length)
        return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function (x) {
      if (!arguments.length)
        return mode;
      mode = x + '';
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function (µ, σ) {
      var n = arguments.length;
      if (n < 2)
        σ = 1;
      if (n < 1)
        µ = 0;
      return function () {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function () {
      var random = d3.random.normal.apply(d3, arguments);
      return function () {
        return Math.exp(random());
      };
    },
    bates: function (m) {
      var random = d3.random.irwinHall(m);
      return function () {
        return random() / m;
      };
    },
    irwinHall: function (m) {
      return function () {
        for (var s = 0, j = 0; j < m; j++)
          s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [
      start,
      stop
    ] : [
      stop,
      start
    ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function (x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function (x) {
        return Math.floor(x / step) * step;
      },
      ceil: function (x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
      floor: d3_identity,
      ceil: d3_identity
    };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function (x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function () {
    return d3_scale_linear([
      0,
      1
    ], [
      0,
      1
    ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function (y) {
      return input(y);
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function (x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function (x) {
      if (!arguments.length)
        return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function (x) {
      if (!arguments.length)
        return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function (m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function (m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function (m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function () {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, 'range', 'rangeRound', 'interpolate', 'clamp');
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null)
      m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= 0.15)
      step *= 10;
    else if (err <= 0.35)
      step *= 5;
    else if (err <= 0.75)
      step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * 0.5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    return d3.format(format ? format.replace(d3_format_re, function (a, b, c, d, e, f, g, h, i, j) {
      return [
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        i || '.' + d3_scale_linearFormatPrecision(j, range),
        j
      ].join('');
    }) : ',.' + d3_scale_linearPrecision(range[2]) + 'f');
  }
  var d3_scale_linearFormatSignificant = {
      s: 1,
      g: 1,
      p: 1,
      r: 1,
      e: 1
    };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + 0.01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(Math.abs(range[0]), Math.abs(range[1])))) + +(type !== 'e') : p - (type === '%') * 2;
  }
  d3.scale.log = function () {
    return d3_scale_log(d3.scale.linear().domain([
      0,
      1
    ]), 10, true, [
      1,
      10
    ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function (x) {
      return pow(linear.invert(x));
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function (_) {
      if (!arguments.length)
        return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function () {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function () {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (; i < j; i++)
            for (var k = 1; k < n; k++)
              ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (; i++ < j;)
            for (var k = n - 1; k > 0; k--)
              ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {
        }
        for (j = ticks.length; ticks[j - 1] > v; j--) {
        }
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function (n, format) {
      if (!arguments.length)
        return d3_scale_logFormat;
      if (arguments.length < 2)
        format = d3_scale_logFormat;
      else if (typeof format !== 'function')
        format = d3.format(format);
      var k = Math.max(0.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, Math.floor), e;
      return function (d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : '';
      };
    };
    scale.copy = function () {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format('.0e'), d3_scale_logNiceNegative = {
      floor: function (x) {
        return -Math.ceil(-x);
      },
      ceil: function (x) {
        return -Math.floor(-x);
      }
    };
  d3.scale.pow = function () {
    return d3_scale_pow(d3.scale.linear(), 1, [
      0,
      1
    ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function (x) {
      return powb(linear.invert(x));
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function (m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function (m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function (m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function (x) {
      if (!arguments.length)
        return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function () {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function (x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function () {
    return d3.scale.pow().exponent(0.5);
  };
  d3.scale.ordinal = function () {
    return d3_scale_ordinal([], {
      t: 'range',
      a: [[]]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || ranger.t === 'range' && index.set(x, domain.push(x))) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function (i) {
        return start + step * i;
      });
    }
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n)
        if (!index.has(xi = x[i]))
          index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: 'range',
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function (x, padding) {
      if (arguments.length < 2)
        padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: 'rangePoints',
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function (x, padding, outerPadding) {
      if (arguments.length < 2)
        padding = 0;
      if (arguments.length < 3)
        outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse)
        range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: 'rangeBands',
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function (x, padding, outerPadding) {
      if (arguments.length < 2)
        padding = 0;
      if (arguments.length < 3)
        outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse)
        range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: 'rangeRoundBands',
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function () {
      return rangeBand;
    };
    scale.rangeExtent = function () {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function () {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function () {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function () {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function () {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function () {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [
      2062260,
      16744206,
      2924588,
      14034728,
      9725885,
      9197131,
      14907330,
      8355711,
      12369186,
      1556175
    ].map(d3_rgbString);
  var d3_category20 = [
      2062260,
      11454440,
      16744206,
      16759672,
      2924588,
      10018698,
      14034728,
      16750742,
      9725885,
      12955861,
      9197131,
      12885140,
      14907330,
      16234194,
      8355711,
      13092807,
      12369186,
      14408589,
      1556175,
      10410725
    ].map(d3_rgbString);
  var d3_category20b = [
      3750777,
      5395619,
      7040719,
      10264286,
      6519097,
      9216594,
      11915115,
      13556636,
      9202993,
      12426809,
      15186514,
      15190932,
      8666169,
      11356490,
      14049643,
      15177372,
      8077683,
      10834324,
      13528509,
      14589654
    ].map(d3_rgbString);
  var d3_category20c = [
      3244733,
      7057110,
      10406625,
      13032431,
      15095053,
      16616764,
      16625259,
      16634018,
      3253076,
      7652470,
      10607003,
      13101504,
      7695281,
      10394312,
      12369372,
      14342891,
      6513507,
      9868950,
      12434877,
      14277081
    ].map(d3_rgbString);
  d3.scale.quantile = function () {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q)
        thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x))
        return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      domain = x.filter(function (d) {
        return !isNaN(d);
      }).sort(d3.ascending);
      return rescale();
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function () {
      return thresholds;
    };
    scale.invertExtent = function (y) {
      y = range.indexOf(y);
      return y < 0 ? [
        NaN,
        NaN
      ] : [
        y > 0 ? thresholds[y - 1] : domain[0],
        y < thresholds.length ? thresholds[y] : domain[domain.length - 1]
      ];
    };
    scale.copy = function () {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function () {
    return d3_scale_quantize(0, 1, [
      0,
      1
    ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function (x) {
      if (!arguments.length)
        return [
          x0,
          x1
        ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function (y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [
        y,
        y + 1 / kx
      ];
    };
    scale.copy = function () {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function () {
    return d3_scale_threshold([0.5], [
      0,
      1
    ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x)
        return range[d3.bisect(domain, x)];
    }
    scale.domain = function (_) {
      if (!arguments.length)
        return domain;
      domain = _;
      return scale;
    };
    scale.range = function (_) {
      if (!arguments.length)
        return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function (y) {
      y = range.indexOf(y);
      return [
        domain[y - 1],
        domain[y]
      ];
    };
    scale.copy = function () {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function () {
    return d3_scale_identity([
      0,
      1
    ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function (x) {
      if (!arguments.length)
        return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function (m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function (m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function () {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  d3.svg.arc = function () {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, a0 = a1, a1 = da), a1 - a0), df = da < π ? '0' : '1', c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + r1 + 'M0,' + r0 + 'A' + r0 + ',' + r0 + ' 0 1,0 0,' + -r0 + 'A' + r0 + ',' + r0 + ' 0 1,0 0,' + r0 + 'Z' : 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + r1 + 'Z' : r0 ? 'M' + r1 * c0 + ',' + r1 * s0 + 'A' + r1 + ',' + r1 + ' 0 ' + df + ',1 ' + r1 * c1 + ',' + r1 * s1 + 'L' + r0 * c1 + ',' + r0 * s1 + 'A' + r0 + ',' + r0 + ' 0 ' + df + ',0 ' + r0 * c0 + ',' + r0 * s0 + 'Z' : 'M' + r1 * c0 + ',' + r1 * s0 + 'A' + r1 + ',' + r1 + ' 0 ' + df + ',1 ' + r1 * c1 + ',' + r1 * s1 + 'L0,0' + 'Z';
    }
    arc.innerRadius = function (v) {
      if (!arguments.length)
        return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function (v) {
      if (!arguments.length)
        return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function (v) {
      if (!arguments.length)
        return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function (v) {
      if (!arguments.length)
        return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function () {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [
        Math.cos(a) * r,
        Math.sin(a) * r
      ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = 0.7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push('M', interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([
            +fx.call(this, d, i),
            +fy.call(this, d, i)
          ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length)
        segment();
      return segments.length ? segments.join('') : null;
    }
    line.x = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return line;
    };
    line.y = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return line;
    };
    line.defined = function (_) {
      if (!arguments.length)
        return defined;
      defined = _;
      return line;
    };
    line.interpolate = function (_) {
      if (!arguments.length)
        return interpolateKey;
      if (typeof _ === 'function')
        interpolateKey = interpolate = _;
      else
        interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function (_) {
      if (!arguments.length)
        return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function () {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
      linear: d3_svg_lineLinear,
      'linear-closed': d3_svg_lineLinearClosed,
      step: d3_svg_lineStep,
      'step-before': d3_svg_lineStepBefore,
      'step-after': d3_svg_lineStepAfter,
      basis: d3_svg_lineBasis,
      'basis-open': d3_svg_lineBasisOpen,
      'basis-closed': d3_svg_lineBasisClosed,
      bundle: d3_svg_lineBundle,
      cardinal: d3_svg_lineCardinal,
      'cardinal-open': d3_svg_lineCardinalOpen,
      'cardinal-closed': d3_svg_lineCardinalClosed,
      monotone: d3_svg_lineMonotone
    });
  d3_svg_lineInterpolators.forEach(function (key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join('L');
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + 'Z';
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [
        p[0],
        ',',
        p[1]
      ];
    while (++i < n)
      path.push('H', (p[0] + (p = points[i])[0]) / 2, 'V', p[1]);
    if (n > 1)
      path.push('H', p[0]);
    return path.join('');
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [
        p[0],
        ',',
        p[1]
      ];
    while (++i < n)
      path.push('V', (p = points[i])[1], 'H', p[0]);
    return path.join('');
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [
        p[0],
        ',',
        p[1]
      ];
    while (++i < n)
      path.push('H', (p = points[i])[0], 'V', p[1]);
    return path.join('');
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = '', p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += 'Q' + (p[0] - t0[0] * 2 / 3) + ',' + (p[1] - t0[1] * 2 / 3) + ',' + p[0] + ',' + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += 'C' + (p0[0] + t0[0]) + ',' + (p0[1] + t0[1]) + ',' + (p[0] - t[0]) + ',' + (p[1] - t[1]) + ',' + p[0] + ',' + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += 'S' + (p[0] - t[0]) + ',' + (p[1] - t[1]) + ',' + p[0] + ',' + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += 'Q' + (p[0] + t[0] * 2 / 3) + ',' + (p[1] + t[1] * 2 / 3) + ',' + lp[0] + ',' + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([
        a * (p2[0] - p0[0]),
        a * (p2[1] - p0[1])
      ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3)
      return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [
        x0,
        x0,
        x0,
        (pi = points[1])[0]
      ], py = [
        y0,
        y0,
        y0,
        pi[1]
      ], path = [
        x0,
        ',',
        y0,
        'L',
        d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
        ',',
        d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
      ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push('L', pi);
    return path.join('');
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4)
      return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [0], py = [0];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + ',' + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join('');
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [
      d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
      ',',
      d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
    ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join('');
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [
      0,
      2 / 3,
      1 / 3,
      0
    ], d3_svg_lineBasisBezier2 = [
      0,
      1 / 3,
      2 / 3,
      0
    ], d3_svg_lineBasisBezier3 = [
      0,
      1 / 6,
      2 / 3,
      1 / 6
    ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push('C', d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([
        s || 0,
        m[i] * s || 0
      ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function () {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = 'L', tension = 0.7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function () {
          return x;
        } : d3_functor(x1), fy1 = y0 === y1 ? function () {
          return y;
        } : d3_functor(y1), x, y;
      function segment() {
        segments.push('M', interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), 'Z');
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([
            x = +fx0.call(this, d, i),
            y = +fy0.call(this, d, i)
          ]);
          points1.push([
            +fx1.call(this, d, i),
            +fy1.call(this, d, i)
          ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length)
        segment();
      return segments.length ? segments.join('') : null;
    }
    area.x = function (_) {
      if (!arguments.length)
        return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function (_) {
      if (!arguments.length)
        return x0;
      x0 = _;
      return area;
    };
    area.x1 = function (_) {
      if (!arguments.length)
        return x1;
      x1 = _;
      return area;
    };
    area.y = function (_) {
      if (!arguments.length)
        return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function (_) {
      if (!arguments.length)
        return y0;
      y0 = _;
      return area;
    };
    area.y1 = function (_) {
      if (!arguments.length)
        return y1;
      y1 = _;
      return area;
    };
    area.defined = function (_) {
      if (!arguments.length)
        return defined;
      defined = _;
      return area;
    };
    area.interpolate = function (_) {
      if (!arguments.length)
        return interpolateKey;
      if (typeof _ === 'function')
        interpolateKey = interpolate = _;
      else
        interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? 'M' : 'L';
      return area;
    };
    area.tension = function (_) {
      if (!arguments.length)
        return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function () {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function () {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function () {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return 'M' + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + 'Z';
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [
          r * Math.cos(a0),
          r * Math.sin(a0)
        ],
        p1: [
          r * Math.cos(a1),
          r * Math.sin(a1)
        ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return 'A' + r + ',' + r + ' 0 ' + +(a > π) + ',1 ' + p;
    }
    function curve(r0, p0, r1, p1) {
      return 'Q 0,0 ' + p1;
    }
    chord.radius = function (v) {
      if (!arguments.length)
        return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function (v) {
      if (!arguments.length)
        return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function (v) {
      if (!arguments.length)
        return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function (v) {
      if (!arguments.length)
        return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function (v) {
      if (!arguments.length)
        return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function () {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [
          p0,
          {
            x: p0.x,
            y: m
          },
          {
            x: p3.x,
            y: m
          },
          p3
        ];
      p = p.map(projection);
      return 'M' + p[0] + 'C' + p[1] + ' ' + p[2] + ' ' + p[3];
    }
    diagonal.source = function (x) {
      if (!arguments.length)
        return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function (x) {
      if (!arguments.length)
        return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function (x) {
      if (!arguments.length)
        return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [
      d.x,
      d.y
    ];
  }
  d3.svg.diagonal.radial = function () {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function (x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function () {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [
        r * Math.cos(a),
        r * Math.sin(a)
      ];
    };
  }
  d3.svg.symbol = function () {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function (x) {
      if (!arguments.length)
        return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function (x) {
      if (!arguments.length)
        return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return 'circle';
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return 'M0,' + r + 'A' + r + ',' + r + ' 0 1,1 0,' + -r + 'A' + r + ',' + r + ' 0 1,1 0,' + r + 'Z';
  }
  var d3_svg_symbols = d3.map({
      circle: d3_svg_symbolCircle,
      cross: function (size) {
        var r = Math.sqrt(size / 5) / 2;
        return 'M' + -3 * r + ',' + -r + 'H' + -r + 'V' + -3 * r + 'H' + r + 'V' + -r + 'H' + 3 * r + 'V' + r + 'H' + r + 'V' + 3 * r + 'H' + -r + 'V' + r + 'H' + -3 * r + 'Z';
      },
      diamond: function (size) {
        var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
        return 'M0,' + -ry + 'L' + rx + ',0' + ' 0,' + ry + ' ' + -rx + ',0' + 'Z';
      },
      square: function (size) {
        var r = Math.sqrt(size) / 2;
        return 'M' + -r + ',' + -r + 'L' + r + ',' + -r + ' ' + r + ',' + r + ' ' + -r + ',' + r + 'Z';
      },
      'triangle-down': function (size) {
        var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
        return 'M0,' + ry + 'L' + rx + ',' + -ry + ' ' + -rx + ',' + -ry + 'Z';
      },
      'triangle-up': function (size) {
        var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
        return 'M0,' + -ry + 'L' + rx + ',' + ry + ' ' + -rx + ',' + ry + 'Z';
      }
    });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function (selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function (selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ('__data__' in node)
            subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function (selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o;) {
            if (subnode = subnodes[k])
              d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function (filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== 'function')
      filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function (name, tween) {
    var id = this.id;
    if (arguments.length < 2)
      return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function (node) {
      node.__transition__[id].tween.remove(name);
    } : function (node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === 'function' ? function (node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function (node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function (nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS)
        this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == 'transform' ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += '', function () {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function (t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += '', function () {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function (t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, 'attr.' + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function (nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function (t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function (t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween('attr.' + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function (name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== 'string') {
        if (n < 2)
          value = '';
        for (priority in name)
          this.style(priority, name[priority], value);
        return this;
      }
      priority = '';
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += '', function () {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function (t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, 'style.' + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function (name, tween, priority) {
    if (arguments.length < 3)
      priority = '';
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function (t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween('style.' + name, styleTween);
  };
  d3_transitionPrototype.text = function (value) {
    return d3_transition_tween(this, 'text', value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null)
      b = '';
    return function () {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function () {
    return this.each('end.transition', function () {
      var p;
      if (this.__transition__.count < 2 && (p = this.parentNode))
        p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function (value) {
    var id = this.id;
    if (arguments.length < 1)
      return this.node().__transition__[id].ease;
    if (typeof value !== 'function')
      value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function (node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function (value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === 'function' ? function (node, i, j) {
      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function (node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function (value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === 'function' ? function (node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function (node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function (type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function (node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function (node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch('start', 'end'))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function () {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
        active: 0,
        count: 0
      }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function (elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed)
          return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id)
            return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function (key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          d3.timer(function () {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id)
            return stop();
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, d, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count)
            delete lock[id];
          else
            delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function () {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [10], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function () {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll('.tick').data(ticks, scale1), tickEnter = tick.enter().insert('g', '.domain').attr('class', 'tick').style('opacity', ε), tickExit = d3.transition(tick.exit()).style('opacity', ε).remove(), tickUpdate = d3.transition(tick).style('opacity', 1), tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll('.domain').data([0]), pathUpdate = (path.enter().append('path').attr('class', 'domain'), d3.transition(path));
        tickEnter.append('line');
        tickEnter.append('text');
        var lineEnter = tickEnter.select('line'), lineUpdate = tickUpdate.select('line'), text = tick.select('text').text(tickFormat), textEnter = tickEnter.select('text'), textUpdate = tickUpdate.select('text');
        switch (orient) {
        case 'bottom': {
            tickTransform = d3_svg_axisX;
            lineEnter.attr('y2', innerTickSize);
            textEnter.attr('y', Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr('x2', 0).attr('y2', innerTickSize);
            textUpdate.attr('x', 0).attr('y', Math.max(innerTickSize, 0) + tickPadding);
            text.attr('dy', '.71em').style('text-anchor', 'middle');
            pathUpdate.attr('d', 'M' + range[0] + ',' + outerTickSize + 'V0H' + range[1] + 'V' + outerTickSize);
            break;
          }
        case 'top': {
            tickTransform = d3_svg_axisX;
            lineEnter.attr('y2', -innerTickSize);
            textEnter.attr('y', -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr('x2', 0).attr('y2', -innerTickSize);
            textUpdate.attr('x', 0).attr('y', -(Math.max(innerTickSize, 0) + tickPadding));
            text.attr('dy', '0em').style('text-anchor', 'middle');
            pathUpdate.attr('d', 'M' + range[0] + ',' + -outerTickSize + 'V0H' + range[1] + 'V' + -outerTickSize);
            break;
          }
        case 'left': {
            tickTransform = d3_svg_axisY;
            lineEnter.attr('x2', -innerTickSize);
            textEnter.attr('x', -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr('x2', -innerTickSize).attr('y2', 0);
            textUpdate.attr('x', -(Math.max(innerTickSize, 0) + tickPadding)).attr('y', 0);
            text.attr('dy', '.32em').style('text-anchor', 'end');
            pathUpdate.attr('d', 'M' + -outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + -outerTickSize);
            break;
          }
        case 'right': {
            tickTransform = d3_svg_axisY;
            lineEnter.attr('x2', innerTickSize);
            textEnter.attr('x', Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr('x2', innerTickSize).attr('y2', 0);
            textUpdate.attr('x', Math.max(innerTickSize, 0) + tickPadding).attr('y', 0);
            text.attr('dy', '.32em').style('text-anchor', 'start');
            pathUpdate.attr('d', 'M' + outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + outerTickSize);
            break;
          }
        }
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function (d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1);
        }
        tickEnter.call(tickTransform, scale0);
        tickUpdate.call(tickTransform, scale1);
      });
    }
    axis.scale = function (x) {
      if (!arguments.length)
        return scale;
      scale = x;
      return axis;
    };
    axis.orient = function (x) {
      if (!arguments.length)
        return orient;
      orient = x in d3_svg_axisOrients ? x + '' : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function () {
      if (!arguments.length)
        return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function (x) {
      if (!arguments.length)
        return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function (x) {
      if (!arguments.length)
        return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function (x) {
      var n = arguments.length;
      if (!n)
        return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function (x) {
      if (!arguments.length)
        return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function (x) {
      if (!arguments.length)
        return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function (x) {
      if (!arguments.length)
        return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function () {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = 'bottom', d3_svg_axisOrients = {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    };
  function d3_svg_axisX(selection, x) {
    selection.attr('transform', function (d) {
      return 'translate(' + x(d) + ',0)';
    });
  }
  function d3_svg_axisY(selection, y) {
    selection.attr('transform', function (d) {
      return 'translate(0,' + y(d) + ')';
    });
  }
  d3.svg.brush = function () {
    var event = d3_eventDispatch(brush, 'brushstart', 'brush', 'brushend'), x = null, y = null, xExtent = [
        0,
        0
      ], yExtent = [
        0,
        0
      ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function () {
        var g = d3.select(this).style('pointer-events', 'all').style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').on('mousedown.brush', brushstart).on('touchstart.brush', brushstart);
        var background = g.selectAll('.background').data([0]);
        background.enter().append('rect').attr('class', 'background').style('visibility', 'hidden').style('cursor', 'crosshair');
        g.selectAll('.extent').data([0]).enter().append('rect').attr('class', 'extent').style('cursor', 'move');
        var resize = g.selectAll('.resize').data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append('g').attr('class', function (d) {
          return 'resize ' + d;
        }).style('cursor', function (d) {
          return d3_svg_brushCursor[d];
        }).append('rect').attr('x', function (d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr('y', function (d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr('width', 6).attr('height', 6).style('visibility', 'hidden');
        resize.style('display', brush.empty() ? 'none' : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr('x', range[0]).attr('width', range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr('y', range[0]).attr('height', range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function (g) {
      g.each(function () {
        var event_ = event.of(this, arguments), extent1 = {
            x: xExtent,
            y: yExtent,
            i: xExtentDomain,
            j: yExtentDomain
          }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each('start.brush', function () {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({ type: 'brushstart' });
          }).tween('brush:brush', function () {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function (t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: 'brush',
                mode: 'resize'
              });
            };
          }).each('end.brush', function () {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: 'brush',
              mode: 'resize'
            });
            event_({ type: 'brushend' });
          });
        } else {
          event_({ type: 'brushstart' });
          event_({
            type: 'brush',
            mode: 'resize'
          });
          event_({ type: 'brushend' });
        }
      });
    };
    function redraw(g) {
      g.selectAll('.resize').attr('transform', function (d) {
        return 'translate(' + xExtent[+/e$/.test(d)] + ',' + yExtent[+/^s/.test(d)] + ')';
      });
    }
    function redrawX(g) {
      g.select('.extent').attr('x', xExtent[0]);
      g.selectAll('.extent,.n>rect,.s>rect').attr('width', xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select('.extent').attr('y', yExtent[0]);
      g.selectAll('.extent,.e>rect,.w>rect').attr('height', yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed('extent'), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window).on('keydown.brush', keydown).on('keyup.brush', keyup);
      if (d3.event.changedTouches) {
        w.on('touchmove.brush', brushmove).on('touchend.brush', brushend);
      } else {
        w.on('mousemove.brush', brushmove).on('mouseup.brush', brushend);
      }
      g.interrupt().selectAll('*').interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [
          xExtent[1 - ex] - origin[0],
          yExtent[1 - ey] - origin[1]
        ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey)
        center = origin.slice();
      g.style('pointer-events', 'none').selectAll('.resize').style('display', null);
      d3.select('body').style('cursor', eventTarget.style('cursor'));
      event_({ type: 'brushstart' });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center)
              center = [
                (xExtent[0] + xExtent[1]) / 2,
                (yExtent[0] + yExtent[1]) / 2
              ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else
            center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: 'brush',
            mode: dragging ? 'move' : 'resize'
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center)
            position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i)
            yExtentDomain = null;
          else
            xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style('pointer-events', 'all').selectAll('.resize').style('display', brush.empty() ? 'none' : null);
        d3.select('body').style('cursor', null);
        w.on('mousemove.brush', null).on('mouseup.brush', null).on('touchmove.brush', null).on('touchend.brush', null).on('keydown.brush', null).on('keyup.brush', null);
        dragRestore();
        event_({ type: 'brushend' });
      }
    }
    brush.x = function (z) {
      if (!arguments.length)
        return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function (z) {
      if (!arguments.length)
        return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function (z) {
      if (!arguments.length)
        return x && y ? [
          xClamp,
          yClamp
        ] : x ? xClamp : y ? yClamp : null;
      if (x && y)
        xClamp = !!z[0], yClamp = !!z[1];
      else if (x)
        xClamp = !!z;
      else if (y)
        yClamp = !!z;
      return brush;
    };
    brush.extent = function (z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert)
              x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0)
              t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert)
              y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0)
              t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [
          [
            x0,
            y0
          ],
          [
            x1,
            y1
          ]
        ] : x ? [
          x0,
          x1
        ] : y && [
          y0,
          y1
        ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y)
          x0 = x0[0], x1 = x1[0];
        xExtentDomain = [
          x0,
          x1
        ];
        if (x.invert)
          x0 = x(x0), x1 = x(x1);
        if (x1 < x0)
          t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1])
          xExtent = [
            x0,
            x1
          ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x)
          y0 = y0[1], y1 = y1[1];
        yExtentDomain = [
          y0,
          y1
        ];
        if (y.invert)
          y0 = y(y0), y1 = y(y1);
        if (y1 < y0)
          t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1])
          yExtent = [
            y0,
            y1
          ];
      }
      return brush;
    };
    brush.clear = function () {
      if (!brush.empty()) {
        xExtent = [
          0,
          0
        ], yExtent = [
          0,
          0
        ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function () {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, 'on');
  };
  var d3_svg_brushCursor = {
      n: 'ns-resize',
      e: 'ew-resize',
      s: 'ns-resize',
      w: 'ew-resize',
      nw: 'nwse-resize',
      ne: 'nesw-resize',
      se: 'nwse-resize',
      sw: 'nesw-resize'
    };
  var d3_svg_brushResizes = [
      [
        'n',
        'e',
        's',
        'w',
        'nw',
        'ne',
        'se',
        'sw'
      ],
      [
        'e',
        'w'
      ],
      [
        'n',
        's'
      ],
      []
    ];
  var d3_time = d3.time = {}, d3_date = Date, d3_time_daySymbols = [
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday'
    ];
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function () {
      return this._.getUTCDate();
    },
    getDay: function () {
      return this._.getUTCDay();
    },
    getFullYear: function () {
      return this._.getUTCFullYear();
    },
    getHours: function () {
      return this._.getUTCHours();
    },
    getMilliseconds: function () {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function () {
      return this._.getUTCMinutes();
    },
    getMonth: function () {
      return this._.getUTCMonth();
    },
    getSeconds: function () {
      return this._.getUTCSeconds();
    },
    getTime: function () {
      return this._.getTime();
    },
    getTimezoneOffset: function () {
      return 0;
    },
    valueOf: function () {
      return this._.valueOf();
    },
    setDate: function () {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function () {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function () {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function () {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function () {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function () {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function () {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function () {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function () {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  var d3_time_formatDateTime = '%a %b %e %X %Y', d3_time_formatDate = '%m/%d/%Y', d3_time_formatTime = '%H:%M:%S';
  var d3_time_days = [
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday'
    ], d3_time_dayAbbreviations = [
      'Sun',
      'Mon',
      'Tue',
      'Wed',
      'Thu',
      'Fri',
      'Sat'
    ], d3_time_months = [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December'
    ], d3_time_monthAbbreviations = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec'
    ];
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt))
            times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1)
          times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function (date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function (date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function (date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function (date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function (date) {
    var day = new d3_date(2000, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function (date, offset) {
    date.setDate(date.getDate() + offset);
  }, function (date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function (date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 60000) / 86400000);
  };
  d3_time_daySymbols.forEach(function (day, i) {
    day = day.toLowerCase();
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function (date) {
        (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
        return date;
      }, function (date, offset) {
        date.setDate(date.getDate() + Math.floor(offset) * 7);
      }, function (date) {
        var day = d3_time.year(date).getDay();
        return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
      });
    d3_time[day + 's'] = interval.range;
    d3_time[day + 's'].utc = interval.utc.range;
    d3_time[day + 'OfYear'] = function (date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  d3_time.format = d3_time_format;
  function d3_time_format(template) {
    var n = template.length;
    function format(date) {
      var string = [], i = -1, j = 0, c, p, f;
      while (++i < n) {
        if (template.charCodeAt(i) === 37) {
          string.push(template.substring(j, i));
          if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null)
            c = template.charAt(++i);
          if (f = d3_time_formats[c])
            c = f(date, p == null ? c === 'e' ? ' ' : '0' : p);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(template.substring(j, i));
      return string.join('');
    }
    format.parse = function (string) {
      var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
      if (i != string.length)
        return null;
      if ('p' in d)
        d.H = d.H % 12 + d.p * 12;
      var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
      if ('j' in d)
        date.setFullYear(d.y, 0, d.j);
      else if ('w' in d && ('W' in d || 'U' in d)) {
        date.setFullYear(d.y, 0, 1);
        date.setFullYear(d.y, 0, 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
      } else
        date.setFullYear(d.y, d.m, d.d);
      date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
      return localZ ? date._ : date;
    };
    format.toString = function () {
      return template;
    };
    return format;
  }
  function d3_time_parse(date, template, string, j) {
    var c, p, t, i = 0, n = template.length, m = string.length;
    while (i < n) {
      if (j >= m)
        return -1;
      c = template.charCodeAt(i++);
      if (c === 37) {
        t = template.charAt(i++);
        p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
        if (!p || (j = p(date, string, j)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function d3_time_formatRe(names) {
    return new RegExp('^(?:' + names.map(d3.requote).join('|') + ')', 'i');
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n)
      map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? '-' : '', string = (sign ? -value : value) + '', length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  var d3_time_dayRe = d3_time_formatRe(d3_time_days), d3_time_dayLookup = d3_time_formatLookup(d3_time_days), d3_time_dayAbbrevRe = d3_time_formatRe(d3_time_dayAbbreviations), d3_time_dayAbbrevLookup = d3_time_formatLookup(d3_time_dayAbbreviations), d3_time_monthRe = d3_time_formatRe(d3_time_months), d3_time_monthLookup = d3_time_formatLookup(d3_time_months), d3_time_monthAbbrevRe = d3_time_formatRe(d3_time_monthAbbreviations), d3_time_monthAbbrevLookup = d3_time_formatLookup(d3_time_monthAbbreviations), d3_time_percentRe = /^%/;
  var d3_time_formatPads = {
      '-': '',
      _: ' ',
      '0': '0'
    };
  var d3_time_formats = {
      a: function (d) {
        return d3_time_dayAbbreviations[d.getDay()];
      },
      A: function (d) {
        return d3_time_days[d.getDay()];
      },
      b: function (d) {
        return d3_time_monthAbbreviations[d.getMonth()];
      },
      B: function (d) {
        return d3_time_months[d.getMonth()];
      },
      c: d3_time_format(d3_time_formatDateTime),
      d: function (d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function (d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function (d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function (d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function (d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function (d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function (d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function (d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function (d) {
        return d.getHours() >= 12 ? 'PM' : 'AM';
      },
      S: function (d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function (d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function (d) {
        return d.getDay();
      },
      W: function (d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(d3_time_formatDate),
      X: d3_time_format(d3_time_formatTime),
      y: function (d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function (d, p) {
        return d3_time_formatPad(d.getFullYear() % 10000, p, 4);
      },
      Z: d3_time_zone,
      '%': function () {
        return '%';
      }
    };
  var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      '%': d3_time_parseLiteralPercent
    };
  function d3_time_parseWeekdayAbbrev(date, string, i) {
    d3_time_dayAbbrevRe.lastIndex = 0;
    var n = d3_time_dayAbbrevRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekday(date, string, i) {
    d3_time_dayRe.lastIndex = 0;
    var n = d3_time_dayRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMonthAbbrev(date, string, i) {
    d3_time_monthAbbrevRe.lastIndex = 0;
    var n = d3_time_monthAbbrevRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseMonth(date, string, i) {
    d3_time_monthRe.lastIndex = 0;
    var n = d3_time_monthRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseLocaleFull(date, string, i) {
    return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
  }
  function d3_time_parseLocaleDate(date, string, i) {
    return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
  }
  function d3_time_parseLocaleTime(date, string, i) {
    return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = +string, i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2000);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  var d3_time_numberRe = /^\s*\d+/;
  function d3_time_parseAmPm(date, string, i) {
    var n = d3_time_amPmLookup.get(string.substring(i, i += 2).toLowerCase());
    return n == null ? -1 : (date.p = n, i);
  }
  var d3_time_amPmLookup = d3.map({
      am: 0,
      pm: 1
    });
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? '-' : '+', zh = ~~(abs(z) / 60), zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, '0', 2) + d3_time_formatPad(zm, '0', 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.substring(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  d3_time_format.utc = d3_time_formatUtc;
  function d3_time_formatUtc(template) {
    var local = d3_time_format(template);
    function format(date) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date();
        utc._ = date;
        return local(utc);
      } finally {
        d3_date = Date;
      }
    }
    format.parse = function (string) {
      try {
        d3_date = d3_date_utc;
        var date = local.parse(string);
        return date && date._;
      } finally {
        d3_date = Date;
      }
    };
    format.toString = local.toString;
    return format;
  }
  var d3_time_formatIso = d3_time_formatUtc('%Y-%m-%dT%H:%M:%S.%LZ');
  d3_time_format.iso = Date.prototype.toISOString && +new Date('2000-01-01T00:00:00.000Z') ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function (string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function (date) {
    return new d3_date(Math.floor(date / 1000) * 1000);
  }, function (date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1000);
  }, function (date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function (date) {
    return new d3_date(Math.floor(date / 60000) * 60000);
  }, function (date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 60000);
  }, function (date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function (date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 3600000 - timezone) + timezone) * 3600000);
  }, function (date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 3600000);
  }, function (date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function (date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function (date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function (date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function (x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [
        methods.year,
        d3_scale_linearTickRange(extent.map(function (d) {
          return d / 31536000000;
        }), count)[2]
      ] : !i ? [
        d3_time_scaleMilliseconds,
        d3_scale_linearTickRange(extent, count)[2]
      ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function (interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === 'number' && tickMethod(extent, interval);
      if (method)
        interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function (date) {
          while (skipped(date = interval.floor(date)))
            date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function (date) {
          while (skipped(date = interval.ceil(date)))
            date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function (interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === 'number' ? tickMethod(extent, interval) : !interval.range && [
          { range: interval },
          skip
        ];
      if (method)
        interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function () {
      return format;
    };
    scale.copy = function () {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  function d3_time_scaleFormat(formats) {
    return function (date) {
      var i = formats.length - 1, f = formats[i];
      while (!f[1](date))
        f = formats[--i];
      return f[0](date);
    };
  }
  var d3_time_scaleSteps = [
      1000,
      5000,
      15000,
      30000,
      60000,
      300000,
      900000,
      1800000,
      3600000,
      10800000,
      21600000,
      43200000,
      86400000,
      172800000,
      604800000,
      2592000000,
      7776000000,
      31536000000
    ];
  var d3_time_scaleLocalMethods = [
      [
        d3_time.second,
        1
      ],
      [
        d3_time.second,
        5
      ],
      [
        d3_time.second,
        15
      ],
      [
        d3_time.second,
        30
      ],
      [
        d3_time.minute,
        1
      ],
      [
        d3_time.minute,
        5
      ],
      [
        d3_time.minute,
        15
      ],
      [
        d3_time.minute,
        30
      ],
      [
        d3_time.hour,
        1
      ],
      [
        d3_time.hour,
        3
      ],
      [
        d3_time.hour,
        6
      ],
      [
        d3_time.hour,
        12
      ],
      [
        d3_time.day,
        1
      ],
      [
        d3_time.day,
        2
      ],
      [
        d3_time.week,
        1
      ],
      [
        d3_time.month,
        1
      ],
      [
        d3_time.month,
        3
      ],
      [
        d3_time.year,
        1
      ]
    ];
  var d3_time_scaleLocalFormats = [
      [
        d3_time_format('%Y'),
        d3_true
      ],
      [
        d3_time_format('%B'),
        function (d) {
          return d.getMonth();
        }
      ],
      [
        d3_time_format('%b %d'),
        function (d) {
          return d.getDate() != 1;
        }
      ],
      [
        d3_time_format('%a %d'),
        function (d) {
          return d.getDay() && d.getDate() != 1;
        }
      ],
      [
        d3_time_format('%I %p'),
        function (d) {
          return d.getHours();
        }
      ],
      [
        d3_time_format('%I:%M'),
        function (d) {
          return d.getMinutes();
        }
      ],
      [
        d3_time_format(':%S'),
        function (d) {
          return d.getSeconds();
        }
      ],
      [
        d3_time_format('.%L'),
        function (d) {
          return d.getMilliseconds();
        }
      ]
    ];
  var d3_time_scaleLocalFormat = d3_time_scaleFormat(d3_time_scaleLocalFormats);
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function () {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleMilliseconds = {
      range: function (start, stop, step) {
        return d3.range(+start, +stop, step).map(d3_time_scaleDate);
      },
      floor: d3_identity,
      ceil: d3_identity
    };
  var d3_time_scaleUTCMethods = d3_time_scaleLocalMethods.map(function (m) {
      return [
        m[0].utc,
        m[1]
      ];
    });
  var d3_time_scaleUTCFormats = [
      [
        d3_time_formatUtc('%Y'),
        d3_true
      ],
      [
        d3_time_formatUtc('%B'),
        function (d) {
          return d.getUTCMonth();
        }
      ],
      [
        d3_time_formatUtc('%b %d'),
        function (d) {
          return d.getUTCDate() != 1;
        }
      ],
      [
        d3_time_formatUtc('%a %d'),
        function (d) {
          return d.getUTCDay() && d.getUTCDate() != 1;
        }
      ],
      [
        d3_time_formatUtc('%I %p'),
        function (d) {
          return d.getUTCHours();
        }
      ],
      [
        d3_time_formatUtc('%I:%M'),
        function (d) {
          return d.getUTCMinutes();
        }
      ],
      [
        d3_time_formatUtc(':%S'),
        function (d) {
          return d.getUTCSeconds();
        }
      ],
      [
        d3_time_formatUtc('.%L'),
        function (d) {
          return d.getUTCMilliseconds();
        }
      ]
    ];
  var d3_time_scaleUTCFormat = d3_time_scaleFormat(d3_time_scaleUTCFormats);
  d3_time_scaleUTCMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function () {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUTCMethods, d3_time_scaleUTCFormat);
  };
  d3.text = d3_xhrType(function (request) {
    return request.responseText;
  });
  d3.json = function (url, callback) {
    return d3_xhr(url, 'application/json', d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function (url, callback) {
    return d3_xhr(url, 'text/html', d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function (request) {
    return request.responseXML;
  });
  return d3;
}();
(function () {
  var nv = window.nv || {};
  nv.version = '1.1.15b';
  nv.dev = true;
  //set false when in production
  window.nv = nv;
  nv.tooltip = nv.tooltip || {};
  // For the tooltip system
  nv.utils = nv.utils || {};
  // Utility subsystem
  nv.models = nv.models || {};
  //stores all the possible models/components
  nv.charts = {};
  //stores all the ready to use charts
  nv.graphs = [];
  //stores all the graphs currently on the page
  nv.logs = {};
  //stores some statistics and potential error messages
  nv.dispatch = d3.dispatch('render_start', 'render_end');
  // *************************************************************************
  //  Development render timers - disabled if dev = false
  if (nv.dev) {
    nv.dispatch.on('render_start', function (e) {
      nv.logs.startTime = +new Date();
    });
    nv.dispatch.on('render_end', function (e) {
      nv.logs.endTime = +new Date();
      nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;
      nv.log('total', nv.logs.totalTime);  // used for development, to keep track of graph generation times
    });
  }
  // ********************************************
  //  Public Core NV functions
  // Logs all arguments, and returns the last so you can test things in place
  // Note: in IE8 console.log is an object not a function, and if modernizr is used
  // then calling Function.prototype.bind with with anything other than a function
  // causes a TypeError to be thrown.
  nv.log = function () {
    if (nv.dev && console.log && console.log.apply)
      console.log.apply(console, arguments);
    else if (nv.dev && typeof console.log == 'function' && Function.prototype.bind) {
      var log = Function.prototype.bind.call(console.log, console);
      log.apply(console, arguments);
    }
    return arguments[arguments.length - 1];
  };
  nv.render = function render(step) {
    step = step || 1;
    // number of graphs to generate in each timeout loop
    nv.render.active = true;
    nv.dispatch.render_start();
    setTimeout(function () {
      var chart, graph;
      for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {
        chart = graph.generate();
        if (typeof graph.callback == typeof Function)
          graph.callback(chart);
        nv.graphs.push(chart);
      }
      nv.render.queue.splice(0, i);
      if (nv.render.queue.length)
        setTimeout(arguments.callee, 0);
      else {
        nv.dispatch.render_end();
        nv.render.active = false;
      }
    }, 0);
  };
  nv.render.active = false;
  nv.render.queue = [];
  nv.addGraph = function (obj) {
    if (typeof arguments[0] === typeof Function)
      obj = {
        generate: arguments[0],
        callback: arguments[1]
      };
    nv.render.queue.push(obj);
    if (!nv.render.active)
      nv.render();
  };
  nv.identity = function (d) {
    return d;
  };
  nv.strip = function (s) {
    return s.replace(/(\s|&)/g, '');
  };
  function daysInMonth(month, year) {
    return new Date(year, month + 1, 0).getDate();
  }
  function d3_time_range(floor, step, number) {
    return function (t0, t1, dt) {
      var time = floor(t0), times = [];
      if (time < t0)
        step(time);
      if (dt > 1) {
        while (time < t1) {
          var date = new Date(+time);
          if (number(date) % dt === 0)
            times.push(date);
          step(time);
        }
      } else {
        while (time < t1) {
          times.push(new Date(+time));
          step(time);
        }
      }
      return times;
    };
  }
  d3.time.monthEnd = function (date) {
    return new Date(date.getFullYear(), date.getMonth(), 0);
  };
  d3.time.monthEnds = d3_time_range(d3.time.monthEnd, function (date) {
    date.setUTCDate(date.getUTCDate() + 1);
    date.setDate(daysInMonth(date.getMonth() + 1, date.getFullYear()));
  }, function (date) {
    return date.getMonth();
  });
  /* Utility class to handle creation of an interactive layer.
This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch
containing the X-coordinate. It can also render a vertical line where the mouse is located.

dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over
the rectangle. The dispatch is given one object which contains the mouseX/Y location.
It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.
*/
  nv.interactiveGuideline = function () {
    'use strict';
    var tooltip = nv.models.tooltip();
    //Public settings
    var width = null, height = null, margin = {
        left: 0,
        top: 0
      }, xScale = d3.scale.linear(), yScale = d3.scale.linear(), dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementDblclick'), showGuideLine = true, svgContainer = null;
    //Must pass in the bounding chart's <svg> container.
    //The mousemove event is attached to this container.
    ;
    //Private variables
    var isMSIE = navigator.userAgent.indexOf('MSIE') !== -1;
    //Check user-agent for Microsoft Internet Explorer.
    ;
    function layer(selection) {
      selection.each(function (data) {
        var container = d3.select(this);
        var availableWidth = width || 960, availableHeight = height || 400;
        var wrap = container.selectAll('g.nv-wrap.nv-interactiveLineLayer').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', ' nv-wrap nv-interactiveLineLayer');
        wrapEnter.append('g').attr('class', 'nv-interactiveGuideLine');
        if (!svgContainer) {
          return;
        }
        function mouseHandler() {
          var d3mouse = d3.mouse(this);
          var mouseX = d3mouse[0];
          var mouseY = d3mouse[1];
          var subtractMargin = true;
          var mouseOutAnyReason = false;
          if (isMSIE) {
            /*
                            D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.
                            d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving
                            over a rect in IE 10.
                            However, d3.event.offsetX/Y also returns the mouse coordinates
                            relative to the triggering <rect>. So we use offsetX/Y on IE.  
                         */
            mouseX = d3.event.offsetX;
            mouseY = d3.event.offsetY;
            /*
                            On IE, if you attach a mouse event listener to the <svg> container,
                            it will actually trigger it for all the child elements (like <path>, <circle>, etc).
                            When this happens on IE, the offsetX/Y is set to where ever the child element
                            is located.
                            As a result, we do NOT need to subtract margins to figure out the mouse X/Y
                            position under this scenario. Removing the line below *will* cause 
                            the interactive layer to not work right on IE.
                         */
            if (d3.event.target.tagName !== 'svg')
              subtractMargin = false;
            if (d3.event.target.className.baseVal.match('nv-legend'))
              mouseOutAnyReason = true;
          }
          if (subtractMargin) {
            mouseX -= margin.left;
            mouseY -= margin.top;
          }
          /* If mouseX/Y is outside of the chart's bounds,
                      trigger a mouseOut event.
                      */
          if (mouseX < 0 || mouseY < 0 || mouseX > availableWidth || mouseY > availableHeight || d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined || mouseOutAnyReason) {
            if (isMSIE) {
              if (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined && d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass)) {
                return;
              }
            }
            dispatch.elementMouseout({
              mouseX: mouseX,
              mouseY: mouseY
            });
            layer.renderGuideLine(null);
            //hide the guideline
            return;
          }
          var pointXValue = xScale.invert(mouseX);
          dispatch.elementMousemove({
            mouseX: mouseX,
            mouseY: mouseY,
            pointXValue: pointXValue
          });
          //If user double clicks the layer, fire a elementDblclick dispatch.
          if (d3.event.type === 'dblclick') {
            dispatch.elementDblclick({
              mouseX: mouseX,
              mouseY: mouseY,
              pointXValue: pointXValue
            });
          }
        }
        svgContainer.on('mousemove', mouseHandler, true).on('mouseout', mouseHandler, true).on('dblclick', mouseHandler);
        ;
        //Draws a vertical guideline at the given X postion.
        layer.renderGuideLine = function (x) {
          if (!showGuideLine)
            return;
          var line = wrap.select('.nv-interactiveGuideLine').selectAll('line').data(x != null ? [nv.utils.NaNtoZero(x)] : [], String);
          line.enter().append('line').attr('class', 'nv-guideline').attr('x1', function (d) {
            return d;
          }).attr('x2', function (d) {
            return d;
          }).attr('y1', availableHeight).attr('y2', 0);
          ;
          line.exit().remove();
        };
      });
    }
    layer.dispatch = dispatch;
    layer.tooltip = tooltip;
    layer.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return layer;
    };
    layer.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return layer;
    };
    layer.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return layer;
    };
    layer.xScale = function (_) {
      if (!arguments.length)
        return xScale;
      xScale = _;
      return layer;
    };
    layer.showGuideLine = function (_) {
      if (!arguments.length)
        return showGuideLine;
      showGuideLine = _;
      return layer;
    };
    layer.svgContainer = function (_) {
      if (!arguments.length)
        return svgContainer;
      svgContainer = _;
      return layer;
    };
    return layer;
  };
  /* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.
This is different from normal bisectLeft; this function finds the nearest index to insert the search value.

For instance, lets say your array is [1,2,3,5,10,30], and you search for 28. 
Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5
because 28 is closer to 30 than 10.

Unit tests can be found in: interactiveBisectTest.html

Has the following known issues:
   * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.
   * Won't work if there are duplicate x coordinate values.
*/
  nv.interactiveBisect = function (values, searchVal, xAccessor) {
    'use strict';
    if (!values instanceof Array)
      return null;
    if (typeof xAccessor !== 'function')
      xAccessor = function (d, i) {
        return d.x;
      };
    var bisect = d3.bisector(xAccessor).left;
    var index = d3.max([
        0,
        bisect(values, searchVal) - 1
      ]);
    var currentValue = xAccessor(values[index], index);
    if (typeof currentValue === 'undefined')
      currentValue = index;
    if (currentValue === searchVal)
      return index;
    //found exact match
    var nextIndex = d3.min([
        index + 1,
        values.length - 1
      ]);
    var nextValue = xAccessor(values[nextIndex], nextIndex);
    if (typeof nextValue === 'undefined')
      nextValue = nextIndex;
    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal))
      return index;
    else
      return nextIndex;
  };
  /*
Returns the index in the array "values" that is closest to searchVal.
Only returns an index if searchVal is within some "threshold".
Otherwise, returns null.
*/
  nv.nearestValueIndex = function (values, searchVal, threshold) {
    'use strict';
    var yDistMax = Infinity, indexToHighlight = null;
    values.forEach(function (d, i) {
      var delta = Math.abs(searchVal - d);
      if (delta <= yDistMax && delta < threshold) {
        yDistMax = delta;
        indexToHighlight = i;
      }
    });
    return indexToHighlight;
  };
  /* Tooltip rendering model for nvd3 charts.
window.nv.models.tooltip is the updated,new way to render tooltips.

window.nv.tooltip.show is the old tooltip code.
window.nv.tooltip.* also has various helper methods.
*/
  (function () {
    'use strict';
    window.nv.tooltip = {};
    /* Model which can be instantiated to handle tooltip rendering.
    Example usage: 
    var tip = nv.models.tooltip().gravity('w').distance(23)
                .data(myDataObject);

        tip();    //just invoke the returned function to render tooltip.
  */
    window.nv.models.tooltip = function () {
      var content = null, data = null, gravity = 'w', distance = 50, snapDistance = 25, fixedTop = null, classes = null, chartContainer = null, tooltipElem = null, position = {
          left: null,
          top: null
        }, enabled = true, id = 'nvtooltip-' + Math.floor(Math.random() * 100000);
      ;
      //CSS class to specify whether element should not have mouse events.
      var nvPointerEventsClass = 'nv-pointer-events-none';
      //Format function for the tooltip values column
      var valueFormatter = function (d, i) {
        return d;
      };
      //Format function for the tooltip header value.
      var headerFormatter = function (d) {
        return d;
      };
      //By default, the tooltip model renders a beautiful table inside a DIV.
      //You can override this function if a custom tooltip is desired.
      var contentGenerator = function (d) {
        if (content != null)
          return content;
        if (d == null)
          return '';
        var table = d3.select(document.createElement('table'));
        var theadEnter = table.selectAll('thead').data([d]).enter().append('thead');
        theadEnter.append('tr').append('td').attr('colspan', 3).append('strong').classed('x-value', true).html(headerFormatter(d.value));
        var tbodyEnter = table.selectAll('tbody').data([d]).enter().append('tbody');
        var trowEnter = tbodyEnter.selectAll('tr').data(function (p) {
            return p.series;
          }).enter().append('tr').classed('highlight', function (p) {
            return p.highlight;
          });
        ;
        trowEnter.append('td').classed('legend-color-guide', true).append('div').style('background-color', function (p) {
          return p.color;
        });
        trowEnter.append('td').classed('key', true).html(function (p) {
          return p.key;
        });
        trowEnter.append('td').classed('value', true).html(function (p, i) {
          return valueFormatter(p.value, i);
        });
        trowEnter.selectAll('td').each(function (p) {
          if (p.highlight) {
            var opacityScale = d3.scale.linear().domain([
                0,
                1
              ]).range([
                '#fff',
                p.color
              ]);
            var opacity = 0.6;
            d3.select(this).style('border-bottom-color', opacityScale(opacity)).style('border-top-color', opacityScale(opacity));
            ;
          }
        });
        var html = table.node().outerHTML;
        if (d.footer !== undefined)
          html += '<div class=\'footer\'>' + d.footer + '</div>';
        return html;
      };
      var dataSeriesExists = function (d) {
        if (d && d.series && d.series.length > 0)
          return true;
        return false;
      };
      //In situations where the chart is in a 'viewBox', re-position the tooltip based on how far chart is zoomed.
      function convertViewBoxRatio() {
        if (chartContainer) {
          var svg = d3.select(chartContainer);
          if (svg.node().tagName !== 'svg') {
            svg = svg.select('svg');
          }
          var viewBox = svg.node() ? svg.attr('viewBox') : null;
          if (viewBox) {
            viewBox = viewBox.split(' ');
            var ratio = parseInt(svg.style('width')) / viewBox[2];
            position.left = position.left * ratio;
            position.top = position.top * ratio;
          }
        }
      }
      //Creates new tooltip container, or uses existing one on DOM.
      function getTooltipContainer(newContent) {
        var body;
        if (chartContainer)
          body = d3.select(chartContainer);
        else
          body = d3.select('body');
        var container = body.select('.nvtooltip');
        if (container.node() === null) {
          //Create new tooltip div if it doesn't exist on DOM.
          container = body.append('div').attr('class', 'nvtooltip ' + (classes ? classes : 'xy-tooltip')).attr('id', id);
          ;
        }
        container.node().innerHTML = newContent;
        container.style('top', 0).style('left', 0).style('opacity', 0);
        container.selectAll('div, table, td, tr').classed(nvPointerEventsClass, true);
        container.classed(nvPointerEventsClass, true);
        return container.node();
      }
      //Draw the tooltip onto the DOM.
      function nvtooltip() {
        if (!enabled)
          return;
        if (!dataSeriesExists(data))
          return;
        convertViewBoxRatio();
        var left = position.left;
        var top = fixedTop != null ? fixedTop : position.top;
        var container = getTooltipContainer(contentGenerator(data));
        tooltipElem = container;
        if (chartContainer) {
          var svgComp = chartContainer.getElementsByTagName('svg')[0];
          var boundRect = svgComp ? svgComp.getBoundingClientRect() : chartContainer.getBoundingClientRect();
          var svgOffset = {
              left: 0,
              top: 0
            };
          if (svgComp) {
            var svgBound = svgComp.getBoundingClientRect();
            var chartBound = chartContainer.getBoundingClientRect();
            var svgBoundTop = svgBound.top;
            //Defensive code. Sometimes, svgBoundTop can be a really negative
            //  number, like -134254. That's a bug. 
            //  If such a number is found, use zero instead. FireFox bug only
            if (svgBoundTop < 0) {
              var containerBound = chartContainer.getBoundingClientRect();
              svgBoundTop = Math.abs(svgBoundTop) > containerBound.height ? 0 : svgBoundTop;
            }
            svgOffset.top = Math.abs(svgBoundTop - chartBound.top);
            svgOffset.left = Math.abs(svgBound.left - chartBound.left);
          }
          //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.
          //You need to also add any offset between the <svg> element and its containing <div>
          //Finally, add any offset of the containing <div> on the whole page.
          left += chartContainer.offsetLeft + svgOffset.left - 2 * chartContainer.scrollLeft;
          top += chartContainer.offsetTop + svgOffset.top - 2 * chartContainer.scrollTop;
        }
        if (snapDistance && snapDistance > 0) {
          top = Math.floor(top / snapDistance) * snapDistance;
        }
        nv.tooltip.calcTooltipPosition([
          left,
          top
        ], gravity, distance, container);
        return nvtooltip;
      }
      ;
      nvtooltip.nvPointerEventsClass = nvPointerEventsClass;
      nvtooltip.content = function (_) {
        if (!arguments.length)
          return content;
        content = _;
        return nvtooltip;
      };
      //Returns tooltipElem...not able to set it.
      nvtooltip.tooltipElem = function () {
        return tooltipElem;
      };
      nvtooltip.contentGenerator = function (_) {
        if (!arguments.length)
          return contentGenerator;
        if (typeof _ === 'function') {
          contentGenerator = _;
        }
        return nvtooltip;
      };
      nvtooltip.data = function (_) {
        if (!arguments.length)
          return data;
        data = _;
        return nvtooltip;
      };
      nvtooltip.gravity = function (_) {
        if (!arguments.length)
          return gravity;
        gravity = _;
        return nvtooltip;
      };
      nvtooltip.distance = function (_) {
        if (!arguments.length)
          return distance;
        distance = _;
        return nvtooltip;
      };
      nvtooltip.snapDistance = function (_) {
        if (!arguments.length)
          return snapDistance;
        snapDistance = _;
        return nvtooltip;
      };
      nvtooltip.classes = function (_) {
        if (!arguments.length)
          return classes;
        classes = _;
        return nvtooltip;
      };
      nvtooltip.chartContainer = function (_) {
        if (!arguments.length)
          return chartContainer;
        chartContainer = _;
        return nvtooltip;
      };
      nvtooltip.position = function (_) {
        if (!arguments.length)
          return position;
        position.left = typeof _.left !== 'undefined' ? _.left : position.left;
        position.top = typeof _.top !== 'undefined' ? _.top : position.top;
        return nvtooltip;
      };
      nvtooltip.fixedTop = function (_) {
        if (!arguments.length)
          return fixedTop;
        fixedTop = _;
        return nvtooltip;
      };
      nvtooltip.enabled = function (_) {
        if (!arguments.length)
          return enabled;
        enabled = _;
        return nvtooltip;
      };
      nvtooltip.valueFormatter = function (_) {
        if (!arguments.length)
          return valueFormatter;
        if (typeof _ === 'function') {
          valueFormatter = _;
        }
        return nvtooltip;
      };
      nvtooltip.headerFormatter = function (_) {
        if (!arguments.length)
          return headerFormatter;
        if (typeof _ === 'function') {
          headerFormatter = _;
        }
        return nvtooltip;
      };
      //id() is a read-only function. You can't use it to set the id.
      nvtooltip.id = function () {
        return id;
      };
      return nvtooltip;
    };
    //Original tooltip.show function. Kept for backward compatibility.
    // pos = [left,top]
    nv.tooltip.show = function (pos, content, gravity, dist, parentContainer, classes) {
      //Create new tooltip div if it doesn't exist on DOM.
      var container = document.createElement('div');
      container.className = 'nvtooltip ' + (classes ? classes : 'xy-tooltip');
      var body = parentContainer;
      if (!parentContainer || parentContainer.tagName.match(/g|svg/i)) {
        //If the parent element is an SVG element, place tooltip in the <body> element.
        body = document.getElementsByTagName('body')[0];
      }
      container.style.left = 0;
      container.style.top = 0;
      container.style.opacity = 0;
      container.innerHTML = content;
      body.appendChild(container);
      //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.
      if (parentContainer) {
        pos[0] = pos[0] - parentContainer.scrollLeft;
        pos[1] = pos[1] - parentContainer.scrollTop;
      }
      nv.tooltip.calcTooltipPosition(pos, gravity, dist, container);
    };
    //Looks up the ancestry of a DOM element, and returns the first NON-svg node.
    nv.tooltip.findFirstNonSVGParent = function (Elem) {
      while (Elem.tagName.match(/^g|svg$/i) !== null) {
        Elem = Elem.parentNode;
      }
      return Elem;
    };
    //Finds the total offsetTop of a given DOM element.
    //Looks up the entire ancestry of an element, up to the first relatively positioned element.
    nv.tooltip.findTotalOffsetTop = function (Elem, initialTop) {
      var offsetTop = initialTop;
      do {
        if (!isNaN(Elem.offsetTop)) {
          offsetTop += Elem.offsetTop;
        }
      } while (Elem = Elem.offsetParent);
      return offsetTop;
    };
    //Finds the total offsetLeft of a given DOM element.
    //Looks up the entire ancestry of an element, up to the first relatively positioned element.
    nv.tooltip.findTotalOffsetLeft = function (Elem, initialLeft) {
      var offsetLeft = initialLeft;
      do {
        if (!isNaN(Elem.offsetLeft)) {
          offsetLeft += Elem.offsetLeft;
        }
      } while (Elem = Elem.offsetParent);
      return offsetLeft;
    };
    //Global utility function to render a tooltip on the DOM.
    //pos = [left,top] coordinates of where to place the tooltip, relative to the SVG chart container.
    //gravity = how to orient the tooltip
    //dist = how far away from the mouse to place tooltip
    //container = tooltip DIV
    nv.tooltip.calcTooltipPosition = function (pos, gravity, dist, container) {
      var height = parseInt(container.offsetHeight), width = parseInt(container.offsetWidth), windowWidth = nv.utils.windowSize().width, windowHeight = nv.utils.windowSize().height, scrollTop = window.pageYOffset, scrollLeft = window.pageXOffset, left, top;
      windowHeight = window.innerWidth >= document.body.scrollWidth ? windowHeight : windowHeight - 16;
      windowWidth = window.innerHeight >= document.body.scrollHeight ? windowWidth : windowWidth - 16;
      gravity = gravity || 's';
      dist = dist || 20;
      var tooltipTop = function (Elem) {
        return nv.tooltip.findTotalOffsetTop(Elem, top);
      };
      var tooltipLeft = function (Elem) {
        return nv.tooltip.findTotalOffsetLeft(Elem, left);
      };
      switch (gravity) {
      case 'e':
        left = pos[0] - width - dist;
        top = pos[1] - height / 2;
        var tLeft = tooltipLeft(container);
        var tTop = tooltipTop(container);
        if (tLeft < scrollLeft)
          left = pos[0] + dist > scrollLeft ? pos[0] + dist : scrollLeft - tLeft + left;
        if (tTop < scrollTop)
          top = scrollTop - tTop + top;
        if (tTop + height > scrollTop + windowHeight)
          top = scrollTop + windowHeight - tTop + top - height;
        break;
      case 'w':
        left = pos[0] + dist;
        top = pos[1] - height / 2;
        var tLeft = tooltipLeft(container);
        var tTop = tooltipTop(container);
        if (tLeft + width > windowWidth)
          left = pos[0] - width - dist;
        if (tTop < scrollTop)
          top = scrollTop + 5;
        if (tTop + height > scrollTop + windowHeight)
          top = scrollTop + windowHeight - tTop + top - height;
        break;
      case 'n':
        left = pos[0] - width / 2 - 5;
        top = pos[1] + dist;
        var tLeft = tooltipLeft(container);
        var tTop = tooltipTop(container);
        if (tLeft < scrollLeft)
          left = scrollLeft + 5;
        if (tLeft + width > windowWidth)
          left = left - width / 2 + 5;
        if (tTop + height > scrollTop + windowHeight)
          top = scrollTop + windowHeight - tTop + top - height;
        break;
      case 's':
        left = pos[0] - width / 2;
        top = pos[1] - height - dist;
        var tLeft = tooltipLeft(container);
        var tTop = tooltipTop(container);
        if (tLeft < scrollLeft)
          left = scrollLeft + 5;
        if (tLeft + width > windowWidth)
          left = left - width / 2 + 5;
        if (scrollTop > tTop)
          top = scrollTop;
        break;
      case 'none':
        left = pos[0];
        top = pos[1] - dist;
        var tLeft = tooltipLeft(container);
        var tTop = tooltipTop(container);
        break;
      }
      container.style.left = left + 'px';
      container.style.top = top + 'px';
      container.style.opacity = 1;
      container.style.position = 'absolute';
      return container;
    };
    //Global utility function to remove tooltips from the DOM.
    nv.tooltip.cleanup = function () {
      // Find the tooltips, mark them for removal by this class (so others cleanups won't find it)
      var tooltips = document.getElementsByClassName('nvtooltip');
      var purging = [];
      while (tooltips.length) {
        purging.push(tooltips[0]);
        tooltips[0].style.transitionDelay = '0 !important';
        tooltips[0].style.opacity = 0;
        tooltips[0].className = 'nvtooltip-pending-removal';
      }
      setTimeout(function () {
        while (purging.length) {
          var removeMe = purging.pop();
          removeMe.parentNode.removeChild(removeMe);
        }
      }, 500);
    };
  }());
  nv.utils.windowSize = function () {
    // Sane defaults
    var size = {
        width: 640,
        height: 480
      };
    // Earlier IE uses Doc.body
    if (document.body && document.body.offsetWidth) {
      size.width = document.body.offsetWidth;
      size.height = document.body.offsetHeight;
    }
    // IE can use depending on mode it is in
    if (document.compatMode == 'CSS1Compat' && document.documentElement && document.documentElement.offsetWidth) {
      size.width = document.documentElement.offsetWidth;
      size.height = document.documentElement.offsetHeight;
    }
    // Most recent browsers use
    if (window.innerWidth && window.innerHeight) {
      size.width = window.innerWidth;
      size.height = window.innerHeight;
    }
    return size;
  };
  // Easy way to bind multiple functions to window.onresize
  // TODO: give a way to remove a function after its bound, other than removing all of them
  nv.utils.windowResize = function (fun) {
    if (fun === undefined)
      return;
    var oldresize = window.onresize;
    window.onresize = function (e) {
      if (typeof oldresize == 'function')
        oldresize(e);
      fun(e);
    };
  };
  // Backwards compatible way to implement more d3-like coloring of graphs.
  // If passed an array, wrap it in a function which implements the old default
  // behavior
  nv.utils.getColor = function (color) {
    if (!arguments.length)
      return nv.utils.defaultColor();
    //if you pass in nothing, get default colors back
    if (Object.prototype.toString.call(color) === '[object Array]')
      return function (d, i) {
        return d.color || color[i % color.length];
      };
    else
      return color;  //can't really help it if someone passes rubbish as color
  };
  // Default color chooser uses the index of an object as before.
  nv.utils.defaultColor = function () {
    var colors = d3.scale.category20().range();
    return function (d, i) {
      return d.color || colors[i % colors.length];
    };
  };
  // Returns a color function that takes the result of 'getKey' for each series and
  // looks for a corresponding color from the dictionary,
  nv.utils.customTheme = function (dictionary, getKey, defaultColors) {
    getKey = getKey || function (series) {
      return series.key;
    };
    // use default series.key if getKey is undefined
    defaultColors = defaultColors || d3.scale.category20().range();
    //default color function
    var defIndex = defaultColors.length;
    //current default color (going in reverse)
    return function (series, index) {
      var key = getKey(series);
      if (!defIndex)
        defIndex = defaultColors.length;
      //used all the default colors, start over
      if (typeof dictionary[key] !== 'undefined')
        return typeof dictionary[key] === 'function' ? dictionary[key]() : dictionary[key];
      else
        return defaultColors[--defIndex];  // no match in dictionary, use default color
    };
  };
  // From the PJAX example on d3js.org, while this is not really directly needed
  // it's a very cool method for doing pjax, I may expand upon it a little bit,
  // open to suggestions on anything that may be useful
  nv.utils.pjax = function (links, content) {
    d3.selectAll(links).on('click', function () {
      history.pushState(this.href, this.textContent, this.href);
      load(this.href);
      d3.event.preventDefault();
    });
    function load(href) {
      d3.html(href, function (fragment) {
        var target = d3.select(content).node();
        target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);
        nv.utils.pjax(links, content);
      });
    }
    d3.select(window).on('popstate', function () {
      if (d3.event.state)
        load(d3.event.state);
    });
  };
  /* For situations where we want to approximate the width in pixels for an SVG:text element.
Most common instance is when the element is in a display:none; container.
Forumla is : text.length * font-size * constant_factor
*/
  nv.utils.calcApproxTextWidth = function (svgTextElem) {
    if (typeof svgTextElem.style === 'function' && typeof svgTextElem.text === 'function') {
      var fontSize = parseInt(svgTextElem.style('font-size').replace('px', ''));
      var textLength = svgTextElem.text().length;
      return textLength * fontSize * 0.5;
    }
    return 0;
  };
  /* Numbers that are undefined, null or NaN, convert them to zeros.
*/
  nv.utils.NaNtoZero = function (n) {
    if (typeof n !== 'number' || isNaN(n) || n === null || n === Infinity)
      return 0;
    return n;
  };
  /*
Snippet of code you can insert into each nv.models.* to give you the ability to
do things like:
chart.options({
  showXAxis: true,
  tooltips: true
});

To enable in the chart:
chart.options = nv.utils.optionsFunc.bind(chart);
*/
  nv.utils.optionsFunc = function (args) {
    if (args) {
      d3.map(args).forEach(function (key, value) {
        if (typeof this[key] === 'function') {
          this[key](value);
        }
      }.bind(this));
    }
    return this;
  };
  nv.models.axis = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var axis = d3.svg.axis();
    ;
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 75, height = 60, scale = d3.scale.linear(), axisLabelText = null, showMaxMin = true, highlightZero = true, rotateLabels = 0, rotateYLabel = true, staggerLabels = false, isOrdinal = false, ticks = null, axisLabelDistance = 12;
    //The larger this number is, the closer the axis label is to the axis.
    ;
    axis.scale(scale).orient('bottom').tickFormat(function (d) {
      return d;
    });
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var scale0;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this);
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        //------------------------------------------------------------
        if (ticks !== null)
          axis.ticks(ticks);
        else if (axis.orient() == 'top' || axis.orient() == 'bottom')
          axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);
        //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component
        g.transition().call(axis);
        scale0 = scale0 || axis.scale();
        var fmt = axis.tickFormat();
        if (fmt == null) {
          fmt = scale0.tickFormat();
        }
        var axisLabel = g.selectAll('text.nv-axislabel').data([axisLabelText || null]);
        axisLabel.exit().remove();
        switch (axis.orient()) {
        case 'top':
          axisLabel.enter().append('text').attr('class', 'nv-axislabel');
          var w = scale.range().length == 2 ? scale.range()[1] : scale.range()[scale.range().length - 1] + (scale.range()[1] - scale.range()[0]);
          axisLabel.attr('text-anchor', 'middle').attr('y', 0).attr('x', w / 2);
          if (showMaxMin) {
            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data(scale.domain());
            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');
            axisMaxMin.exit().remove();
            axisMaxMin.attr('transform', function (d, i) {
              return 'translate(' + scale(d) + ',0)';
            }).select('text').attr('dy', '-0.5em').attr('y', -axis.tickPadding()).attr('text-anchor', 'middle').text(function (d, i) {
              var v = fmt(d);
              return ('' + v).match('NaN') ? '' : v;
            });
            axisMaxMin.transition().attr('transform', function (d, i) {
              return 'translate(' + scale.range()[i] + ',0)';
            });
          }
          break;
        case 'bottom':
          var xLabelMargin = 36;
          var maxTextWidth = 30;
          var xTicks = g.selectAll('g').select('text');
          if (rotateLabels % 360) {
            //Calculate the longest xTick width
            xTicks.each(function (d, i) {
              var width = this.getBBox().width;
              if (width > maxTextWidth)
                maxTextWidth = width;
            });
            //Convert to radians before calculating sin. Add 30 to margin for healthy padding.
            var sin = Math.abs(Math.sin(rotateLabels * Math.PI / 180));
            var xLabelMargin = (sin ? sin * maxTextWidth : maxTextWidth) + 30;
            //Rotate all xTicks
            xTicks.attr('transform', function (d, i, j) {
              return 'rotate(' + rotateLabels + ' 0,0)';
            }).style('text-anchor', rotateLabels % 360 > 0 ? 'start' : 'end');
          }
          axisLabel.enter().append('text').attr('class', 'nv-axislabel');
          var w = scale.range().length == 2 ? scale.range()[1] : scale.range()[scale.range().length - 1] + (scale.range()[1] - scale.range()[0]);
          axisLabel.attr('text-anchor', 'middle').attr('y', xLabelMargin).attr('x', w / 2);
          if (showMaxMin) {
            //if (showMaxMin && !isOrdinal) {
            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data([
                scale.domain()[0],
                scale.domain()[scale.domain().length - 1]
              ]);
            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text');
            axisMaxMin.exit().remove();
            axisMaxMin.attr('transform', function (d, i) {
              return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)';
            }).select('text').attr('dy', '.71em').attr('y', axis.tickPadding()).attr('transform', function (d, i, j) {
              return 'rotate(' + rotateLabels + ' 0,0)';
            }).style('text-anchor', rotateLabels ? rotateLabels % 360 > 0 ? 'start' : 'end' : 'middle').text(function (d, i) {
              var v = fmt(d);
              return ('' + v).match('NaN') ? '' : v;
            });
            axisMaxMin.transition().attr('transform', function (d, i) {
              //return 'translate(' + scale.range()[i] + ',0)'
              //return 'translate(' + scale(d) + ',0)'
              return 'translate(' + (scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)';
            });
          }
          if (staggerLabels)
            xTicks.attr('transform', function (d, i) {
              return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')';
            });
          break;
        case 'right':
          axisLabel.enter().append('text').attr('class', 'nv-axislabel');
          axisLabel.style('text-anchor', rotateYLabel ? 'middle' : 'begin').attr('transform', rotateYLabel ? 'rotate(90)' : '').attr('y', rotateYLabel ? -Math.max(margin.right, width) + 12 : -10).attr('x', rotateYLabel ? scale.range()[0] / 2 : axis.tickPadding());
          if (showMaxMin) {
            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data(scale.domain());
            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text').style('opacity', 0);
            axisMaxMin.exit().remove();
            axisMaxMin.attr('transform', function (d, i) {
              return 'translate(0,' + scale(d) + ')';
            }).select('text').attr('dy', '.32em').attr('y', 0).attr('x', axis.tickPadding()).style('text-anchor', 'start').text(function (d, i) {
              var v = fmt(d);
              return ('' + v).match('NaN') ? '' : v;
            });
            axisMaxMin.transition().attr('transform', function (d, i) {
              return 'translate(0,' + scale.range()[i] + ')';
            }).select('text').style('opacity', 1);
          }
          break;
        case 'left':
          /*
          //For dynamically placing the label. Can be used with dynamically-sized chart axis margins
          var yTicks = g.selectAll('g').select("text");
          yTicks.each(function(d,i){
            var labelPadding = this.getBBox().width + axis.tickPadding() + 16;
            if(labelPadding > width) width = labelPadding;
          });
          */
          axisLabel.enter().append('text').attr('class', 'nv-axislabel');
          axisLabel.style('text-anchor', rotateYLabel ? 'middle' : 'end').attr('transform', rotateYLabel ? 'rotate(-90)' : '').attr('y', rotateYLabel ? -Math.max(margin.left, width) + axisLabelDistance : -10).attr('x', rotateYLabel ? -scale.range()[0] / 2 : -axis.tickPadding());
          if (showMaxMin) {
            var axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data(scale.domain());
            axisMaxMin.enter().append('g').attr('class', 'nv-axisMaxMin').append('text').style('opacity', 0);
            axisMaxMin.exit().remove();
            axisMaxMin.attr('transform', function (d, i) {
              return 'translate(0,' + scale0(d) + ')';
            }).select('text').attr('dy', '.32em').attr('y', 0).attr('x', -axis.tickPadding()).attr('text-anchor', 'end').text(function (d, i) {
              var v = fmt(d);
              return ('' + v).match('NaN') ? '' : v;
            });
            axisMaxMin.transition().attr('transform', function (d, i) {
              return 'translate(0,' + scale.range()[i] + ')';
            }).select('text').style('opacity', 1);
          }
          break;
        }
        axisLabel.text(function (d) {
          return d;
        });
        if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {
          //check if max and min overlap other values, if so, hide the values that overlap
          g.selectAll('g').each(function (d, i) {
            d3.select(this).select('text').attr('opacity', 1);
            if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) {
              // 10 is assuming text height is 16... if d is 0, leave it!
              if (d > 1e-10 || d < -1e-10)
                // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
                d3.select(this).attr('opacity', 0);
              d3.select(this).select('text').attr('opacity', 0);  // Don't remove the ZERO line!!
            }
          });
          //if Max and Min = 0 only show min, Issue #281
          if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0)
            wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {
              return !i ? 1 : 0;
            });
        }
        if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {
          var maxMinRange = [];
          wrap.selectAll('g.nv-axisMaxMin').each(function (d, i) {
            try {
              if (i)
                // i== 1, max position
                maxMinRange.push(scale(d) - this.getBBox().width - 4);
              else
                // i==0, min position
                maxMinRange.push(scale(d) + this.getBBox().width + 4);
            } catch (err) {
              if (i)
                // i== 1, max position
                maxMinRange.push(scale(d) - 4);
              else
                // i==0, min position
                maxMinRange.push(scale(d) + 4);
            }
          });
          g.selectAll('g').each(function (d, i) {
            if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {
              if (d > 1e-10 || d < -1e-10)
                // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
                d3.select(this).remove();
              else
                d3.select(this).select('text').remove();  // Don't remove the ZERO line!!
            }
          });
        }
        //highlight zero line ... Maybe should not be an option and should just be in CSS?
        if (highlightZero)
          g.selectAll('.tick').filter(function (d) {
            return !parseFloat(Math.round(d.__data__ * 100000) / 1000000) && d.__data__ !== undefined;
          }).classed('zero', true);
        //store old scales for use in transitions on update
        scale0 = scale.copy();
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.axis = axis;
    d3.rebind(chart, axis, 'orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat');
    d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands');
    //these are also accessible by chart.scale(), but added common ones directly for ease of use
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.ticks = function (_) {
      if (!arguments.length)
        return ticks;
      ticks = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.axisLabel = function (_) {
      if (!arguments.length)
        return axisLabelText;
      axisLabelText = _;
      return chart;
    };
    chart.showMaxMin = function (_) {
      if (!arguments.length)
        return showMaxMin;
      showMaxMin = _;
      return chart;
    };
    chart.highlightZero = function (_) {
      if (!arguments.length)
        return highlightZero;
      highlightZero = _;
      return chart;
    };
    chart.scale = function (_) {
      if (!arguments.length)
        return scale;
      scale = _;
      axis.scale(scale);
      isOrdinal = typeof scale.rangeBands === 'function';
      d3.rebind(chart, scale, 'domain', 'range', 'rangeBand', 'rangeBands');
      return chart;
    };
    chart.rotateYLabel = function (_) {
      if (!arguments.length)
        return rotateYLabel;
      rotateYLabel = _;
      return chart;
    };
    chart.rotateLabels = function (_) {
      if (!arguments.length)
        return rotateLabels;
      rotateLabels = _;
      return chart;
    };
    chart.staggerLabels = function (_) {
      if (!arguments.length)
        return staggerLabels;
      staggerLabels = _;
      return chart;
    };
    chart.axisLabelDistance = function (_) {
      if (!arguments.length)
        return axisLabelDistance;
      axisLabelDistance = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  //TODO: consider deprecating and using multibar with single series for this
  nv.models.historicalBar = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, forceX = [], forceY = [0], padData = false, clipEdge = true, color = nv.utils.defaultColor(), xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout'), interactive = true;
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //------------------------------------------------------------
        // Setup Scales
        x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX)));
        if (padData)
          x.range(xRange || [
            availableWidth * 0.5 / data[0].values.length,
            availableWidth * (data[0].values.length - 0.5) / data[0].values.length
          ]);
        else
          x.range(xRange || [
            0,
            availableWidth
          ]);
        y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY))).range(yRange || [
          availableHeight,
          0
        ]);
        // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
        if (x.domain()[0] === x.domain()[1])
          x.domain()[0] ? x.domain([
            x.domain()[0] - x.domain()[0] * 0.01,
            x.domain()[1] + x.domain()[1] * 0.01
          ]) : x.domain([
            -1,
            1
          ]);
        if (y.domain()[0] === y.domain()[1])
          y.domain()[0] ? y.domain([
            y.domain()[0] + y.domain()[0] * 0.01,
            y.domain()[1] - y.domain()[1] * 0.01
          ]) : y.domain([
            -1,
            1
          ]);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-bars');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        container.on('click', function (d, i) {
          dispatch.chartClick({
            data: d,
            index: i,
            pos: d3.event,
            id: id
          });
        });
        defsEnter.append('clipPath').attr('id', 'nv-chart-clip-path-' + id).append('rect');
        wrap.select('#nv-chart-clip-path-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
        g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
        var bars = wrap.select('.nv-bars').selectAll('.nv-bar').data(function (d) {
            return d;
          }, function (d, i) {
            return getX(d, i);
          });
        bars.exit().remove();
        var barsEnter = bars.enter().append('rect').attr('x', 0).attr('y', function (d, i) {
            return nv.utils.NaNtoZero(y(Math.max(0, getY(d, i))));
          }).attr('height', function (d, i) {
            return nv.utils.NaNtoZero(Math.abs(y(getY(d, i)) - y(0)));
          }).attr('transform', function (d, i) {
            return 'translate(' + (x(getX(d, i)) - availableWidth / data[0].values.length * 0.45) + ',0)';
          }).on('mouseover', function (d, i) {
            if (!interactive)
              return;
            d3.select(this).classed('hover', true);
            dispatch.elementMouseover({
              point: d,
              series: data[0],
              pos: [
                x(getX(d, i)),
                y(getY(d, i))
              ],
              pointIndex: i,
              seriesIndex: 0,
              e: d3.event
            });
          }).on('mouseout', function (d, i) {
            if (!interactive)
              return;
            d3.select(this).classed('hover', false);
            dispatch.elementMouseout({
              point: d,
              series: data[0],
              pointIndex: i,
              seriesIndex: 0,
              e: d3.event
            });
          }).on('click', function (d, i) {
            if (!interactive)
              return;
            dispatch.elementClick({
              value: getY(d, i),
              data: d,
              index: i,
              pos: [
                x(getX(d, i)),
                y(getY(d, i))
              ],
              e: d3.event,
              id: id
            });
            d3.event.stopPropagation();
          }).on('dblclick', function (d, i) {
            if (!interactive)
              return;
            dispatch.elementDblClick({
              value: getY(d, i),
              data: d,
              index: i,
              pos: [
                x(getX(d, i)),
                y(getY(d, i))
              ],
              e: d3.event,
              id: id
            });
            d3.event.stopPropagation();
          });
        bars.attr('fill', function (d, i) {
          return color(d, i);
        }).attr('class', function (d, i, j) {
          return (getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i;
        }).transition().attr('transform', function (d, i) {
          return 'translate(' + (x(getX(d, i)) - availableWidth / data[0].values.length * 0.45) + ',0)';
        }).attr('width', availableWidth / data[0].values.length * 0.9);
        bars.transition().attr('y', function (d, i) {
          var rval = getY(d, i) < 0 ? y(0) : y(0) - y(getY(d, i)) < 1 ? y(0) - 1 : y(getY(d, i));
          return nv.utils.NaNtoZero(rval);
        }).attr('height', function (d, i) {
          return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d, i)) - y(0)), 1));
        });
      });
      return chart;
    }
    //Create methods to allow outside functions to highlight a specific bar.
    chart.highlightPoint = function (pointIndex, isHoverOver) {
      d3.select('.nv-historicalBar-' + id).select('.nv-bars .nv-bar-0-' + pointIndex).classed('hover', isHoverOver);
      ;
    };
    chart.clearHighlights = function () {
      d3.select('.nv-historicalBar-' + id).select('.nv-bars .nv-bar.hover').classed('hover', false);
      ;
    };
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.forceX = function (_) {
      if (!arguments.length)
        return forceX;
      forceX = _;
      return chart;
    };
    chart.forceY = function (_) {
      if (!arguments.length)
        return forceY;
      forceY = _;
      return chart;
    };
    chart.padData = function (_) {
      if (!arguments.length)
        return padData;
      padData = _;
      return chart;
    };
    chart.clipEdge = function (_) {
      if (!arguments.length)
        return clipEdge;
      clipEdge = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.interactive = function (_) {
      if (!arguments.length)
        return interactive;
      interactive = false;
      return chart;
    };
    //============================================================
    return chart;
  };
  // Chart design based on the recommendations of Stephen Few. Implementation
  // based on the work of Clint Ivy, Jamie Love, and Jason Davies.
  // http://projects.instantcognition.com/protovis/bulletchart/
  nv.models.bullet = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, orient = 'left', reverse = false, ranges = function (d) {
        return d.ranges;
      }, markers = function (d) {
        return d.markers;
      }, measures = function (d) {
        return d.measures;
      }, rangeLabels = function (d) {
        return d.rangeLabels ? d.rangeLabels : [];
      }, markerLabels = function (d) {
        return d.markerLabels ? d.markerLabels : [];
      }, measureLabels = function (d) {
        return d.measureLabels ? d.measureLabels : [];
      }, forceX = [0], width = 380, height = 30, tickFormat = null, color = nv.utils.getColor(['#1f77b4']), dispatch = d3.dispatch('elementMouseover', 'elementMouseout');
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (d, i) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        var rangez = ranges.call(this, d, i).slice().sort(d3.descending), markerz = markers.call(this, d, i).slice().sort(d3.descending), measurez = measures.call(this, d, i).slice().sort(d3.descending), rangeLabelz = rangeLabels.call(this, d, i).slice(), markerLabelz = markerLabels.call(this, d, i).slice(), measureLabelz = measureLabels.call(this, d, i).slice();
        //------------------------------------------------------------
        // Setup Scales
        // Compute the new x-scale.
        var x1 = d3.scale.linear().domain(d3.extent(d3.merge([
            forceX,
            rangez
          ]))).range(reverse ? [
            availableWidth,
            0
          ] : [
            0,
            availableWidth
          ]);
        // Retrieve the old x-scale, if this is an update.
        var x0 = this.__chart__ || d3.scale.linear().domain([
            0,
            Infinity
          ]).range(x1.range());
        // Stash the new scale.
        this.__chart__ = x1;
        var rangeMin = d3.min(rangez),
          //rangez[2]
          rangeMax = d3.max(rangez),
          //rangez[0]
          rangeAvg = rangez[1];
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');
        gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');
        gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');
        gEnter.append('rect').attr('class', 'nv-measure');
        gEnter.append('path').attr('class', 'nv-markerTriangle');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        var w0 = function (d) {
            return Math.abs(x0(d) - x0(0));
          },
          // TODO: could optimize by precalculating x0(0) and x1(0)
          w1 = function (d) {
            return Math.abs(x1(d) - x1(0));
          };
        var xp0 = function (d) {
            return d < 0 ? x0(d) : x0(0);
          }, xp1 = function (d) {
            return d < 0 ? x1(d) : x1(0);
          };
        g.select('rect.nv-rangeMax').attr('height', availableHeight).attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin)).attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin)).datum(rangeMax > 0 ? rangeMax : rangeMin);
        /*
          .attr('x', rangeMin < 0 ?
                         rangeMax > 0 ?
                             x1(rangeMin)
                           : x1(rangeMax)
                       : x1(0))
                      */
        g.select('rect.nv-rangeAvg').attr('height', availableHeight).attr('width', w1(rangeAvg)).attr('x', xp1(rangeAvg)).datum(rangeAvg);
        /*
          .attr('width', rangeMax <= 0 ?
                             x1(rangeMax) - x1(rangeAvg)
                           : x1(rangeAvg) - x1(rangeMin))
          .attr('x', rangeMax <= 0 ?
                         x1(rangeAvg)
                       : x1(rangeMin))
                      */
        g.select('rect.nv-rangeMin').attr('height', availableHeight).attr('width', w1(rangeMax)).attr('x', xp1(rangeMax)).attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax)).attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax)).datum(rangeMax > 0 ? rangeMin : rangeMax);
        /*
          .attr('width', rangeMax <= 0 ?
                             x1(rangeAvg) - x1(rangeMin)
                           : x1(rangeMax) - x1(rangeAvg))
          .attr('x', rangeMax <= 0 ?
                         x1(rangeMin)
                       : x1(rangeAvg))
                      */
        g.select('rect.nv-measure').style('fill', color).attr('height', availableHeight / 3).attr('y', availableHeight / 3).attr('width', measurez < 0 ? x1(0) - x1(measurez[0]) : x1(measurez[0]) - x1(0)).attr('x', xp1(measurez)).on('mouseover', function () {
          dispatch.elementMouseover({
            value: measurez[0],
            label: measureLabelz[0] || 'Current',
            pos: [
              x1(measurez[0]),
              availableHeight / 2
            ]
          });
        }).on('mouseout', function () {
          dispatch.elementMouseout({
            value: measurez[0],
            label: measureLabelz[0] || 'Current'
          });
        });
        var h3 = availableHeight / 6;
        if (markerz[0]) {
          g.selectAll('path.nv-markerTriangle').attr('transform', function (d) {
            return 'translate(' + x1(markerz[0]) + ',' + availableHeight / 2 + ')';
          }).attr('d', 'M0,' + h3 + 'L' + h3 + ',' + -h3 + ' ' + -h3 + ',' + -h3 + 'Z').on('mouseover', function () {
            dispatch.elementMouseover({
              value: markerz[0],
              label: markerLabelz[0] || 'Previous',
              pos: [
                x1(markerz[0]),
                availableHeight / 2
              ]
            });
          }).on('mouseout', function () {
            dispatch.elementMouseout({
              value: markerz[0],
              label: markerLabelz[0] || 'Previous'
            });
          });
        } else {
          g.selectAll('path.nv-markerTriangle').remove();
        }
        wrap.selectAll('.nv-range').on('mouseover', function (d, i) {
          var label = rangeLabelz[i] || (!i ? 'Maximum' : i == 1 ? 'Mean' : 'Minimum');
          dispatch.elementMouseover({
            value: d,
            label: label,
            pos: [
              x1(d),
              availableHeight / 2
            ]
          });
        }).on('mouseout', function (d, i) {
          var label = rangeLabelz[i] || (!i ? 'Maximum' : i == 1 ? 'Mean' : 'Minimum');
          dispatch.elementMouseout({
            value: d,
            label: label
          });
        });
      });
      // d3.timer.flush();  // Not needed?
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    // left, right, top, bottom
    chart.orient = function (_) {
      if (!arguments.length)
        return orient;
      orient = _;
      reverse = orient == 'right' || orient == 'bottom';
      return chart;
    };
    // ranges (bad, satisfactory, good)
    chart.ranges = function (_) {
      if (!arguments.length)
        return ranges;
      ranges = _;
      return chart;
    };
    // markers (previous, goal)
    chart.markers = function (_) {
      if (!arguments.length)
        return markers;
      markers = _;
      return chart;
    };
    // measures (actual, forecast)
    chart.measures = function (_) {
      if (!arguments.length)
        return measures;
      measures = _;
      return chart;
    };
    chart.forceX = function (_) {
      if (!arguments.length)
        return forceX;
      forceX = _;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.tickFormat = function (_) {
      if (!arguments.length)
        return tickFormat;
      tickFormat = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    //============================================================
    return chart;
  };
  // Chart design based on the recommendations of Stephen Few. Implementation
  // based on the work of Clint Ivy, Jamie Love, and Jason Davies.
  // http://projects.instantcognition.com/protovis/bulletchart/
  nv.models.bulletChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var bullet = nv.models.bullet();
    ;
    var orient = 'left', reverse = false, margin = {
        top: 5,
        right: 40,
        bottom: 20,
        left: 120
      }, ranges = function (d) {
        return d.ranges;
      }, markers = function (d) {
        return d.markers;
      }, measures = function (d) {
        return d.measures;
      }, width = null, height = 55, tickFormat = null, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + x + '</h3>' + '<p>' + y + '</p>';
      }, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0) + margin.left, top = e.pos[1] + (offsetElement.offsetTop || 0) + margin.top, content = tooltip(e.key, e.label, e.value, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'e' : 'w', null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (d, i) {
        var container = d3.select(this);
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, that = this;
        chart.update = function () {
          chart(selection);
        };
        chart.container = this;
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!d || !ranges.call(this, d, i)) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', 18 + margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        var rangez = ranges.call(this, d, i).slice().sort(d3.descending), markerz = markers.call(this, d, i).slice().sort(d3.descending), measurez = measures.call(this, d, i).slice().sort(d3.descending);
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-bulletWrap');
        gEnter.append('g').attr('class', 'nv-titles');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        // Compute the new x-scale.
        var x1 = d3.scale.linear().domain([
            0,
            Math.max(rangez[0], markerz[0], measurez[0])
          ]).range(reverse ? [
            availableWidth,
            0
          ] : [
            0,
            availableWidth
          ]);
        // Retrieve the old x-scale, if this is an update.
        var x0 = this.__chart__ || d3.scale.linear().domain([
            0,
            Infinity
          ]).range(x1.range());
        // Stash the new scale.
        this.__chart__ = x1;
        /*
      // Derive width-scales from the x-scales.
      var w0 = bulletWidth(x0),
          w1 = bulletWidth(x1);

      function bulletWidth(x) {
        var x0 = x(0);
        return function(d) {
          return Math.abs(x(d) - x(0));
        };
      }

      function bulletTranslate(x) {
        return function(d) {
          return 'translate(' + x(d) + ',0)';
        };
      }
      */
        var w0 = function (d) {
            return Math.abs(x0(d) - x0(0));
          },
          // TODO: could optimize by precalculating x0(0) and x1(0)
          w1 = function (d) {
            return Math.abs(x1(d) - x1(0));
          };
        var title = gEnter.select('.nv-titles').append('g').attr('text-anchor', 'end').attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');
        title.append('text').attr('class', 'nv-title').text(function (d) {
          return d.title;
        });
        title.append('text').attr('class', 'nv-subtitle').attr('dy', '1em').text(function (d) {
          return d.subtitle;
        });
        bullet.width(availableWidth).height(availableHeight);
        var bulletWrap = g.select('.nv-bulletWrap');
        d3.transition(bulletWrap).call(bullet);
        // Compute the tick format.
        var format = tickFormat || x1.tickFormat(availableWidth / 100);
        // Update the tick groups.
        var tick = g.selectAll('g.nv-tick').data(x1.ticks(availableWidth / 50), function (d) {
            return this.textContent || format(d);
          });
        // Initialize the ticks with the old scale, x0.
        var tickEnter = tick.enter().append('g').attr('class', 'nv-tick').attr('transform', function (d) {
            return 'translate(' + x0(d) + ',0)';
          }).style('opacity', 0.000001);
        tickEnter.append('line').attr('y1', availableHeight).attr('y2', availableHeight * 7 / 6);
        tickEnter.append('text').attr('text-anchor', 'middle').attr('dy', '1em').attr('y', availableHeight * 7 / 6).text(format);
        // Transition the updating ticks to the new scale, x1.
        var tickUpdate = d3.transition(tick).attr('transform', function (d) {
            return 'translate(' + x1(d) + ',0)';
          }).style('opacity', 1);
        tickUpdate.select('line').attr('y1', availableHeight).attr('y2', availableHeight * 7 / 6);
        tickUpdate.select('text').attr('y', availableHeight * 7 / 6);
        // Transition the exiting ticks to the new scale, x1.
        d3.transition(tick.exit()).attr('transform', function (d) {
          return 'translate(' + x1(d) + ',0)';
        }).style('opacity', 0.000001).remove();
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        dispatch.on('tooltipShow', function (e) {
          e.key = d.title;
          if (tooltips)
            showTooltip(e, that.parentNode);
        });  //============================================================
      });
      d3.timer.flush();
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    bullet.dispatch.on('elementMouseover.tooltip', function (e) {
      dispatch.tooltipShow(e);
    });
    bullet.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.bullet = bullet;
    d3.rebind(chart, bullet, 'color');
    chart.options = nv.utils.optionsFunc.bind(chart);
    // left, right, top, bottom
    chart.orient = function (x) {
      if (!arguments.length)
        return orient;
      orient = x;
      reverse = orient == 'right' || orient == 'bottom';
      return chart;
    };
    // ranges (bad, satisfactory, good)
    chart.ranges = function (x) {
      if (!arguments.length)
        return ranges;
      ranges = x;
      return chart;
    };
    // markers (previous, goal)
    chart.markers = function (x) {
      if (!arguments.length)
        return markers;
      markers = x;
      return chart;
    };
    // measures (actual, forecast)
    chart.measures = function (x) {
      if (!arguments.length)
        return measures;
      measures = x;
      return chart;
    };
    chart.width = function (x) {
      if (!arguments.length)
        return width;
      width = x;
      return chart;
    };
    chart.height = function (x) {
      if (!arguments.length)
        return height;
      height = x;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.tickFormat = function (x) {
      if (!arguments.length)
        return tickFormat;
      tickFormat = x;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.cumulativeLineChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var lines = nv.models.line(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend(), interactiveLayer = nv.interactiveGuideline();
    ;
    var margin = {
        top: 30,
        right: 30,
        bottom: 50,
        left: 60
      }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, tooltips = true, showControls = true, useInteractiveGuideline = false, rescaleY = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, x, y, id = lines.id(), state = {
        index: 0,
        rescaleY: rescaleY
      }, defaultState = null, noData = 'No Data Available.', average = function (d) {
        return d.average;
      }, dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), transitionDuration = 250, noErrorCheck = false;
    //if set to TRUE, will bypass an error check in the indexify function.
    ;
    xAxis.orient('bottom').tickPadding(7);
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left');
    ;
    //============================================================
    controls.updateState(false);
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var dx = d3.scale.linear(), index = {
        i: 0,
        x: 0
      };
    ;
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, null, null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this).classed('nv-chart-' + id, true), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        var indexDrag = d3.behavior.drag().on('dragstart', dragStart).on('drag', dragMove).on('dragend', dragEnd);
        function dragStart(d, i) {
          d3.select(chart.container).style('cursor', 'ew-resize');
        }
        function dragMove(d, i) {
          index.x = d3.event.x;
          index.i = Math.round(dx.invert(index.x));
          updateZero();
        }
        function dragEnd(d, i) {
          d3.select(chart.container).style('cursor', 'auto');
          // update state and send stateChange with new index
          state.index = index.i;
          dispatch.stateChange(state);
        }
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = lines.xScale();
        y = lines.yScale();
        if (!rescaleY) {
          var seriesDomains = data.filter(function (series) {
              return !series.disabled;
            }).map(function (series, i) {
              var initialDomain = d3.extent(series.values, lines.y());
              //account for series being disabled when losing 95% or more
              if (initialDomain[0] < -0.95)
                initialDomain[0] = -0.95;
              return [
                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),
                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])
              ];
            });
          var completeDomain = [
              d3.min(seriesDomains, function (d) {
                return d[0];
              }),
              d3.max(seriesDomains, function (d) {
                return d[1];
              })
            ];
          lines.yDomain(completeDomain);
        } else {
          lines.yDomain(null);
        }
        dx.domain([
          0,
          data[0].values.length - 1
        ]).range([
          0,
          availableWidth
        ]).clamp(true);
        //------------------------------------------------------------
        var data = indexify(index.i, data);
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var interactivePointerEvents = useInteractiveGuideline ? 'none' : 'all';
        var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-interactive');
        gEnter.append('g').attr('class', 'nv-x nv-axis').style('pointer-events', 'none');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-background');
        gEnter.append('g').attr('class', 'nv-linesWrap').style('pointer-events', interactivePointerEvents);
        gEnter.append('g').attr('class', 'nv-avgLinesWrap').style('pointer-events', 'none');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-controlsWrap');
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth);
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Controls
        if (showControls) {
          var controlsData = [{
                key: 'Re-scale y-axis',
                disabled: !rescaleY
              }];
          controls.width(140).color([
            '#444',
            '#444',
            '#444'
          ]).rightAlign(false).margin({
            top: 5,
            right: 0,
            bottom: 5,
            left: 20
          });
          ;
          g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        // Show error if series goes below 100%
        var tempDisabled = data.filter(function (d) {
            return d.tempDisabled;
          });
        wrap.select('.tempDisabled').remove();
        //clean-up and prevent duplicates
        if (tempDisabled.length) {
          wrap.append('text').attr('class', 'tempDisabled').attr('x', availableWidth / 2).attr('y', '-.71em').style('text-anchor', 'end').text(tempDisabled.map(function (d) {
            return d.key;
          }).join(', ') + ' values cannot be calculated for this time period.');
        }
        //------------------------------------------------------------
        // Main Chart Component(s)
        //------------------------------------------------------------
        //Set up interactive layer
        if (useInteractiveGuideline) {
          interactiveLayer.width(availableWidth).height(availableHeight).margin({
            left: margin.left,
            top: margin.top
          }).svgContainer(container).xScale(x);
          wrap.select('.nv-interactive').call(interactiveLayer);
        }
        gEnter.select('.nv-background').append('rect');
        g.select('.nv-background rect').attr('width', availableWidth).attr('height', availableHeight);
        lines.y(function (d) {
          return d.display.y;
        }).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled && !data[i].tempDisabled;
        }));
        var linesWrap = g.select('.nv-linesWrap').datum(data.filter(function (d) {
            return !d.disabled && !d.tempDisabled;
          }));
        //d3.transition(linesWrap).call(lines);
        linesWrap.call(lines);
        /*Handle average lines [AN-612] ----------------------------*/
        //Store a series index number in the data array.
        data.forEach(function (d, i) {
          d.seriesIndex = i;
        });
        var avgLineData = data.filter(function (d) {
            return !d.disabled && !!average(d);
          });
        var avgLines = g.select('.nv-avgLinesWrap').selectAll('line').data(avgLineData, function (d) {
            return d.key;
          });
        var getAvgLineY = function (d) {
          //If average lines go off the svg element, clamp them to the svg bounds.
          var yVal = y(average(d));
          if (yVal < 0)
            return 0;
          if (yVal > availableHeight)
            return availableHeight;
          return yVal;
        };
        avgLines.enter().append('line').style('stroke-width', 2).style('stroke-dasharray', '10,10').style('stroke', function (d, i) {
          return lines.color()(d, d.seriesIndex);
        }).attr('x1', 0).attr('x2', availableWidth).attr('y1', getAvgLineY).attr('y2', getAvgLineY);
        avgLines.style('stroke-opacity', function (d) {
          //If average lines go offscreen, make them transparent
          var yVal = y(average(d));
          if (yVal < 0 || yVal > availableHeight)
            return 0;
          return 1;
        }).attr('x1', 0).attr('x2', availableWidth).attr('y1', getAvgLineY).attr('y2', getAvgLineY);
        avgLines.exit().remove();
        //Create index line -----------------------------------------
        var indexLine = linesWrap.selectAll('.nv-indexLine').data([index]);
        indexLine.enter().append('rect').attr('class', 'nv-indexLine').attr('width', 3).attr('x', -2).attr('fill', 'red').attr('fill-opacity', 0.5).style('pointer-events', 'all').call(indexDrag);
        indexLine.attr('transform', function (d) {
          return 'translate(' + dx(d.i) + ',0)';
        }).attr('height', availableHeight);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(Math.min(data[0].values.length, availableWidth / 70)).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
          d3.transition(g.select('.nv-x.nv-axis')).call(xAxis);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(availableHeight / 36).tickSize(-availableWidth, 0);
          d3.transition(g.select('.nv-y.nv-axis')).call(yAxis);
        }
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        function updateZero() {
          indexLine.data([index]);
          //When dragging the index line, turn off line transitions.
          // Then turn them back on when done dragging.
          var oldDuration = chart.transitionDuration();
          chart.transitionDuration(0);
          chart.update();
          chart.transitionDuration(oldDuration);
        }
        g.select('.nv-background rect').on('click', function () {
          index.x = d3.mouse(this)[0];
          index.i = Math.round(dx.invert(index.x));
          // update state and send stateChange with new index
          state.index = index.i;
          dispatch.stateChange(state);
          updateZero();
        });
        lines.dispatch.on('elementClick', function (e) {
          index.i = e.pointIndex;
          index.x = dx(index.i);
          // update state and send stateChange with new index
          state.index = index.i;
          dispatch.stateChange(state);
          updateZero();
        });
        controls.dispatch.on('legendClick', function (d, i) {
          d.disabled = !d.disabled;
          rescaleY = !d.disabled;
          state.rescaleY = rescaleY;
          dispatch.stateChange(state);
          chart.update();
        });
        legend.dispatch.on('stateChange', function (newState) {
          state.disabled = newState.disabled;
          dispatch.stateChange(state);
          chart.update();
        });
        interactiveLayer.dispatch.on('elementMousemove', function (e) {
          lines.clearHighlights();
          var singlePoint, pointIndex, pointXLocation, allData = [];
          data.filter(function (series, i) {
            series.seriesIndex = i;
            return !series.disabled;
          }).forEach(function (series, i) {
            pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
            lines.highlightPoint(i, pointIndex, true);
            var point = series.values[pointIndex];
            if (typeof point === 'undefined')
              return;
            if (typeof singlePoint === 'undefined')
              singlePoint = point;
            if (typeof pointXLocation === 'undefined')
              pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
            allData.push({
              key: series.key,
              value: chart.y()(point, pointIndex),
              color: color(series, series.seriesIndex)
            });
          });
          //Highlight the tooltip entry based on which point the mouse is closest to.
          if (allData.length > 2) {
            var yValue = chart.yScale().invert(e.mouseY);
            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
            var threshold = 0.03 * domainExtent;
            var indexToHighlight = nv.nearestValueIndex(allData.map(function (d) {
                return d.value;
              }), yValue, threshold);
            if (indexToHighlight !== null)
              allData[indexToHighlight].highlight = true;
          }
          var xValue = xAxis.tickFormat()(chart.x()(singlePoint, pointIndex), pointIndex);
          interactiveLayer.tooltip.position({
            left: pointXLocation + margin.left,
            top: e.mouseY + margin.top
          }).chartContainer(that.parentNode).enabled(tooltips).valueFormatter(function (d, i) {
            return yAxis.tickFormat()(d);
          }).data({
            value: xValue,
            series: allData
          })();
          interactiveLayer.renderGuideLine(pointXLocation);
        });
        interactiveLayer.dispatch.on('elementMouseout', function (e) {
          dispatch.tooltipHide();
          lines.clearHighlights();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          if (typeof e.index !== 'undefined') {
            index.i = e.index;
            index.x = dx(index.i);
            state.index = e.index;
            indexLine.data([index]);
          }
          if (typeof e.rescaleY !== 'undefined') {
            rescaleY = e.rescaleY;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    lines.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.lines = lines;
    chart.legend = legend;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    chart.interactiveLayer = interactiveLayer;
    d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'xScale', 'yScale', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'useVoronoi', 'id');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.rescaleY = function (_) {
      if (!arguments.length)
        return rescaleY;
      rescaleY = _;
      return chart;
    };
    chart.showControls = function (_) {
      if (!arguments.length)
        return showControls;
      showControls = _;
      return chart;
    };
    chart.useInteractiveGuideline = function (_) {
      if (!arguments.length)
        return useInteractiveGuideline;
      useInteractiveGuideline = _;
      if (_ === true) {
        chart.interactive(false);
        chart.useVoronoi(false);
      }
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.average = function (_) {
      if (!arguments.length)
        return average;
      average = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    chart.noErrorCheck = function (_) {
      if (!arguments.length)
        return noErrorCheck;
      noErrorCheck = _;
      return chart;
    };
    //============================================================
    //============================================================
    // Functions
    //------------------------------------------------------------
    /* Normalize the data according to an index point. */
    function indexify(idx, data) {
      return data.map(function (line, i) {
        if (!line.values) {
          return line;
        }
        var v = lines.y()(line.values[idx], idx);
        //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue
        if (v < -0.95 && !noErrorCheck) {
          //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)
          line.tempDisabled = true;
          return line;
        }
        line.tempDisabled = false;
        line.values = line.values.map(function (point, pointIndex) {
          point.display = { 'y': (lines.y()(point, pointIndex) - v) / (1 + v) };
          return point;
        });
        return line;
      });
    }
    //============================================================
    return chart;
  };
  //TODO: consider deprecating by adding necessary features to multiBar model
  nv.models.discreteBar = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), x = d3.scale.ordinal(), y = d3.scale.linear(), getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, forceY = [0], color = nv.utils.defaultColor(), showValues = false, valueFormat = d3.format(',.2f'), xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout'), rectClass = 'discreteBar';
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //add series index to each data point for reference
        data.forEach(function (series, i) {
          series.values.forEach(function (point) {
            point.series = i;
          });
        });
        //------------------------------------------------------------
        // Setup Scales
        // remap and flatten the data for use in calculating the scales' domains
        var seriesData = xDomain && yDomain ? [] : data.map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: getX(d, i),
                y: getY(d, i),
                y0: d.y0
              };
            });
          });
        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
          return d.x;
        })).rangeBands(xRange || [
          0,
          availableWidth
        ], 0.1);
        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
          return d.y;
        }).concat(forceY)));
        // If showValues, pad the Y axis range to account for label height
        if (showValues)
          y.range(yRange || [
            availableHeight - (y.domain()[0] < 0 ? 12 : 0),
            y.domain()[1] > 0 ? 12 : 0
          ]);
        else
          y.range(yRange || [
            availableHeight,
            0
          ]);
        //store old scales if they exist
        x0 = x0 || x;
        y0 = y0 || y.copy().range([
          y(0),
          y(0)
        ]);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-groups');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later
        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
            return d;
          }, function (d) {
            return d.key;
          });
        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
        groups.exit().transition().style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001).remove();
        groups.attr('class', function (d, i) {
          return 'nv-group nv-series-' + i;
        }).classed('hover', function (d) {
          return d.hover;
        });
        groups.transition().style('stroke-opacity', 1).style('fill-opacity', 0.75);
        var bars = groups.selectAll('g.nv-bar').data(function (d) {
            return d.values;
          });
        bars.exit().remove();
        var barsEnter = bars.enter().append('g').attr('transform', function (d, i, j) {
            return 'translate(' + (x(getX(d, i)) + x.rangeBand() * 0.05) + ', ' + y(0) + ')';
          }).on('mouseover', function (d, i) {
            //TODO: figure out why j works above, but not here
            d3.select(this).classed('hover', true);
            dispatch.elementMouseover({
              value: getY(d, i),
              point: d,
              series: data[d.series],
              pos: [
                x(getX(d, i)) + x.rangeBand() * (d.series + 0.5) / data.length,
                y(getY(d, i))
              ],
              pointIndex: i,
              seriesIndex: d.series,
              e: d3.event
            });
          }).on('mouseout', function (d, i) {
            d3.select(this).classed('hover', false);
            dispatch.elementMouseout({
              value: getY(d, i),
              point: d,
              series: data[d.series],
              pointIndex: i,
              seriesIndex: d.series,
              e: d3.event
            });
          }).on('click', function (d, i) {
            dispatch.elementClick({
              value: getY(d, i),
              point: d,
              series: data[d.series],
              pos: [
                x(getX(d, i)) + x.rangeBand() * (d.series + 0.5) / data.length,
                y(getY(d, i))
              ],
              pointIndex: i,
              seriesIndex: d.series,
              e: d3.event
            });
            d3.event.stopPropagation();
          }).on('dblclick', function (d, i) {
            dispatch.elementDblClick({
              value: getY(d, i),
              point: d,
              series: data[d.series],
              pos: [
                x(getX(d, i)) + x.rangeBand() * (d.series + 0.5) / data.length,
                y(getY(d, i))
              ],
              pointIndex: i,
              seriesIndex: d.series,
              e: d3.event
            });
            d3.event.stopPropagation();
          });
        barsEnter.append('rect').attr('height', 0).attr('width', x.rangeBand() * 0.9 / data.length);
        if (showValues) {
          barsEnter.append('text').attr('text-anchor', 'middle');
          ;
          bars.select('text').text(function (d, i) {
            return valueFormat(getY(d, i));
          }).transition().attr('x', x.rangeBand() * 0.9 / 2).attr('y', function (d, i) {
            return getY(d, i) < 0 ? y(getY(d, i)) - y(0) + 12 : -4;
          });
          ;
        } else {
          bars.selectAll('text').remove();
        }
        bars.attr('class', function (d, i) {
          return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
        }).style('fill', function (d, i) {
          return d.color || color(d, i);
        }).style('stroke', function (d, i) {
          return d.color || color(d, i);
        }).select('rect').attr('class', rectClass).transition().attr('width', x.rangeBand() * 0.9 / data.length);
        bars.transition().attr('transform', function (d, i) {
          var left = x(getX(d, i)) + x.rangeBand() * 0.05, top = getY(d, i) < 0 ? y(0) : y(0) - y(getY(d, i)) < 1 ? y(0) - 1 : y(getY(d, i));
          return 'translate(' + left + ', ' + top + ')';
        }).select('rect').attr('height', function (d, i) {
          return Math.max(Math.abs(y(getY(d, i)) - y(yDomain && yDomain[0] || 0)) || 1);
        });
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.forceY = function (_) {
      if (!arguments.length)
        return forceY;
      forceY = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.showValues = function (_) {
      if (!arguments.length)
        return showValues;
      showValues = _;
      return chart;
    };
    chart.valueFormat = function (_) {
      if (!arguments.length)
        return valueFormat;
      valueFormat = _;
      return chart;
    };
    chart.rectClass = function (_) {
      if (!arguments.length)
        return rectClass;
      rectClass = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.discreteBarChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var discretebar = nv.models.discreteBar(), xAxis = nv.models.axis(), yAxis = nv.models.axis();
    ;
    var margin = {
        top: 15,
        right: 10,
        bottom: 50,
        left: 60
      }, width = null, height = null, color = nv.utils.getColor(), showXAxis = true, showYAxis = true, rightAlignYAxis = false, staggerLabels = false, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + x + '</h3>' + '<p>' + y + '</p>';
      }, x, y, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'beforeUpdate'), transitionDuration = 250;
    ;
    xAxis.orient('bottom').highlightZero(false).showMaxMin(false).tickFormat(function (d) {
      return d;
    });
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickFormat(d3.format(',.1f'));
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(discretebar.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(discretebar.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          dispatch.beforeUpdate();
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = discretebar.xScale();
        y = discretebar.yScale().clamp(true);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');
        var defsEnter = gEnter.append('defs');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis').append('g').attr('class', 'nv-zeroLine').append('line');
        gEnter.append('g').attr('class', 'nv-barsWrap');
        g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Main Chart Component(s)
        discretebar.width(availableWidth).height(availableHeight);
        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
            return !d.disabled;
          }));
        barsWrap.transition().call(discretebar);
        //------------------------------------------------------------
        defsEnter.append('clipPath').attr('id', 'nv-x-label-clip-' + discretebar.id()).append('rect');
        g.select('#nv-x-label-clip-' + discretebar.id() + ' rect').attr('width', x.rangeBand() * (staggerLabels ? 2 : 1)).attr('height', 16).attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2));
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + (y.range()[0] + (discretebar.showValues() && y.domain()[0] < 0 ? 16 : 0)) + ')');
          //d3.transition(g.select('.nv-x.nv-axis'))
          g.select('.nv-x.nv-axis').transition().call(xAxis);
          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
          if (staggerLabels) {
            xTicks.selectAll('text').attr('transform', function (d, i, j) {
              return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')';
            });
          }
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(availableHeight / 36).tickSize(-availableWidth, 0);
          g.select('.nv-y.nv-axis').transition().call(yAxis);
        }
        // Zero line
        g.select('.nv-zeroLine line').attr('x1', 0).attr('x2', availableWidth).attr('y1', y(0)).attr('y2', y(0));
        ;
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    discretebar.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    discretebar.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.discretebar = discretebar;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    d3.rebind(chart, discretebar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'id', 'showValues', 'valueFormat');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      discretebar.color(color);
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.staggerLabels = function (_) {
      if (!arguments.length)
        return staggerLabels;
      staggerLabels = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.distribution = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 400, size = 8, axis = 'x', getData = function (d) {
        return d[axis];
      }  // defaults d.x or d.y
, color = nv.utils.defaultColor(), scale = d3.scale.linear(), domain;
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var scale0;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom), naxis = axis == 'x' ? 'y' : 'x', container = d3.select(this);
        //------------------------------------------------------------
        // Setup Scales
        scale0 = scale0 || scale;
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-distribution').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        var distWrap = g.selectAll('g.nv-dist').data(function (d) {
            return d;
          }, function (d) {
            return d.key;
          });
        distWrap.enter().append('g');
        distWrap.attr('class', function (d, i) {
          return 'nv-dist nv-series-' + i;
        }).style('stroke', function (d, i) {
          return color(d, i);
        });
        var dist = distWrap.selectAll('line.nv-dist' + axis).data(function (d) {
            return d.values;
          });
        dist.enter().append('line').attr(axis + '1', function (d, i) {
          return scale0(getData(d, i));
        }).attr(axis + '2', function (d, i) {
          return scale0(getData(d, i));
        });
        distWrap.exit().selectAll('line.nv-dist' + axis).transition().attr(axis + '1', function (d, i) {
          return scale(getData(d, i));
        }).attr(axis + '2', function (d, i) {
          return scale(getData(d, i));
        }).style('stroke-opacity', 0).remove();
        dist.attr('class', function (d, i) {
          return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i;
        }).attr(naxis + '1', 0).attr(naxis + '2', size);
        dist.transition().attr(axis + '1', function (d, i) {
          return scale(getData(d, i));
        }).attr(axis + '2', function (d, i) {
          return scale(getData(d, i));
        });
        scale0 = scale.copy();
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.axis = function (_) {
      if (!arguments.length)
        return axis;
      axis = _;
      return chart;
    };
    chart.size = function (_) {
      if (!arguments.length)
        return size;
      size = _;
      return chart;
    };
    chart.getData = function (_) {
      if (!arguments.length)
        return getData;
      getData = d3.functor(_);
      return chart;
    };
    chart.scale = function (_) {
      if (!arguments.length)
        return scale;
      scale = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.historicalBarChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var bars = nv.models.historicalBar(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend();
    ;
    var margin = {
        top: 30,
        right: 90,
        bottom: 50,
        left: 90
      }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = false, showXAxis = true, showYAxis = true, rightAlignYAxis = false, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, x, y, state = {}, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), transitionDuration = 250;
    ;
    xAxis.orient('bottom').tickPadding(7);
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      // New addition to calculate position if SVG is scaled with viewBox, may move TODO: consider implementing everywhere else
      if (offsetElement) {
        var svg = d3.select(offsetElement).select('svg');
        var viewBox = svg.node() ? svg.attr('viewBox') : null;
        if (viewBox) {
          viewBox = viewBox.split(' ');
          var ratio = parseInt(svg.style('width')) / viewBox[2];
          e.pos[0] = e.pos[0] * ratio;
          e.pos[1] = e.pos[1] * ratio;
        }
      }
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(bars.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(bars.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, null, null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display noData message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = bars.xScale();
        y = bars.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-barsWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth);
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        // Main Chart Component(s)
        bars.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
            return !d.disabled;
          }));
        barsWrap.transition().call(bars);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
          g.select('.nv-x.nv-axis').transition().call(xAxis);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(availableHeight / 36).tickSize(-availableWidth, 0);
          g.select('.nv-y.nv-axis').transition().call(yAxis);
        }
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('legendClick', function (d, i) {
          d.disabled = !d.disabled;
          if (!data.filter(function (d) {
              return !d.disabled;
            }).length) {
            data.map(function (d) {
              d.disabled = false;
              wrap.selectAll('.nv-series').classed('disabled', false);
              return d;
            });
          }
          state.disabled = data.map(function (d) {
            return !!d.disabled;
          });
          dispatch.stateChange(state);
          selection.transition().call(chart);
        });
        legend.dispatch.on('legendDblclick', function (d) {
          //Double clicking should always enable current series, and disabled all others.
          data.forEach(function (d) {
            d.disabled = true;
          });
          d.disabled = false;
          state.disabled = data.map(function (d) {
            return !!d.disabled;
          });
          dispatch.stateChange(state);
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    bars.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    bars.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.bars = bars;
    chart.legend = legend;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    d3.rebind(chart, bars, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id', 'interpolate', 'highlightPoint', 'clearHighlights', 'interactive');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.indentedTree = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, color = nv.utils.defaultColor(), id = Math.floor(Math.random() * 10000), header = true, filterZero = false, noData = 'No Data Available.', childIndent = 20, columns = [{
          key: 'key',
          label: 'Name',
          type: 'text'
        }], tableClass = null, iconOpen = 'images/grey-plus.png', iconClose = 'images/grey-minus.png', dispatch = d3.dispatch('elementClick', 'elementDblclick', 'elementMouseover', 'elementMouseout'), getUrl = function (d) {
        return d.url;
      };
    ;
    //============================================================
    var idx = 0;
    function chart(selection) {
      selection.each(function (data) {
        var depth = 1, container = d3.select(this);
        var tree = d3.layout.tree().children(function (d) {
            return d.values;
          }).size([
            height,
            childIndent
          ]);
        //Not sure if this is needed now that the result is HTML
        chart.update = function () {
          container.transition().duration(600).call(chart);
        };
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data[0])
          data[0] = { key: noData };
        //------------------------------------------------------------
        var nodes = tree.nodes(data[0]);
        // nodes.map(function(d) {
        //   d.id = i++;
        // })
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = d3.select(this).selectAll('div').data([[nodes]]);
        var wrapEnter = wrap.enter().append('div').attr('class', 'nvd3 nv-wrap nv-indentedtree');
        var tableEnter = wrapEnter.append('table');
        var table = wrap.select('table').attr('width', '100%').attr('class', tableClass);
        //------------------------------------------------------------
        if (header) {
          var thead = tableEnter.append('thead');
          var theadRow1 = thead.append('tr');
          columns.forEach(function (column) {
            theadRow1.append('th').attr('width', column.width ? column.width : '10%').style('text-align', column.type == 'numeric' ? 'right' : 'left').append('span').text(column.label);
          });
        }
        var tbody = table.selectAll('tbody').data(function (d) {
            return d;
          });
        tbody.enter().append('tbody');
        //compute max generations
        depth = d3.max(nodes, function (node) {
          return node.depth;
        });
        tree.size([
          height,
          depth * childIndent
        ]);
        //TODO: see if this is necessary at all
        // Update the nodes…
        var node = tbody.selectAll('tr').data(function (d) {
            return d.filter(function (d) {
              return filterZero && !d.children ? filterZero(d) : true;
            });
          }, function (d, i) {
            return d.id || (d.id || ++idx);
          });
        //.style('display', 'table-row'); //TODO: see if this does anything
        node.exit().remove();
        node.select('img.nv-treeicon').attr('src', icon).classed('folded', folded);
        var nodeEnter = node.enter().append('tr');
        columns.forEach(function (column, index) {
          var nodeName = nodeEnter.append('td').style('padding-left', function (d) {
              return (index ? 0 : d.depth * childIndent + 12 + (icon(d) ? 0 : 16)) + 'px';
            }, 'important').style('text-align', column.type == 'numeric' ? 'right' : 'left');
          if (index == 0) {
            nodeName.append('img').classed('nv-treeicon', true).classed('nv-folded', folded).attr('src', icon).style('width', '14px').style('height', '14px').style('padding', '0 1px').style('display', function (d) {
              return icon(d) ? 'inline-block' : 'none';
            }).on('click', click);
          }
          nodeName.each(function (d) {
            if (!index && getUrl(d))
              d3.select(this).append('a').attr('href', getUrl).attr('class', d3.functor(column.classes)).append('span');
            else
              d3.select(this).append('span');
            d3.select(this).select('span').attr('class', d3.functor(column.classes)).text(function (d) {
              return column.format ? column.format(d) : d[column.key] || '-';
            });
          });
          if (column.showCount) {
            nodeName.append('span').attr('class', 'nv-childrenCount');
            node.selectAll('span.nv-childrenCount').text(function (d) {
              return d.values && d.values.length || d._values && d._values.length ? '(' + (d.values && d.values.filter(function (d) {
                return filterZero ? filterZero(d) : true;
              }).length || d._values && d._values.filter(function (d) {
                return filterZero ? filterZero(d) : true;
              }).length || 0) + ')' : '';
            });
          }  // if (column.click)
             //   nodeName.select('span').on('click', column.click);
        });
        node.order().on('click', function (d) {
          dispatch.elementClick({
            row: this,
            data: d,
            pos: [
              d.x,
              d.y
            ]
          });
        }).on('dblclick', function (d) {
          dispatch.elementDblclick({
            row: this,
            data: d,
            pos: [
              d.x,
              d.y
            ]
          });
        }).on('mouseover', function (d) {
          dispatch.elementMouseover({
            row: this,
            data: d,
            pos: [
              d.x,
              d.y
            ]
          });
        }).on('mouseout', function (d) {
          dispatch.elementMouseout({
            row: this,
            data: d,
            pos: [
              d.x,
              d.y
            ]
          });
        });
        // Toggle children on click.
        function click(d, _, unshift) {
          d3.event.stopPropagation();
          if (d3.event.shiftKey && !unshift) {
            //If you shift-click, it'll toggle fold all the children, instead of itself
            d3.event.shiftKey = false;
            d.values && d.values.forEach(function (node) {
              if (node.values || node._values) {
                click(node, 0, true);
              }
            });
            return true;
          }
          if (!hasChildren(d)) {
            //download file
            //window.location.href = d.url;
            return true;
          }
          if (d.values) {
            d._values = d.values;
            d.values = null;
          } else {
            d.values = d._values;
            d._values = null;
          }
          chart.update();
        }
        function icon(d) {
          return d._values && d._values.length ? iconOpen : d.values && d.values.length ? iconClose : '';
        }
        function folded(d) {
          return d._values && d._values.length;
        }
        function hasChildren(d) {
          var values = d.values || d._values;
          return values && values.length;
        }
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      scatter.color(color);
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.header = function (_) {
      if (!arguments.length)
        return header;
      header = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.filterZero = function (_) {
      if (!arguments.length)
        return filterZero;
      filterZero = _;
      return chart;
    };
    chart.columns = function (_) {
      if (!arguments.length)
        return columns;
      columns = _;
      return chart;
    };
    chart.tableClass = function (_) {
      if (!arguments.length)
        return tableClass;
      tableClass = _;
      return chart;
    };
    chart.iconOpen = function (_) {
      if (!arguments.length)
        return iconOpen;
      iconOpen = _;
      return chart;
    };
    chart.iconClose = function (_) {
      if (!arguments.length)
        return iconClose;
      iconClose = _;
      return chart;
    };
    chart.getUrl = function (_) {
      if (!arguments.length)
        return getUrl;
      getUrl = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.legend = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 5,
        right: 0,
        bottom: 5,
        left: 0
      }, width = 400, height = 20, getKey = function (d) {
        return d.key;
      }, color = nv.utils.defaultColor(), align = true, rightAlign = true, updateState = true, radioButtonMode = false, dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange');
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, container = d3.select(this);
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-legend').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
        var g = wrap.select('g');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        var series = g.selectAll('.nv-series').data(function (d) {
            return d;
          });
        var seriesEnter = series.enter().append('g').attr('class', 'nv-series').on('mouseover', function (d, i) {
            dispatch.legendMouseover(d, i);  //TODO: Make consistent with other event objects
          }).on('mouseout', function (d, i) {
            dispatch.legendMouseout(d, i);
          }).on('click', function (d, i) {
            dispatch.legendClick(d, i);
            if (updateState) {
              if (radioButtonMode) {
                //Radio button mode: set every series to disabled,
                //  and enable the clicked series.
                data.forEach(function (series) {
                  series.disabled = true;
                });
                d.disabled = false;
              } else {
                d.disabled = !d.disabled;
                if (data.every(function (series) {
                    return series.disabled;
                  })) {
                  //the default behavior of NVD3 legends is, if every single series
                  // is disabled, turn all series' back on.
                  data.forEach(function (series) {
                    series.disabled = false;
                  });
                }
              }
              dispatch.stateChange({
                disabled: data.map(function (d) {
                  return !!d.disabled;
                })
              });
            }
          }).on('dblclick', function (d, i) {
            dispatch.legendDblclick(d, i);
            if (updateState) {
              //the default behavior of NVD3 legends, when double clicking one,
              // is to set all other series' to false, and make the double clicked series enabled.
              data.forEach(function (series) {
                series.disabled = true;
              });
              d.disabled = false;
              dispatch.stateChange({
                disabled: data.map(function (d) {
                  return !!d.disabled;
                })
              });
            }
          });
        seriesEnter.append('circle').style('stroke-width', 2).attr('class', 'nv-legend-symbol').attr('r', 5);
        seriesEnter.append('text').attr('text-anchor', 'start').attr('class', 'nv-legend-text').attr('dy', '.32em').attr('dx', '8');
        series.classed('disabled', function (d) {
          return d.disabled;
        });
        series.exit().remove();
        series.select('circle').style('fill', function (d, i) {
          return d.color || color(d, i);
        }).style('stroke', function (d, i) {
          return d.color || color(d, i);
        });
        series.select('text').text(getKey);
        //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)
        // NEW ALIGNING CODE, TODO: clean up
        if (align) {
          var seriesWidths = [];
          series.each(function (d, i) {
            var legendText = d3.select(this).select('text');
            var nodeTextLength;
            try {
              nodeTextLength = legendText.getComputedTextLength();
              // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
              if (nodeTextLength <= 0)
                throw Error();
            } catch (e) {
              nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
            }
            seriesWidths.push(nodeTextLength + 28);  // 28 is ~ the width of the circle plus some padding
          });
          var seriesPerRow = 0;
          var legendWidth = 0;
          var columnWidths = [];
          while (legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
            columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
            legendWidth += seriesWidths[seriesPerRow++];
          }
          if (seriesPerRow === 0)
            seriesPerRow = 1;
          //minimum of one series per row
          while (legendWidth > availableWidth && seriesPerRow > 1) {
            columnWidths = [];
            seriesPerRow--;
            for (var k = 0; k < seriesWidths.length; k++) {
              if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0))
                columnWidths[k % seriesPerRow] = seriesWidths[k];
            }
            legendWidth = columnWidths.reduce(function (prev, cur, index, array) {
              return prev + cur;
            });
          }
          var xPositions = [];
          for (var i = 0, curX = 0; i < seriesPerRow; i++) {
            xPositions[i] = curX;
            curX += columnWidths[i];
          }
          series.attr('transform', function (d, i) {
            return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * 20) + ')';
          });
          //position legend as far right as possible within the total width
          if (rightAlign) {
            g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
          } else {
            g.attr('transform', 'translate(0' + ',' + margin.top + ')');
          }
          height = margin.top + margin.bottom + Math.ceil(seriesWidths.length / seriesPerRow) * 20;
        } else {
          var ypos = 5, newxpos = 5, maxwidth = 0, xpos;
          series.attr('transform', function (d, i) {
            var length = d3.select(this).select('text').node().getComputedTextLength() + 28;
            xpos = newxpos;
            if (width < margin.left + margin.right + xpos + length) {
              newxpos = xpos = 5;
              ypos += 20;
            }
            newxpos += length;
            if (newxpos > maxwidth)
              maxwidth = newxpos;
            return 'translate(' + xpos + ',' + ypos + ')';
          });
          //position legend as far right as possible within the total width
          g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');
          height = margin.top + margin.bottom + ypos + 15;
        }
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.key = function (_) {
      if (!arguments.length)
        return getKey;
      getKey = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.align = function (_) {
      if (!arguments.length)
        return align;
      align = _;
      return chart;
    };
    chart.rightAlign = function (_) {
      if (!arguments.length)
        return rightAlign;
      rightAlign = _;
      return chart;
    };
    chart.updateState = function (_) {
      if (!arguments.length)
        return updateState;
      updateState = _;
      return chart;
    };
    chart.radioButtonMode = function (_) {
      if (!arguments.length)
        return radioButtonMode;
      radioButtonMode = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.line = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var scatter = nv.models.scatter();
    ;
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, color = nv.utils.defaultColor(), getX = function (d) {
        return d.x;
      }  // accessor to get the x value from a data point
, getY = function (d) {
        return d.y;
      }  // accessor to get the y value from a data point
, defined = function (d, i) {
        return !isNaN(getY(d, i)) && getY(d, i) !== null;
      }  // allows a line to be not continuous when it is not defined
, isArea = function (d) {
        return d.area;
      }  // decides if a line is an area or just a line
, clipEdge = false, x, y, interpolate = 'linear';
    // controls the line interpolation
    ;
    scatter.size(16).sizeDomain([
      16,
      256
    ]);
    //set to speed up calculation, needs to be unset if there is a custom size accessor
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0;
    //used to store previous scales
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //------------------------------------------------------------
        // Setup Scales
        x = scatter.xScale();
        y = scatter.yScale();
        x0 = x0 || x;
        y0 = y0 || y;
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-groups');
        gEnter.append('g').attr('class', 'nv-scatterWrap');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        scatter.width(availableWidth).height(availableHeight);
        var scatterWrap = wrap.select('.nv-scatterWrap');
        //.datum(data); // Data automatically trickles down from the wrap
        scatterWrap.transition().call(scatter);
        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + scatter.id()).append('rect');
        wrap.select('#nv-edge-clip-' + scatter.id() + ' rect').attr('width', availableWidth).attr('height', availableHeight > 0 ? availableHeight : 0);
        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
        scatterWrap.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
            return d;
          }, function (d) {
            return d.key;
          });
        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
        groups.exit().remove();
        groups.attr('class', function (d, i) {
          return 'nv-group nv-series-' + i;
        }).classed('hover', function (d) {
          return d.hover;
        }).style('fill', function (d, i) {
          return color(d, i);
        }).style('stroke', function (d, i) {
          return color(d, i);
        });
        groups.transition().style('stroke-opacity', 1).style('fill-opacity', 0.5);
        var areaPaths = groups.selectAll('path.nv-area').data(function (d) {
            return isArea(d) ? [d] : [];
          });
        // this is done differently than lines because I need to check if series is an area
        areaPaths.enter().append('path').attr('class', 'nv-area').attr('d', function (d) {
          return d3.svg.area().interpolate(interpolate).defined(defined).x(function (d, i) {
            return nv.utils.NaNtoZero(x0(getX(d, i)));
          }).y0(function (d, i) {
            return nv.utils.NaNtoZero(y0(getY(d, i)));
          }).y1(function (d, i) {
            return y0(y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0]);
          }).apply(this, [d.values]);
        });
        groups.exit().selectAll('path.nv-area').remove();
        areaPaths.transition().attr('d', function (d) {
          return d3.svg.area().interpolate(interpolate).defined(defined).x(function (d, i) {
            return nv.utils.NaNtoZero(x(getX(d, i)));
          }).y0(function (d, i) {
            return nv.utils.NaNtoZero(y(getY(d, i)));
          }).y1(function (d, i) {
            return y(y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0]);
          }).apply(this, [d.values]);
        });
        var linePaths = groups.selectAll('path.nv-line').data(function (d) {
            return [d.values];
          });
        linePaths.enter().append('path').attr('class', 'nv-line').attr('d', d3.svg.line().interpolate(interpolate).defined(defined).x(function (d, i) {
          return nv.utils.NaNtoZero(x0(getX(d, i)));
        }).y(function (d, i) {
          return nv.utils.NaNtoZero(y0(getY(d, i)));
        }));
        linePaths.transition().attr('d', d3.svg.line().interpolate(interpolate).defined(defined).x(function (d, i) {
          return nv.utils.NaNtoZero(x(getX(d, i)));
        }).y(function (d, i) {
          return nv.utils.NaNtoZero(y(getY(d, i)));
        }));
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = scatter.dispatch;
    chart.scatter = scatter;
    d3.rebind(chart, scatter, 'id', 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi', 'clipRadius', 'padData', 'highlightPoint', 'clearHighlights');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      scatter.x(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      scatter.y(_);
      return chart;
    };
    chart.clipEdge = function (_) {
      if (!arguments.length)
        return clipEdge;
      clipEdge = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      scatter.color(color);
      return chart;
    };
    chart.interpolate = function (_) {
      if (!arguments.length)
        return interpolate;
      interpolate = _;
      return chart;
    };
    chart.defined = function (_) {
      if (!arguments.length)
        return defined;
      defined = _;
      return chart;
    };
    chart.isArea = function (_) {
      if (!arguments.length)
        return isArea;
      isArea = d3.functor(_);
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.lineChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var lines = nv.models.line(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), interactiveLayer = nv.interactiveGuideline();
    ;
    var margin = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 60
      }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, useInteractiveGuideline = false, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, x, y, state = {}, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), transitionDuration = 250;
    ;
    xAxis.orient('bottom').tickPadding(7);
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, null, null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display noData message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = lines.xScale();
        y = lines.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');
        var g = wrap.select('g');
        gEnter.append('rect').style('opacity', 0);
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-linesWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-interactive');
        g.select('rect').attr('width', availableWidth).attr('height', availableHeight > 0 ? availableHeight : 0);
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth);
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        // Main Chart Component(s)
        //------------------------------------------------------------
        //Set up interactive layer
        if (useInteractiveGuideline) {
          interactiveLayer.width(availableWidth).height(availableHeight).margin({
            left: margin.left,
            top: margin.top
          }).svgContainer(container).xScale(x);
          wrap.select('.nv-interactive').call(interactiveLayer);
        }
        lines.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        var linesWrap = g.select('.nv-linesWrap').datum(data.filter(function (d) {
            return !d.disabled;
          }));
        linesWrap.transition().call(lines);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
          g.select('.nv-x.nv-axis').transition().call(xAxis);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(availableHeight / 36).tickSize(-availableWidth, 0);
          g.select('.nv-y.nv-axis').transition().call(yAxis);
        }
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          state = newState;
          dispatch.stateChange(state);
          chart.update();
        });
        interactiveLayer.dispatch.on('elementMousemove', function (e) {
          lines.clearHighlights();
          var singlePoint, pointIndex, pointXLocation, allData = [];
          data.filter(function (series, i) {
            series.seriesIndex = i;
            return !series.disabled;
          }).forEach(function (series, i) {
            pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
            lines.highlightPoint(i, pointIndex, true);
            var point = series.values[pointIndex];
            if (typeof point === 'undefined')
              return;
            if (typeof singlePoint === 'undefined')
              singlePoint = point;
            if (typeof pointXLocation === 'undefined')
              pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
            allData.push({
              key: series.key,
              value: chart.y()(point, pointIndex),
              color: color(series, series.seriesIndex)
            });
          });
          //Highlight the tooltip entry based on which point the mouse is closest to.
          if (allData.length > 2) {
            var yValue = chart.yScale().invert(e.mouseY);
            var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
            var threshold = 0.03 * domainExtent;
            var indexToHighlight = nv.nearestValueIndex(allData.map(function (d) {
                return d.value;
              }), yValue, threshold);
            if (indexToHighlight !== null)
              allData[indexToHighlight].highlight = true;
          }
          var xValue = xAxis.tickFormat()(chart.x()(singlePoint, pointIndex));
          interactiveLayer.tooltip.position({
            left: pointXLocation + margin.left,
            top: e.mouseY + margin.top
          }).chartContainer(that.parentNode).enabled(tooltips).valueFormatter(function (d, i) {
            return yAxis.tickFormat()(d);
          }).data({
            value: xValue,
            series: allData
          })();
          interactiveLayer.renderGuideLine(pointXLocation);
        });
        interactiveLayer.dispatch.on('elementMouseout', function (e) {
          dispatch.tooltipHide();
          lines.clearHighlights();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    lines.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.lines = lines;
    chart.legend = legend;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    chart.interactiveLayer = interactiveLayer;
    d3.rebind(chart, lines, 'defined', 'isArea', 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'useVoronoi', 'id', 'interpolate');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.useInteractiveGuideline = function (_) {
      if (!arguments.length)
        return useInteractiveGuideline;
      useInteractiveGuideline = _;
      if (_ === true) {
        chart.interactive(false);
        chart.useVoronoi(false);
      }
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.linePlusBarChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var lines = nv.models.line(), bars = nv.models.historicalBar(), xAxis = nv.models.axis(), y1Axis = nv.models.axis(), y2Axis = nv.models.axis(), legend = nv.models.legend();
    ;
    var margin = {
        top: 30,
        right: 60,
        bottom: 50,
        left: 60
      }, width = null, height = null, getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, color = nv.utils.defaultColor(), showLegend = true, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, x, y1, y2, state = {}, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState');
    ;
    bars.padData(true);
    ;
    lines.clipEdge(false).padData(true);
    ;
    xAxis.orient('bottom').tickPadding(7).highlightZero(false);
    ;
    y1Axis.orient('left');
    ;
    y2Axis.orient('right');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)), y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    ;
    //------------------------------------------------------------
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().call(chart);
        };
        // chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        var dataBars = data.filter(function (d) {
            return !d.disabled && d.bar;
          });
        var dataLines = data.filter(function (d) {
            return !d.bar;
          });
        // removed the !d.disabled clause here to fix Issue #240
        //x = xAxis.scale();
        x = dataLines.filter(function (d) {
          return !d.disabled;
        }).length && dataLines.filter(function (d) {
          return !d.disabled;
        })[0].values.length ? lines.xScale() : bars.xScale();
        //x = dataLines.filter(function(d) { return !d.disabled; }).length ? lines.xScale() : bars.xScale(); //old code before change above
        y1 = bars.yScale();
        y2 = lines.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-linePlusBar').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y1 nv-axis');
        gEnter.append('g').attr('class', 'nv-y2 nv-axis');
        gEnter.append('g').attr('class', 'nv-barsWrap');
        gEnter.append('g').attr('class', 'nv-linesWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth / 2);
          g.select('.nv-legendWrap').datum(data.map(function (series) {
            series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
            series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');
            return series;
          })).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(' + availableWidth / 2 + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        // Main Chart Component(s)
        lines.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled && !data[i].bar;
        }));
        bars.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].bar;
        }));
        var barsWrap = g.select('.nv-barsWrap').datum(dataBars.length ? dataBars : [{ values: [] }]);
        var linesWrap = g.select('.nv-linesWrap').datum(dataLines[0] && !dataLines[0].disabled ? dataLines : [{ values: [] }]);
        //.datum(!dataLines[0].disabled ? dataLines : [{values:dataLines[0].values.map(function(d) { return [d[0], null] }) }] );
        d3.transition(barsWrap).call(bars);
        d3.transition(linesWrap).call(lines);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight, 0);
        g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y1.range()[0] + ')');
        d3.transition(g.select('.nv-x.nv-axis')).call(xAxis);
        y1Axis.scale(y1).ticks(availableHeight / 36).tickSize(-availableWidth, 0);
        d3.transition(g.select('.nv-y1.nv-axis')).style('opacity', dataBars.length ? 1 : 0).call(y1Axis);
        y2Axis.scale(y2).ticks(availableHeight / 36).tickSize(dataBars.length ? 0 : -availableWidth, 0);
        // Show the y2 rules only if y1 has none
        g.select('.nv-y2.nv-axis').style('opacity', dataLines.length ? 1 : 0).attr('transform', 'translate(' + availableWidth + ',0)');
        //.attr('transform', 'translate(' + x.range()[1] + ',0)');
        d3.transition(g.select('.nv-y2.nv-axis')).call(y2Axis);
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          state = newState;
          dispatch.stateChange(state);
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    lines.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    bars.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    bars.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.legend = legend;
    chart.lines = lines;
    chart.bars = bars;
    chart.xAxis = xAxis;
    chart.y1Axis = y1Axis;
    chart.y2Axis = y2Axis;
    d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');
    //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.
    //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      lines.x(_);
      bars.x(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      lines.y(_);
      bars.y(_);
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.lineWithFocusChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var lines = nv.models.line(), lines2 = nv.models.line(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), x2Axis = nv.models.axis(), y2Axis = nv.models.axis(), legend = nv.models.legend(), brush = d3.svg.brush();
    ;
    var margin = {
        top: 30,
        right: 30,
        bottom: 30,
        left: 60
      }, margin2 = {
        top: 0,
        right: 30,
        bottom: 20,
        left: 60
      }, color = nv.utils.defaultColor(), width = null, height = null, height2 = 100, x, y, x2, y2, showLegend = true, brushExtent = null, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush'), transitionDuration = 250;
    ;
    lines.clipEdge(true);
    ;
    lines2.interactive(false);
    ;
    xAxis.orient('bottom').tickPadding(5);
    ;
    yAxis.orient('left');
    ;
    x2Axis.orient('bottom').tickPadding(5);
    ;
    y2Axis.orient('left');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, null, null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight1 = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom - height2, availableHeight2 = height2 - margin2.top - margin2.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight1 / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = lines.xScale();
        y = lines.yScale();
        x2 = lines2.xScale();
        y2 = lines2.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-lineWithFocusChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineWithFocusChart').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
        focusEnter.append('g').attr('class', 'nv-x nv-axis');
        focusEnter.append('g').attr('class', 'nv-y nv-axis');
        focusEnter.append('g').attr('class', 'nv-linesWrap');
        var contextEnter = gEnter.append('g').attr('class', 'nv-context');
        contextEnter.append('g').attr('class', 'nv-x nv-axis');
        contextEnter.append('g').attr('class', 'nv-y nv-axis');
        contextEnter.append('g').attr('class', 'nv-linesWrap');
        contextEnter.append('g').attr('class', 'nv-brushBackground');
        contextEnter.append('g').attr('class', 'nv-x nv-brush');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth);
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight1 = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom - height2;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        // Main Chart Component(s)
        lines.width(availableWidth).height(availableHeight1).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        lines2.defined(lines.defined()).width(availableWidth).height(availableHeight2).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        g.select('.nv-context').attr('transform', 'translate(0,' + (availableHeight1 + margin.bottom + margin2.top) + ')');
        var contextLinesWrap = g.select('.nv-context .nv-linesWrap').datum(data.filter(function (d) {
            return !d.disabled;
          }));
        d3.transition(contextLinesWrap).call(lines2);
        //------------------------------------------------------------
        /*
      var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')
          .datum(data.filter(function(d) { return !d.disabled }))

      d3.transition(focusLinesWrap).call(lines);
     */
        //------------------------------------------------------------
        // Setup Main (Focus) Axes
        xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight1, 0);
        yAxis.scale(y).ticks(availableHeight1 / 36).tickSize(-availableWidth, 0);
        g.select('.nv-focus .nv-x.nv-axis').attr('transform', 'translate(0,' + availableHeight1 + ')');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Brush
        brush.x(x2).on('brush', function () {
          //When brushing, turn off transitions because chart needs to change immediately.
          var oldTransition = chart.transitionDuration();
          chart.transitionDuration(0);
          onBrush();
          chart.transitionDuration(oldTransition);
        });
        if (brushExtent)
          brush.extent(brushExtent);
        var brushBG = g.select('.nv-brushBackground').selectAll('g').data([brushExtent || brush.extent()]);
        var brushBGenter = brushBG.enter().append('g');
        brushBGenter.append('rect').attr('class', 'left').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
        brushBGenter.append('rect').attr('class', 'right').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
        var gBrush = g.select('.nv-x.nv-brush').call(brush);
        gBrush.selectAll('rect').attr('height', availableHeight2);
        gBrush.selectAll('.resize').append('path').attr('d', resizePath);
        onBrush();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Secondary (Context) Axes
        x2Axis.scale(x2).ticks(availableWidth / 100).tickSize(-availableHeight2, 0);
        g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + y2.range()[0] + ')');
        d3.transition(g.select('.nv-context .nv-x.nv-axis')).call(x2Axis);
        y2Axis.scale(y2).ticks(availableHeight2 / 36).tickSize(-availableWidth, 0);
        d3.transition(g.select('.nv-context .nv-y.nv-axis')).call(y2Axis);
        g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + y2.range()[0] + ')');
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        //============================================================
        //============================================================
        // Functions
        //------------------------------------------------------------
        // Taken from crossfilter (http://square.github.com/crossfilter/)
        function resizePath(d) {
          var e = +(d == 'e'), x = e ? 1 : -1, y = availableHeight2 / 3;
          return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);
        }
        function updateBrushBG() {
          if (!brush.empty())
            brush.extent(brushExtent);
          brushBG.data([brush.empty() ? x2.domain() : brushExtent]).each(function (d, i) {
            var leftWidth = x2(d[0]) - x.range()[0], rightWidth = x.range()[1] - x2(d[1]);
            d3.select(this).select('.left').attr('width', leftWidth < 0 ? 0 : leftWidth);
            d3.select(this).select('.right').attr('x', x2(d[1])).attr('width', rightWidth < 0 ? 0 : rightWidth);
          });
        }
        function onBrush() {
          brushExtent = brush.empty() ? null : brush.extent();
          var extent = brush.empty() ? x2.domain() : brush.extent();
          //The brush extent cannot be less than one.  If it is, don't update the line chart.
          if (Math.abs(extent[0] - extent[1]) <= 1) {
            return;
          }
          dispatch.brush({
            extent: extent,
            brush: brush
          });
          updateBrushBG();
          // Update Main (Focus)
          var focusLinesWrap = g.select('.nv-focus .nv-linesWrap').datum(data.filter(function (d) {
              return !d.disabled;
            }).map(function (d, i) {
              return {
                key: d.key,
                values: d.values.filter(function (d, i) {
                  return lines.x()(d, i) >= extent[0] && lines.x()(d, i) <= extent[1];
                })
              };
            }));
          focusLinesWrap.transition().duration(transitionDuration).call(lines);
          // Update Main (Focus) Axes
          g.select('.nv-focus .nv-x.nv-axis').transition().duration(transitionDuration).call(xAxis);
          g.select('.nv-focus .nv-y.nv-axis').transition().duration(transitionDuration).call(yAxis);
        }  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    lines.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.legend = legend;
    chart.lines = lines;
    chart.lines2 = lines2;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    chart.x2Axis = x2Axis;
    chart.y2Axis = y2Axis;
    d3.rebind(chart, lines, 'defined', 'isArea', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return lines.x;
      lines.x(_);
      lines2.x(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return lines.y;
      lines.y(_);
      lines2.y(_);
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.margin2 = function (_) {
      if (!arguments.length)
        return margin2;
      margin2 = _;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.height2 = function (_) {
      if (!arguments.length)
        return height2;
      height2 = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.interpolate = function (_) {
      if (!arguments.length)
        return lines.interpolate();
      lines.interpolate(_);
      lines2.interpolate(_);
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    // Chart has multiple similar Axes, to prevent code duplication, probably need to link all axis functions manually like below
    chart.xTickFormat = function (_) {
      if (!arguments.length)
        return xAxis.tickFormat();
      xAxis.tickFormat(_);
      x2Axis.tickFormat(_);
      return chart;
    };
    chart.yTickFormat = function (_) {
      if (!arguments.length)
        return yAxis.tickFormat();
      yAxis.tickFormat(_);
      y2Axis.tickFormat(_);
      return chart;
    };
    chart.brushExtent = function (_) {
      if (!arguments.length)
        return brushExtent;
      brushExtent = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.linePlusBarWithFocusChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var lines = nv.models.line(), lines2 = nv.models.line(), bars = nv.models.historicalBar(), bars2 = nv.models.historicalBar(), xAxis = nv.models.axis(), x2Axis = nv.models.axis(), y1Axis = nv.models.axis(), y2Axis = nv.models.axis(), y3Axis = nv.models.axis(), y4Axis = nv.models.axis(), legend = nv.models.legend(), brush = d3.svg.brush();
    ;
    var margin = {
        top: 30,
        right: 30,
        bottom: 30,
        left: 60
      }, margin2 = {
        top: 0,
        right: 30,
        bottom: 20,
        left: 60
      }, width = null, height = null, height2 = 100, getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, color = nv.utils.defaultColor(), showLegend = true, extent, brushExtent = null, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, x, x2, y1, y2, y3, y4, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush'), transitionDuration = 0;
    ;
    lines.clipEdge(true);
    ;
    lines2.interactive(false);
    ;
    xAxis.orient('bottom').tickPadding(5);
    ;
    y1Axis.orient('left');
    ;
    y2Axis.orient('right');
    ;
    x2Axis.orient('bottom').tickPadding(5);
    ;
    y3Axis.orient('left');
    ;
    y4Axis.orient('right');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      if (extent) {
        e.pointIndex += Math.ceil(extent[0]);
      }
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)), y = (e.series.bar ? y1Axis : y2Axis).tickFormat()(lines.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    //------------------------------------------------------------
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight1 = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom - height2, availableHeight2 = height2 - margin2.top - margin2.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight1 / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        var dataBars = data.filter(function (d) {
            return !d.disabled && d.bar;
          });
        var dataLines = data.filter(function (d) {
            return !d.bar;
          });
        // removed the !d.disabled clause here to fix Issue #240
        x = bars.xScale();
        x2 = x2Axis.scale();
        y1 = bars.yScale();
        y2 = lines.yScale();
        y3 = bars2.yScale();
        y4 = lines2.yScale();
        var series1 = data.filter(function (d) {
            return !d.disabled && d.bar;
          }).map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: getX(d, i),
                y: getY(d, i)
              };
            });
          });
        var series2 = data.filter(function (d) {
            return !d.disabled && !d.bar;
          }).map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: getX(d, i),
                y: getY(d, i)
              };
            });
          });
        x.range([
          0,
          availableWidth
        ]);
        x2.domain(d3.extent(d3.merge(series1.concat(series2)), function (d) {
          return d.x;
        })).range([
          0,
          availableWidth
        ]);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
        focusEnter.append('g').attr('class', 'nv-x nv-axis');
        focusEnter.append('g').attr('class', 'nv-y1 nv-axis');
        focusEnter.append('g').attr('class', 'nv-y2 nv-axis');
        focusEnter.append('g').attr('class', 'nv-barsWrap');
        focusEnter.append('g').attr('class', 'nv-linesWrap');
        var contextEnter = gEnter.append('g').attr('class', 'nv-context');
        contextEnter.append('g').attr('class', 'nv-x nv-axis');
        contextEnter.append('g').attr('class', 'nv-y1 nv-axis');
        contextEnter.append('g').attr('class', 'nv-y2 nv-axis');
        contextEnter.append('g').attr('class', 'nv-barsWrap');
        contextEnter.append('g').attr('class', 'nv-linesWrap');
        contextEnter.append('g').attr('class', 'nv-brushBackground');
        contextEnter.append('g').attr('class', 'nv-x nv-brush');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth / 2);
          g.select('.nv-legendWrap').datum(data.map(function (series) {
            series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
            series.key = series.originalKey + (series.bar ? ' (left axis)' : ' (right axis)');
            return series;
          })).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight1 = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom - height2;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(' + availableWidth / 2 + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        // Context Components
        bars2.width(availableWidth).height(availableHeight2).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].bar;
        }));
        lines2.width(availableWidth).height(availableHeight2).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled && !data[i].bar;
        }));
        var bars2Wrap = g.select('.nv-context .nv-barsWrap').datum(dataBars.length ? dataBars : [{ values: [] }]);
        var lines2Wrap = g.select('.nv-context .nv-linesWrap').datum(!dataLines[0].disabled ? dataLines : [{ values: [] }]);
        g.select('.nv-context').attr('transform', 'translate(0,' + (availableHeight1 + margin.bottom + margin2.top) + ')');
        bars2Wrap.transition().call(bars2);
        lines2Wrap.transition().call(lines2);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Brush
        brush.x(x2).on('brush', onBrush);
        if (brushExtent)
          brush.extent(brushExtent);
        var brushBG = g.select('.nv-brushBackground').selectAll('g').data([brushExtent || brush.extent()]);
        var brushBGenter = brushBG.enter().append('g');
        brushBGenter.append('rect').attr('class', 'left').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
        brushBGenter.append('rect').attr('class', 'right').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
        var gBrush = g.select('.nv-x.nv-brush').call(brush);
        gBrush.selectAll('rect').attr('height', availableHeight2);
        gBrush.selectAll('.resize').append('path').attr('d', resizePath);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Secondary (Context) Axes
        x2Axis.ticks(availableWidth / 100).tickSize(-availableHeight2, 0);
        g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + y3.range()[0] + ')');
        g.select('.nv-context .nv-x.nv-axis').transition().call(x2Axis);
        y3Axis.scale(y3).ticks(availableHeight2 / 36).tickSize(-availableWidth, 0);
        g.select('.nv-context .nv-y1.nv-axis').style('opacity', dataBars.length ? 1 : 0).attr('transform', 'translate(0,' + x2.range()[0] + ')');
        g.select('.nv-context .nv-y1.nv-axis').transition().call(y3Axis);
        y4Axis.scale(y4).ticks(availableHeight2 / 36).tickSize(dataBars.length ? 0 : -availableWidth, 0);
        // Show the y2 rules only if y1 has none
        g.select('.nv-context .nv-y2.nv-axis').style('opacity', dataLines.length ? 1 : 0).attr('transform', 'translate(' + x2.range()[1] + ',0)');
        g.select('.nv-context .nv-y2.nv-axis').transition().call(y4Axis);
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        //============================================================
        //============================================================
        // Functions
        //------------------------------------------------------------
        // Taken from crossfilter (http://square.github.com/crossfilter/)
        function resizePath(d) {
          var e = +(d == 'e'), x = e ? 1 : -1, y = availableHeight2 / 3;
          return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);
        }
        function updateBrushBG() {
          if (!brush.empty())
            brush.extent(brushExtent);
          brushBG.data([brush.empty() ? x2.domain() : brushExtent]).each(function (d, i) {
            var leftWidth = x2(d[0]) - x2.range()[0], rightWidth = x2.range()[1] - x2(d[1]);
            d3.select(this).select('.left').attr('width', leftWidth < 0 ? 0 : leftWidth);
            d3.select(this).select('.right').attr('x', x2(d[1])).attr('width', rightWidth < 0 ? 0 : rightWidth);
          });
        }
        function onBrush() {
          brushExtent = brush.empty() ? null : brush.extent();
          extent = brush.empty() ? x2.domain() : brush.extent();
          dispatch.brush({
            extent: extent,
            brush: brush
          });
          updateBrushBG();
          //------------------------------------------------------------
          // Prepare Main (Focus) Bars and Lines
          bars.width(availableWidth).height(availableHeight1).color(data.map(function (d, i) {
            return d.color || color(d, i);
          }).filter(function (d, i) {
            return !data[i].disabled && data[i].bar;
          }));
          lines.width(availableWidth).height(availableHeight1).color(data.map(function (d, i) {
            return d.color || color(d, i);
          }).filter(function (d, i) {
            return !data[i].disabled && !data[i].bar;
          }));
          var focusBarsWrap = g.select('.nv-focus .nv-barsWrap').datum(!dataBars.length ? [{ values: [] }] : dataBars.map(function (d, i) {
              return {
                key: d.key,
                values: d.values.filter(function (d, i) {
                  return bars.x()(d, i) >= extent[0] && bars.x()(d, i) <= extent[1];
                })
              };
            }));
          var focusLinesWrap = g.select('.nv-focus .nv-linesWrap').datum(dataLines[0].disabled ? [{ values: [] }] : dataLines.map(function (d, i) {
              return {
                key: d.key,
                values: d.values.filter(function (d, i) {
                  return lines.x()(d, i) >= extent[0] && lines.x()(d, i) <= extent[1];
                })
              };
            }));
          //------------------------------------------------------------
          //------------------------------------------------------------
          // Update Main (Focus) X Axis
          if (dataBars.length) {
            x = bars.xScale();
          } else {
            x = lines.xScale();
          }
          xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight1, 0);
          xAxis.domain([
            Math.ceil(extent[0]),
            Math.floor(extent[1])
          ]);
          g.select('.nv-x.nv-axis').transition().duration(transitionDuration).call(xAxis);
          //------------------------------------------------------------
          //------------------------------------------------------------
          // Update Main (Focus) Bars and Lines
          focusBarsWrap.transition().duration(transitionDuration).call(bars);
          focusLinesWrap.transition().duration(transitionDuration).call(lines);
          //------------------------------------------------------------
          //------------------------------------------------------------
          // Setup and Update Main (Focus) Y Axes
          g.select('.nv-focus .nv-x.nv-axis').attr('transform', 'translate(0,' + y1.range()[0] + ')');
          y1Axis.scale(y1).ticks(availableHeight1 / 36).tickSize(-availableWidth, 0);
          g.select('.nv-focus .nv-y1.nv-axis').style('opacity', dataBars.length ? 1 : 0);
          y2Axis.scale(y2).ticks(availableHeight1 / 36).tickSize(dataBars.length ? 0 : -availableWidth, 0);
          // Show the y2 rules only if y1 has none
          g.select('.nv-focus .nv-y2.nv-axis').style('opacity', dataLines.length ? 1 : 0).attr('transform', 'translate(' + x.range()[1] + ',0)');
          g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration).call(y1Axis);
          g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration).call(y2Axis);
        }
        //============================================================
        onBrush();
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    lines.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    bars.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    bars.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.legend = legend;
    chart.lines = lines;
    chart.lines2 = lines2;
    chart.bars = bars;
    chart.bars2 = bars2;
    chart.xAxis = xAxis;
    chart.x2Axis = x2Axis;
    chart.y1Axis = y1Axis;
    chart.y2Axis = y2Axis;
    chart.y3Axis = y3Axis;
    chart.y4Axis = y4Axis;
    d3.rebind(chart, lines, 'defined', 'size', 'clipVoronoi', 'interpolate');
    //TODO: consider rebinding x, y and some other stuff, and simply do soemthign lile bars.x(lines.x()), etc.
    //d3.rebind(chart, lines, 'x', 'y', 'size', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'interactive', 'clipEdge', 'clipVoronoi', 'id');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      lines.x(_);
      bars.x(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      lines.y(_);
      bars.y(_);
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.brushExtent = function (_) {
      if (!arguments.length)
        return brushExtent;
      brushExtent = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.multiBar = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, x = d3.scale.ordinal(), y = d3.scale.linear(), id = Math.floor(Math.random() * 10000), getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, forceY = [0], clipEdge = true, stacked = false, stackOffset = 'zero', color = nv.utils.defaultColor(), hideable = false, barColor = null, disabled, delay = 1200, xDomain, yDomain, xRange, yRange, groupSpacing = 0.1, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0;
    //used to store previous scales
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        if (hideable && data.length)
          hideable = [{
              values: data[0].values.map(function (d) {
                return {
                  x: d.x,
                  y: 0,
                  series: d.series,
                  size: 0.01
                };
              })
            }];
        if (stacked)
          data = d3.layout.stack().offset(stackOffset).values(function (d) {
            return d.values;
          }).y(getY)(!data.length && hideable ? hideable : data);
        //add series index to each data point for reference
        data.forEach(function (series, i) {
          series.values.forEach(function (point) {
            point.series = i;
          });
        });
        //------------------------------------------------------------
        // HACK for negative value stacking
        if (stacked)
          data[0].values.map(function (d, i) {
            var posBase = 0, negBase = 0;
            data.map(function (d) {
              var f = d.values[i];
              f.size = Math.abs(f.y);
              if (f.y < 0) {
                f.y1 = negBase;
                negBase = negBase - f.size;
              } else {
                f.y1 = f.size + posBase;
                posBase = posBase + f.size;
              }
            });
          });
        //------------------------------------------------------------
        // Setup Scales
        // remap and flatten the data for use in calculating the scales' domains
        var seriesData = xDomain && yDomain ? [] : data.map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: getX(d, i),
                y: getY(d, i),
                y0: d.y0,
                y1: d.y1
              };
            });
          });
        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
          return d.x;
        })).rangeBands(xRange || [
          0,
          availableWidth
        ], groupSpacing);
        //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y1 : 0) }).concat(forceY)))
        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
          return stacked ? d.y > 0 ? d.y1 : d.y1 + d.y : d.y;
        }).concat(forceY))).range(yRange || [
          availableHeight,
          0
        ]);
        // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
        if (x.domain()[0] === x.domain()[1])
          x.domain()[0] ? x.domain([
            x.domain()[0] - x.domain()[0] * 0.01,
            x.domain()[1] + x.domain()[1] * 0.01
          ]) : x.domain([
            -1,
            1
          ]);
        if (y.domain()[0] === y.domain()[1])
          y.domain()[0] ? y.domain([
            y.domain()[0] + y.domain()[0] * 0.01,
            y.domain()[1] - y.domain()[1] * 0.01
          ]) : y.domain([
            -1,
            1
          ]);
        x0 = x0 || x;
        y0 = y0 || y;
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-groups');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + id).append('rect');
        wrap.select('#nv-edge-clip-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
            return d;
          }, function (d, i) {
            return i;
          });
        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
        groups.exit().transition().selectAll('rect.nv-bar').delay(function (d, i) {
          return i * delay / data[0].values.length;
        }).attr('y', function (d) {
          return stacked ? y0(d.y0) : y0(0);
        }).attr('height', 0).remove();
        groups.attr('class', function (d, i) {
          return 'nv-group nv-series-' + i;
        }).classed('hover', function (d) {
          return d.hover;
        }).style('fill', function (d, i) {
          return color(d, i);
        }).style('stroke', function (d, i) {
          return color(d, i);
        });
        groups.transition().style('stroke-opacity', 1).style('fill-opacity', 0.75);
        var bars = groups.selectAll('rect.nv-bar').data(function (d) {
            return hideable && !data.length ? hideable.values : d.values;
          });
        bars.exit().remove();
        var barsEnter = bars.enter().append('rect').attr('class', function (d, i) {
            return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
          }).attr('x', function (d, i, j) {
            return stacked ? 0 : j * x.rangeBand() / data.length;
          }).attr('y', function (d) {
            return y0(stacked ? d.y0 : 0);
          }).attr('height', 0).attr('width', x.rangeBand() / (stacked ? 1 : data.length)).attr('transform', function (d, i) {
            return 'translate(' + x(getX(d, i)) + ',0)';
          });
        ;
        bars.style('fill', function (d, i, j) {
          return color(d, j, i);
        }).style('stroke', function (d, i, j) {
          return color(d, j, i);
        }).on('mouseover', function (d, i) {
          //TODO: figure out why j works above, but not here
          d3.select(this).classed('hover', true);
          dispatch.elementMouseover({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pos: [
              x(getX(d, i)) + x.rangeBand() * (stacked ? data.length / 2 : d.series + 0.5) / data.length,
              y(getY(d, i) + (stacked ? d.y0 : 0))
            ],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
        }).on('mouseout', function (d, i) {
          d3.select(this).classed('hover', false);
          dispatch.elementMouseout({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
        }).on('click', function (d, i) {
          dispatch.elementClick({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pos: [
              x(getX(d, i)) + x.rangeBand() * (stacked ? data.length / 2 : d.series + 0.5) / data.length,
              y(getY(d, i) + (stacked ? d.y0 : 0))
            ],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
          d3.event.stopPropagation();
        }).on('dblclick', function (d, i) {
          dispatch.elementDblClick({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pos: [
              x(getX(d, i)) + x.rangeBand() * (stacked ? data.length / 2 : d.series + 0.5) / data.length,
              y(getY(d, i) + (stacked ? d.y0 : 0))
            ],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
          d3.event.stopPropagation();
        });
        bars.attr('class', function (d, i) {
          return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
        }).transition().attr('transform', function (d, i) {
          return 'translate(' + x(getX(d, i)) + ',0)';
        });
        if (barColor) {
          if (!disabled)
            disabled = data.map(function () {
              return true;
            });
          bars.style('fill', function (d, i, j) {
            return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
              return i;
            }).filter(function (d, i) {
              return !disabled[i];
            })[j]).toString();
          }).style('stroke', function (d, i, j) {
            return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
              return i;
            }).filter(function (d, i) {
              return !disabled[i];
            })[j]).toString();
          });
        }
        if (stacked)
          bars.transition().delay(function (d, i) {
            return i * delay / data[0].values.length;
          }).attr('y', function (d, i) {
            return y(stacked ? d.y1 : 0);
          }).attr('height', function (d, i) {
            return Math.max(Math.abs(y(d.y + (stacked ? d.y0 : 0)) - y(stacked ? d.y0 : 0)), 1);
          }).attr('x', function (d, i) {
            return stacked ? 0 : d.series * x.rangeBand() / data.length;
          }).attr('width', x.rangeBand() / (stacked ? 1 : data.length));
        else
          bars.transition().delay(function (d, i) {
            return i * delay / data[0].values.length;
          }).attr('x', function (d, i) {
            return d.series * x.rangeBand() / data.length;
          }).attr('width', x.rangeBand() / data.length).attr('y', function (d, i) {
            return getY(d, i) < 0 ? y(0) : y(0) - y(getY(d, i)) < 1 ? y(0) - 1 : y(getY(d, i)) || 0;
          }).attr('height', function (d, i) {
            return Math.max(Math.abs(y(getY(d, i)) - y(0)), 1) || 0;
          });
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.forceY = function (_) {
      if (!arguments.length)
        return forceY;
      forceY = _;
      return chart;
    };
    chart.stacked = function (_) {
      if (!arguments.length)
        return stacked;
      stacked = _;
      return chart;
    };
    chart.stackOffset = function (_) {
      if (!arguments.length)
        return stackOffset;
      stackOffset = _;
      return chart;
    };
    chart.clipEdge = function (_) {
      if (!arguments.length)
        return clipEdge;
      clipEdge = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.barColor = function (_) {
      if (!arguments.length)
        return barColor;
      barColor = nv.utils.getColor(_);
      return chart;
    };
    chart.disabled = function (_) {
      if (!arguments.length)
        return disabled;
      disabled = _;
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.hideable = function (_) {
      if (!arguments.length)
        return hideable;
      hideable = _;
      return chart;
    };
    chart.delay = function (_) {
      if (!arguments.length)
        return delay;
      delay = _;
      return chart;
    };
    chart.groupSpacing = function (_) {
      if (!arguments.length)
        return groupSpacing;
      groupSpacing = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.multiBarChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var multibar = nv.models.multiBar(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend();
    ;
    var margin = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 60
      }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, reduceXTicks = true, staggerLabels = false, rotateLabels = 0, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' on ' + x + '</p>';
      }, x, y, state = { stacked: false }, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), controlWidth = function () {
        return showControls ? 180 : 0;
      }, transitionDuration = 250;
    ;
    multibar.stacked(false);
    ;
    xAxis.orient('bottom').tickPadding(7).highlightZero(true).showMaxMin(false).tickFormat(function (d) {
      return d;
    });
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickFormat(d3.format(',.1f'));
    ;
    controls.updateState(false);
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display noData message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = multibar.xScale();
        y = multibar.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-barsWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-controlsWrap');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth - controlWidth());
          if (multibar.barColor())
            data.forEach(function (series, i) {
              series.color = d3.rgb('#ccc').darker(i * 1.5).toString();
            });
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(' + controlWidth() + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Controls
        if (showControls) {
          var controlsData = [
              {
                key: 'Grouped',
                disabled: multibar.stacked()
              },
              {
                key: 'Stacked',
                disabled: !multibar.stacked()
              }
            ];
          controls.width(controlWidth()).color([
            '#444',
            '#444',
            '#444'
          ]);
          g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        // Main Chart Component(s)
        multibar.disabled(data.map(function (series) {
          return series.disabled;
        })).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
            return !d.disabled;
          }));
        barsWrap.transition().call(multibar);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
          g.select('.nv-x.nv-axis').transition().call(xAxis);
          var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');
          xTicks.selectAll('line, text').style('opacity', 1);
          if (staggerLabels) {
            var getTranslate = function (x, y) {
              return 'translate(' + x + ',' + y + ')';
            };
            var staggerUp = 5, staggerDown = 17;
            //pixels to stagger by
            // Issue #140
            xTicks.selectAll('text').attr('transform', function (d, i, j) {
              return getTranslate(0, j % 2 == 0 ? staggerUp : staggerDown);
            });
            var totalInBetweenTicks = d3.selectAll('.nv-x.nv-axis .nv-wrap g g text')[0].length;
            g.selectAll('.nv-x.nv-axis .nv-axisMaxMin text').attr('transform', function (d, i) {
              return getTranslate(0, i === 0 || totalInBetweenTicks % 2 !== 0 ? staggerDown : staggerUp);
            });
          }
          if (reduceXTicks)
            xTicks.filter(function (d, i) {
              return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;
            }).selectAll('text, line').style('opacity', 0);
          if (rotateLabels)
            xTicks.selectAll('.tick text').attr('transform', 'rotate(' + rotateLabels + ' 0,0)').style('text-anchor', rotateLabels > 0 ? 'start' : 'end');
          g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text').style('opacity', 1);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(availableHeight / 36).tickSize(-availableWidth, 0);
          g.select('.nv-y.nv-axis').transition().call(yAxis);
        }
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          state = newState;
          dispatch.stateChange(state);
          chart.update();
        });
        controls.dispatch.on('legendClick', function (d, i) {
          if (!d.disabled)
            return;
          controlsData = controlsData.map(function (s) {
            s.disabled = true;
            return s;
          });
          d.disabled = false;
          switch (d.key) {
          case 'Grouped':
            multibar.stacked(false);
            break;
          case 'Stacked':
            multibar.stacked(true);
            break;
          }
          state.stacked = multibar.stacked();
          dispatch.stateChange(state);
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          if (typeof e.stacked !== 'undefined') {
            multibar.stacked(e.stacked);
            state.stacked = e.stacked;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    multibar.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    multibar.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.multibar = multibar;
    chart.legend = legend;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'clipEdge', 'id', 'stacked', 'stackOffset', 'delay', 'barColor', 'groupSpacing');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showControls = function (_) {
      if (!arguments.length)
        return showControls;
      showControls = _;
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.reduceXTicks = function (_) {
      if (!arguments.length)
        return reduceXTicks;
      reduceXTicks = _;
      return chart;
    };
    chart.rotateLabels = function (_) {
      if (!arguments.length)
        return rotateLabels;
      rotateLabels = _;
      return chart;
    };
    chart.staggerLabels = function (_) {
      if (!arguments.length)
        return staggerLabels;
      staggerLabels = _;
      return chart;
    };
    chart.tooltip = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.multiBarHorizontal = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), x = d3.scale.ordinal(), y = d3.scale.linear(), getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, forceY = [0], color = nv.utils.defaultColor(), barColor = null, disabled, stacked = false, showValues = false, showBarLabels = false, valuePadding = 60, valueFormat = d3.format(',.2f'), delay = 1200, xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0;
    //used to store previous scales
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        if (stacked)
          data = d3.layout.stack().offset('zero').values(function (d) {
            return d.values;
          }).y(getY)(data);
        //add series index to each data point for reference
        data.forEach(function (series, i) {
          series.values.forEach(function (point) {
            point.series = i;
          });
        });
        //------------------------------------------------------------
        // HACK for negative value stacking
        if (stacked)
          data[0].values.map(function (d, i) {
            var posBase = 0, negBase = 0;
            data.map(function (d) {
              var f = d.values[i];
              f.size = Math.abs(f.y);
              if (f.y < 0) {
                f.y1 = negBase - f.size;
                negBase = negBase - f.size;
              } else {
                f.y1 = posBase;
                posBase = posBase + f.size;
              }
            });
          });
        //------------------------------------------------------------
        // Setup Scales
        // remap and flatten the data for use in calculating the scales' domains
        var seriesData = xDomain && yDomain ? [] : data.map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: getX(d, i),
                y: getY(d, i),
                y0: d.y0,
                y1: d.y1
              };
            });
          });
        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
          return d.x;
        })).rangeBands(xRange || [
          0,
          availableHeight
        ], 0.1);
        //y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y + (stacked ? d.y0 : 0) }).concat(forceY)))
        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
          return stacked ? d.y > 0 ? d.y1 + d.y : d.y1 : d.y;
        }).concat(forceY)));
        if (showValues && !stacked)
          y.range(yRange || [
            y.domain()[0] < 0 ? valuePadding : 0,
            availableWidth - (y.domain()[1] > 0 ? valuePadding : 0)
          ]);
        else
          y.range(yRange || [
            0,
            availableWidth
          ]);
        x0 = x0 || x;
        y0 = y0 || d3.scale.linear().domain(y.domain()).range([
          y(0),
          y(0)
        ]);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-groups');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
            return d;
          }, function (d, i) {
            return i;
          });
        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
        groups.exit().transition().style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001).remove();
        groups.attr('class', function (d, i) {
          return 'nv-group nv-series-' + i;
        }).classed('hover', function (d) {
          return d.hover;
        }).style('fill', function (d, i) {
          return color(d, i);
        }).style('stroke', function (d, i) {
          return color(d, i);
        });
        groups.transition().style('stroke-opacity', 1).style('fill-opacity', 0.75);
        var bars = groups.selectAll('g.nv-bar').data(function (d) {
            return d.values;
          });
        bars.exit().remove();
        var barsEnter = bars.enter().append('g').attr('transform', function (d, i, j) {
            return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : j * x.rangeBand() / data.length + x(getX(d, i))) + ')';
          });
        barsEnter.append('rect').attr('width', 0).attr('height', x.rangeBand() / (stacked ? 1 : data.length));
        bars.on('mouseover', function (d, i) {
          //TODO: figure out why j works above, but not here
          d3.select(this).classed('hover', true);
          dispatch.elementMouseover({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pos: [
              y(getY(d, i) + (stacked ? d.y0 : 0)),
              x(getX(d, i)) + x.rangeBand() * (stacked ? data.length / 2 : d.series + 0.5) / data.length
            ],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
        }).on('mouseout', function (d, i) {
          d3.select(this).classed('hover', false);
          dispatch.elementMouseout({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
        }).on('click', function (d, i) {
          dispatch.elementClick({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pos: [
              x(getX(d, i)) + x.rangeBand() * (stacked ? data.length / 2 : d.series + 0.5) / data.length,
              y(getY(d, i) + (stacked ? d.y0 : 0))
            ],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
          d3.event.stopPropagation();
        }).on('dblclick', function (d, i) {
          dispatch.elementDblClick({
            value: getY(d, i),
            point: d,
            series: data[d.series],
            pos: [
              x(getX(d, i)) + x.rangeBand() * (stacked ? data.length / 2 : d.series + 0.5) / data.length,
              y(getY(d, i) + (stacked ? d.y0 : 0))
            ],
            pointIndex: i,
            seriesIndex: d.series,
            e: d3.event
          });
          d3.event.stopPropagation();
        });
        barsEnter.append('text');
        if (showValues && !stacked) {
          bars.select('text').attr('text-anchor', function (d, i) {
            return getY(d, i) < 0 ? 'end' : 'start';
          }).attr('y', x.rangeBand() / (data.length * 2)).attr('dy', '.32em').text(function (d, i) {
            return valueFormat(getY(d, i));
          });
          bars.transition().select('text').attr('x', function (d, i) {
            return getY(d, i) < 0 ? -4 : y(getY(d, i)) - y(0) + 4;
          });
        } else {
          bars.selectAll('text').text('');
        }
        if (showBarLabels && !stacked) {
          barsEnter.append('text').classed('nv-bar-label', true);
          bars.select('text.nv-bar-label').attr('text-anchor', function (d, i) {
            return getY(d, i) < 0 ? 'start' : 'end';
          }).attr('y', x.rangeBand() / (data.length * 2)).attr('dy', '.32em').text(function (d, i) {
            return getX(d, i);
          });
          bars.transition().select('text.nv-bar-label').attr('x', function (d, i) {
            return getY(d, i) < 0 ? y(0) - y(getY(d, i)) + 4 : -4;
          });
        } else {
          bars.selectAll('text.nv-bar-label').text('');
        }
        bars.attr('class', function (d, i) {
          return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
        });
        if (barColor) {
          if (!disabled)
            disabled = data.map(function () {
              return true;
            });
          bars.style('fill', function (d, i, j) {
            return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
              return i;
            }).filter(function (d, i) {
              return !disabled[i];
            })[j]).toString();
          }).style('stroke', function (d, i, j) {
            return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
              return i;
            }).filter(function (d, i) {
              return !disabled[i];
            })[j]).toString();
          });
        }
        if (stacked)
          bars.transition().attr('transform', function (d, i) {
            return 'translate(' + y(d.y1) + ',' + x(getX(d, i)) + ')';
          }).select('rect').attr('width', function (d, i) {
            return Math.abs(y(getY(d, i) + d.y0) - y(d.y0));
          }).attr('height', x.rangeBand());
        else
          bars.transition().attr('transform', function (d, i) {
            //TODO: stacked must be all positive or all negative, not both?
            return 'translate(' + (getY(d, i) < 0 ? y(getY(d, i)) : y(0)) + ',' + (d.series * x.rangeBand() / data.length + x(getX(d, i))) + ')';
          }).select('rect').attr('height', x.rangeBand() / data.length).attr('width', function (d, i) {
            return Math.max(Math.abs(y(getY(d, i)) - y(0)), 1);
          });
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.forceY = function (_) {
      if (!arguments.length)
        return forceY;
      forceY = _;
      return chart;
    };
    chart.stacked = function (_) {
      if (!arguments.length)
        return stacked;
      stacked = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.barColor = function (_) {
      if (!arguments.length)
        return barColor;
      barColor = nv.utils.getColor(_);
      return chart;
    };
    chart.disabled = function (_) {
      if (!arguments.length)
        return disabled;
      disabled = _;
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.delay = function (_) {
      if (!arguments.length)
        return delay;
      delay = _;
      return chart;
    };
    chart.showValues = function (_) {
      if (!arguments.length)
        return showValues;
      showValues = _;
      return chart;
    };
    chart.showBarLabels = function (_) {
      if (!arguments.length)
        return showBarLabels;
      showBarLabels = _;
      return chart;
    };
    chart.valueFormat = function (_) {
      if (!arguments.length)
        return valueFormat;
      valueFormat = _;
      return chart;
    };
    chart.valuePadding = function (_) {
      if (!arguments.length)
        return valuePadding;
      valuePadding = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.multiBarHorizontalChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var multibar = nv.models.multiBarHorizontal(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend().height(30), controls = nv.models.legend().height(30);
    ;
    var margin = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 60
      }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, showLegend = true, showXAxis = true, showYAxis = true, stacked = false, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + ' - ' + x + '</h3>' + '<p>' + y + '</p>';
      }, x, y, state = { stacked: stacked }, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), controlWidth = function () {
        return showControls ? 180 : 0;
      }, transitionDuration = 250;
    ;
    multibar.stacked(stacked);
    ;
    xAxis.orient('left').tickPadding(5).highlightZero(false).showMaxMin(false).tickFormat(function (d) {
      return d;
    });
    ;
    yAxis.orient('bottom').tickFormat(d3.format(',.1f'));
    ;
    controls.updateState(false);
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(multibar.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(multibar.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'e' : 'w', null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = multibar.xScale();
        y = multibar.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis').append('g').attr('class', 'nv-zeroLine').append('line');
        gEnter.append('g').attr('class', 'nv-barsWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-controlsWrap');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth - controlWidth());
          if (multibar.barColor())
            data.forEach(function (series, i) {
              series.color = d3.rgb('#ccc').darker(i * 1.5).toString();
            });
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(' + controlWidth() + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Controls
        if (showControls) {
          var controlsData = [
              {
                key: 'Grouped',
                disabled: multibar.stacked()
              },
              {
                key: 'Stacked',
                disabled: !multibar.stacked()
              }
            ];
          controls.width(controlWidth()).color([
            '#444',
            '#444',
            '#444'
          ]);
          g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        // Main Chart Component(s)
        multibar.disabled(data.map(function (series) {
          return series.disabled;
        })).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
            return !d.disabled;
          }));
        barsWrap.transition().call(multibar);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(availableHeight / 24).tickSize(-availableWidth, 0);
          g.select('.nv-x.nv-axis').transition().call(xAxis);
          var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
          xTicks.selectAll('line, text');
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-y.nv-axis').attr('transform', 'translate(0,' + availableHeight + ')');
          g.select('.nv-y.nv-axis').transition().call(yAxis);
        }
        // Zero line
        g.select('.nv-zeroLine line').attr('x1', y(0)).attr('x2', y(0)).attr('y1', 0).attr('y2', -availableHeight);
        ;
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          state = newState;
          dispatch.stateChange(state);
          chart.update();
        });
        controls.dispatch.on('legendClick', function (d, i) {
          if (!d.disabled)
            return;
          controlsData = controlsData.map(function (s) {
            s.disabled = true;
            return s;
          });
          d.disabled = false;
          switch (d.key) {
          case 'Grouped':
            multibar.stacked(false);
            break;
          case 'Stacked':
            multibar.stacked(true);
            break;
          }
          state.stacked = multibar.stacked();
          dispatch.stateChange(state);
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          if (typeof e.stacked !== 'undefined') {
            multibar.stacked(e.stacked);
            state.stacked = e.stacked;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    multibar.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    multibar.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.multibar = multibar;
    chart.legend = legend;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    d3.rebind(chart, multibar, 'x', 'y', 'xDomain', 'yDomain', 'xRange', 'yRange', 'forceX', 'forceY', 'clipEdge', 'id', 'delay', 'showValues', 'showBarLabels', 'valueFormat', 'stacked', 'barColor');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      return chart;
    };
    chart.showControls = function (_) {
      if (!arguments.length)
        return showControls;
      showControls = _;
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.tooltip = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.multiChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 60
      }, color = d3.scale.category20().range(), width = null, height = null, showLegend = true, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' at ' + x + '</p>';
      }, x, y, yDomain1, yDomain2;
    ;
    //can be accessed via chart.lines.[x/y]Scale()
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x = d3.scale.linear(), yScale1 = d3.scale.linear(), yScale2 = d3.scale.linear(), lines1 = nv.models.line().yScale(yScale1), lines2 = nv.models.line().yScale(yScale2), bars1 = nv.models.multiBar().stacked(false).yScale(yScale1), bars2 = nv.models.multiBar().stacked(false).yScale(yScale2), stack1 = nv.models.stackedArea().yScale(yScale1), stack2 = nv.models.stackedArea().yScale(yScale2), xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5), yAxis1 = nv.models.axis().scale(yScale1).orient('left'), yAxis2 = nv.models.axis().scale(yScale2).orient('right'), legend = nv.models.legend().height(30), dispatch = d3.dispatch('tooltipShow', 'tooltipHide');
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(lines1.x()(e.point, e.pointIndex)), y = (e.series.yAxis == 2 ? yAxis2 : yAxis1).tickFormat()(lines1.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, undefined, undefined, offsetElement.offsetParent);
    };
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        chart.update = function () {
          container.transition().call(chart);
        };
        chart.container = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        var dataLines1 = data.filter(function (d) {
            return !d.disabled && d.type == 'line' && d.yAxis == 1;
          });
        var dataLines2 = data.filter(function (d) {
            return !d.disabled && d.type == 'line' && d.yAxis == 2;
          });
        var dataBars1 = data.filter(function (d) {
            return !d.disabled && d.type == 'bar' && d.yAxis == 1;
          });
        var dataBars2 = data.filter(function (d) {
            return !d.disabled && d.type == 'bar' && d.yAxis == 2;
          });
        var dataStack1 = data.filter(function (d) {
            return !d.disabled && d.type == 'area' && d.yAxis == 1;
          });
        var dataStack2 = data.filter(function (d) {
            return !d.disabled && d.type == 'area' && d.yAxis == 2;
          });
        var series1 = data.filter(function (d) {
            return !d.disabled && d.yAxis == 1;
          }).map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: d.x,
                y: d.y
              };
            });
          });
        var series2 = data.filter(function (d) {
            return !d.disabled && d.yAxis == 2;
          }).map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: d.x,
                y: d.y
              };
            });
          });
        x.domain(d3.extent(d3.merge(series1.concat(series2)), function (d) {
          return d.x;
        })).range([
          0,
          availableWidth
        ]);
        var wrap = container.selectAll('g.wrap.multiChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');
        gEnter.append('g').attr('class', 'x axis');
        gEnter.append('g').attr('class', 'y1 axis');
        gEnter.append('g').attr('class', 'y2 axis');
        gEnter.append('g').attr('class', 'lines1Wrap');
        gEnter.append('g').attr('class', 'lines2Wrap');
        gEnter.append('g').attr('class', 'bars1Wrap');
        gEnter.append('g').attr('class', 'bars2Wrap');
        gEnter.append('g').attr('class', 'stack1Wrap');
        gEnter.append('g').attr('class', 'stack2Wrap');
        gEnter.append('g').attr('class', 'legendWrap');
        var g = wrap.select('g');
        if (showLegend) {
          legend.width(availableWidth / 2);
          g.select('.legendWrap').datum(data.map(function (series) {
            series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
            series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');
            return series;
          })).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.legendWrap').attr('transform', 'translate(' + availableWidth / 2 + ',' + -margin.top + ')');
        }
        lines1.width(availableWidth).height(availableHeight).interpolate('monotone').color(data.map(function (d, i) {
          return d.color || color[i % color.length];
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line';
        }));
        lines2.width(availableWidth).height(availableHeight).interpolate('monotone').color(data.map(function (d, i) {
          return d.color || color[i % color.length];
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line';
        }));
        bars1.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color[i % color.length];
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar';
        }));
        bars2.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color[i % color.length];
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar';
        }));
        stack1.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color[i % color.length];
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area';
        }));
        stack2.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color[i % color.length];
        }).filter(function (d, i) {
          return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area';
        }));
        g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        var lines1Wrap = g.select('.lines1Wrap').datum(dataLines1);
        var bars1Wrap = g.select('.bars1Wrap').datum(dataBars1);
        var stack1Wrap = g.select('.stack1Wrap').datum(dataStack1);
        var lines2Wrap = g.select('.lines2Wrap').datum(dataLines2);
        var bars2Wrap = g.select('.bars2Wrap').datum(dataBars2);
        var stack2Wrap = g.select('.stack2Wrap').datum(dataStack2);
        var extraValue1 = dataStack1.length ? dataStack1.map(function (a) {
            return a.values;
          }).reduce(function (a, b) {
            return a.map(function (aVal, i) {
              return {
                x: aVal.x,
                y: aVal.y + b[i].y
              };
            });
          }).concat([{
              x: 0,
              y: 0
            }]) : [];
        var extraValue2 = dataStack2.length ? dataStack2.map(function (a) {
            return a.values;
          }).reduce(function (a, b) {
            return a.map(function (aVal, i) {
              return {
                x: aVal.x,
                y: aVal.y + b[i].y
              };
            });
          }).concat([{
              x: 0,
              y: 0
            }]) : [];
        yScale1.domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function (d) {
          return d.y;
        })).range([
          0,
          availableHeight
        ]);
        yScale2.domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function (d) {
          return d.y;
        })).range([
          0,
          availableHeight
        ]);
        lines1.yDomain(yScale1.domain());
        bars1.yDomain(yScale1.domain());
        stack1.yDomain(yScale1.domain());
        lines2.yDomain(yScale2.domain());
        bars2.yDomain(yScale2.domain());
        stack2.yDomain(yScale2.domain());
        if (dataStack1.length) {
          d3.transition(stack1Wrap).call(stack1);
        }
        if (dataStack2.length) {
          d3.transition(stack2Wrap).call(stack2);
        }
        if (dataBars1.length) {
          d3.transition(bars1Wrap).call(bars1);
        }
        if (dataBars2.length) {
          d3.transition(bars2Wrap).call(bars2);
        }
        if (dataLines1.length) {
          d3.transition(lines1Wrap).call(lines1);
        }
        if (dataLines2.length) {
          d3.transition(lines2Wrap).call(lines2);
        }
        xAxis.ticks(availableWidth / 100).tickSize(-availableHeight, 0);
        g.select('.x.axis').attr('transform', 'translate(0,' + availableHeight + ')');
        d3.transition(g.select('.x.axis')).call(xAxis);
        yAxis1.ticks(availableHeight / 36).tickSize(-availableWidth, 0);
        d3.transition(g.select('.y1.axis')).call(yAxis1);
        yAxis2.ticks(availableHeight / 36).tickSize(-availableWidth, 0);
        d3.transition(g.select('.y2.axis')).call(yAxis2);
        g.select('.y2.axis').style('opacity', series2.length ? 1 : 0).attr('transform', 'translate(' + x.range()[1] + ',0)');
        legend.dispatch.on('stateChange', function (newState) {
          chart.update();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    lines1.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines1.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    lines2.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines2.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    bars1.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    bars1.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    bars2.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    bars2.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    stack1.dispatch.on('tooltipShow', function (e) {
      //disable tooltips when value ~= 0
      //// TODO: consider removing points from voronoi that have 0 value instead of this hack
      if (!Math.round(stack1.y()(e.point) * 100)) {
        // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range
        setTimeout(function () {
          d3.selectAll('.point.hover').classed('hover', false);
        }, 0);
        return false;
      }
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ], dispatch.tooltipShow(e);
    });
    stack1.dispatch.on('tooltipHide', function (e) {
      dispatch.tooltipHide(e);
    });
    stack2.dispatch.on('tooltipShow', function (e) {
      //disable tooltips when value ~= 0
      //// TODO: consider removing points from voronoi that have 0 value instead of this hack
      if (!Math.round(stack2.y()(e.point) * 100)) {
        // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range
        setTimeout(function () {
          d3.selectAll('.point.hover').classed('hover', false);
        }, 0);
        return false;
      }
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ], dispatch.tooltipShow(e);
    });
    stack2.dispatch.on('tooltipHide', function (e) {
      dispatch.tooltipHide(e);
    });
    lines1.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines1.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    lines2.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    lines2.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    // Global getters and setters
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.lines1 = lines1;
    chart.lines2 = lines2;
    chart.bars1 = bars1;
    chart.bars2 = bars2;
    chart.stack1 = stack1;
    chart.stack2 = stack2;
    chart.xAxis = xAxis;
    chart.yAxis1 = yAxis1;
    chart.yAxis2 = yAxis2;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      lines1.x(_);
      bars1.x(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      lines1.y(_);
      bars1.y(_);
      return chart;
    };
    chart.yDomain1 = function (_) {
      if (!arguments.length)
        return yDomain1;
      yDomain1 = _;
      return chart;
    };
    chart.yDomain2 = function (_) {
      if (!arguments.length)
        return yDomain2;
      yDomain2 = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin = _;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = _;
      legend.color(_);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    return chart;
  };
  nv.models.ohlcBar = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, getOpen = function (d) {
        return d.open;
      }, getClose = function (d) {
        return d.close;
      }, getHigh = function (d) {
        return d.high;
      }, getLow = function (d) {
        return d.low;
      }, forceX = [], forceY = [], padData = false, clipEdge = true, color = nv.utils.defaultColor(), xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    //TODO: store old scales for transitions
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //------------------------------------------------------------
        // Setup Scales
        x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX)));
        if (padData)
          x.range(xRange || [
            availableWidth * 0.5 / data[0].values.length,
            availableWidth * (data[0].values.length - 0.5) / data[0].values.length
          ]);
        else
          x.range(xRange || [
            0,
            availableWidth
          ]);
        y.domain(yDomain || [
          d3.min(data[0].values.map(getLow).concat(forceY)),
          d3.max(data[0].values.map(getHigh).concat(forceY))
        ]).range(yRange || [
          availableHeight,
          0
        ]);
        // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
        if (x.domain()[0] === x.domain()[1])
          x.domain()[0] ? x.domain([
            x.domain()[0] - x.domain()[0] * 0.01,
            x.domain()[1] + x.domain()[1] * 0.01
          ]) : x.domain([
            -1,
            1
          ]);
        if (y.domain()[0] === y.domain()[1])
          y.domain()[0] ? y.domain([
            y.domain()[0] + y.domain()[0] * 0.01,
            y.domain()[1] - y.domain()[1] * 0.01
          ]) : y.domain([
            -1,
            1
          ]);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-ticks');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        container.on('click', function (d, i) {
          dispatch.chartClick({
            data: d,
            index: i,
            pos: d3.event,
            id: id
          });
        });
        defsEnter.append('clipPath').attr('id', 'nv-chart-clip-path-' + id).append('rect');
        wrap.select('#nv-chart-clip-path-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
        g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
        var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick').data(function (d) {
            return d;
          });
        ticks.exit().remove();
        var ticksEnter = ticks.enter().append('path').attr('class', function (d, i, j) {
            return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
          }).attr('d', function (d, i) {
            var w = availableWidth / data[0].values.length * 0.9;
            return 'm0,0l0,' + (y(getOpen(d, i)) - y(getHigh(d, i))) + 'l' + -w / 2 + ',0l' + w / 2 + ',0l0,' + (y(getLow(d, i)) - y(getOpen(d, i))) + 'l0,' + (y(getClose(d, i)) - y(getLow(d, i))) + 'l' + w / 2 + ',0l' + -w / 2 + ',0z';
          }).attr('transform', function (d, i) {
            return 'translate(' + x(getX(d, i)) + ',' + y(getHigh(d, i)) + ')';
          }).on('mouseover', function (d, i) {
            d3.select(this).classed('hover', true);
            dispatch.elementMouseover({
              point: d,
              series: data[0],
              pos: [
                x(getX(d, i)),
                y(getY(d, i))
              ],
              pointIndex: i,
              seriesIndex: 0,
              e: d3.event
            });
          }).on('mouseout', function (d, i) {
            d3.select(this).classed('hover', false);
            dispatch.elementMouseout({
              point: d,
              series: data[0],
              pointIndex: i,
              seriesIndex: 0,
              e: d3.event
            });
          }).on('click', function (d, i) {
            dispatch.elementClick({
              value: getY(d, i),
              data: d,
              index: i,
              pos: [
                x(getX(d, i)),
                y(getY(d, i))
              ],
              e: d3.event,
              id: id
            });
            d3.event.stopPropagation();
          }).on('dblclick', function (d, i) {
            dispatch.elementDblClick({
              value: getY(d, i),
              data: d,
              index: i,
              pos: [
                x(getX(d, i)),
                y(getY(d, i))
              ],
              e: d3.event,
              id: id
            });
            d3.event.stopPropagation();
          });
        ticks.attr('class', function (d, i, j) {
          return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
        });
        d3.transition(ticks).attr('transform', function (d, i) {
          return 'translate(' + x(getX(d, i)) + ',' + y(getHigh(d, i)) + ')';
        }).attr('d', function (d, i) {
          var w = availableWidth / data[0].values.length * 0.9;
          return 'm0,0l0,' + (y(getOpen(d, i)) - y(getHigh(d, i))) + 'l' + -w / 2 + ',0l' + w / 2 + ',0l0,' + (y(getLow(d, i)) - y(getOpen(d, i))) + 'l0,' + (y(getClose(d, i)) - y(getLow(d, i))) + 'l' + w / 2 + ',0l' + -w / 2 + ',0z';
        });
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = _;
      return chart;
    };
    chart.open = function (_) {
      if (!arguments.length)
        return getOpen;
      getOpen = _;
      return chart;
    };
    chart.close = function (_) {
      if (!arguments.length)
        return getClose;
      getClose = _;
      return chart;
    };
    chart.high = function (_) {
      if (!arguments.length)
        return getHigh;
      getHigh = _;
      return chart;
    };
    chart.low = function (_) {
      if (!arguments.length)
        return getLow;
      getLow = _;
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.forceX = function (_) {
      if (!arguments.length)
        return forceX;
      forceX = _;
      return chart;
    };
    chart.forceY = function (_) {
      if (!arguments.length)
        return forceY;
      forceY = _;
      return chart;
    };
    chart.padData = function (_) {
      if (!arguments.length)
        return padData;
      padData = _;
      return chart;
    };
    chart.clipEdge = function (_) {
      if (!arguments.length)
        return clipEdge;
      clipEdge = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.pie = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 500, height = 500, getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, getDescription = function (d) {
        return d.description;
      }, id = Math.floor(Math.random() * 10000), color = nv.utils.defaultColor(), valueFormat = d3.format(',.2f'), showLabels = true, pieLabelsOutside = true, donutLabelsOutside = false, labelType = 'key', labelThreshold = 0.02, donut = false, labelSunbeamLayout = false, startAngle = false, endAngle = false, donutRatio = 0.5, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout');
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, radius = Math.min(availableWidth, availableHeight) / 2, arcRadius = radius - radius / 5, container = d3.select(this);
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        //var wrap = container.selectAll('.nv-wrap.nv-pie').data([data]);
        var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pie nv-chart-' + id);
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-pie');
        gEnter.append('g').attr('class', 'nv-pieLabels');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
        g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
        //------------------------------------------------------------
        container.on('click', function (d, i) {
          dispatch.chartClick({
            data: d,
            index: i,
            pos: d3.event,
            id: id
          });
        });
        var arc = d3.svg.arc().outerRadius(arcRadius);
        if (startAngle)
          arc.startAngle(startAngle);
        if (endAngle)
          arc.endAngle(endAngle);
        if (donut)
          arc.innerRadius(radius * donutRatio);
        // Setup the Pie chart and choose the data element
        var pie = d3.layout.pie().sort(null).value(function (d) {
            return d.disabled ? 0 : getY(d);
          });
        var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);
        var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);
        slices.exit().remove();
        pieLabels.exit().remove();
        var ae = slices.enter().append('g').attr('class', 'nv-slice').on('mouseover', function (d, i) {
            d3.select(this).classed('hover', true);
            dispatch.elementMouseover({
              label: getX(d.data),
              value: getY(d.data),
              point: d.data,
              pointIndex: i,
              pos: [
                d3.event.pageX,
                d3.event.pageY
              ],
              id: id
            });
          }).on('mouseout', function (d, i) {
            d3.select(this).classed('hover', false);
            dispatch.elementMouseout({
              label: getX(d.data),
              value: getY(d.data),
              point: d.data,
              index: i,
              id: id
            });
          }).on('click', function (d, i) {
            dispatch.elementClick({
              label: getX(d.data),
              value: getY(d.data),
              point: d.data,
              index: i,
              pos: d3.event,
              id: id
            });
            d3.event.stopPropagation();
          }).on('dblclick', function (d, i) {
            dispatch.elementDblClick({
              label: getX(d.data),
              value: getY(d.data),
              point: d.data,
              index: i,
              pos: d3.event,
              id: id
            });
            d3.event.stopPropagation();
          });
        slices.attr('fill', function (d, i) {
          return color(d, i);
        }).attr('stroke', function (d, i) {
          return color(d, i);
        });
        var paths = ae.append('path').each(function (d) {
            this._current = d;
          });
        //.attr('d', arc);
        slices.select('path').transition().attr('d', arc).attrTween('d', arcTween);
        if (showLabels) {
          // This does the normal label
          var labelsArc = d3.svg.arc().innerRadius(0);
          if (pieLabelsOutside) {
            labelsArc = arc;
          }
          if (donutLabelsOutside) {
            labelsArc = d3.svg.arc().outerRadius(arc.outerRadius());
          }
          pieLabels.enter().append('g').classed('nv-label', true).each(function (d, i) {
            var group = d3.select(this);
            group.attr('transform', function (d) {
              if (labelSunbeamLayout) {
                d.outerRadius = arcRadius + 10;
                // Set Outer Coordinate
                d.innerRadius = arcRadius + 15;
                // Set Inner Coordinate
                var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
                if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
                  rotateAngle -= 90;
                } else {
                  rotateAngle += 90;
                }
                return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';
              } else {
                d.outerRadius = radius + 10;
                // Set Outer Coordinate
                d.innerRadius = radius + 15;
                // Set Inner Coordinate
                return 'translate(' + labelsArc.centroid(d) + ')';
              }
            });
            group.append('rect').style('stroke', '#fff').style('fill', '#fff').attr('rx', 3).attr('ry', 3);
            group.append('text').style('text-anchor', labelSunbeamLayout ? (d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end' : 'middle').style('fill', '#000');
          });
          var labelLocationHash = {};
          var avgHeight = 14;
          var avgWidth = 140;
          var createHashKey = function (coordinates) {
            return Math.floor(coordinates[0] / avgWidth) * avgWidth + ',' + Math.floor(coordinates[1] / avgHeight) * avgHeight;
          };
          pieLabels.transition().attr('transform', function (d) {
            if (labelSunbeamLayout) {
              d.outerRadius = arcRadius + 10;
              // Set Outer Coordinate
              d.innerRadius = arcRadius + 15;
              // Set Inner Coordinate
              var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
              if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
                rotateAngle -= 90;
              } else {
                rotateAngle += 90;
              }
              return 'translate(' + labelsArc.centroid(d) + ') rotate(' + rotateAngle + ')';
            } else {
              d.outerRadius = radius + 10;
              // Set Outer Coordinate
              d.innerRadius = radius + 15;
              // Set Inner Coordinate
              /*
                      Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.
                      Each label location is hashed, and if a hash collision occurs, we assume an overlap.
                      Adjust the label's y-position to remove the overlap.
                      */
              var center = labelsArc.centroid(d);
              var hashKey = createHashKey(center);
              if (labelLocationHash[hashKey]) {
                center[1] -= avgHeight;
              }
              labelLocationHash[createHashKey(center)] = true;
              return 'translate(' + center + ')';
            }
          });
          pieLabels.select('.nv-label text').style('text-anchor', labelSunbeamLayout ? (d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end' : 'middle').text(function (d, i) {
            var percent = (d.endAngle - d.startAngle) / (2 * Math.PI);
            var labelTypes = {
                'key': getX(d.data),
                'value': getY(d.data),
                'percent': d3.format('%')(percent)
              };
            return d.value && percent > labelThreshold ? labelTypes[labelType] : '';
          });
        }
        // Computes the angle of an arc, converting from radians to degrees.
        function angle(d) {
          var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
          return a > 90 ? a - 180 : a;
        }
        function arcTween(a) {
          a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;
          a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;
          if (!donut)
            a.innerRadius = 0;
          var i = d3.interpolate(this._current, a);
          this._current = i(0);
          return function (t) {
            return arc(i(t));
          };
        }
        function tweenPie(b) {
          b.innerRadius = 0;
          var i = d3.interpolate({
              startAngle: 0,
              endAngle: 0
            }, b);
          return function (t) {
            return arc(i(t));
          };
        }
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.values = function (_) {
      nv.log('pie.values() is no longer supported.');
      return chart;
    };
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = _;
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = d3.functor(_);
      return chart;
    };
    chart.description = function (_) {
      if (!arguments.length)
        return getDescription;
      getDescription = _;
      return chart;
    };
    chart.showLabels = function (_) {
      if (!arguments.length)
        return showLabels;
      showLabels = _;
      return chart;
    };
    chart.labelSunbeamLayout = function (_) {
      if (!arguments.length)
        return labelSunbeamLayout;
      labelSunbeamLayout = _;
      return chart;
    };
    chart.donutLabelsOutside = function (_) {
      if (!arguments.length)
        return donutLabelsOutside;
      donutLabelsOutside = _;
      return chart;
    };
    chart.pieLabelsOutside = function (_) {
      if (!arguments.length)
        return pieLabelsOutside;
      pieLabelsOutside = _;
      return chart;
    };
    chart.labelType = function (_) {
      if (!arguments.length)
        return labelType;
      labelType = _;
      labelType = labelType || 'key';
      return chart;
    };
    chart.donut = function (_) {
      if (!arguments.length)
        return donut;
      donut = _;
      return chart;
    };
    chart.donutRatio = function (_) {
      if (!arguments.length)
        return donutRatio;
      donutRatio = _;
      return chart;
    };
    chart.startAngle = function (_) {
      if (!arguments.length)
        return startAngle;
      startAngle = _;
      return chart;
    };
    chart.endAngle = function (_) {
      if (!arguments.length)
        return endAngle;
      endAngle = _;
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.valueFormat = function (_) {
      if (!arguments.length)
        return valueFormat;
      valueFormat = _;
      return chart;
    };
    chart.labelThreshold = function (_) {
      if (!arguments.length)
        return labelThreshold;
      labelThreshold = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.pieChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var pie = nv.models.pie(), legend = nv.models.legend();
    ;
    var margin = {
        top: 30,
        right: 20,
        bottom: 20,
        left: 20
      }, width = null, height = null, showLegend = true, color = nv.utils.defaultColor(), tooltips = true, tooltip = function (key, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + '</p>';
      }, state = {}, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState');
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var tooltipLabel = pie.description()(e.point) || pie.x()(e.point);
      var left = e.pos[0] + (offsetElement && offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement && offsetElement.offsetTop || 0), y = pie.valueFormat()(pie.y()(e.point)), content = tooltip(tooltipLabel, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-pieWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth).key(pie.x());
          wrap.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        // Main Chart Component(s)
        pie.width(availableWidth).height(availableHeight);
        var pieWrap = g.select('.nv-pieWrap').datum([data]);
        d3.transition(pieWrap).call(pie);
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        legend.dispatch.on('stateChange', function (newState) {
          state = newState;
          dispatch.stateChange(state);
          chart.update();
        });
        pie.dispatch.on('elementMouseout.tooltip', function (e) {
          dispatch.tooltipHide(e);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          chart.update();
        });  //============================================================
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    pie.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ];
      dispatch.tooltipShow(e);
    });
    dispatch.on('tooltipShow', function (e) {
      if (tooltips)
        showTooltip(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.legend = legend;
    chart.dispatch = dispatch;
    chart.pie = pie;
    d3.rebind(chart, pie, 'valueFormat', 'values', 'x', 'y', 'description', 'id', 'showLabels', 'donutLabelsOutside', 'pieLabelsOutside', 'labelType', 'donut', 'donutRatio', 'labelThreshold');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      pie.color(color);
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.scatter = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, color = nv.utils.defaultColor(), id = Math.floor(Math.random() * 100000), x = d3.scale.linear(), y = d3.scale.linear(), z = d3.scale.linear(), getX = function (d) {
        return d.x;
      }  // accessor to get the x value
, getY = function (d) {
        return d.y;
      }  // accessor to get the y value
, getSize = function (d) {
        return d.size || 1;
      }  // accessor to get the point size
, getShape = function (d) {
        return d.shape || 'circle';
      }  // accessor to get point shape
, onlyCircles = true, forceX = [], forceY = [], forceSize = [], interactive = true, pointKey = null, pointActive = function (d) {
        return !d.notActive;
      }  // any points that return false will be filtered out
, padData = false, padDataOuter = 0.1, clipEdge = false, clipVoronoi = true, clipRadius = function () {
        return 25;
      }  // function to get the radius for voronoi point clips
, xDomain = null, yDomain = null, xRange = null, yRange = null, sizeDomain = null, sizeRange = null, singlePoint = false, dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout'), useVoronoi = true;
    ;
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0, z0, timeoutID, needsUpdate = false;
    // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //add series index to each data point for reference
        data.forEach(function (series, i) {
          series.values.forEach(function (point) {
            point.series = i;
          });
        });
        //------------------------------------------------------------
        // Setup Scales
        // remap and flatten the data for use in calculating the scales' domains
        var seriesData = xDomain && yDomain && sizeDomain ? [] : d3.merge(data.map(function (d) {
            return d.values.map(function (d, i) {
              return {
                x: getX(d, i),
                y: getY(d, i),
                size: getSize(d, i)
              };
            });
          }));
        x.domain(xDomain || d3.extent(seriesData.map(function (d) {
          return d.x;
        }).concat(forceX)));
        if (padData && data[0])
          x.range(xRange || [
            (availableWidth * padDataOuter + availableWidth) / (2 * data[0].values.length),
            availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)
          ]);  //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
        else
          x.range(xRange || [
            0,
            availableWidth
          ]);
        y.domain(yDomain || d3.extent(seriesData.map(function (d) {
          return d.y;
        }).concat(forceY))).range(yRange || [
          availableHeight,
          0
        ]);
        z.domain(sizeDomain || d3.extent(seriesData.map(function (d) {
          return d.size;
        }).concat(forceSize))).range(sizeRange || [
          16,
          256
        ]);
        // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
        if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1])
          singlePoint = true;
        if (x.domain()[0] === x.domain()[1])
          x.domain()[0] ? x.domain([
            x.domain()[0] - x.domain()[0] * 0.01,
            x.domain()[1] + x.domain()[1] * 0.01
          ]) : x.domain([
            -1,
            1
          ]);
        if (y.domain()[0] === y.domain()[1])
          y.domain()[0] ? y.domain([
            y.domain()[0] - y.domain()[0] * 0.01,
            y.domain()[1] + y.domain()[1] * 0.01
          ]) : y.domain([
            -1,
            1
          ]);
        if (isNaN(x.domain()[0])) {
          x.domain([
            -1,
            1
          ]);
        }
        if (isNaN(y.domain()[0])) {
          y.domain([
            -1,
            1
          ]);
        }
        x0 = x0 || x;
        y0 = y0 || y;
        z0 = z0 || z;
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id + (singlePoint ? ' nv-single-point' : ''));
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-groups');
        gEnter.append('g').attr('class', 'nv-point-paths');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + id).append('rect');
        wrap.select('#nv-edge-clip-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight > 0 ? availableHeight : 0);
        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
        function updateInteractiveLayer() {
          if (!interactive)
            return false;
          var eventElements;
          var vertices = d3.merge(data.map(function (group, groupIndex) {
              return group.values.map(function (point, pointIndex) {
                // *Adding noise to make duplicates very unlikely
                // *Injecting series and point index for reference
                /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.
                */
                var pX = getX(point, pointIndex);
                var pY = getY(point, pointIndex);
                return [
                  x(pX) + Math.random() * 1e-7,
                  y(pY) + Math.random() * 1e-7,
                  groupIndex,
                  pointIndex,
                  point
                ];  //temp hack to add noise untill I think of a better way so there are no duplicates
              }).filter(function (pointArray, pointIndex) {
                return pointActive(pointArray[4], pointIndex);  // Issue #237.. move filter to after map, so pointIndex is correct!
              });
            }));
          //inject series and point index for reference into voronoi
          if (useVoronoi === true) {
            if (clipVoronoi) {
              var pointClipsEnter = wrap.select('defs').selectAll('.nv-point-clips').data([id]).enter();
              pointClipsEnter.append('clipPath').attr('class', 'nv-point-clips').attr('id', 'nv-points-clip-' + id);
              var pointClips = wrap.select('#nv-points-clip-' + id).selectAll('circle').data(vertices);
              pointClips.enter().append('circle').attr('r', clipRadius);
              pointClips.exit().remove();
              pointClips.attr('cx', function (d) {
                return d[0];
              }).attr('cy', function (d) {
                return d[1];
              });
              wrap.select('.nv-point-paths').attr('clip-path', 'url(#nv-points-clip-' + id + ')');
            }
            if (vertices.length) {
              // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work
              vertices.push([
                x.range()[0] - 20,
                y.range()[0] - 20,
                null,
                null
              ]);
              vertices.push([
                x.range()[1] + 20,
                y.range()[1] + 20,
                null,
                null
              ]);
              vertices.push([
                x.range()[0] - 20,
                y.range()[0] + 20,
                null,
                null
              ]);
              vertices.push([
                x.range()[1] + 20,
                y.range()[1] - 20,
                null,
                null
              ]);
            }
            var bounds = d3.geom.polygon([
                [
                  -10,
                  -10
                ],
                [
                  -10,
                  height + 10
                ],
                [
                  width + 10,
                  height + 10
                ],
                [
                  width + 10,
                  -10
                ]
              ]);
            var voronoi = d3.geom.voronoi(vertices).map(function (d, i) {
                return {
                  'data': bounds.clip(d),
                  'series': vertices[i][2],
                  'point': vertices[i][3]
                };
              });
            var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);
            pointPaths.enter().append('path').attr('class', function (d, i) {
              return 'nv-path-' + i;
            });
            pointPaths.exit().remove();
            pointPaths.attr('d', function (d) {
              if (d.data.length === 0)
                return 'M 0 0';
              else
                return 'M' + d.data.join('L') + 'Z';
            });
            var mouseEventCallback = function (d, mDispatch) {
              if (needsUpdate)
                return 0;
              var series = data[d.series];
              if (typeof series === 'undefined')
                return;
              var point = series.values[d.point];
              mDispatch({
                point: point,
                series: series,
                pos: [
                  x(getX(point, d.point)) + margin.left,
                  y(getY(point, d.point)) + margin.top
                ],
                seriesIndex: d.series,
                pointIndex: d.point
              });
            };
            pointPaths.on('click', function (d) {
              mouseEventCallback(d, dispatch.elementClick);
            }).on('mouseover', function (d) {
              mouseEventCallback(d, dispatch.elementMouseover);
            }).on('mouseout', function (d, i) {
              mouseEventCallback(d, dispatch.elementMouseout);
            });
          } else {
            /*
          // bring data in form needed for click handlers
          var dataWithPoints = vertices.map(function(d, i) {
              return {
                'data': d,
                'series': vertices[i][2],
                'point': vertices[i][3]
              }
            });
           */
            // add event handlers to points instead voronoi paths
            wrap.select('.nv-groups').selectAll('.nv-group').selectAll('.nv-point').on('click', function (d, i) {
              //nv.log('test', d, i);
              if (needsUpdate || !data[d.series])
                return 0;
              //check if this is a dummy point
              var series = data[d.series], point = series.values[i];
              dispatch.elementClick({
                point: point,
                series: series,
                pos: [
                  x(getX(point, i)) + margin.left,
                  y(getY(point, i)) + margin.top
                ],
                seriesIndex: d.series,
                pointIndex: i
              });
            }).on('mouseover', function (d, i) {
              if (needsUpdate || !data[d.series])
                return 0;
              //check if this is a dummy point
              var series = data[d.series], point = series.values[i];
              dispatch.elementMouseover({
                point: point,
                series: series,
                pos: [
                  x(getX(point, i)) + margin.left,
                  y(getY(point, i)) + margin.top
                ],
                seriesIndex: d.series,
                pointIndex: i
              });
            }).on('mouseout', function (d, i) {
              if (needsUpdate || !data[d.series])
                return 0;
              //check if this is a dummy point
              var series = data[d.series], point = series.values[i];
              dispatch.elementMouseout({
                point: point,
                series: series,
                seriesIndex: d.series,
                pointIndex: i
              });
            });
          }
          needsUpdate = false;
        }
        needsUpdate = true;
        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
            return d;
          }, function (d) {
            return d.key;
          });
        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
        groups.exit().remove();
        groups.attr('class', function (d, i) {
          return 'nv-group nv-series-' + i;
        }).classed('hover', function (d) {
          return d.hover;
        });
        groups.transition().style('fill', function (d, i) {
          return color(d, i);
        }).style('stroke', function (d, i) {
          return color(d, i);
        }).style('stroke-opacity', 1).style('fill-opacity', 0.5);
        if (onlyCircles) {
          var points = groups.selectAll('circle.nv-point').data(function (d) {
              return d.values;
            }, pointKey);
          points.enter().append('circle').style('fill', function (d, i) {
            return d.color;
          }).style('stroke', function (d, i) {
            return d.color;
          }).attr('cx', function (d, i) {
            return nv.utils.NaNtoZero(x0(getX(d, i)));
          }).attr('cy', function (d, i) {
            return nv.utils.NaNtoZero(y0(getY(d, i)));
          }).attr('r', function (d, i) {
            return Math.sqrt(z(getSize(d, i)) / Math.PI);
          });
          points.exit().remove();
          groups.exit().selectAll('path.nv-point').transition().attr('cx', function (d, i) {
            return nv.utils.NaNtoZero(x(getX(d, i)));
          }).attr('cy', function (d, i) {
            return nv.utils.NaNtoZero(y(getY(d, i)));
          }).remove();
          points.each(function (d, i) {
            d3.select(this).classed('nv-point', true).classed('nv-point-' + i, true).classed('hover', false);
            ;
          });
          points.transition().attr('cx', function (d, i) {
            return nv.utils.NaNtoZero(x(getX(d, i)));
          }).attr('cy', function (d, i) {
            return nv.utils.NaNtoZero(y(getY(d, i)));
          }).attr('r', function (d, i) {
            return Math.sqrt(z(getSize(d, i)) / Math.PI);
          });
        } else {
          var points = groups.selectAll('path.nv-point').data(function (d) {
              return d.values;
            });
          points.enter().append('path').style('fill', function (d, i) {
            return d.color;
          }).style('stroke', function (d, i) {
            return d.color;
          }).attr('transform', function (d, i) {
            return 'translate(' + x0(getX(d, i)) + ',' + y0(getY(d, i)) + ')';
          }).attr('d', d3.svg.symbol().type(getShape).size(function (d, i) {
            return z(getSize(d, i));
          }));
          points.exit().remove();
          groups.exit().selectAll('path.nv-point').transition().attr('transform', function (d, i) {
            return 'translate(' + x(getX(d, i)) + ',' + y(getY(d, i)) + ')';
          }).remove();
          points.each(function (d, i) {
            d3.select(this).classed('nv-point', true).classed('nv-point-' + i, true).classed('hover', false);
            ;
          });
          points.transition().attr('transform', function (d, i) {
            //nv.log(d,i,getX(d,i), x(getX(d,i)));
            return 'translate(' + x(getX(d, i)) + ',' + y(getY(d, i)) + ')';
          }).attr('d', d3.svg.symbol().type(getShape).size(function (d, i) {
            return z(getSize(d, i));
          }));
        }
        // Delay updating the invisible interactive layer for smoother animation
        clearTimeout(timeoutID);
        // stop repeat calls to updateInteractiveLayer
        timeoutID = setTimeout(updateInteractiveLayer, 300);
        //updateInteractiveLayer();
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
        z0 = z.copy();
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    chart.clearHighlights = function () {
      //Remove the 'hover' class from all highlighted points.
      d3.selectAll('.nv-chart-' + id + ' .nv-point.hover').classed('hover', false);
    };
    chart.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {
      d3.select('.nv-chart-' + id + ' .nv-series-' + seriesIndex + ' .nv-point-' + pointIndex).classed('hover', isHoverOver);
    };
    dispatch.on('elementMouseover.point', function (d) {
      if (interactive)
        chart.highlightPoint(d.seriesIndex, d.pointIndex, true);
    });
    dispatch.on('elementMouseout.point', function (d) {
      if (interactive)
        chart.highlightPoint(d.seriesIndex, d.pointIndex, false);
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = d3.functor(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = d3.functor(_);
      return chart;
    };
    chart.size = function (_) {
      if (!arguments.length)
        return getSize;
      getSize = d3.functor(_);
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.zScale = function (_) {
      if (!arguments.length)
        return z;
      z = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.sizeDomain = function (_) {
      if (!arguments.length)
        return sizeDomain;
      sizeDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.sizeRange = function (_) {
      if (!arguments.length)
        return sizeRange;
      sizeRange = _;
      return chart;
    };
    chart.forceX = function (_) {
      if (!arguments.length)
        return forceX;
      forceX = _;
      return chart;
    };
    chart.forceY = function (_) {
      if (!arguments.length)
        return forceY;
      forceY = _;
      return chart;
    };
    chart.forceSize = function (_) {
      if (!arguments.length)
        return forceSize;
      forceSize = _;
      return chart;
    };
    chart.interactive = function (_) {
      if (!arguments.length)
        return interactive;
      interactive = _;
      return chart;
    };
    chart.pointKey = function (_) {
      if (!arguments.length)
        return pointKey;
      pointKey = _;
      return chart;
    };
    chart.pointActive = function (_) {
      if (!arguments.length)
        return pointActive;
      pointActive = _;
      return chart;
    };
    chart.padData = function (_) {
      if (!arguments.length)
        return padData;
      padData = _;
      return chart;
    };
    chart.padDataOuter = function (_) {
      if (!arguments.length)
        return padDataOuter;
      padDataOuter = _;
      return chart;
    };
    chart.clipEdge = function (_) {
      if (!arguments.length)
        return clipEdge;
      clipEdge = _;
      return chart;
    };
    chart.clipVoronoi = function (_) {
      if (!arguments.length)
        return clipVoronoi;
      clipVoronoi = _;
      return chart;
    };
    chart.useVoronoi = function (_) {
      if (!arguments.length)
        return useVoronoi;
      useVoronoi = _;
      if (useVoronoi === false) {
        clipVoronoi = false;
      }
      return chart;
    };
    chart.clipRadius = function (_) {
      if (!arguments.length)
        return clipRadius;
      clipRadius = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.shape = function (_) {
      if (!arguments.length)
        return getShape;
      getShape = _;
      return chart;
    };
    chart.onlyCircles = function (_) {
      if (!arguments.length)
        return onlyCircles;
      onlyCircles = _;
      return chart;
    };
    chart.id = function (_) {
      if (!arguments.length)
        return id;
      id = _;
      return chart;
    };
    chart.singlePoint = function (_) {
      if (!arguments.length)
        return singlePoint;
      singlePoint = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.scatterChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var scatter = nv.models.scatter(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend(), distX = nv.models.distribution(), distY = nv.models.distribution();
    ;
    var margin = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 75
      }, width = null, height = null, color = nv.utils.defaultColor(), x = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale(), y = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale(), xPadding = 0, yPadding = 0, showDistX = false, showDistY = false, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, showControls = !!d3.fisheye, fisheye = 0, pauseFisheye = false, tooltips = true, tooltipX = function (key, x, y) {
        return '<strong>' + x + '</strong>';
      }, tooltipY = function (key, x, y) {
        return '<strong>' + y + '</strong>';
      }, tooltip = null, state = {}, defaultState = null, dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), noData = 'No Data Available.', transitionDuration = 250;
    ;
    scatter.xScale(x).yScale(y);
    ;
    xAxis.orient('bottom').tickPadding(10);
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickPadding(10);
    ;
    distX.axis('x');
    ;
    distY.axis('y');
    ;
    controls.updateState(false);
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0;
    var showTooltip = function (e, offsetElement) {
      //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), leftX = e.pos[0] + (offsetElement.offsetLeft || 0), topX = y.range()[0] + margin.top + (offsetElement.offsetTop || 0), leftY = x.range()[0] + margin.left + (offsetElement.offsetLeft || 0), topY = e.pos[1] + (offsetElement.offsetTop || 0), xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)), yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));
      if (tooltipX != null)
        nv.tooltip.show([
          leftX,
          topX
        ], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');
      if (tooltipY != null)
        nv.tooltip.show([
          leftY,
          topY
        ], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');
      if (tooltip != null)
        nv.tooltip.show([
          left,
          top
        ], tooltip(e.series.key, xVal, yVal, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    var controlsData = [{
          key: 'Magnify',
          disabled: true
        }];
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display noData message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x0 = x0 || x;
        y0 = y0 || y;
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        // background for pointer events
        gEnter.append('rect').attr('class', 'nvd3 nv-background');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-scatterWrap');
        gEnter.append('g').attr('class', 'nv-distWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-controlsWrap');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          var legendWidth = showControls ? availableWidth / 2 : availableWidth;
          legend.width(legendWidth);
          wrap.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          wrap.select('.nv-legendWrap').attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Controls
        if (showControls) {
          controls.width(180).color(['#444']);
          g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        // Main Chart Component(s)
        scatter.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        if (xPadding !== 0)
          scatter.xDomain(null);
        if (yPadding !== 0)
          scatter.yDomain(null);
        wrap.select('.nv-scatterWrap').datum(data.filter(function (d) {
          return !d.disabled;
        })).call(scatter);
        //Adjust for x and y padding
        if (xPadding !== 0) {
          var xRange = x.domain()[1] - x.domain()[0];
          scatter.xDomain([
            x.domain()[0] - xPadding * xRange,
            x.domain()[1] + xPadding * xRange
          ]);
        }
        if (yPadding !== 0) {
          var yRange = y.domain()[1] - y.domain()[0];
          scatter.yDomain([
            y.domain()[0] - yPadding * yRange,
            y.domain()[1] + yPadding * yRange
          ]);
        }
        //Only need to update the scatter again if x/yPadding changed the domain.
        if (yPadding !== 0 || xPadding !== 0) {
          wrap.select('.nv-scatterWrap').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(scatter);
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(xAxis.ticks() && xAxis.ticks().length ? xAxis.ticks() : availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')').call(xAxis);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(yAxis.ticks() && yAxis.ticks().length ? yAxis.ticks() : availableHeight / 36).tickSize(-availableWidth, 0);
          g.select('.nv-y.nv-axis').call(yAxis);
        }
        if (showDistX) {
          distX.getData(scatter.x()).scale(x).width(availableWidth).color(data.map(function (d, i) {
            return d.color || color(d, i);
          }).filter(function (d, i) {
            return !data[i].disabled;
          }));
          gEnter.select('.nv-distWrap').append('g').attr('class', 'nv-distributionX');
          g.select('.nv-distributionX').attr('transform', 'translate(0,' + y.range()[0] + ')').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distX);
        }
        if (showDistY) {
          distY.getData(scatter.y()).scale(y).width(availableHeight).color(data.map(function (d, i) {
            return d.color || color(d, i);
          }).filter(function (d, i) {
            return !data[i].disabled;
          }));
          gEnter.select('.nv-distWrap').append('g').attr('class', 'nv-distributionY');
          g.select('.nv-distributionY').attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size()) + ',0)').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distY);
        }
        //------------------------------------------------------------
        if (d3.fisheye) {
          g.select('.nv-background').attr('width', availableWidth).attr('height', availableHeight);
          g.select('.nv-background').on('mousemove', updateFisheye);
          g.select('.nv-background').on('click', function () {
            pauseFisheye = !pauseFisheye;
          });
          scatter.dispatch.on('elementClick.freezeFisheye', function () {
            pauseFisheye = !pauseFisheye;
          });
        }
        function updateFisheye() {
          if (pauseFisheye) {
            g.select('.nv-point-paths').style('pointer-events', 'all');
            return false;
          }
          g.select('.nv-point-paths').style('pointer-events', 'none');
          var mouse = d3.mouse(this);
          x.distortion(fisheye).focus(mouse[0]);
          y.distortion(fisheye).focus(mouse[1]);
          g.select('.nv-scatterWrap').call(scatter);
          if (showXAxis)
            g.select('.nv-x.nv-axis').call(xAxis);
          if (showYAxis)
            g.select('.nv-y.nv-axis').call(yAxis);
          g.select('.nv-distributionX').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distX);
          g.select('.nv-distributionY').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distY);
        }
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        controls.dispatch.on('legendClick', function (d, i) {
          d.disabled = !d.disabled;
          fisheye = d.disabled ? 0 : 2.5;
          g.select('.nv-background').style('pointer-events', d.disabled ? 'none' : 'all');
          g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none');
          if (d.disabled) {
            x.distortion(fisheye).focus(0);
            y.distortion(fisheye).focus(0);
            g.select('.nv-scatterWrap').call(scatter);
            g.select('.nv-x.nv-axis').call(xAxis);
            g.select('.nv-y.nv-axis').call(yAxis);
          } else {
            pauseFisheye = false;
          }
          chart.update();
        });
        legend.dispatch.on('stateChange', function (newState) {
          state.disabled = newState.disabled;
          dispatch.stateChange(state);
          chart.update();
        });
        scatter.dispatch.on('elementMouseover.tooltip', function (e) {
          d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex).attr('y1', function (d, i) {
            return e.pos[1] - availableHeight;
          });
          d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex).attr('x2', e.pos[0] + distX.size());
          e.pos = [
            e.pos[0] + margin.left,
            e.pos[1] + margin.top
          ];
          dispatch.tooltipShow(e);
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          chart.update();
        });
        //============================================================
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    scatter.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
      d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex).attr('y1', 0);
      d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex).attr('x2', distY.size());
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.scatter = scatter;
    chart.legend = legend;
    chart.controls = controls;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    chart.distX = distX;
    chart.distY = distY;
    d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      distX.color(color);
      distY.color(color);
      return chart;
    };
    chart.showDistX = function (_) {
      if (!arguments.length)
        return showDistX;
      showDistX = _;
      return chart;
    };
    chart.showDistY = function (_) {
      if (!arguments.length)
        return showDistY;
      showDistY = _;
      return chart;
    };
    chart.showControls = function (_) {
      if (!arguments.length)
        return showControls;
      showControls = _;
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.fisheye = function (_) {
      if (!arguments.length)
        return fisheye;
      fisheye = _;
      return chart;
    };
    chart.xPadding = function (_) {
      if (!arguments.length)
        return xPadding;
      xPadding = _;
      return chart;
    };
    chart.yPadding = function (_) {
      if (!arguments.length)
        return yPadding;
      yPadding = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.tooltipXContent = function (_) {
      if (!arguments.length)
        return tooltipX;
      tooltipX = _;
      return chart;
    };
    chart.tooltipYContent = function (_) {
      if (!arguments.length)
        return tooltipY;
      tooltipY = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.scatterPlusLineChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var scatter = nv.models.scatter(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend(), distX = nv.models.distribution(), distY = nv.models.distribution();
    ;
    var margin = {
        top: 30,
        right: 20,
        bottom: 50,
        left: 75
      }, width = null, height = null, color = nv.utils.defaultColor(), x = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.xScale(), y = d3.fisheye ? d3.fisheye.scale(d3.scale.linear).distortion(0) : scatter.yScale(), showDistX = false, showDistY = false, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, showControls = !!d3.fisheye, fisheye = 0, pauseFisheye = false, tooltips = true, tooltipX = function (key, x, y) {
        return '<strong>' + x + '</strong>';
      }, tooltipY = function (key, x, y) {
        return '<strong>' + y + '</strong>';
      }, tooltip = function (key, x, y, date) {
        return '<h3>' + key + '</h3>' + '<p>' + date + '</p>';
      }, state = {}, defaultState = null, dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), noData = 'No Data Available.', transitionDuration = 250;
    ;
    scatter.xScale(x).yScale(y);
    ;
    xAxis.orient('bottom').tickPadding(10);
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickPadding(10);
    ;
    distX.axis('x');
    ;
    distY.axis('y');
    ;
    controls.updateState(false);
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var x0, y0;
    var showTooltip = function (e, offsetElement) {
      //TODO: make tooltip style an option between single or dual on axes (maybe on all charts with axes?)
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), leftX = e.pos[0] + (offsetElement.offsetLeft || 0), topX = y.range()[0] + margin.top + (offsetElement.offsetTop || 0), leftY = x.range()[0] + margin.left + (offsetElement.offsetLeft || 0), topY = e.pos[1] + (offsetElement.offsetTop || 0), xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)), yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));
      if (tooltipX != null)
        nv.tooltip.show([
          leftX,
          topX
        ], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');
      if (tooltipY != null)
        nv.tooltip.show([
          leftY,
          topY
        ], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');
      if (tooltip != null)
        nv.tooltip.show([
          left,
          top
        ], tooltip(e.series.key, xVal, yVal, e.point.tooltip, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    var controlsData = [{
          key: 'Magnify',
          disabled: true
        }];
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display noData message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = scatter.xScale();
        y = scatter.yScale();
        x0 = x0 || x;
        y0 = y0 || y;
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        // background for pointer events
        gEnter.append('rect').attr('class', 'nvd3 nv-background').style('pointer-events', 'none');
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-scatterWrap');
        gEnter.append('g').attr('class', 'nv-regressionLinesWrap');
        gEnter.append('g').attr('class', 'nv-distWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-controlsWrap');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          legend.width(availableWidth / 2);
          wrap.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          wrap.select('.nv-legendWrap').attr('transform', 'translate(' + availableWidth / 2 + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Controls
        if (showControls) {
          controls.width(180).color(['#444']);
          g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Main Chart Component(s)
        scatter.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
          return d.color || color(d, i);
        }).filter(function (d, i) {
          return !data[i].disabled;
        }));
        wrap.select('.nv-scatterWrap').datum(data.filter(function (d) {
          return !d.disabled;
        })).call(scatter);
        wrap.select('.nv-regressionLinesWrap').attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');
        var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines').data(function (d) {
            return d;
          });
        regWrap.enter().append('g').attr('class', 'nv-regLines');
        var regLine = regWrap.selectAll('.nv-regLine').data(function (d) {
            return [d];
          });
        var regLineEnter = regLine.enter().append('line').attr('class', 'nv-regLine').style('stroke-opacity', 0);
        regLine.transition().attr('x1', x.range()[0]).attr('x2', x.range()[1]).attr('y1', function (d, i) {
          return y(x.domain()[0] * d.slope + d.intercept);
        }).attr('y2', function (d, i) {
          return y(x.domain()[1] * d.slope + d.intercept);
        }).style('stroke', function (d, i, j) {
          return color(d, j);
        }).style('stroke-opacity', function (d, i) {
          return d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined' ? 0 : 1;
        });
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(xAxis.ticks() ? xAxis.ticks() : availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')').call(xAxis);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(yAxis.ticks() ? yAxis.ticks() : availableHeight / 36).tickSize(-availableWidth, 0);
          g.select('.nv-y.nv-axis').call(yAxis);
        }
        if (showDistX) {
          distX.getData(scatter.x()).scale(x).width(availableWidth).color(data.map(function (d, i) {
            return d.color || color(d, i);
          }).filter(function (d, i) {
            return !data[i].disabled;
          }));
          gEnter.select('.nv-distWrap').append('g').attr('class', 'nv-distributionX');
          g.select('.nv-distributionX').attr('transform', 'translate(0,' + y.range()[0] + ')').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distX);
        }
        if (showDistY) {
          distY.getData(scatter.y()).scale(y).width(availableHeight).color(data.map(function (d, i) {
            return d.color || color(d, i);
          }).filter(function (d, i) {
            return !data[i].disabled;
          }));
          gEnter.select('.nv-distWrap').append('g').attr('class', 'nv-distributionY');
          g.select('.nv-distributionY').attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size()) + ',0)').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distY);
        }
        //------------------------------------------------------------
        if (d3.fisheye) {
          g.select('.nv-background').attr('width', availableWidth).attr('height', availableHeight);
          ;
          g.select('.nv-background').on('mousemove', updateFisheye);
          g.select('.nv-background').on('click', function () {
            pauseFisheye = !pauseFisheye;
          });
          scatter.dispatch.on('elementClick.freezeFisheye', function () {
            pauseFisheye = !pauseFisheye;
          });
        }
        function updateFisheye() {
          if (pauseFisheye) {
            g.select('.nv-point-paths').style('pointer-events', 'all');
            return false;
          }
          g.select('.nv-point-paths').style('pointer-events', 'none');
          var mouse = d3.mouse(this);
          x.distortion(fisheye).focus(mouse[0]);
          y.distortion(fisheye).focus(mouse[1]);
          g.select('.nv-scatterWrap').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(scatter);
          if (showXAxis)
            g.select('.nv-x.nv-axis').call(xAxis);
          if (showYAxis)
            g.select('.nv-y.nv-axis').call(yAxis);
          g.select('.nv-distributionX').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distX);
          g.select('.nv-distributionY').datum(data.filter(function (d) {
            return !d.disabled;
          })).call(distY);
        }
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        controls.dispatch.on('legendClick', function (d, i) {
          d.disabled = !d.disabled;
          fisheye = d.disabled ? 0 : 2.5;
          g.select('.nv-background').style('pointer-events', d.disabled ? 'none' : 'all');
          g.select('.nv-point-paths').style('pointer-events', d.disabled ? 'all' : 'none');
          if (d.disabled) {
            x.distortion(fisheye).focus(0);
            y.distortion(fisheye).focus(0);
            g.select('.nv-scatterWrap').call(scatter);
            g.select('.nv-x.nv-axis').call(xAxis);
            g.select('.nv-y.nv-axis').call(yAxis);
          } else {
            pauseFisheye = false;
          }
          chart.update();
        });
        legend.dispatch.on('stateChange', function (newState) {
          state = newState;
          dispatch.stateChange(state);
          chart.update();
        });
        scatter.dispatch.on('elementMouseover.tooltip', function (e) {
          d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex).attr('y1', e.pos[1] - availableHeight);
          d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex).attr('x2', e.pos[0] + distX.size());
          e.pos = [
            e.pos[0] + margin.left,
            e.pos[1] + margin.top
          ];
          dispatch.tooltipShow(e);
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined') {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          chart.update();
        });
        //============================================================
        //store old scales for use in transitions on update
        x0 = x.copy();
        y0 = y.copy();
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    scatter.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
      d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex).attr('y1', 0);
      d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex).attr('x2', distY.size());
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.scatter = scatter;
    chart.legend = legend;
    chart.controls = controls;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    chart.distX = distX;
    chart.distY = distY;
    d3.rebind(chart, scatter, 'id', 'interactive', 'pointActive', 'x', 'y', 'shape', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'sizeRange', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'clipRadius', 'useVoronoi');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      distX.color(color);
      distY.color(color);
      return chart;
    };
    chart.showDistX = function (_) {
      if (!arguments.length)
        return showDistX;
      showDistX = _;
      return chart;
    };
    chart.showDistY = function (_) {
      if (!arguments.length)
        return showDistY;
      showDistY = _;
      return chart;
    };
    chart.showControls = function (_) {
      if (!arguments.length)
        return showControls;
      showControls = _;
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.fisheye = function (_) {
      if (!arguments.length)
        return fisheye;
      fisheye = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.tooltipXContent = function (_) {
      if (!arguments.length)
        return tooltipX;
      tooltipX = _;
      return chart;
    };
    chart.tooltipYContent = function (_) {
      if (!arguments.length)
        return tooltipY;
      tooltipY = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.sparkline = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 2,
        right: 0,
        bottom: 2,
        left: 0
      }, width = 400, height = 32, animate = true, x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
        return d.x;
      }, getY = function (d) {
        return d.y;
      }, color = nv.utils.getColor(['#000']), xDomain, yDomain, xRange, yRange;
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //------------------------------------------------------------
        // Setup Scales
        x.domain(xDomain || d3.extent(data, getX)).range(xRange || [
          0,
          availableWidth
        ]);
        y.domain(yDomain || d3.extent(data, getY)).range(yRange || [
          availableHeight,
          0
        ]);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        var paths = wrap.selectAll('path').data(function (d) {
            return [d];
          });
        paths.enter().append('path');
        paths.exit().remove();
        paths.style('stroke', function (d, i) {
          return d.color || color(d, i);
        }).attr('d', d3.svg.line().x(function (d, i) {
          return x(getX(d, i));
        }).y(function (d, i) {
          return y(getY(d, i));
        }));
        // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)
        var points = wrap.selectAll('circle.nv-point').data(function (data) {
            var yValues = data.map(function (d, i) {
                return getY(d, i);
              });
            function pointIndex(index) {
              if (index != -1) {
                var result = data[index];
                result.pointIndex = index;
                return result;
              } else {
                return null;
              }
            }
            var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])), minPoint = pointIndex(yValues.indexOf(y.domain()[0])), currentPoint = pointIndex(yValues.length - 1);
            return [
              minPoint,
              maxPoint,
              currentPoint
            ].filter(function (d) {
              return d != null;
            });
          });
        points.enter().append('circle');
        points.exit().remove();
        points.attr('cx', function (d, i) {
          return x(getX(d, d.pointIndex));
        }).attr('cy', function (d, i) {
          return y(getY(d, d.pointIndex));
        }).attr('r', 2).attr('class', function (d, i) {
          return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' : getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue';
        });
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = d3.functor(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = d3.functor(_);
      return chart;
    };
    chart.xScale = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return chart;
    };
    chart.yScale = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return chart;
    };
    chart.xDomain = function (_) {
      if (!arguments.length)
        return xDomain;
      xDomain = _;
      return chart;
    };
    chart.yDomain = function (_) {
      if (!arguments.length)
        return yDomain;
      yDomain = _;
      return chart;
    };
    chart.xRange = function (_) {
      if (!arguments.length)
        return xRange;
      xRange = _;
      return chart;
    };
    chart.yRange = function (_) {
      if (!arguments.length)
        return yRange;
      yRange = _;
      return chart;
    };
    chart.animate = function (_) {
      if (!arguments.length)
        return animate;
      animate = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.sparklinePlus = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var sparkline = nv.models.sparkline();
    var margin = {
        top: 15,
        right: 100,
        bottom: 10,
        left: 50
      }, width = null, height = null, x, y, index = [], paused = false, xTickFormat = d3.format(',r'), yTickFormat = d3.format(',.2f'), showValue = true, alignValue = true, rightAlignValue = false, noData = 'No Data Available.';
    ;
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this);
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          chart(selection);
        };
        chart.container = this;
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        var currentValue = sparkline.y()(data[data.length - 1], data.length - 1);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = sparkline.xScale();
        y = sparkline.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-sparklineWrap');
        gEnter.append('g').attr('class', 'nv-valueWrap');
        gEnter.append('g').attr('class', 'nv-hoverArea');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Main Chart Component(s)
        var sparklineWrap = g.select('.nv-sparklineWrap');
        sparkline.width(availableWidth).height(availableHeight);
        sparklineWrap.call(sparkline);
        //------------------------------------------------------------
        var valueWrap = g.select('.nv-valueWrap');
        var value = valueWrap.selectAll('.nv-currentValue').data([currentValue]);
        value.enter().append('text').attr('class', 'nv-currentValue').attr('dx', rightAlignValue ? -8 : 8).attr('dy', '.9em').style('text-anchor', rightAlignValue ? 'end' : 'start');
        value.attr('x', availableWidth + (rightAlignValue ? margin.right : 0)).attr('y', alignValue ? function (d) {
          return y(d);
        } : 0).style('fill', sparkline.color()(data[data.length - 1], data.length - 1)).text(yTickFormat(currentValue));
        gEnter.select('.nv-hoverArea').append('rect').on('mousemove', sparklineHover).on('click', function () {
          paused = !paused;
        }).on('mouseout', function () {
          index = [];
          updateValueLine();
        });
        //.on('mouseout', function() { index = null; updateValueLine(); });
        g.select('.nv-hoverArea rect').attr('transform', function (d) {
          return 'translate(' + -margin.left + ',' + -margin.top + ')';
        }).attr('width', availableWidth + margin.left + margin.right).attr('height', availableHeight + margin.top);
        function updateValueLine() {
          //index is currently global (within the chart), may or may not keep it that way
          if (paused)
            return;
          var hoverValue = g.selectAll('.nv-hoverValue').data(index);
          var hoverEnter = hoverValue.enter().append('g').attr('class', 'nv-hoverValue').style('stroke-opacity', 0).style('fill-opacity', 0);
          hoverValue.exit().transition().duration(250).style('stroke-opacity', 0).style('fill-opacity', 0).remove();
          hoverValue.attr('transform', function (d) {
            return 'translate(' + x(sparkline.x()(data[d], d)) + ',0)';
          }).transition().duration(250).style('stroke-opacity', 1).style('fill-opacity', 1);
          if (!index.length)
            return;
          hoverEnter.append('line').attr('x1', 0).attr('y1', -margin.top).attr('x2', 0).attr('y2', availableHeight);
          hoverEnter.append('text').attr('class', 'nv-xValue').attr('x', -6).attr('y', -margin.top).attr('text-anchor', 'end').attr('dy', '.9em');
          g.select('.nv-hoverValue .nv-xValue').text(xTickFormat(sparkline.x()(data[index[0]], index[0])));
          hoverEnter.append('text').attr('class', 'nv-yValue').attr('x', 6).attr('y', -margin.top).attr('text-anchor', 'start').attr('dy', '.9em');
          g.select('.nv-hoverValue .nv-yValue').text(yTickFormat(sparkline.y()(data[index[0]], index[0])));
        }
        function sparklineHover() {
          if (paused)
            return;
          var pos = d3.mouse(this)[0] - margin.left;
          function getClosestIndex(data, x) {
            var distance = Math.abs(sparkline.x()(data[0], 0) - x);
            var closestIndex = 0;
            for (var i = 0; i < data.length; i++) {
              if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {
                distance = Math.abs(sparkline.x()(data[i], i) - x);
                closestIndex = i;
              }
            }
            return closestIndex;
          }
          index = [getClosestIndex(data, Math.round(x.invert(pos)))];
          updateValueLine();
        }
      });
      return chart;
    }
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.sparkline = sparkline;
    d3.rebind(chart, sparkline, 'x', 'y', 'xScale', 'yScale', 'color');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.xTickFormat = function (_) {
      if (!arguments.length)
        return xTickFormat;
      xTickFormat = _;
      return chart;
    };
    chart.yTickFormat = function (_) {
      if (!arguments.length)
        return yTickFormat;
      yTickFormat = _;
      return chart;
    };
    chart.showValue = function (_) {
      if (!arguments.length)
        return showValue;
      showValue = _;
      return chart;
    };
    chart.alignValue = function (_) {
      if (!arguments.length)
        return alignValue;
      alignValue = _;
      return chart;
    };
    chart.rightAlignValue = function (_) {
      if (!arguments.length)
        return rightAlignValue;
      rightAlignValue = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.stackedArea = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, width = 960, height = 500, color = nv.utils.defaultColor(), id = Math.floor(Math.random() * 100000), getX = function (d) {
        return d.x;
      }  // accessor to get the x value from a data point
, getY = function (d) {
        return d.y;
      }  // accessor to get the y value from a data point
, style = 'stack', offset = 'zero', order = 'default', interpolate = 'linear', clipEdge = false, x, y, scatter = nv.models.scatter(), dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'areaClick', 'areaMouseover', 'areaMouseout');
    ;
    scatter.size(2.2).sizeDomain([
      2.2,
      2.2
    ]);
    // all the same size by default
    ;
    /************************************
   * offset:
   *   'wiggle' (stream)
   *   'zero' (stacked)
   *   'expand' (normalize to 100%)
   *   'silhouette' (simple centered)
   *
   * order:
   *   'inside-out' (stream)
   *   'default' (input order)
   ************************************/
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, container = d3.select(this);
        //------------------------------------------------------------
        // Setup Scales
        x = scatter.xScale();
        y = scatter.yScale();
        //------------------------------------------------------------
        var dataRaw = data;
        // Injecting point index into each point because d3.layout.stack().out does not give index
        data.forEach(function (aseries, i) {
          aseries.seriesIndex = i;
          aseries.values = aseries.values.map(function (d, j) {
            d.index = j;
            d.seriesIndex = i;
            return d;
          });
        });
        var dataFiltered = data.filter(function (series) {
            return !series.disabled;
          });
        data = d3.layout.stack().order(order).offset(offset).values(function (d) {
          return d.values;
        }).x(getX).y(getY).out(function (d, y0, y) {
          var yHeight = getY(d) === 0 ? 0 : y;
          d.display = {
            y: yHeight,
            y0: y0
          };
        })(dataFiltered);
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);
        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');
        var defsEnter = wrapEnter.append('defs');
        var gEnter = wrapEnter.append('g');
        var g = wrap.select('g');
        gEnter.append('g').attr('class', 'nv-areaWrap');
        gEnter.append('g').attr('class', 'nv-scatterWrap');
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        //------------------------------------------------------------
        scatter.width(availableWidth).height(availableHeight).x(getX).y(function (d) {
          return d.display.y + d.display.y0;
        }).forceY([0]).color(data.map(function (d, i) {
          return d.color || color(d, d.seriesIndex);
        }));
        var scatterWrap = g.select('.nv-scatterWrap').datum(data);
        scatterWrap.call(scatter);
        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + id).append('rect');
        wrap.select('#nv-edge-clip-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
        var area = d3.svg.area().x(function (d, i) {
            return x(getX(d, i));
          }).y0(function (d) {
            return y(d.display.y0);
          }).y1(function (d) {
            return y(d.display.y + d.display.y0);
          }).interpolate(interpolate);
        var zeroArea = d3.svg.area().x(function (d, i) {
            return x(getX(d, i));
          }).y0(function (d) {
            return y(d.display.y0);
          }).y1(function (d) {
            return y(d.display.y0);
          });
        var path = g.select('.nv-areaWrap').selectAll('path.nv-area').data(function (d) {
            return d;
          });
        path.enter().append('path').attr('class', function (d, i) {
          return 'nv-area nv-area-' + i;
        }).attr('d', function (d, i) {
          return zeroArea(d.values, d.seriesIndex);
        }).on('mouseover', function (d, i) {
          d3.select(this).classed('hover', true);
          dispatch.areaMouseover({
            point: d,
            series: d.key,
            pos: [
              d3.event.pageX,
              d3.event.pageY
            ],
            seriesIndex: d.seriesIndex
          });
        }).on('mouseout', function (d, i) {
          d3.select(this).classed('hover', false);
          dispatch.areaMouseout({
            point: d,
            series: d.key,
            pos: [
              d3.event.pageX,
              d3.event.pageY
            ],
            seriesIndex: d.seriesIndex
          });
        }).on('click', function (d, i) {
          d3.select(this).classed('hover', false);
          dispatch.areaClick({
            point: d,
            series: d.key,
            pos: [
              d3.event.pageX,
              d3.event.pageY
            ],
            seriesIndex: d.seriesIndex
          });
        });
        path.exit().remove();
        path.style('fill', function (d, i) {
          return d.color || color(d, d.seriesIndex);
        }).style('stroke', function (d, i) {
          return d.color || color(d, d.seriesIndex);
        });
        path.transition().attr('d', function (d, i) {
          return area(d.values, i);
        });
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        scatter.dispatch.on('elementMouseover.area', function (e) {
          g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);
        });
        scatter.dispatch.on('elementMouseout.area', function (e) {
          g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);
        });
        //============================================================
        //Special offset functions
        chart.d3_stackedOffset_stackPercent = function (stackData) {
          var n = stackData.length,
            //How many series
            m = stackData[0].length,
            //how many points per series
            k = 1 / n, i, j, o, y0 = [];
          for (j = 0; j < m; ++j) {
            //Looping through all points
            for (i = 0, o = 0; i < dataRaw.length; i++)
              //looping through series'
              o += getY(dataRaw[i].values[j]);
            //total value of all points at a certian point in time.
            if (o)
              for (i = 0; i < n; i++)
                stackData[i][j][1] /= o;
            else
              for (i = 0; i < n; i++)
                stackData[i][j][1] = k;
          }
          for (j = 0; j < m; ++j)
            y0[j] = 0;
          return y0;
        };
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    scatter.dispatch.on('elementClick.area', function (e) {
      dispatch.areaClick(e);
    });
    scatter.dispatch.on('elementMouseover.tooltip', function (e) {
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ], dispatch.tooltipShow(e);
    });
    scatter.dispatch.on('elementMouseout.tooltip', function (e) {
      dispatch.tooltipHide(e);
    });
    //============================================================
    //============================================================
    // Global getters and setters
    //------------------------------------------------------------
    chart.dispatch = dispatch;
    chart.scatter = scatter;
    d3.rebind(chart, scatter, 'interactive', 'size', 'xScale', 'yScale', 'zScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'forceX', 'forceY', 'forceSize', 'clipVoronoi', 'useVoronoi', 'clipRadius', 'highlightPoint', 'clearHighlights');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.x = function (_) {
      if (!arguments.length)
        return getX;
      getX = d3.functor(_);
      return chart;
    };
    chart.y = function (_) {
      if (!arguments.length)
        return getY;
      getY = d3.functor(_);
      return chart;
    };
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.clipEdge = function (_) {
      if (!arguments.length)
        return clipEdge;
      clipEdge = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      return chart;
    };
    chart.offset = function (_) {
      if (!arguments.length)
        return offset;
      offset = _;
      return chart;
    };
    chart.order = function (_) {
      if (!arguments.length)
        return order;
      order = _;
      return chart;
    };
    //shortcut for offset + order
    chart.style = function (_) {
      if (!arguments.length)
        return style;
      style = _;
      switch (style) {
      case 'stack':
        chart.offset('zero');
        chart.order('default');
        break;
      case 'stream':
        chart.offset('wiggle');
        chart.order('inside-out');
        break;
      case 'stream-center':
        chart.offset('silhouette');
        chart.order('inside-out');
        break;
      case 'expand':
        chart.offset('expand');
        chart.order('default');
        break;
      case 'stack_percent':
        chart.offset(chart.d3_stackedOffset_stackPercent);
        chart.order('default');
        break;
      }
      return chart;
    };
    chart.interpolate = function (_) {
      if (!arguments.length)
        return interpolate;
      interpolate = _;
      return chart;
    };
    //============================================================
    return chart;
  };
  nv.models.stackedAreaChart = function () {
    'use strict';
    //============================================================
    // Public Variables with Default Settings
    //------------------------------------------------------------
    var stacked = nv.models.stackedArea(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend(), interactiveLayer = nv.interactiveGuideline();
    ;
    var margin = {
        top: 30,
        right: 25,
        bottom: 50,
        left: 60
      }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, useInteractiveGuideline = false, tooltips = true, tooltip = function (key, x, y, e, graph) {
        return '<h3>' + key + '</h3>' + '<p>' + y + ' on ' + x + '</p>';
      }, x, y, yAxisTickFormat = d3.format(',.2f'), state = { style: stacked.style() }, defaultState = null, noData = 'No Data Available.', dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState'), controlWidth = 250, cData = [
        'Stacked',
        'Stream',
        'Expanded'
      ], controlLabels = {}, transitionDuration = 250;
    ;
    xAxis.orient('bottom').tickPadding(7);
    ;
    yAxis.orient(rightAlignYAxis ? 'right' : 'left');
    ;
    controls.updateState(false);
    //============================================================
    //============================================================
    // Private Variables
    //------------------------------------------------------------
    var showTooltip = function (e, offsetElement) {
      var left = e.pos[0] + (offsetElement.offsetLeft || 0), top = e.pos[1] + (offsetElement.offsetTop || 0), x = xAxis.tickFormat()(stacked.x()(e.point, e.pointIndex)), y = yAxis.tickFormat()(stacked.y()(e.point, e.pointIndex)), content = tooltip(e.series.key, x, y, e, chart);
      nv.tooltip.show([
        left,
        top
      ], content, e.value < 0 ? 'n' : 's', null, offsetElement);
    };
    //============================================================
    function chart(selection) {
      selection.each(function (data) {
        var container = d3.select(this), that = this;
        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right, availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
        chart.update = function () {
          container.transition().duration(transitionDuration).call(chart);
        };
        chart.container = this;
        //set state.disabled
        state.disabled = data.map(function (d) {
          return !!d.disabled;
        });
        if (!defaultState) {
          var key;
          defaultState = {};
          for (key in state) {
            if (state[key] instanceof Array)
              defaultState[key] = state[key].slice(0);
            else
              defaultState[key] = state[key];
          }
        }
        //------------------------------------------------------------
        // Display No Data message if there's nothing to show.
        if (!data || !data.length || !data.filter(function (d) {
            return d.values.length;
          }).length) {
          var noDataText = container.selectAll('.nv-noData').data([noData]);
          noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
          noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
            return d;
          });
          return chart;
        } else {
          container.selectAll('.nv-noData').remove();
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Scales
        x = stacked.xScale();
        y = stacked.yScale();
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup containers and skeleton of chart
        var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);
        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');
        var g = wrap.select('g');
        gEnter.append('rect').style('opacity', 0);
        gEnter.append('g').attr('class', 'nv-x nv-axis');
        gEnter.append('g').attr('class', 'nv-y nv-axis');
        gEnter.append('g').attr('class', 'nv-stackedWrap');
        gEnter.append('g').attr('class', 'nv-legendWrap');
        gEnter.append('g').attr('class', 'nv-controlsWrap');
        gEnter.append('g').attr('class', 'nv-interactive');
        g.select('rect').attr('width', availableWidth).attr('height', availableHeight);
        //------------------------------------------------------------
        // Legend
        if (showLegend) {
          var legendWidth = showControls ? availableWidth - controlWidth : availableWidth;
          legend.width(legendWidth);
          g.select('.nv-legendWrap').datum(data).call(legend);
          if (margin.top != legend.height()) {
            margin.top = legend.height();
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.nv-legendWrap').attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + -margin.top + ')');
        }
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Controls
        if (showControls) {
          var controlsData = [
              {
                key: controlLabels.stacked || 'Stacked',
                metaKey: 'Stacked',
                disabled: stacked.style() != 'stack',
                style: 'stack'
              },
              {
                key: controlLabels.stream || 'Stream',
                metaKey: 'Stream',
                disabled: stacked.style() != 'stream',
                style: 'stream'
              },
              {
                key: controlLabels.expanded || 'Expanded',
                metaKey: 'Expanded',
                disabled: stacked.style() != 'expand',
                style: 'expand'
              },
              {
                key: controlLabels.stack_percent || 'Stack %',
                metaKey: 'Stack_Percent',
                disabled: stacked.style() != 'stack_percent',
                style: 'stack_percent'
              }
            ];
          controlWidth = cData.length / 3 * 260;
          controlsData = controlsData.filter(function (d) {
            return cData.indexOf(d.metaKey) !== -1;
          });
          controls.width(controlWidth).color([
            '#444',
            '#444',
            '#444'
          ]);
          g.select('.nv-controlsWrap').datum(controlsData).call(controls);
          if (margin.top != Math.max(controls.height(), legend.height())) {
            margin.top = Math.max(controls.height(), legend.height());
            availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
          }
          g.select('.nv-controlsWrap').attr('transform', 'translate(0,' + -margin.top + ')');
        }
        //------------------------------------------------------------
        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        if (rightAlignYAxis) {
          g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
        }
        //------------------------------------------------------------
        // Main Chart Component(s)
        //------------------------------------------------------------
        //Set up interactive layer
        if (useInteractiveGuideline) {
          interactiveLayer.width(availableWidth).height(availableHeight).margin({
            left: margin.left,
            top: margin.top
          }).svgContainer(container).xScale(x);
          wrap.select('.nv-interactive').call(interactiveLayer);
        }
        stacked.width(availableWidth).height(availableHeight);
        var stackedWrap = g.select('.nv-stackedWrap').datum(data);
        stackedWrap.transition().call(stacked);
        //------------------------------------------------------------
        //------------------------------------------------------------
        // Setup Axes
        if (showXAxis) {
          xAxis.scale(x).ticks(availableWidth / 100).tickSize(-availableHeight, 0);
          g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + availableHeight + ')');
          g.select('.nv-x.nv-axis').transition().duration(0).call(xAxis);
        }
        if (showYAxis) {
          yAxis.scale(y).ticks(stacked.offset() == 'wiggle' ? 0 : availableHeight / 36).tickSize(-availableWidth, 0).setTickFormat(stacked.style() == 'expand' || stacked.style() == 'stack_percent' ? d3.format('%') : yAxisTickFormat);
          g.select('.nv-y.nv-axis').transition().duration(0).call(yAxis);
        }
        //------------------------------------------------------------
        //============================================================
        // Event Handling/Dispatching (in chart's scope)
        //------------------------------------------------------------
        stacked.dispatch.on('areaClick.toggle', function (e) {
          if (data.filter(function (d) {
              return !d.disabled;
            }).length === 1)
            data.forEach(function (d) {
              d.disabled = false;
            });
          else
            data.forEach(function (d, i) {
              d.disabled = i != e.seriesIndex;
            });
          state.disabled = data.map(function (d) {
            return !!d.disabled;
          });
          dispatch.stateChange(state);
          chart.update();
        });
        legend.dispatch.on('stateChange', function (newState) {
          state.disabled = newState.disabled;
          dispatch.stateChange(state);
          chart.update();
        });
        controls.dispatch.on('legendClick', function (d, i) {
          if (!d.disabled)
            return;
          controlsData = controlsData.map(function (s) {
            s.disabled = true;
            return s;
          });
          d.disabled = false;
          stacked.style(d.style);
          state.style = stacked.style();
          dispatch.stateChange(state);
          chart.update();
        });
        interactiveLayer.dispatch.on('elementMousemove', function (e) {
          stacked.clearHighlights();
          var singlePoint, pointIndex, pointXLocation, allData = [];
          data.filter(function (series, i) {
            series.seriesIndex = i;
            return !series.disabled;
          }).forEach(function (series, i) {
            pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
            stacked.highlightPoint(i, pointIndex, true);
            var point = series.values[pointIndex];
            if (typeof point === 'undefined')
              return;
            if (typeof singlePoint === 'undefined')
              singlePoint = point;
            if (typeof pointXLocation === 'undefined')
              pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
            //If we are in 'expand' mode, use the stacked percent value instead of raw value.
            var tooltipValue = stacked.style() == 'expand' ? point.display.y : chart.y()(point, pointIndex);
            allData.push({
              key: series.key,
              value: tooltipValue,
              color: color(series, series.seriesIndex),
              stackedValue: point.display
            });
          });
          allData.reverse();
          //Highlight the tooltip entry based on which stack the mouse is closest to.
          if (allData.length > 2) {
            var yValue = chart.yScale().invert(e.mouseY);
            var yDistMax = Infinity, indexToHighlight = null;
            allData.forEach(function (series, i) {
              //To handle situation where the stacked area chart is negative, we need to use absolute values
              //when checking if the mouse Y value is within the stack area.
              yValue = Math.abs(yValue);
              var stackedY0 = Math.abs(series.stackedValue.y0);
              var stackedY = Math.abs(series.stackedValue.y);
              if (yValue >= stackedY0 && yValue <= stackedY + stackedY0) {
                indexToHighlight = i;
                return;
              }
            });
            if (indexToHighlight != null)
              allData[indexToHighlight].highlight = true;
          }
          var xValue = xAxis.tickFormat()(chart.x()(singlePoint, pointIndex));
          //If we are in 'expand' mode, force the format to be a percentage.
          var valueFormatter = stacked.style() == 'expand' ? function (d, i) {
              return d3.format('.1%')(d);
            } : function (d, i) {
              return yAxis.tickFormat()(d);
            };
          interactiveLayer.tooltip.position({
            left: pointXLocation + margin.left,
            top: e.mouseY + margin.top
          }).chartContainer(that.parentNode).enabled(tooltips).valueFormatter(valueFormatter).data({
            value: xValue,
            series: allData
          })();
          interactiveLayer.renderGuideLine(pointXLocation);
        });
        interactiveLayer.dispatch.on('elementMouseout', function (e) {
          dispatch.tooltipHide();
          stacked.clearHighlights();
        });
        dispatch.on('tooltipShow', function (e) {
          if (tooltips)
            showTooltip(e, that.parentNode);
        });
        // Update chart from a state object passed to event handler
        dispatch.on('changeState', function (e) {
          if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
            data.forEach(function (series, i) {
              series.disabled = e.disabled[i];
            });
            state.disabled = e.disabled;
          }
          if (typeof e.style !== 'undefined') {
            stacked.style(e.style);
          }
          chart.update();
        });
      });
      return chart;
    }
    //============================================================
    // Event Handling/Dispatching (out of chart's scope)
    //------------------------------------------------------------
    stacked.dispatch.on('tooltipShow', function (e) {
      //disable tooltips when value ~= 0
      //// TODO: consider removing points from voronoi that have 0 value instead of this hack
      /*
    if (!Math.round(stacked.y()(e.point) * 100)) {  // 100 will not be good for very small numbers... will have to think about making this valu dynamic, based on data range
      setTimeout(function() { d3.selectAll('.point.hover').classed('hover', false) }, 0);
      return false;
    }
   */
      e.pos = [
        e.pos[0] + margin.left,
        e.pos[1] + margin.top
      ], dispatch.tooltipShow(e);
    });
    stacked.dispatch.on('tooltipHide', function (e) {
      dispatch.tooltipHide(e);
    });
    dispatch.on('tooltipHide', function () {
      if (tooltips)
        nv.tooltip.cleanup();
    });
    //============================================================
    //============================================================
    // Expose Public Variables
    //------------------------------------------------------------
    // expose chart's sub-components
    chart.dispatch = dispatch;
    chart.stacked = stacked;
    chart.legend = legend;
    chart.controls = controls;
    chart.xAxis = xAxis;
    chart.yAxis = yAxis;
    chart.interactiveLayer = interactiveLayer;
    d3.rebind(chart, stacked, 'x', 'y', 'size', 'xScale', 'yScale', 'xDomain', 'yDomain', 'xRange', 'yRange', 'sizeDomain', 'interactive', 'useVoronoi', 'offset', 'order', 'style', 'clipEdge', 'forceX', 'forceY', 'forceSize', 'interpolate');
    chart.options = nv.utils.optionsFunc.bind(chart);
    chart.margin = function (_) {
      if (!arguments.length)
        return margin;
      margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
      margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
      margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
      margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
      return chart;
    };
    chart.width = function (_) {
      if (!arguments.length)
        return width;
      width = _;
      return chart;
    };
    chart.height = function (_) {
      if (!arguments.length)
        return height;
      height = _;
      return chart;
    };
    chart.color = function (_) {
      if (!arguments.length)
        return color;
      color = nv.utils.getColor(_);
      legend.color(color);
      stacked.color(color);
      return chart;
    };
    chart.showControls = function (_) {
      if (!arguments.length)
        return showControls;
      showControls = _;
      return chart;
    };
    chart.showLegend = function (_) {
      if (!arguments.length)
        return showLegend;
      showLegend = _;
      return chart;
    };
    chart.showXAxis = function (_) {
      if (!arguments.length)
        return showXAxis;
      showXAxis = _;
      return chart;
    };
    chart.showYAxis = function (_) {
      if (!arguments.length)
        return showYAxis;
      showYAxis = _;
      return chart;
    };
    chart.rightAlignYAxis = function (_) {
      if (!arguments.length)
        return rightAlignYAxis;
      rightAlignYAxis = _;
      yAxis.orient(_ ? 'right' : 'left');
      return chart;
    };
    chart.useInteractiveGuideline = function (_) {
      if (!arguments.length)
        return useInteractiveGuideline;
      useInteractiveGuideline = _;
      if (_ === true) {
        chart.interactive(false);
        chart.useVoronoi(false);
      }
      return chart;
    };
    chart.tooltip = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.tooltips = function (_) {
      if (!arguments.length)
        return tooltips;
      tooltips = _;
      return chart;
    };
    chart.tooltipContent = function (_) {
      if (!arguments.length)
        return tooltip;
      tooltip = _;
      return chart;
    };
    chart.state = function (_) {
      if (!arguments.length)
        return state;
      state = _;
      return chart;
    };
    chart.defaultState = function (_) {
      if (!arguments.length)
        return defaultState;
      defaultState = _;
      return chart;
    };
    chart.noData = function (_) {
      if (!arguments.length)
        return noData;
      noData = _;
      return chart;
    };
    chart.transitionDuration = function (_) {
      if (!arguments.length)
        return transitionDuration;
      transitionDuration = _;
      return chart;
    };
    chart.controlsData = function (_) {
      if (!arguments.length)
        return cData;
      cData = _;
      return chart;
    };
    chart.controlLabels = function (_) {
      if (!arguments.length)
        return controlLabels;
      if (typeof _ !== 'object')
        return controlLabels;
      controlLabels = _;
      return chart;
    };
    yAxis.setTickFormat = yAxis.tickFormat;
    yAxis.tickFormat = function (_) {
      if (!arguments.length)
        return yAxisTickFormat;
      yAxisTickFormat = _;
      return yAxis;
    };
    //============================================================
    return chart;
  };
}());
/*! angularjs-nvd3-directives - v0.0.7 - 2014-04-07
 * http://cmaurer.github.io/angularjs-nvd3-directives
 * Copyright (c) 2014 Christian Maurer; Licensed Apache License, v2.0 */
(function () {
  'use strict';
  angular.module('legendDirectives', []).directive('simpleSvgLegend', function () {
    return {
      restrict: 'EA',
      scope: {
        id: '@',
        width: '@',
        height: '@',
        margin: '@',
        x: '@',
        y: '@',
        labels: '@',
        styles: '@',
        classes: '@',
        shapes: '@',
        padding: '@',
        columns: '@'
      },
      compile: function () {
        return function link(scope, element, attrs) {
          var id, width, height, margin, widthTracker = 0, heightTracker = 0, columns = 1, columnTracker = 0, padding = 10, paddingStr, svgNamespace = 'http://www.w3.org/2000/svg', svg, g, labels, styles, classes, shapes, x = 0, y = 0;
          margin = scope.$eval(attrs.margin) || {
            left: 5,
            top: 5,
            bottom: 5,
            right: 5
          };
          width = attrs.width === 'undefined' ? element[0].parentElement.offsetWidth - (margin.left + margin.right) : +attrs.width - (margin.left + margin.right);
          height = attrs.height === 'undefined' ? element[0].parentElement.offsetHeight - (margin.top + margin.bottom) : +attrs.height - (margin.top + margin.bottom);
          if (!attrs.id) {
            //if an id is not supplied, create a random id.
            id = 'legend-' + Math.random();
          } else {
            id = attrs.id;
          }
          if (attrs.columns) {
            columns = +attrs.columns;
          }
          if (attrs.padding) {
            padding = +attrs.padding;
          }
          paddingStr = padding + '';
          svg = document.createElementNS(svgNamespace, 'svg');
          if (attrs.width) {
            svg.setAttribute('width', width + '');
          }
          if (attrs.height) {
            svg.setAttribute('height', height + '');
          }
          svg.setAttribute('id', id);
          if (attrs.x) {
            x = +attrs.x;
          }
          if (attrs.y) {
            y = +attrs.y;
          }
          element.append(svg);
          g = document.createElementNS(svgNamespace, 'g');
          g.setAttribute('transform', 'translate(' + x + ',' + y + ')');
          svg.appendChild(g);
          if (attrs.labels) {
            labels = scope.$eval(attrs.labels);
          }
          if (attrs.styles) {
            styles = scope.$eval(attrs.styles);
          }
          if (attrs.classes) {
            classes = scope.$eval(attrs.classes);
          }
          if (attrs.shapes) {
            shapes = scope.$eval(attrs.shapes);
          }
          for (var i in labels) {
            if (labels.hasOwnProperty(i)) {
              var shpe = shapes[i], shape, text, textSize, g1;
              if (columnTracker % columns === 0) {
                widthTracker = 0;
                heightTracker = heightTracker + (padding + padding * 1.5);
              }
              g1 = document.createElementNS(svgNamespace, 'g');
              g1.setAttribute('transform', 'translate(' + widthTracker + ', ' + heightTracker + ')');
              if (shpe === 'rect') {
                shape = document.createElementNS(svgNamespace, 'rect');
                //x, y, rx, ry
                shape.setAttribute('y', 0 - padding / 2 + '');
                shape.setAttribute('width', paddingStr);
                shape.setAttribute('height', paddingStr);
              } else if (shpe === 'ellipse') {
                shape = document.createElementNS(svgNamespace, 'ellipse');
                shape.setAttribute('rx', paddingStr);
                shape.setAttribute('ry', padding + padding / 2 + '');
              } else {
                shape = document.createElementNS(svgNamespace, 'circle');
                shape.setAttribute('r', padding / 2 + '');
              }
              if (styles && styles[i]) {
                shape.setAttribute('style', styles[i]);
              }
              if (classes && classes[i]) {
                shape.setAttribute('class', classes[i]);
              }
              g1.appendChild(shape);
              widthTracker = widthTracker + shape.clientWidth + (padding + padding / 2);
              text = document.createElementNS(svgNamespace, 'text');
              text.setAttribute('transform', 'translate(10, 5)');
              text.appendChild(document.createTextNode(labels[i]));
              g1.appendChild(text);
              g.appendChild(g1);
              textSize = text.clientWidth;
              widthTracker = widthTracker + textSize + (padding + padding * 0.75);
              columnTracker++;
            }
          }
        };
      }
    };
  }).directive('nvd3Legend', [function () {
      var margin, width, height, id;
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          id: '@',
          margin: '&',
          width: '@',
          height: '@',
          key: '&',
          color: '&',
          align: '@',
          rightalign: '@',
          updatestate: '@',
          radiobuttonmode: '@',
          x: '&',
          y: '&'
        },
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              if (scope.chart) {
                return d3.select('#' + attrs.id + ' svg').attr('height', height).attr('width', width).datum(data).transition().duration(250).call(scope.chart);
              }
              margin = scope.$eval(attrs.margin) || {
                top: 5,
                right: 0,
                bottom: 5,
                left: 0
              };
              width = attrs.width === undefined ? element[0].parentElement.offsetWidth - (margin.left + margin.right) : +attrs.width - (margin.left + margin.right);
              height = attrs.height === undefined ? element[0].parentElement.offsetHeight - (margin.top + margin.bottom) : +attrs.height - (margin.top + margin.bottom);
              if (width === undefined || width < 0) {
                width = 400;
              }
              if (height === undefined || height < 0) {
                height = 20;
              }
              if (!attrs.id) {
                //if an id is not supplied, create a random id.
                id = 'legend-' + Math.random();
              } else {
                id = attrs.id;
              }
              nv.addGraph({
                generate: function () {
                  var chart = nv.models.legend().width(width).height(height).margin(margin).align(attrs.align === undefined ? true : attrs.align === 'true').rightAlign(attrs.rightalign === undefined ? true : attrs.rightalign === 'true').updateState(attrs.updatestate === undefined ? true : attrs.updatestate === 'true').radioButtonMode(attrs.radiobuttonmode === undefined ? false : attrs.radiobuttonmode === 'true').color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).key(attrs.key === undefined ? function (d) {
                      return d.key;
                    } : scope.key());
                  if (!d3.select('#' + attrs.id + ' svg')[0][0]) {
                    d3.select('#' + attrs.id).append('svg');
                  }
                  d3.select('#' + attrs.id + ' svg').attr('height', height).attr('width', width).datum(data).transition().duration(250).call(chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                }
              });
            }
          });
        }
      };
    }]);
  function initializeLegendMargin(scope, attrs) {
    var margin = scope.$eval(attrs.legendmargin) || {
        left: 0,
        top: 5,
        bottom: 5,
        right: 0
      };
    if (typeof margin !== 'object') {
      // we were passed a vanilla int, convert to full margin object
      margin = {
        left: margin,
        top: margin,
        bottom: margin,
        right: margin
      };
    }
    scope.legendmargin = margin;
  }
  function configureLegend(chart, scope, attrs) {
    if (chart.legend && attrs.showlegend && attrs.showlegend === 'true') {
      initializeLegendMargin(scope, attrs);
      chart.legend.margin(scope.legendmargin);
      chart.legend.width(attrs.legendwidth === undefined ? 400 : +attrs.legendwidth);
      chart.legend.height(attrs.legendheight === undefined ? 20 : +attrs.legendheight);
      chart.legend.key(attrs.legendkey === undefined ? function (d) {
        return d.key;
      } : scope.legendkey());
      chart.legend.color(attrs.legendcolor === undefined ? nv.utils.defaultColor() : scope.legendcolor());
      chart.legend.align(attrs.legendalign === undefined ? true : attrs.legendalign === 'true');
      chart.legend.rightAlign(attrs.legendrightalign === undefined ? true : attrs.legendrightalign === 'true');
      chart.legend.updateState(attrs.legendupdatestate === undefined ? true : attrs.legendupdatestate === 'true');
      chart.legend.radioButtonMode(attrs.legendradiobuttonmode === undefined ? false : attrs.legendradiobuttonmode === 'true');
    }
  }
  function processEvents(chart, scope) {
    if (chart.dispatch) {
      if (chart.dispatch.tooltipShow) {
        chart.dispatch.on('tooltipShow.directive', function (event) {
          scope.$emit('tooltipShow.directive', event);
        });
      }
      if (chart.dispatch.tooltipHide) {
        chart.dispatch.on('tooltipHide.directive', function (event) {
          scope.$emit('tooltipHide.directive', event);
        });
      }
      if (chart.dispatch.beforeUpdate) {
        chart.dispatch.on('beforeUpdate.directive', function (event) {
          scope.$emit('beforeUpdate.directive', event);
        });
      }
      if (chart.dispatch.stateChange) {
        chart.dispatch.on('stateChange.directive', function (event) {
          scope.$emit('stateChange.directive', event);
        });
      }
      if (chart.dispatch.changeState) {
        chart.dispatch.on('changeState.directive', function (event) {
          scope.$emit('changeState.directive', event);
        });
      }
    }
    if (chart.lines) {
      chart.lines.dispatch.on('elementMouseover.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.lines.dispatch.on('elementMouseout.tooltip.directive', function (event) {
        scope.$emit('elementMouseout.tooltip.directive', event);
      });
      chart.lines.dispatch.on('elementClick.directive', function (event) {
        scope.$emit('elementClick.directive', event);
      });
    }
    if (chart.stacked && chart.stacked.dispatch) {
      chart.stacked.dispatch.on('areaClick.toggle.directive', function (event) {
        scope.$emit('areaClick.toggle.directive', event);
      });
      chart.stacked.dispatch.on('tooltipShow.directive', function (event) {
        scope.$emit('tooltipShow.directive', event);
      });
      chart.stacked.dispatch.on('tooltipHide.directive', function (event) {
        scope.$emit('tooltipHide.directive', event);
      });
    }
    if (chart.interactiveLayer) {
      if (chart.interactiveLayer.elementMouseout) {
        chart.interactiveLayer.dispatch.on('elementMouseout.directive', function (event) {
          scope.$emit('elementMouseout.directive', event);
        });
      }
      if (chart.interactiveLayer.elementMousemove) {
        chart.interactiveLayer.dispatch.on('elementMousemove.directive', function (event) {
          scope.$emit('elementMousemove.directive', event);
        });
      }
    }
    if (chart.discretebar) {
      chart.discretebar.dispatch.on('elementMouseover.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.discretebar.dispatch.on('elementMouseout.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.discretebar.dispatch.on('elementClick.directive', function (event) {
        scope.$emit('elementClick.directive', event);
      });
    }
    if (chart.multibar) {
      chart.multibar.dispatch.on('elementMouseover.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.multibar.dispatch.on('elementMouseout.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.multibar.dispatch.on('elementClick.directive', function (event) {
        scope.$emit('elementClick.directive', event);
      });
    }
    if (chart.pie) {
      chart.pie.dispatch.on('elementMouseover.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.pie.dispatch.on('elementMouseout.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.pie.dispatch.on('elementClick.directive', function (event) {
        scope.$emit('elementClick.directive', event);
      });
    }
    if (chart.scatter) {
      chart.scatter.dispatch.on('elementMouseover.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.scatter.dispatch.on('elementMouseout.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
    }
    if (chart.bullet) {
      chart.bullet.dispatch.on('elementMouseover.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
      chart.bullet.dispatch.on('elementMouseout.tooltip.directive', function (event) {
        scope.$emit('elementMouseover.tooltip.directive', event);
      });
    }
    if (chart.legend) {
      //'legendClick', 'legendDblclick', 'legendMouseover'
      //stateChange
      chart.legend.dispatch.on('stateChange.legend.directive', function (event) {
        scope.$emit('stateChange.legend.directive', event);
      });
      chart.legend.dispatch.on('legendClick.directive', function (d, i) {
        scope.$emit('legendClick.directive', d, i);
      });
      chart.legend.dispatch.on('legendDblclick.directive', function (d, i) {
        scope.$emit('legendDblclick.directive', d, i);
      });
      chart.legend.dispatch.on('legendMouseover.directive', function (d, i) {
        scope.$emit('legendMouseover.directive', d, i);
      });
    }
    if (chart.controls) {
      if (chart.controls.legendClick) {
        chart.controls.dispatch.on('legendClick.directive', function (d, i) {
          scope.$emit('legendClick.directive', d, i);
        });
      }
    }
  }
  function configureXaxis(chart, scope, attrs) {
    if (attrs.xaxisorient) {
      chart.xAxis.orient(attrs.xaxisorient);
    }
    if (attrs.xaxisticks) {
      chart.xAxis.scale().ticks(attrs.xaxisticks);
    }
    if (attrs.xaxistickvalues) {
      if (Array.isArray(scope.$eval(attrs.xaxistickvalues))) {
        chart.xAxis.tickValues(scope.$eval(attrs.xaxistickvalues));
      } else if (typeof scope.xaxistickvalues() === 'function') {
        chart.xAxis.tickValues(scope.xaxistickvalues());
      }
    }
    if (attrs.xaxisticksubdivide) {
      chart.xAxis.tickSubdivide(scope.xaxisticksubdivide());
    }
    if (attrs.xaxisticksize) {
      chart.xAxis.tickSize(scope.xaxisticksize());
    }
    if (attrs.xaxistickpadding) {
      chart.xAxis.tickPadding(scope.xaxistickpadding());
    }
    if (attrs.xaxistickformat) {
      chart.xAxis.tickFormat(scope.xaxistickformat());
    }
    if (attrs.xaxislabel) {
      chart.xAxis.axisLabel(attrs.xaxislabel);
    }
    if (attrs.xaxisscale) {
      chart.xAxis.scale(scope.xaxisscale());
    }
    if (attrs.xaxisdomain) {
      if (Array.isArray(scope.$eval(attrs.xaxisdomain))) {
        chart.xDomain(scope.$eval(attrs.xaxisdomain));
      } else if (typeof scope.xaxisdomain() === 'function') {
        chart.xDomain(scope.xaxisdomain());
      }
    }
    if (attrs.xaxisrange) {
      if (Array.isArray(scope.$eval(attrs.xaxisrange))) {
        chart.xRange(scope.$eval(attrs.xaxisrange));
      } else if (typeof scope.xaxisrange() === 'function') {
        chart.xRange(scope.xaxisrange());
      }
    }
    if (attrs.xaxisrangeband) {
      chart.xAxis.rangeBand(scope.xaxisrangeband());
    }
    if (attrs.xaxisrangebands) {
      chart.xAxis.rangeBands(scope.xaxisrangebands());
    }
    if (attrs.xaxisshowmaxmin) {
      chart.xAxis.showMaxMin(attrs.xaxisshowmaxmin === 'true');
    }
    if (attrs.xaxishighlightzero) {
      chart.xAxis.highlightZero(attrs.xaxishighlightzero === 'true');
    }
    if (attrs.xaxisrotatelabels) {
      chart.xAxis.rotateLabels(+attrs.xaxisrotatelabels);
    }
    //    if(attrs.xaxisrotateylabel){
    //        chart.xAxis.rotateYLabel((attrs.xaxisrotateylabel === "true"));
    //    }
    if (attrs.xaxisstaggerlabels) {
      chart.xAxis.staggerLabels(attrs.xaxisstaggerlabels === 'true');
    }
    if (attrs.xaxislabeldistance) {
      chart.xAxis.axisLabelDistance(+attrs.xaxislabeldistance);
    }
  }
  function configureX2axis(chart, scope, attrs) {
    if (attrs.x2axisorient) {
      chart.x2Axis.orient(attrs.x2axisorient);
    }
    if (attrs.x2axisticks) {
      chart.x2Axis.scale().ticks(attrs.x2axisticks);
    }
    if (attrs.x2axistickvalues) {
      if (Array.isArray(scope.$eval(attrs.x2axistickvalues))) {
        chart.x2Axis.tickValues(scope.$eval(attrs.x2axistickvalues));
      } else if (typeof scope.xaxistickvalues() === 'function') {
        chart.x2Axis.tickValues(scope.x2axistickvalues());
      }
    }
    if (attrs.x2axisticksubdivide) {
      chart.x2Axis.tickSubdivide(scope.x2axisticksubdivide());
    }
    if (attrs.x2axisticksize) {
      chart.x2Axis.tickSize(scope.x2axisticksize());
    }
    if (attrs.x2axistickpadding) {
      chart.x2Axis.tickPadding(scope.x2axistickpadding());
    }
    if (attrs.x2axistickformat) {
      chart.x2Axis.tickFormat(scope.x2axistickformat());
    }
    if (attrs.x2axislabel) {
      chart.x2Axis.axisLabel(attrs.x2axislabel);
    }
    if (attrs.x2axisscale) {
      chart.x2Axis.scale(scope.x2axisscale());
    }
    if (attrs.x2axisdomain) {
      if (Array.isArray(scope.$eval(attrs.x2axisdomain))) {
        chart.x2Axis.domain(scope.$eval(attrs.x2axisdomain));
      } else if (typeof scope.x2axisdomain() === 'function') {
        chart.x2Axis.domain(scope.x2axisdomain());
      }
    }
    if (attrs.x2axisrange) {
      if (Array.isArray(scope.$eval(attrs.x2axisrange))) {
        chart.x2Axis.range(scope.$eval(attrs.x2axisrange));
      } else if (typeof scope.x2axisrange() === 'function') {
        chart.x2Axis.range(scope.x2axisrange());
      }
    }
    if (attrs.x2axisrangeband) {
      chart.x2Axis.rangeBand(scope.x2axisrangeband());
    }
    if (attrs.x2axisrangebands) {
      chart.x2Axis.rangeBands(scope.x2axisrangebands());
    }
    if (attrs.x2axisshowmaxmin) {
      chart.x2Axis.showMaxMin(attrs.x2axisshowmaxmin === 'true');
    }
    if (attrs.x2axishighlightzero) {
      chart.x2Axis.highlightZero(attrs.x2axishighlightzero === 'true');
    }
    if (attrs.x2axisrotatelables) {
      chart.x2Axis.rotateLabels(+attrs.x2axisrotatelables);
    }
    //    if(attrs.xaxisrotateylabel){
    //        chart.xAxis.rotateYLabel((attrs.xaxisrotateylabel === "true"));
    //    }
    if (attrs.x2axisstaggerlabels) {
      chart.x2Axis.staggerLabels(attrs.x2axisstaggerlabels === 'true');
    }
    if (attrs.x2axislabeldistance) {
      chart.x2Axis.axisLabelDistance(+attrs.x2axislabeldistance);
    }
  }
  function configureYaxis(chart, scope, attrs) {
    if (attrs.yaxisorient) {
      chart.yAxis.orient(attrs.yaxisorient);
    }
    if (attrs.yaxisticks) {
      chart.yAxis.scale().ticks(attrs.yaxisticks);
    }
    if (attrs.yaxistickvalues) {
      if (Array.isArray(scope.$eval(attrs.yaxistickvalues))) {
        chart.yAxis.tickValues(scope.$eval(attrs.yaxistickvalues));
      } else if (typeof scope.yaxistickvalues() === 'function') {
        chart.yAxis.tickValues(scope.yaxistickvalues());
      }
    }
    if (attrs.yaxisticksubdivide) {
      chart.yAxis.tickSubdivide(scope.yaxisticksubdivide());
    }
    if (attrs.yaxisticksize) {
      chart.yAxis.tickSize(scope.yaxisticksize());
    }
    if (attrs.yaxistickpadding) {
      chart.yAxis.tickPadding(scope.yaxistickpadding());
    }
    if (attrs.yaxistickformat) {
      chart.yAxis.tickFormat(scope.yaxistickformat());
    }
    if (attrs.yaxislabel) {
      chart.yAxis.axisLabel(attrs.yaxislabel);
    }
    if (attrs.yaxisscale) {
      chart.yAxis.scale(scope.yaxisscale());
    }
    if (attrs.yaxisdomain) {
      if (Array.isArray(scope.$eval(attrs.yaxisdomain))) {
        chart.yDomain(scope.$eval(attrs.yaxisdomain));
      } else if (typeof scope.yaxisdomain() === 'function') {
        chart.yDomain(scope.yaxisdomain());
      }
    }
    if (attrs.yaxisrange) {
      if (Array.isArray(scope.$eval(attrs.yaxisrange))) {
        chart.yRange(scope.$eval(attrs.yaxisrange));
      } else if (typeof scope.yaxisrange() === 'function') {
        chart.yRange(scope.yaxisrange());
      }
    }
    if (attrs.yaxisrangeband) {
      chart.yAxis.rangeBand(scope.yaxisrangeband());
    }
    if (attrs.yaxisrangebands) {
      chart.yAxis.rangeBands(scope.yaxisrangebands());
    }
    if (attrs.yaxisshowmaxmin) {
      chart.yAxis.showMaxMin(attrs.yaxisshowmaxmin === 'true');
    }
    if (attrs.yaxishighlightzero) {
      chart.yAxis.highlightZero(attrs.yaxishighlightzero === 'true');
    }
    if (attrs.yaxisrotatelabels) {
      chart.yAxis.rotateLabels(+attrs.yaxisrotatelabels);
    }
    if (attrs.yaxisrotateylabel) {
      chart.yAxis.rotateYLabel(attrs.yaxisrotateylabel === 'true');
    }
    if (attrs.yaxisstaggerlabels) {
      chart.yAxis.staggerLabels(attrs.yaxisstaggerlabels === 'true');
    }
    if (attrs.yaxislabeldistance) {
      chart.yAxis.axisLabelDistance(+attrs.yaxislabeldistance);
    }
  }
  function configureY1axis(chart, scope, attrs) {
    if (attrs.y1axisticks) {
      chart.y1Axis.scale().ticks(attrs.y1axisticks);
    }
    if (attrs.y1axistickvalues) {
      if (Array.isArray(scope.$eval(attrs.y1axistickvalues))) {
        chart.y1Axis.tickValues(scope.$eval(attrs.y1axistickvalues));
      } else if (typeof scope.y1axistickvalues() === 'function') {
        chart.y1Axis.tickValues(scope.y1axistickvalues());
      }
    }
    if (attrs.y1axisticksubdivide) {
      chart.y1Axis.tickSubdivide(scope.y1axisticksubdivide());
    }
    if (attrs.y1axisticksize) {
      chart.y1Axis.tickSize(scope.y1axisticksize());
    }
    if (attrs.y1axistickpadding) {
      chart.y1Axis.tickPadding(scope.y1axistickpadding());
    }
    if (attrs.y1axistickformat) {
      chart.y1Axis.tickFormat(scope.y1axistickformat());
    }
    if (attrs.y1axislabel) {
      chart.y1Axis.axisLabel(attrs.y1axislabel);
    }
    if (attrs.y1axisscale) {
      chart.y1Axis.yScale(scope.y1axisscale());
    }
    if (attrs.y1axisdomain) {
      if (Array.isArray(scope.$eval(attrs.y1axisdomain))) {
        chart.y1Axis.domain(scope.$eval(attrs.y1axisdomain));
      } else if (typeof scope.y1axisdomain() === 'function') {
        chart.y1Axis.domain(scope.y1axisdomain());
      }
    }
    if (attrs.y1axisrange) {
      if (Array.isArray(scope.$eval(attrs.y1axisrange))) {
        chart.y1Axis.range(scope.$eval(attrs.y1axisrange));
      } else if (typeof scope.y1axisrange() === 'function') {
        chart.y1Axis.range(scope.y1axisrange());
      }
    }
    if (attrs.y1axisrangeband) {
      chart.y1Axis.rangeBand(scope.y1axisrangeband());
    }
    if (attrs.y1axisrangebands) {
      chart.y1Axis.rangeBands(scope.y1axisrangebands());
    }
    if (attrs.y1axisshowmaxmin) {
      chart.y1Axis.showMaxMin(attrs.y1axisshowmaxmin === 'true');
    }
    if (attrs.y1axishighlightzero) {
      chart.y1Axis.highlightZero(attrs.y1axishighlightzero === 'true');
    }
    if (attrs.y1axisrotatelabels) {
      chart.y1Axis.rotateLabels(+scope.y1axisrotatelabels);
    }
    if (attrs.y1axisrotateylabel) {
      chart.y1Axis.rotateYLabel(attrs.y1axisrotateylabel === 'true');
    }
    if (attrs.y1axisstaggerlabels) {
      chart.y1Axis.staggerlabels(attrs.y1axisstaggerlabels === 'true');
    }
    if (attrs.y1axislabeldistance) {
      chart.y1Axis.axisLabelDistance(+attrs.y1axislabeldistance);
    }
  }
  function configureY2axis(chart, scope, attrs) {
    if (attrs.y2axisticks) {
      chart.y2Axis.scale().ticks(attrs.y2axisticks);
    }
    if (attrs.y2axistickvalues) {
      chart.y2Axis.tickValues(scope.$eval(attrs.y2axistickvalues));
    }
    if (attrs.y2axisticksubdivide) {
      chart.y2Axis.tickSubdivide(scope.y2axisticksubdivide());
    }
    if (attrs.y2axisticksize) {
      chart.y2Axis.tickSize(scope.y2axisticksize());
    }
    if (attrs.y2axistickpadding) {
      chart.y2Axis.tickPadding(scope.y2axistickpadding());
    }
    if (attrs.y2axistickformat) {
      chart.y2Axis.tickFormat(scope.y2axistickformat());
    }
    if (attrs.y2axislabel) {
      chart.y2Axis.axisLabel(attrs.y2axislabel);
    }
    if (attrs.y2axisscale) {
      chart.y2Axis.yScale(scope.y2axisscale());
    }
    if (attrs.y2axisdomain) {
      if (Array.isArray(scope.$eval(attrs.y2axisdomain))) {
        chart.y2Axis.domain(scope.$eval(attrs.y2axisdomain));
      } else if (typeof scope.y2axisdomain() === 'function') {
        chart.y2Axis.domain(scope.y2axisdomain());
      }
    }
    if (attrs.y2axisrange) {
      if (Array.isArray(scope.$eval(attrs.y2axisrange))) {
        chart.y2Axis.range(scope.$eval(attrs.y2axisrange));
      } else if (typeof scope.y2axisrange() === 'function') {
        chart.y2Axis.range(scope.y2axisrange());
      }
    }
    if (attrs.y2axisrangeband) {
      chart.y2Axis.rangeBand(scope.y2axisrangeband());
    }
    if (attrs.y2axisrangebands) {
      chart.y2Axis.rangeBands(scope.y2axisrangebands());
    }
    if (attrs.y2axisshowmaxmin) {
      chart.y2Axis.showMaxMin(attrs.y2axisshowmaxmin === 'true');
    }
    if (attrs.y2axishighlightzero) {
      chart.y2Axis.highlightZero(attrs.y2axishighlightzero === 'true');
    }
    if (attrs.y2axisrotatelabels) {
      chart.y2Axis.rotateLabels(+scope.y2axisrotatelabels);
    }
    if (attrs.y2axisrotateylabel) {
      chart.y2Axis.rotateYLabel(attrs.y2axisrotateylabel === 'true');
    }
    if (attrs.y2axisstaggerlabels) {
      chart.y2Axis.staggerlabels(attrs.y2axisstaggerlabels === 'true');
    }
    if (attrs.y2axislabeldistance) {
      chart.y2Axis.axisLabelDistance(+attrs.y2axislabeldistance);
    }
  }
  function initializeMargin(scope, attrs) {
    var margin = scope.$eval(attrs.margin) || {
        left: 50,
        top: 50,
        bottom: 50,
        right: 50
      };
    if (typeof margin !== 'object') {
      // we were passed a vanilla int, convert to full margin object
      margin = {
        left: margin,
        top: margin,
        bottom: margin,
        right: margin
      };
    }
    scope.margin = margin;
  }
  function checkElementID(scope, attrs, element, chart, data) {
    configureXaxis(chart, scope, attrs);
    configureX2axis(chart, scope, attrs);
    configureYaxis(chart, scope, attrs);
    configureY1axis(chart, scope, attrs);
    configureY2axis(chart, scope, attrs);
    configureLegend(chart, scope, attrs);
    processEvents(chart, scope);
    var dataAttributeChartID;
    //randomly generated if id attribute doesn't exist
    if (!attrs.id) {
      dataAttributeChartID = 'chartid' + Math.floor(Math.random() * 1000000001);
      angular.element(element).attr('data-chartid', dataAttributeChartID);
      //if an id is not supplied, create a random id.
      if (d3.select('[data-chartid=' + dataAttributeChartID + '] svg').empty()) {
        d3.select('[data-chartid=' + dataAttributeChartID + ']').append('svg').attr('height', scope.height).attr('width', scope.width).datum(data).transition().duration(attrs.transitionduration === undefined ? 250 : +attrs.transitionduration).call(chart);
      } else {
        d3.select('[data-chartid=' + dataAttributeChartID + '] svg').attr('height', scope.height).attr('width', scope.width).datum(data).transition().duration(attrs.transitionduration === undefined ? 250 : +attrs.transitionduration).call(chart);
      }
    } else {
      if (angular.isArray(data) && data.length === 0) {
        d3.select('#' + attrs.id + ' svg').remove();
      }
      if (d3.select('#' + attrs.id + ' svg').empty()) {
        d3.select('#' + attrs.id).append('svg');
      }
      d3.select('#' + attrs.id + ' svg').attr('height', scope.height).attr('width', scope.width).datum(data).transition().duration(attrs.transitionduration === undefined ? 250 : +attrs.transitionduration).call(chart);
    }
  }
  angular.module('nvd3ChartDirectives', []).directive('nvd3LineChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          showxaxis: '@',
          showyaxis: '@',
          rightalignyaxis: '@',
          defaultstate: '@',
          nodata: '@',
          margin: '&',
          tooltipcontent: '&',
          color: '&',
          x: '&',
          y: '&',
          forcex: '@',
          forcey: '@',
          isArea: '@',
          interactive: '@',
          clipedge: '@',
          clipvoronoi: '@',
          interpolate: '@',
          callback: '&',
          useinteractiveguideline: '@',
          xaxisorient: '&',
          xaxisticks: '@',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxislabeldistance: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.lineChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceX(attrs.forcex === undefined ? [] : scope.$eval(attrs.forcex)).forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').showXAxis(attrs.showxaxis === undefined ? false : attrs.showxaxis === 'true').showYAxis(attrs.showyaxis === undefined ? false : attrs.showyaxis === 'true').rightAlignYAxis(attrs.rightalignyaxis === undefined ? false : attrs.rightalignyaxis === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').clipEdge(attrs.clipedge === undefined ? false : attrs.clipedge === 'true').clipVoronoi(attrs.clipvoronoi === undefined ? false : attrs.clipvoronoi === 'true').interpolate(attrs.interpolate === undefined ? 'linear' : attrs.interpolate).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).isArea(attrs.isarea === undefined ? function (d) {
                      return d.area;
                    } : function () {
                      return attrs.isarea === 'true';
                    });
                  if (chart.useInteractiveGuideline) {
                    chart.useInteractiveGuideline(attrs.useinteractiveguideline === undefined ? false : attrs.useinteractiveguideline === 'true');
                  }
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3CumulativeLineChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          showxaxis: '@',
          showyaxis: '@',
          rightalignyaxis: '@',
          defaultstate: '@',
          nodata: '@',
          margin: '&',
          tooltipcontent: '&',
          color: '&',
          x: '&',
          y: '&',
          forcex: '@',
          forcey: '@',
          isArea: '@',
          interactive: '@',
          clipedge: '@',
          clipvoronoi: '@',
          usevoronoi: '@',
          average: '&',
          rescaley: '@',
          callback: '&',
          useinteractiveguideline: '@',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxislabeldistance: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.cumulativeLineChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceX(attrs.forcex === undefined ? [] : scope.$eval(attrs.forcex)).forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').showXAxis(attrs.showxaxis === undefined ? false : attrs.showxaxis === 'true').showYAxis(attrs.showyaxis === undefined ? false : attrs.showyaxis === 'true').rightAlignYAxis(attrs.rightalignyaxis === undefined ? false : attrs.rightalignyaxis === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').clipEdge(attrs.clipedge === undefined ? false : attrs.clipedge === 'true').clipVoronoi(attrs.clipvoronoi === undefined ? false : attrs.clipvoronoi === 'true').useVoronoi(attrs.usevoronoi === undefined ? false : attrs.usevoronoi === 'true').average(attrs.average === undefined ? function (d) {
                      return d.average;
                    } : scope.average()).color(attrs.color === undefined ? d3.scale.category10().range() : scope.color()).isArea(attrs.isarea === undefined ? function (d) {
                      return d.area;
                    } : attrs.isarea === 'true');
                  //.rescaleY(attrs.rescaley === undefined ? false : (attrs.rescaley === 'true'));
                  if (chart.useInteractiveGuideline) {
                    chart.useInteractiveGuideline(attrs.useinteractiveguideline === undefined ? false : attrs.useinteractiveguideline === 'true');
                  }
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3StackedAreaChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          showcontrols: '@',
          nodata: '@',
          margin: '&',
          tooltipcontent: '&',
          color: '&',
          x: '&',
          y: '&',
          forcex: '@',
          forcey: '@',
          forcesize: '@',
          interactive: '@',
          usevoronoi: '@',
          clipedge: '@',
          interpolate: '@',
          style: '@',
          order: '@',
          offset: '@',
          size: '&',
          xScale: '&',
          yScale: '&',
          xDomain: '&',
          yDomain: '&',
          xRange: '&',
          yRange: '&',
          sizeDomain: '&',
          callback: '&',
          showxaxis: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          showyaxis: '&',
          useinteractiveguideline: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.stackedAreaChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceX(attrs.forcex === undefined ? [] : scope.$eval(attrs.forcex)).forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).size(attrs.size === undefined ? function (d) {
                      return d.size === undefined ? 1 : d.size;
                    } : scope.size()).forceSize(attrs.forcesize === undefined ? [] : scope.$eval(attrs.forcesize)).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').showControls(attrs.showcontrols === undefined ? false : attrs.showcontrols === 'true').showXAxis(attrs.showxaxis === undefined ? false : attrs.showxaxis === 'true').showYAxis(attrs.showyaxis === undefined ? false : attrs.showyaxis === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').clipEdge(attrs.clipedge === undefined ? false : attrs.clipedge === 'true').color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color());
                  if (chart.useInteractiveGuideline) {
                    chart.useInteractiveGuideline(attrs.useinteractiveguideline === undefined ? false : attrs.useinteractiveguideline === 'true');
                  }
                  if (attrs.usevoronoi) {
                    chart.useVoronoi(attrs.usevoronoi === 'true');
                  }
                  if (attrs.style) {
                    chart.style(attrs.style);
                  }
                  if (attrs.order) {
                    chart.order(attrs.order);
                  }
                  if (attrs.offset) {
                    chart.offset(attrs.offset);
                  }
                  if (attrs.interpolate) {
                    chart.interpolate(attrs.interpolate);
                  }
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  if (attrs.xscale) {
                    chart.xScale(scope.xscale());
                  }
                  if (attrs.yscale) {
                    chart.yScale(scope.yscale());
                  }
                  if (attrs.xdomain) {
                    if (Array.isArray(scope.$eval(attrs.xdomain))) {
                      chart.xDomain(scope.$eval(attrs.xdomain));
                    } else if (typeof scope.xdomain() === 'function') {
                      chart.xDomain(scope.xdomain());
                    }
                  }
                  if (attrs.ydomain) {
                    if (Array.isArray(scope.$eval(attrs.ydomain))) {
                      chart.yDomain(scope.$eval(attrs.ydomain));
                    } else if (typeof scope.ydomain() === 'function') {
                      chart.yDomain(scope.ydomain());
                    }
                  }
                  if (attrs.sizedomain) {
                    chart.sizeDomain(scope.sizedomain());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3MultiBarChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          tooltipcontent: '&',
          color: '&',
          showcontrols: '@',
          nodata: '@',
          reducexticks: '@',
          staggerlabels: '@',
          rotatelabels: '@',
          margin: '&',
          x: '&',
          y: '&',
          forcey: '@',
          delay: '@',
          stacked: '@',
          callback: '&',
          showxaxis: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          showyaxis: '&',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.multiBarChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').showControls(attrs.showcontrols === undefined ? false : attrs.showcontrols === 'true').showXAxis(attrs.showxaxis === undefined ? false : attrs.showxaxis === 'true').showYAxis(attrs.showyaxis === undefined ? false : attrs.showyaxis === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').reduceXTicks(attrs.reducexticks === undefined ? false : attrs.reducexticks === 'true').staggerLabels(attrs.staggerlabels === undefined ? false : attrs.staggerlabels === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).rotateLabels(attrs.rotatelabels === undefined ? 0 : attrs.rotatelabels).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).delay(attrs.delay === undefined ? 1200 : attrs.delay).stacked(attrs.stacked === undefined ? false : attrs.stacked === 'true');
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3DiscreteBarChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          tooltips: '@',
          showxaxis: '@',
          showyaxis: '@',
          tooltipcontent: '&',
          staggerlabels: '@',
          color: '&',
          margin: '&',
          nodata: '@',
          x: '&',
          y: '&',
          forcey: '@',
          showvalues: '@',
          valueformat: '&',
          callback: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.discreteBarChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).showValues(attrs.showvalues === undefined ? false : attrs.showvalues === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').showXAxis(attrs.showxaxis === undefined ? false : attrs.showxaxis === 'true').showYAxis(attrs.showyaxis === undefined ? false : attrs.showyaxis === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).staggerLabels(attrs.staggerlabels === undefined ? false : attrs.staggerlabels === 'true').color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color());
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  if (attrs.valueformat) {
                    chart.valueFormat(scope.valueformat());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3HistoricalBarChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          tooltips: '@',
          tooltipcontent: '&',
          color: '&',
          margin: '&',
          nodata: '@',
          x: '&',
          y: '&',
          forcey: '@',
          isarea: '@',
          interactive: '@',
          clipedge: '@',
          clipvoronoi: '@',
          interpolate: '@',
          highlightPoint: '@',
          clearHighlights: '@',
          callback: '&',
          useinteractiveguideline: '@',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.historicalBarChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color());
                  if (chart.useInteractiveGuideline) {
                    chart.useInteractiveGuideline(attrs.useinteractiveguideline === undefined ? false : attrs.useinteractiveguideline === 'true');
                  }
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  if (attrs.valueformat) {
                    chart.valueFormat(scope.valueformat());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3MultiBarHorizontalChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          tooltipcontent: '&',
          color: '&',
          showcontrols: '@',
          margin: '&',
          nodata: '@',
          x: '&',
          y: '&',
          forcey: '@',
          stacked: '@',
          showvalues: '@',
          valueformat: '&',
          callback: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.multiBarHorizontalChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).showXAxis(attrs.showxaxis === undefined ? false : attrs.showxaxis === 'true').showYAxis(attrs.showyaxis === undefined ? false : attrs.showyaxis === 'true').forceY(attrs.forcey === undefined ? [0] : scope.$eval(attrs.forcey)).tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').showControls(attrs.showcontrols === undefined ? false : attrs.showcontrols === 'true').showValues(attrs.showvalues === undefined ? false : attrs.showvalues === 'true').stacked(attrs.stacked === undefined ? false : attrs.stacked === 'true');
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  if (attrs.valueformat) {
                    chart.valueFormat(scope.valueformat());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3PieChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlabels: '@',
          showlegend: '@',
          donutLabelsOutside: '@',
          pieLabelsOutside: '@',
          labelType: '@',
          nodata: '@',
          margin: '&',
          x: '&',
          y: '&',
          color: '&',
          donut: '@',
          donutRatio: '@',
          labelthreshold: '@',
          description: '&',
          tooltips: '@',
          tooltipcontent: '&',
          valueFormat: '&',
          callback: '&',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.pieChart().x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).width(scope.width).height(scope.height).margin(scope.margin).tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).showLabels(attrs.showlabels === undefined ? false : attrs.showlabels === 'true').labelThreshold(attrs.labelthreshold === undefined ? 0.02 : attrs.labelthreshold).labelType(attrs.labeltype === undefined ? 'key' : attrs.labeltype).pieLabelsOutside(attrs.pielabelsoutside === undefined ? true : attrs.pielabelsoutside === 'true').valueFormat(attrs.valueformat === undefined ? d3.format(',.2f') : attrs.valueformat).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').description(attrs.description === undefined ? function (d) {
                      return d.description;
                    } : scope.description()).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).donutLabelsOutside(attrs.donutlabelsoutside === undefined ? false : attrs.donutlabelsoutside === 'true').donut(attrs.donut === undefined ? false : attrs.donut === 'true').donutRatio(attrs.donutratio === undefined ? 0.5 : attrs.donutratio);
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3ScatterChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          showcontrols: '@',
          showDistX: '@',
          showDistY: '@',
          rightAlignYAxis: '@',
          fisheye: '@',
          xPadding: '@',
          yPadding: '@',
          tooltipContent: '&',
          tooltipXContent: '&',
          tooltipYContent: '&',
          color: '&',
          margin: '&',
          nodata: '@',
          transitionDuration: '@',
          shape: '&',
          onlyCircles: '@',
          interactive: '@',
          x: '&',
          y: '&',
          size: '&',
          forceX: '@',
          forceY: '@',
          forceSize: '@',
          xrange: '&',
          xdomain: '&',
          xscale: '&',
          yrange: '&',
          ydomain: '&',
          yscale: '&',
          sizerange: '&',
          sizedomain: '&',
          zscale: '&',
          callback: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.scatterChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d.x;
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d.y;
                    } : scope.y()).size(attrs.size === undefined ? function (d) {
                      return d.size === undefined ? 1 : d.size;
                    } : scope.size()).forceX(attrs.forcex === undefined ? [] : scope.$eval(attrs.forcex)).forceY(attrs.forcey === undefined ? [] : scope.$eval(attrs.forcey)).forceSize(attrs.forcesize === undefined ? [] : scope.$eval(attrs.forcesize)).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').tooltipContent(attrs.tooltipContent === undefined ? null : scope.tooltipContent()).tooltipXContent(attrs.tooltipxcontent === undefined ? function (key, x) {
                      return '<strong>' + x + '</strong>';
                    } : scope.tooltipXContent()).tooltipYContent(attrs.tooltipycontent === undefined ? function (key, x, y) {
                      return '<strong>' + y + '</strong>';
                    } : scope.tooltipYContent()).showControls(attrs.showcontrols === undefined ? false : attrs.showcontrols === 'true').showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').showDistX(attrs.showdistx === undefined ? false : attrs.showdistx === 'true').showDistY(attrs.showdisty === undefined ? false : attrs.showdisty === 'true').xPadding(attrs.xpadding === undefined ? 0 : +attrs.xpadding).yPadding(attrs.ypadding === undefined ? 0 : +attrs.ypadding).fisheye(attrs.fisheye === undefined ? 0 : +attrs.fisheye).noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).transitionDuration(attrs.transitionduration === undefined ? 250 : +attrs.transitionduration);
                  if (attrs.shape) {
                    chart.scatter.onlyCircles(false);
                    chart.scatter.shape(attrs.shape === undefined ? function (d) {
                      return d.shape || 'circle';
                    } : scope.shape());
                  }
                  //'pointActive', 'clipVoronoi', 'clipRadius', 'useVoronoi'
                  if (attrs.xdomain) {
                    if (Array.isArray(scope.$eval(attrs.xdomain))) {
                      chart.xDomain(scope.$eval(attrs.xdomain));
                    } else if (typeof scope.xdomain() === 'function') {
                      chart.xDomain(scope.xdomain());
                    }
                  }
                  if (attrs.ydomain) {
                    if (Array.isArray(scope.$eval(attrs.ydomain))) {
                      chart.yDomain(scope.$eval(attrs.ydomain));
                    } else if (typeof scope.ydomain() === 'function') {
                      chart.yDomain(scope.ydomain());
                    }
                  }
                  if (attrs.xscale) {
                    chart.xDomain(scope.xdomain());
                    chart.xRange(scope.xrange());
                    chart.xScale(scope.xscale());
                  }
                  if (attrs.yscale) {
                    chart.yDomain(scope.ydomain());
                    chart.yRange(scope.yrange());
                    chart.yScale(scope.yscale());
                  }
                  if (attrs.zscale) {
                    chart.sizeDomain(scope.sizedomain());
                    chart.sizeRange(scope.sizerange());
                    chart.zScale(scope.zscale());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3ScatterPlusLineChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          callback: '&'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.scatterPlusLineChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d.x;
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d.y;
                    } : scope.y()).size(attrs.size === undefined ? function (d) {
                      return d.size === undefined ? 1 : d.size;
                    } : scope.size()).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').tooltipContent(attrs.tooltipContent === undefined ? null : scope.tooltipContent()).tooltipXContent(attrs.tooltipxcontent === undefined ? function (key, x) {
                      return '<strong>' + x + '</strong>';
                    } : scope.tooltipXContent()).tooltipYContent(attrs.tooltipycontent === undefined ? function (key, x, y) {
                      return '<strong>' + y + '</strong>';
                    } : scope.tooltipYContent()).showControls(attrs.showcontrols === undefined ? false : attrs.showcontrols === 'true').showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').showDistX(attrs.showdistx === undefined ? false : attrs.showdistx === 'true').showDistY(attrs.showdisty === undefined ? false : attrs.showdisty === 'true').xPadding(attrs.xpadding === undefined ? 0 : +attrs.xpadding).yPadding(attrs.ypadding === undefined ? 0 : +attrs.ypadding).fisheye(attrs.fisheye === undefined ? 0 : +attrs.fisheye).noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).transitionDuration(attrs.transitionduration === undefined ? 250 : +attrs.transitionduration);
                  if (attrs.shape) {
                    chart.scatter.onlyCircles(false);
                    chart.scatter.shape(attrs.shape === undefined ? function (d) {
                      return d.shape || 'circle';
                    } : scope.shape());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          });
        }
      };
    }]).directive('nvd3LinePlusBarChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          showxaxis: '@',
          showyaxis: '@',
          forceX: '@',
          forceY: '@',
          forceY2: '@',
          rightalignyaxis: '@',
          defaultstate: '@',
          nodata: '@',
          margin: '&',
          tooltipcontent: '&',
          color: '&',
          x: '&',
          y: '&',
          clipvoronoi: '@',
          interpolate: '@',
          callback: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          y1axisorient: '&',
          y1axisticks: '&',
          y1axistickvalues: '&y1axistickvalues',
          y1axisticksubdivide: '&',
          y1axisticksize: '&',
          y1axistickpadding: '&',
          y1axistickformat: '&',
          y1axislabel: '@',
          y1axisscale: '&',
          y1axisdomain: '&',
          y1axisrange: '&',
          y1axisrangeband: '&',
          y1axisrangebands: '&',
          y1axisshowmaxmin: '@',
          y1axishighlightzero: '@',
          y1axisrotatelabels: '@',
          y1axisrotateylabel: '@',
          y1axisstaggerlabels: '@',
          y1axisaxislabeldistance: '@',
          y2axisorient: '&',
          y2axisticks: '&',
          y2axistickvalues: '&y2axistickvalues',
          y2axisticksubdivide: '&',
          y2axisticksize: '&',
          y2axistickpadding: '&',
          y2axistickformat: '&',
          y2axislabel: '@',
          y2axisscale: '&',
          y2axisdomain: '&',
          y2axisrange: '&',
          y2axisrangeband: '&',
          y2axisrangebands: '&',
          y2axisshowmaxmin: '@',
          y2axishighlightzero: '@',
          y2axisrotatelabels: '@',
          y2axisrotateylabel: '@',
          y2axisstaggerlabels: '@',
          y2axisaxislabeldistance: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.linePlusBarChart().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).interpolate(attrs.interpolate === undefined ? 'linear' : attrs.interpolate).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color());
                  if (attrs.forcex) {
                    chart.lines.forceX(scope.$eval(attrs.forcex));
                    chart.bars.forceX(scope.$eval(attrs.forcex));
                  }
                  if (attrs.forcey) {
                    chart.lines.forceY(scope.$eval(attrs.forcey));
                    chart.bars.forceY(scope.$eval(attrs.forcey));
                  }
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3LineWithFocusChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          height2: '@',
          id: '@',
          showlegend: '@',
          tooltips: '@',
          showxaxis: '@',
          showyaxis: '@',
          rightalignyaxis: '@',
          defaultstate: '@',
          nodata: '@',
          margin: '&',
          margin2: '&',
          tooltipcontent: '&',
          color: '&',
          x: '&',
          y: '&',
          forceX: '@',
          forceY: '@',
          clipedge: '@',
          clipvoronoi: '@',
          interpolate: '@',
          isArea: '@',
          size: '&',
          defined: '&',
          interactive: '@',
          callback: '&',
          xaxisorient: '&',
          xaxisticks: '&',
          xaxistickvalues: '&xaxistickvalues',
          xaxisticksubdivide: '&',
          xaxisticksize: '&',
          xaxistickpadding: '&',
          xaxistickformat: '&',
          xaxislabel: '@',
          xaxisscale: '&',
          xaxisdomain: '&',
          xaxisrange: '&',
          xaxisrangeband: '&',
          xaxisrangebands: '&',
          xaxisshowmaxmin: '@',
          xaxishighlightzero: '@',
          xaxisrotatelabels: '@',
          xaxisrotateylabel: '@',
          xaxisstaggerlabels: '@',
          xaxisaxislabeldistance: '@',
          x2axisorient: '&',
          x2axisticks: '&',
          x2axistickvalues: '&xaxistickvalues',
          x2axisticksubdivide: '&',
          x2axisticksize: '&',
          x2axistickpadding: '&',
          x2axistickformat: '&',
          x2axislabel: '@',
          x2axisscale: '&',
          x2axisdomain: '&',
          x2axisrange: '&',
          x2axisrangeband: '&',
          x2axisrangebands: '&',
          x2axisshowmaxmin: '@',
          x2axishighlightzero: '@',
          x2axisrotatelables: '@',
          x2axisrotateylabel: '@',
          x2axisstaggerlabels: '@',
          yaxisorient: '&',
          yaxisticks: '&',
          yaxistickvalues: '&yaxistickvalues',
          yaxisticksubdivide: '&',
          yaxisticksize: '&',
          yaxistickpadding: '&',
          yaxistickformat: '&',
          yaxislabel: '@',
          yaxisscale: '&',
          yaxisdomain: '&',
          yaxisrange: '&',
          yaxisrangeband: '&',
          yaxisrangebands: '&',
          yaxisshowmaxmin: '@',
          yaxishighlightzero: '@',
          yaxisrotatelabels: '@',
          yaxisrotateylabel: '@',
          yaxisstaggerlabels: '@',
          yaxislabeldistance: '@',
          y2axisorient: '&',
          y2axisticks: '&',
          y2axistickvalues: '&',
          y2axisticksubdivide: '&',
          y2axisticksize: '&',
          y2axistickpadding: '&',
          y2axistickformat: '&',
          y2axislabel: '@',
          y2axisscale: '&',
          y2axisdomain: '&',
          y2axisrange: '&',
          y2axisrangeband: '&',
          y2axisrangebands: '&',
          y2axisshowmaxmin: '@',
          y2axishighlightzero: '@',
          y2axisrotatelabels: '@',
          y2axisrotateylabel: '@',
          y2axisstaggerlabels: '@',
          legendmargin: '&',
          legendwidth: '@',
          legendheight: '@',
          legendkey: '@',
          legendcolor: '&',
          legendalign: '@',
          legendrightalign: '@',
          legendupdatestate: '@',
          legendradiobuttonmode: '@',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  //setup height 2
                  //height 2 is 100
                  //margin
                  //nvd3 default is {top: 30, right: 30, bottom: 30, left: 60}
                  //setup margin 2
                  //nvd3 default is {top: 0, right: 30, bottom: 20, left: 60}
                  if (attrs.margin2) {
                    var margin2 = scope.$eval(attrs.margin2);
                    if (typeof margin2 !== 'object') {
                      // we were passed a vanilla int, convert to full margin object
                      margin2 = {
                        left: margin2,
                        top: margin2,
                        bottom: margin2,
                        right: margin2
                      };
                    }
                    scope.margin2 = margin2;
                  } else {
                    scope.margin2 = {
                      top: 0,
                      right: 30,
                      bottom: 20,
                      left: 60
                    };
                  }
                  //'xDomain', 'yDomain', 'xRange', 'yRange', ''clipEdge', 'clipVoronoi'
                  var chart = nv.models.lineWithFocusChart().width(scope.width).height(scope.height).height2(attrs.height2 === undefined ? 100 : +attrs.height2).margin(scope.margin).margin2(scope.margin2).x(attrs.x === undefined ? function (d) {
                      return d[0];
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d[1];
                    } : scope.y()).forceX(attrs.forcex === undefined ? [] : scope.$eval(attrs.forcex)).forceY(attrs.forcey === undefined ? [] : scope.$eval(attrs.forcey)).showLegend(attrs.showlegend === undefined ? false : attrs.showlegend === 'true').tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata).color(attrs.color === undefined ? nv.utils.defaultColor() : scope.color()).isArea(attrs.isarea === undefined ? function (d) {
                      return d.area;
                    } : function () {
                      return attrs.isarea === 'true';
                    }).size(attrs.size === undefined ? function (d) {
                      return d.size === undefined ? 1 : d.size;
                    } : scope.size()).interactive(attrs.interactive === undefined ? false : attrs.interactive === 'true').interpolate(attrs.interpolate === undefined ? 'linear' : attrs.interpolate);
                  if (attrs.defined) {
                    chart.defined(scope.defined());
                  }
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3BulletChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          margin: '&',
          tooltips: '@',
          tooltipcontent: '&',
          orient: '@',
          ranges: '&',
          markers: '&',
          measures: '&',
          tickformat: '&',
          nodata: '@',
          callback: '&',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.bulletChart().width(scope.width).height(scope.height).margin(scope.margin).orient(attrs.orient === undefined ? 'left' : attrs.orient).tickFormat(attrs.tickformat === undefined ? null : scope.tickformat()).tooltips(attrs.tooltips === undefined ? false : attrs.tooltips === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata);
                  if (attrs.tooltipcontent) {
                    chart.tooltipContent(scope.tooltipcontent());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3SparklineChart', [function () {
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          margin: '&',
          x: '&',
          y: '&',
          color: '&',
          xscale: '&',
          yscale: '&',
          showvalue: '@',
          alignvalue: '@',
          rightalignvalue: '@',
          nodata: '@',
          callback: '&',
          xtickformat: '&',
          ytickformat: '&',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            $scope.d3Call = function (data, chart) {
              checkElementID($scope, $attrs, $element, chart, data);
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  initializeMargin(scope, attrs);
                  var chart = nv.models.sparklinePlus().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d.x;
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d.y;
                    } : scope.y()).xTickFormat(attrs.xtickformat === undefined ? d3.format(',r') : scope.xtickformat()).yTickFormat(attrs.ytickformat === undefined ? d3.format(',.2f') : scope.ytickformat()).color(attrs.color === undefined ? nv.utils.getColor(['#000']) : scope.color()).showValue(attrs.showvalue === undefined ? true : attrs.showvalue === 'true').alignValue(attrs.alignvalue === undefined ? true : attrs.alignvalue === 'true').rightAlignValue(attrs.rightalignvalue === undefined ? false : attrs.rightalignvalue === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata);
                  if (attrs.xScale) {
                    chart.xScale(scope.xScale());
                  }
                  if (attrs.yScale) {
                    chart.yScale(scope.yScale());
                  }
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]).directive('nvd3SparklineWithBandlinesChart', [function () {
      /**
       * http://www.perceptualedge.com/articles/visual_business_intelligence/introducing_bandlines.pdf
       * You need five primary facts about a set of time-series values to construct a bandline:
       * 1) the lowest value,
       * 2) the 25th percentile (i.e., the point at and below which the lowest 25% of the values reside),
       * 3) the median (a.k.a., the 50th percentile, the point at and below which 50% of the values reside),
       * 4) the 75th percentile (i.e., the point at and below which 75% of the values reside), and
       * 5) the highest value.
       */
      return {
        restrict: 'EA',
        scope: {
          data: '=',
          width: '@',
          height: '@',
          id: '@',
          margin: '&',
          x: '&',
          y: '&',
          color: '&',
          xscale: '&',
          yscale: '&',
          showvalue: '@',
          alignvalue: '@',
          rightalignvalue: '@',
          nodata: '@',
          callback: '&',
          xtickformat: '&',
          ytickformat: '&',
          objectequality: '@',
          transitionduration: '@'
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            //expect scope to contain bandlineProperties
            $scope.d3Call = function (data, chart) {
              var dataAttributeChartID;
              //randomly generated if id attribute doesn't exist
              var selectedChart;
              var sLineSelection;
              var bandlineData;
              var bandLines;
              if (!$attrs.id) {
                dataAttributeChartID = 'chartid' + Math.floor(Math.random() * 1000000001);
                angular.element($element).attr('data-chartid', dataAttributeChartID);
                selectedChart = d3.select('[data-iem-chartid=' + dataAttributeChartID + '] svg').attr('height', $scope.height).attr('width', $scope.width).datum(data);
                //chart.yScale()($scope.bandlineProperties.median)
                //var sLineSelection = d3.select('svg#' + $attrs.id + ' g.nvd3.nv-wrap.nv-sparkline');
                sLineSelection = d3.select('[data-iem-chartid=' + dataAttributeChartID + '] svg' + ' g.nvd3.nv-wrap.nv-sparkline');
                bandlineData = [
                  $scope.bandlineProperties.min,
                  $scope.bandlineProperties.twentyFithPercentile,
                  $scope.bandlineProperties.median,
                  $scope.bandlineProperties.seventyFithPercentile,
                  $scope.bandlineProperties.max
                ];
                bandLines = sLineSelection.selectAll('.nv-bandline').data([bandlineData]);
                bandLines.enter().append('g').attr('class', 'nv-bandline');
                selectedChart.transition().duration($attrs.transitionduration === undefined ? 250 : +$attrs.transitionduration).call(chart);
              } else {
                if (!d3.select('#' + $attrs.id + ' svg')) {
                  d3.select('#' + $attrs.id).append('svg');
                }
                selectedChart = d3.select('#' + $attrs.id + ' svg').attr('height', $scope.height).attr('width', $scope.width).datum(data);
                //chart.yScale()($scope.bandlineProperties.median)
                sLineSelection = d3.select('svg#' + $attrs.id + ' g.nvd3.nv-wrap.nv-sparkline');
                bandlineData = [
                  $scope.bandlineProperties.min,
                  $scope.bandlineProperties.twentyFithPercentile,
                  $scope.bandlineProperties.median,
                  $scope.bandlineProperties.seventyFithPercentile,
                  $scope.bandlineProperties.max
                ];
                bandLines = sLineSelection.selectAll('.nv-bandline').data([bandlineData]);
                bandLines.enter().append('g').attr('class', 'nv-bandline');
                selectedChart.transition().duration($attrs.transitionduration === undefined ? 250 : +$attrs.transitionduration).call(chart);
              }
            };
          }
        ],
        link: function (scope, element, attrs) {
          scope.$watch('data', function (data) {
            if (data) {
              //if the chart exists on the scope, do not call addGraph again, update data and call the chart.
              if (scope.chart) {
                return scope.d3Call(data, scope.chart);
              }
              nv.addGraph({
                generate: function () {
                  scope.bandlineProperties = {};
                  var sortedValues;
                  initializeMargin(scope, attrs);
                  var chart = nv.models.sparklinePlus().width(scope.width).height(scope.height).margin(scope.margin).x(attrs.x === undefined ? function (d) {
                      return d.x;
                    } : scope.x()).y(attrs.y === undefined ? function (d) {
                      return d.y;
                    } : scope.y()).xTickFormat(attrs.xtickformat === undefined ? d3.format(',r') : scope.xtickformat()).yTickFormat(attrs.ytickformat === undefined ? d3.format(',.2f') : scope.ytickformat()).color(attrs.color === undefined ? nv.utils.getColor(['#000']) : scope.color()).showValue(attrs.showvalue === undefined ? true : attrs.showvalue === 'true').alignValue(attrs.alignvalue === undefined ? true : attrs.alignvalue === 'true').rightAlignValue(attrs.rightalignvalue === undefined ? false : attrs.rightalignvalue === 'true').noData(attrs.nodata === undefined ? 'No Data Available.' : scope.nodata);
                  //calc bandline data
                  scope.bandlineProperties.min = d3.min(data, function (d) {
                    return d[1];
                  });
                  scope.bandlineProperties.max = d3.max(data, function (d) {
                    return d[1];
                  });
                  sortedValues = data.map(function (d) {
                    return d[1];
                  }).sort(function (a, b) {
                    if (a[0] < b[0]) {
                      return -1;
                    } else if (a[0] === b[0]) {
                      return 0;
                    } else {
                      return 1;
                    }
                  });
                  scope.bandlineProperties.twentyFithPercentile = d3.quantile(sortedValues, 0.25);
                  scope.bandlineProperties.median = d3.median(sortedValues);
                  scope.bandlineProperties.seventyFithPercentile = d3.quantile(sortedValues, 0.75);
                  if (attrs.xScale) {
                    chart.xScale(scope.xScale());
                  }
                  if (attrs.yScale) {
                    chart.yScale(scope.yScale());
                  }
                  configureXaxis(chart, scope, attrs);
                  configureYaxis(chart, scope, attrs);
                  processEvents(chart, scope);
                  scope.d3Call(data, chart);
                  nv.utils.windowResize(chart.update);
                  scope.chart = chart;
                  return chart;
                },
                callback: attrs.callback === undefined ? null : scope.callback()
              });
            }
          }, attrs.objectequality === undefined ? false : attrs.objectequality === 'true');
        }
      };
    }]);  //still need to implement
          //sparkbars??
          //nv.models.multiBarTimeSeriesChart
          //nv.models.multiChart
          //nv.models.scatterPlusLineChart
          //nv.models.linePlusBarWithFocusChart
          //dual y-axis chart
          //crossfilter using $services?
}());